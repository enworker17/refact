
class CGxTex {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1|*/ unsigned char m_needsUpdate;
  /*<thisrel this+0x1>*/ /*|0x1|*/ unsigned char m_needsCreation;
  /*<thisrel this+0x2>*/ /*|0x1|*/ unsigned char m_needsFlagUpdate;
  /*<thisrel this+0x4>*/ /*|0x10|*/ class NTempest::CiRect m_updateRect;
  /*<thisrel this+0x14>*/ /*|0x6|*/ unsigned char m_updateFaces[6];
  /*<thisrel this+0x1a>*/ /*|0x2|*/ short m_updatePlaneMin;
  /*<thisrel this+0x1c>*/ /*|0x2|*/ short m_updatePlaneMax;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int m_frameTag;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int m_width;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_height;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned int m_depth;
  /*<thisrel this+0x30>*/ /*|0x4|*/ enum EGxTexTarget m_target;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum EGxTexFormat m_format;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum EGxTexFormat m_dataFormat;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ struct CGxTexFlags m_flags;
  /*<thisrel this+0x40>*/ /*|0x4|*/ void* m_userArg;
  /*<thisrel this+0x44>*/ /*|0x4|*/ void  (m_userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&);
  /*<thisrel this+0x48>*/ /*|0x4|*/ void* m_apiSpecificData;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxTex::Init(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxTexTarget target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int depth, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x1c>*/ /*|0x4|*/ enum EGxTexFormat dataFormat, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x24>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x28>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&));
  void __thiscall CGxTex::CGxTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxTexTarget target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int depth, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x1c>*/ /*|0x4|*/ enum EGxTexFormat dataFormat, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x24>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x28>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&));
  void __thiscall CGxTex::CGxTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x18>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&));
  void __thiscall ~CGxTex();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class CDataStore {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned char* m_data;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_base;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_size;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_read;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned char* __fastcall Alloc(unsigned int, char*, int);
  static void __fastcall Free(unsigned char*, char*, int);
  static unsigned char* __fastcall Realloc(unsigned char*, unsigned int, char*, int);

  // non-virtual functions --------------------------
  void __thiscall PutSpace(unsigned int);
  void __thiscall CDataStore::Initialize();
  void __thiscall CDataStore::Destroy();
  int __thiscall FetchRead(unsigned int, unsigned int);
  int __thiscall CDataStore::FetchWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x14>*/ /*|0x4|*/ int lineNumber);
  void __thiscall AssertFetchWrite(unsigned int, unsigned int, char*, int);
  void __thiscall CDataStore(class CDataStore&);
  void __thiscall CDataStore(unsigned char*, unsigned int, unsigned int);
  void __thiscall CDataStore(unsigned char*, unsigned int);
  void __thiscall CDataStore::CDataStore();
  void* __thiscall operator void *();
  int __thiscall operator!();
  int __thiscall IsReadOnly();
  int __thiscall IsFinal();
  int __thiscall IsValid();
  void __thiscall Unfinalize();
  void __thiscall Invalidate();
  void __thiscall Seek(unsigned int);
  unsigned int __thiscall Tell();
  unsigned int __thiscall Size();
  void __thiscall SetSize(unsigned int);
  void __thiscall Reserve(unsigned int, char*, int);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ float val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x8|*/ __int64 val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ long val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x2|*/ unsigned short val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x2|*/ short val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char val);
  class CDataStore& __thiscall CDataStore::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x1|*/ char val);
  class CDataStore& __thiscall Put(class CDataStore&);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x4|*/ float val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x8|*/ __int64 val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x4|*/ long val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x4|*/ int val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x2|*/ short val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char val);
  class CDataStore& __thiscall CDataStore::Put(/*<regrel ebp+0x8>*/ /*|0x1|*/ char val);
  class CDataStore& __thiscall CDataStore::PutString(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* pval);
  class CDataStore& __thiscall CDataStore::PutString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* pval);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ class unreal* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall PutArray(long*, unsigned int);
  class CDataStore& __thiscall PutArray(short*, unsigned int);
  class CDataStore& __thiscall PutArray(char*, unsigned int);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ float* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::PutArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall PutBool(int);
  class CDataStore& __thiscall PutChar(char);
  class CDataStore& __thiscall PutUchar(unsigned char);
  class CDataStore& __thiscall PutByte(unsigned char);
  class CDataStore& __thiscall PutTchar(char);
  class CDataStore& __thiscall PutShort(short);
  class CDataStore& __thiscall PutUshort(unsigned short);
  class CDataStore& __thiscall PutWord(unsigned short);
  class CDataStore& __thiscall PutInt(int);
  class CDataStore& __thiscall PutUint(unsigned int);
  class CDataStore& __thiscall PutLong(long);
  class CDataStore& __thiscall PutUlong(unsigned long);
  class CDataStore& __thiscall PutDword(unsigned long);
  class CDataStore& __thiscall PutLonglong(__int64);
  class CDataStore& __thiscall PutUlonglong(unsigned __int64);
  class CDataStore& __thiscall PutFloat(float);
  class CDataStore& __thiscall PutCharString(char*);
  class CDataStore& __thiscall PutWcharString(unsigned short*);
  class CDataStore& __thiscall PutTcharString(char*);
  class CDataStore& __thiscall PutUcharArray(unsigned char*, unsigned int);
  class CDataStore& __thiscall PutUshortArray(unsigned short*, unsigned int);
  class CDataStore& __thiscall PutUlongArray(unsigned long*, unsigned int);
  class CDataStore& __thiscall PutUlonglongArray(unsigned __int64*, unsigned int);
  class CDataStore& __thiscall PutFloatArray(float*, unsigned int);
  class CDataStore& __thiscall CDataStore::PutData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  class CDataStore& __thiscall operator<<(unsigned short*);
  class CDataStore& __thiscall operator<<(char*);
  class CDataStore& __thiscall operator<<(float);
  class CDataStore& __thiscall operator<<(unsigned __int64);
  class CDataStore& __thiscall operator<<(__int64);
  class CDataStore& __thiscall operator<<(unsigned long);
  class CDataStore& __thiscall operator<<(long);
  class CDataStore& __thiscall operator<<(unsigned int);
  class CDataStore& __thiscall operator<<(int);
  class CDataStore& __thiscall operator<<(unsigned short);
  class CDataStore& __thiscall operator<<(short);
  class CDataStore& __thiscall operator<<(unsigned char);
  class CDataStore& __thiscall operator<<(char);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ __int64& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ long& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ short& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char& val);
  class CDataStore& __thiscall CDataStore::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ char& val);
  class CDataStore& __thiscall CDataStore::GetString(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int maxChars);
  class CDataStore& __thiscall CDataStore::GetString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int maxChars);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ class unreal* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall GetArray(long*, unsigned int);
  class CDataStore& __thiscall GetArray(short*, unsigned int);
  class CDataStore& __thiscall GetArray(char*, unsigned int);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ float* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::GetArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  class CDataStore& __thiscall CDataStore::GetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  class CDataStore& __thiscall CDataStore::GetDataInSitu(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& pval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  int __thiscall GetBool();
  class CDataStore& __thiscall GetBool(int&);
  char __thiscall GetChar();
  class CDataStore& __thiscall GetChar(char&);
  unsigned char __thiscall GetUchar();
  class CDataStore& __thiscall GetUchar(unsigned char&);
  unsigned char __thiscall GetByte();
  class CDataStore& __thiscall GetByte(unsigned char&);
  class CDataStore& __thiscall GetTchar(char&);
  short __thiscall GetShort();
  class CDataStore& __thiscall GetShort(short&);
  unsigned short __thiscall GetUshort();
  class CDataStore& __thiscall GetUshort(unsigned short&);
  unsigned short __thiscall GetWord();
  class CDataStore& __thiscall GetWord(unsigned short&);
  int __thiscall GetInt();
  class CDataStore& __thiscall GetInt(int&);
  unsigned int __thiscall GetUint();
  class CDataStore& __thiscall GetUint(unsigned int&);
  long __thiscall GetLong();
  class CDataStore& __thiscall GetLong(long&);
  unsigned long __thiscall GetUlong();
  class CDataStore& __thiscall GetUlong(unsigned long&);
  unsigned long __thiscall GetDword();
  class CDataStore& __thiscall GetDword(unsigned long&);
  __int64 __thiscall GetLonglong();
  class CDataStore& __thiscall GetLonglong(__int64&);
  unsigned __int64 __thiscall GetUlonglong();
  class CDataStore& __thiscall GetUlonglong(unsigned __int64&);
  float __thiscall GetFloat();
  class CDataStore& __thiscall GetFloat(float&);
  class CDataStore& __thiscall GetCharString(char*, unsigned int);
  class CDataStore& __thiscall GetWcharString(unsigned short*, unsigned int);
  class CDataStore& __thiscall GetTcharString(char*, unsigned int);
  class CDataStore& __thiscall GetUcharArray(unsigned char*, unsigned int);
  class CDataStore& __thiscall GetUshortArray(unsigned short*, unsigned int);
  class CDataStore& __thiscall GetUlongArray(unsigned long*, unsigned int);
  class CDataStore& __thiscall GetUlonglongArray(unsigned __int64*, unsigned int);
  class CDataStore& __thiscall GetFloatArray(float*, unsigned int);
  class CDataStore& __thiscall operator>>(float&);
  class CDataStore& __thiscall operator>>(unsigned __int64&);
  class CDataStore& __thiscall operator>>(__int64&);
  class CDataStore& __thiscall operator>>(unsigned long&);
  class CDataStore& __thiscall operator>>(long&);
  class CDataStore& __thiscall operator>>(unsigned int&);
  class CDataStore& __thiscall operator>>(int&);
  class CDataStore& __thiscall operator>>(unsigned short&);
  class CDataStore& __thiscall operator>>(short&);
  class CDataStore& __thiscall operator>>(unsigned char&);
  class CDataStore& __thiscall operator>>(char&);
  class CDataStore& __thiscall operator=(class CDataStore&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CDataStore::InternalInitialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& alloc);
  virtual /*<vtableoff 0x4>*/ void __thiscall CDataStore::InternalDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& alloc);
  virtual /*<vtableoff 0x8>*/ int __thiscall CDataStore::InternalFetchRead(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& alloc);
  virtual /*<vtableoff 0xc>*/ int __thiscall CDataStore::InternalFetchWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& alloc, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x20>*/ /*|0x4|*/ int lineNumber);
  virtual /*<vtableoff 0x10>*/ void __thiscall ~CDataStore();
  virtual /*<vtableoff 0x14>*/ int __thiscall CDataStore::IsRead();
  virtual /*<vtableoff 0x18>*/ void __thiscall CDataStore::Reset();
  virtual /*<vtableoff 0x1c>*/ void __thiscall CDataStore::Finalize();
  virtual /*<vtableoff 0x20>*/ void __thiscall CDataStore::GetBufferParams(/*<regrel ebp+0x8>*/ /*|0x4|*/ void** data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* size, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* alloc);
  virtual /*<vtableoff 0x24>*/ void __thiscall CDataStore::DetachBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ void** data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* size, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* alloc);
  virtual /*<vtableoff 0x10>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x18>

class WDataStore : class CDataStore  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ void* m_bufferObj;

  // base classes -----------------------------------
  // baseclass class CDataStore
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall WDataStore::StaticInitialize();
  static void __fastcall WDataStore::StaticDestroy();
  static void* __fastcall WDataStore::AllocBuffer(/*<register ecx>*/ /*|0x4|*/ unsigned int size);
  static void __fastcall WDataStore::FreeBuffer(/*<register ecx>*/ /*|0x4|*/ void* buffer, /*<register edx>*/ /*|0x4|*/ unsigned int size);

  // non-virtual functions --------------------------
  void __thiscall WDataStore(class WDataStore&);
  void __thiscall WDataStore();
  class WDataStore& __thiscall operator=(class WDataStore&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~WDataStore();
  virtual /*<vtableoff 0x0>*/ int __thiscall WDataStore::InternalFetchWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& alloc, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x20>*/ /*|0x4|*/ int lineNumber);
  virtual /*<vtableoff 0x0>*/ void __thiscall WDataStore::InternalInitialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& alloc);
  virtual /*<vtableoff 0x0>*/ void __thiscall WDataStore::InternalDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& alloc);
  virtual /*<vtableoff 0x10>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x1c>

class CGWorldFrame : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0x9ddc94>*/ /*|0x4|*/ class CGWorldFrame* s_currentWorldFrame;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0xc|*/ class TSList<CModelRecord,TSGetLink<CModelRecord> > m_models;
  /*<thisrel this+0x2b8>*/ /*|0xc|*/ class TSList<CModelRecord,TSGetLink<CModelRecord> > m_filteredModels;
  /*<thisrel this+0x2c4>*/ /*|0xc|*/ class TSList<CModelRecord,TSGetLink<CModelRecord> > m_freeModels;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ unsigned int m_spriteButtons;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ unsigned int m_terrainButtons;
  /*<thisrel this+0x2d8>*/ /*|0x8|*/ unsigned __int64 m_lastUnitFade;
  /*<thisrel this+0x2e0>*/ /*|0x8|*/ unsigned __int64 m_lastObjectTrack;
  /*<thisrel this+0x2e8>*/ /*|0x4|*/ float m_lastUpdateElapsedSec;
  /*<thisrel this+0x2ec>*/ /*|0x4|*/ float m_skyAnimDuration;
  /*<bitfield this+0x2f0>*/ /*|0x4|*/ unsigned int m_renderPlayer:0:1;
  /*<bitfield this+0x2f0>*/ /*|0x4|*/ unsigned int m_freeLookMode:1:1;
  /*<thisrel this+0x2f4>*/ /*|0x40|*/ class NTempest::C44Matrix m_worldMatrix;
  /*<thisrel this+0x334>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x338>*/ /*|0x4|*/ float m_elapsedSec;
  /*<thisrel this+0x33c>*/ /*|0x6180|*/ char m_lastKey[780][32];
  /*<thisrel this+0x64bc>*/ /*|0x4|*/ class CGCamera* m_camera;
  /*<thisrel this+0x64c0>*/ /*|0x4|*/ unsigned long m_updateTimeStamp;
  /*<thisrel this+0x64c4>*/ /*|0x4|*/ enum CGWorldFrame::PLAYERFADEMODE m_playerFadeMode;
  /*<thisrel this+0x64c8>*/ /*|0x4|*/ int m_playerAlpha;
  /*<thisrel this+0x64cc>*/ /*|0x4|*/ int m_cameraAlpha;
  /*<thisrel this+0x64d0>*/ /*|0x4|*/ int m_cameraAlphaChanged;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CSimpleFrame* __fastcall CGWorldFrame::Create(/*<register ecx>*/ /*|0x4|*/ class CSimpleFrame* parent);
  static class CGWorldFrame* __fastcall GetActive();
  static void __fastcall CGWorldFrame::RenderWorld(/*<register ecx>*/ /*|0x4|*/ void* param);
  static class CGCamera* __fastcall CGWorldFrame::GetActiveCamera();
  static void __fastcall CGWorldFrame::GetCameraPosition(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* position);
  static void __fastcall CGWorldFrame::GetCameraFacing(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* position);
  static void __fastcall CGWorldFrame::RegisterObjectFadeoutModel(/*<register ecx>*/ /*|0x4|*/ class CGObject_C* object, /*<register edx>*/ /*|0x4|*/ struct HTEXCOMPONENT__* texture, /*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char startAlpha);

  // non-virtual functions --------------------------
  enum CGWorldFrame::HIT_TYPE __thiscall CGWorldFrame::HitTest(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& a, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& b, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int hitFilter, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CGWorldFrame::HitTestResult* hitTestResult);
  enum CGWorldFrame::HIT_TYPE __thiscall CGWorldFrame::HitTestPoint(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CGWorldFrame::HitTestResult* hitTestResult);
  unsigned int __thiscall CGWorldFrame::GetHitTestFilterFlags();
  int __thiscall CGWorldFrame::GetLineSegment(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* a, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* b);
  void __thiscall CGWorldFrame(class CGWorldFrame&);
  void __thiscall CGWorldFrame::CGWorldFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGWorldFrame::OnWorldUpdate();
  void __thiscall CGWorldFrame::OnWorldRender();
  void __thiscall CGWorldFrame::UpdateDayNightInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  void __thiscall CGWorldFrame::UnitUpdate();
  float __thiscall CGWorldFrame::GetSkyProgress();
  unsigned __int64 __thiscall CGWorldFrame::FindClosestModel(/*<regrel ebx+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& a, /*<regrel ebx+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& b, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int hitFilter, /*<regrel ebx+0x14>*/ /*|0x4|*/ float* hitDist);
  void __thiscall CGWorldFrame::HideObstructingModels(/*<regrel ebp+0x8>*/ /*|0x4|*/ float maxDist);
  int __thiscall CGWorldFrame::IsLegalSelection(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelRecord* record, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hitFilter);
  int __thiscall CGWorldFrame::IsUnitLegalSelection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hitFilter);
  void __thiscall CGWorldFrame::OnLayerTrackObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGWorldFrame::HitTestResult& hitTestResult, /*<regrel ebp+0xc>*/ /*|0x4|*/ float x, /*<regrel ebp+0x10>*/ /*|0x4|*/ float y);
  void __thiscall CGWorldFrame::OnLayerTrackTerrain(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGWorldFrame::HitTestResult& hitTestResult);
  void __thiscall CGWorldFrame::CursorTrackUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGWorldFrame::CursorTrackObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* gameObject);
  unsigned int __thiscall CGWorldFrame::SphereTestModels(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& aVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& bVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int hitFilter);
  unsigned int __thiscall CGWorldFrame::VolumeTestModels(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& aVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& bVector);
  unsigned int __thiscall CGWorldFrame::GeometryTestModels(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& aVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& bVector);
  void __thiscall CGWorldFrame::ReduceToClosestModel();
  struct CModelRecord* __thiscall CGWorldFrame::HigherPriorityModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelRecord* a, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CModelRecord* b);
  int __thiscall CGWorldFrame::SendUnitFadeEvent(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  int __thiscall CGWorldFrame::SendObjectTrackEvent(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ float x, /*<regrel ebp+0x14>*/ /*|0x4|*/ float y);
  void __thiscall CGWorldFrame::MoveToFreeList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<CModelRecord,TSGetLink<CModelRecord> >* objList);
  void __thiscall CGWorldFrame::MoveToFreeList(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelRecord* record);
  void __thiscall CGWorldFrame::SetSpriteClickButtons(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int buttons);
  void __thiscall CGWorldFrame::SetTerrainClickButtons(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int buttons);
  unsigned __int64 __thiscall CGWorldFrame::GetObjectUnderMouse();
  int __thiscall CGWorldFrame::PerformDefaultAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MOUSEBUTTON button, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timestamp);
  float __thiscall GetElapsedSec();
  void __thiscall CGWorldFrame::UpdateObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* object, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long status);
  void __thiscall CGWorldFrame::AddModelToScene(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* object, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HMODEL__* model);
  int __thiscall CGWorldFrame::TogglePlayerRender();
  int __thiscall CGWorldFrame::SetPlayerRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ int state);
  class NTempest::C44Matrix __thiscall GetCurrentWorldMatrix();
  class CGCamera* __thiscall Camera();
  void __thiscall CGWorldFrame::SetCameraTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* target);
  void __thiscall CGWorldFrame::OnMouseModeNormal();
  void __thiscall CGWorldFrame::OnMouseModeRelative();
  class NTempest::C2Vector __thiscall CGWorldFrame::GetScreenCoordinates(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* __$ReturnUdt, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& worldPosition, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C44Matrix& worldMatrix, /*<regrel ebp+0x14>*/ /*|0x4|*/ int doNotNormalize);
  class NTempest::C2Vector __thiscall CGWorldFrame::GetScreenCoordinates(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* __$ReturnUdt);
  void __thiscall CGWorldFrame::SetNamePlateUpdate();
  unsigned long __thiscall GetUpdateTimeStamp();
  void __thiscall CGWorldFrame::SetPlayerFadeCameraValue(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char value);
  void __thiscall CGWorldFrame::RefreshPlayerAlpha();
  void __thiscall CGWorldFrame::UpdatePlayerAlpha(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSeconds);
  void __thiscall CGWorldFrame::HandleUnitFade(/*<regrel ebp+0x8>*/ /*|0x4|*/ int nowTracking, /*<regrel ebp+0xc>*/ /*|0x4|*/ int immediateFade);
  class CGWorldFrame& __thiscall operator=(class CGWorldFrame&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGWorldFrame::~CGWorldFrame();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGWorldFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerTrackUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGWorldFrame::OnFrameRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGWorldFrame::OnLayerCursorExit();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerKeyDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerKeyUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerMouseDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerMouseUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerMouseWheel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGWorldFrame::OnLayerMouseMoveRelative(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x64d8>

class MapRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_Directory;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_PVP;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_IsInMap;
  /*<thisrel this+0x10>*/ /*|0x20|*/ char* m_MapName_lang[8];
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_MapName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall MapRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall MapRec::MapRec();
  void __thiscall MapRec::~MapRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall MapRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x34>

class unreal {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int bits;
  /*<thisrel this+0x0>*/ /*|0x4|*/ float fp;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class unreal __fastcall fromBits(unsigned int);
  static unsigned int __fastcall asBits(class unreal&);
  static class unreal __fastcall fromFloat(float);
  static float __fastcall asFloat(class unreal&);
  static class unreal __fastcall unreal::fromInt(/*<register ecx>*/ /*|0x4|*/ class unreal* __$ReturnUdt);
  static int __fastcall unreal::asInt(/*<register ecx>*/ /*|0x4|*/ class unreal& in);
  static class unreal __fastcall unreal::fromString(/*<register ecx>*/ /*|0x4|*/ class unreal* __$ReturnUdt);
  static void __fastcall unreal::asString(/*<register ecx>*/ /*|0x4|*/ class unreal& in, /*<register edx>*/ /*|0x4|*/ char* out, /*<regrel ebp+0x8>*/ /*|0x4|*/ int iWidth, /*<regrel ebp+0xc>*/ /*|0x4|*/ int fPrecision);
  static class unreal __fastcall fromRatio(int, int);

  // non-virtual functions --------------------------
  void __thiscall unreal(class unreal&);
  void __thiscall unreal();
  void __thiscall ~unreal();
  void __thiscall multiplyBy2();
  void __thiscall multiplyBy4();
  void __thiscall multiplyBy8();
  void __thiscall multiplyBy16();
  void __thiscall multiplyBy32();
  void __thiscall multiplyBy64();
  void __thiscall multiplyBy128();
  void __thiscall multiplyBy256();
  void __thiscall multiplyBy512();
  void __thiscall multiplyBy1024();
  void __thiscall divideBy2();
  void __thiscall divideBy4();
  void __thiscall divideBy8();
  void __thiscall divideBy16();
  void __thiscall divideBy32();
  void __thiscall divideBy64();
  void __thiscall divideBy128();
  void __thiscall divideBy256();
  void __thiscall divideBy512();
  void __thiscall divideBy1024();
  class unreal& __thiscall operator+=(class unreal&);
  class unreal& __thiscall operator-=(class unreal&);
  class unreal& __thiscall operator*=(class unreal&);
  class unreal& __thiscall operator/=(class unreal&);
  unsigned char __thiscall operator<(class unreal&);
  unsigned char __thiscall operator>(class unreal&);
  unsigned char __thiscall operator<=(class unreal&);
  unsigned char __thiscall operator>=(class unreal&);
  unsigned char __thiscall operator==(class unreal&);
  unsigned char __thiscall operator!=(class unreal&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class ClientConnection : class NetClient  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1434>*/ /*|0x4|*/ int m_initialized;
  /*<thisrel this+0x1438>*/ /*|0x4|*/ int m_connected;
  /*<thisrel this+0x143c>*/ /*|0x4|*/ int m_playing;
  /*<thisrel this+0x1440>*/ /*|0x4|*/ int m_statusComplete;
  /*<thisrel this+0x1444>*/ /*|0x4|*/ int m_statusResult;
  /*<thisrel this+0x1448>*/ /*|0x4|*/ enum WOWCS_OPS m_statusCop;
  /*<thisrel this+0x144c>*/ /*|0x4|*/ int m_errorCode;
  /*<thisrel this+0x1450>*/ /*|0x4|*/ int m_inGame;
  /*<thisrel this+0x1454>*/ /*|0x1|*/ unsigned char m_exitAfterLogout;
  /*<thisrel this+0x1455>*/ /*|0x1|*/ unsigned char m_loggingOut;
  /*<thisrel this+0x1458>*/ /*|0x6c|*/ struct LoginData m_loginData;
  /*<thisrel this+0x14c4>*/ /*|0x10|*/ class TSFixedArray<CHARACTER_INFO> m_characterList;
  /*<thisrel this+0x14d4>*/ /*|0x10|*/ class TSFixedArray<REALM_INFO> m_realmList;
  /*<thisrel this+0x14e4>*/ /*|0x4|*/ int m_isBot;
  /*<thisrel this+0x14e8>*/ /*|0x4|*/ unsigned int m_waitCount;
  /*<thisrel this+0x14ec>*/ /*|0x4|*/ void  (m_cleanup*)();

  // base classes -----------------------------------
  // baseclass class NetClient
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ClientConnection(class ClientConnection&);
  void __thiscall ClientConnection::ClientConnection();
  int __thiscall ClientConnection::PollStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WOWCS_OPS& op, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& errorCode, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& result);
  void __thiscall ClientConnection::Cancel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int errorCode);
  void __thiscall ClientConnection::Cleanup();
  void __thiscall ClientConnection::Connect();
  void __thiscall ClientConnection::AccountLogin(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* password, /*<regrel ebp+0x10>*/ /*|0x4|*/ int region, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum WOW_LOCALE locale);
  void __thiscall ClientConnection::AccountLogout();
  void __thiscall ClientConnection::GetCharacterList();
  int __thiscall ClientConnection::GetCharacterListCount();
  int __thiscall ClientConnection::EnumerateCharacters(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (fcn*)(struct CHARACTER_INFO&, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param);
  void __thiscall ClientConnection::CharacterCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHARACTER_CREATE_INFO& info);
  void __thiscall ClientConnection::CharacterLogin(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 id);
  void __thiscall ClientConnection::CharacterSetInGame(/*<regrel ebp+0x8>*/ /*|0x4|*/ int state);
  void __thiscall ClientConnection::CharacterLogout(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char exitAfterLogout, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char instant);
  int __thiscall ClientConnection::CharacterLoggingOut();
  void __thiscall ClientConnection::CharacterDelete(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall ClientConnection::CharacterRemoveFromGame();
  void __thiscall ClientConnection::CharacterAbortLogout();
  void __thiscall ClientConnection::CharacterForceLogout();
  void __thiscall ClientConnection::SetPlaying(/*<regrel ebp+0x8>*/ /*|0x4|*/ int value);
  void __thiscall SetIsBot(int);
  int __thiscall IsBot();
  int __thiscall ClientConnection::Disconnect();
  int __thiscall IsInGame();
  int __thiscall IsConnected();
  void __thiscall ClientConnection::RealmEnumCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* data);
  void __thiscall ClientConnection::GetRealmList();
  int __thiscall ClientConnection::GetRealmListCount();
  int __thiscall ClientConnection::EnumerateRealms(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (fcn*)(struct REALM_INFO&, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param);
  struct REALM_INFO* __thiscall ClientConnection::GetRealmInfoByIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ int index);
  char* __thiscall GetCharacterName();
  int __thiscall ClientConnection::HandleAuthChallenge(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleAuthResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleCharEnum(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleCharacterCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleCharacterDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleCharacterLoginFailed(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleLogoutComplete(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleLogoutAbortAck(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall ClientConnection::HandleLogoutResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long time, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  unsigned int __thiscall GetWaitCount();
  void __thiscall ClientConnection::AccountLogin_Finish(/*<regrel ebp+0x8>*/ /*|0x4|*/ int reason);
  void __thiscall Initiate(enum WOWCS_OPS, int, void  (*)());
  void __thiscall Complete(int, int);
  void __thiscall Abort();
  void __thiscall AccountLogin_Cleanup();
  void __thiscall GetCharacterList_Cleanup();
  void __thiscall CharacterLogin_Cleanup();
  void __thiscall CharacterCreate_Cleanup();
  void __thiscall ClientConnection::ConnectToSelectedServer();
  class ClientConnection& __thiscall operator=(class ClientConnection&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ClientConnection::~ClientConnection();
  virtual /*<vtableoff 0x40>*/ int __thiscall ClientConnection::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct LoginData* loginData);
  virtual /*<vtableoff 0x0>*/ void __thiscall ClientConnection::Destroy();
  virtual /*<vtableoff 0x0>*/ int __thiscall ClientConnection::HandleConnect();
  virtual /*<vtableoff 0x0>*/ int __thiscall ClientConnection::HandleDisconnect();
  virtual /*<vtableoff 0x0>*/ int __thiscall ClientConnection::HandleCantConnect();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14f0>

class CGTooltip : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xa112cc>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;
  static /*<rva 0xa11388>*/ /*|0x4|*/ unsigned int m_spellID;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ class CLayoutFrame* m_owner;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ enum TOOLTIP_ANCHORPOINT m_anchorPoint;
  /*<thisrel this+0x2b4>*/ /*|0x4|*/ unsigned int m_lines;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ unsigned int m_linesMax;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ int m_reposition;
  /*<thisrel this+0x2c0>*/ /*|0x10|*/ class TSFixedArray<CSimpleFontString *> m_leftStrings;
  /*<thisrel this+0x2d0>*/ /*|0x10|*/ class TSFixedArray<CSimpleFontString *> m_rightStrings;
  /*<thisrel this+0x2e0>*/ /*|0x10|*/ class TSFixedArray<int> m_wrapLine;
  /*<thisrel this+0x2f0>*/ /*|0x4|*/ class CSimpleStatusBar* m_statusBar;
  /*<thisrel this+0x2f8>*/ /*|0x8|*/ unsigned __int64 m_unit;
  /*<thisrel this+0x300>*/ /*|0x8|*/ unsigned __int64 m_objectGUID;
  /*<thisrel this+0x308>*/ /*|0x8|*/ unsigned __int64 m_debugUnit;
  /*<thisrel this+0x310>*/ /*|0x8|*/ unsigned __int64 m_itemGUID;
  /*<thisrel this+0x318>*/ /*|0x8|*/ unsigned __int64 m_corpseGUID;
  /*<thisrel this+0x320>*/ /*|0x4|*/ unsigned int m_itemID;
  /*<thisrel this+0x324>*/ /*|0x4|*/ int m_fading;
  /*<thisrel this+0x328>*/ /*|0x4|*/ float m_fadeTime;
  /*<thisrel this+0x32c>*/ /*|0x4|*/ float m_padding;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CSimpleFrame* __fastcall CGTooltip::Create(/*<register ecx>*/ /*|0x4|*/ class CSimpleFrame* parent);
  static void __fastcall CGTooltip::GetSpellEffectString(/*<register ecx>*/ /*|0x4|*/ char* buf, /*<register edx>*/ /*|0x4|*/ unsigned int bufSize, /*<regrel ebx+0x8>*/ /*|0x4|*/ class SpellRec* spell, /*<regrel ebx+0xc>*/ /*|0x4|*/ unsigned int effectIndex, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int level, /*<regrel ebx+0x14>*/ /*|0x4|*/ int isPet, /*<regrel ebx+0x18>*/ /*|0x4|*/ enum TOOLTIP_DETAIL detail);
  static void __fastcall CGTooltip::GetAuraEffectString(/*<register ecx>*/ /*|0x4|*/ char* buf, /*<register edx>*/ /*|0x4|*/ unsigned int bufSize, /*<regrel ebx+0x8>*/ /*|0x4|*/ class SpellRec* spell, /*<regrel ebx+0xc>*/ /*|0x4|*/ unsigned int effectIndex, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int level, /*<regrel ebx+0x14>*/ /*|0x4|*/ int isPet, /*<regrel ebx+0x18>*/ /*|0x4|*/ enum TOOLTIP_DETAIL detail);
  static void __fastcall CGTooltip::GetItemEnchantString(/*<register ecx>*/ /*|0x4|*/ char* buf, /*<register edx>*/ /*|0x4|*/ unsigned int bufSize, /*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellItemEnchantmentRec* enchant, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int effectIndex, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum TOOLTIP_DETAIL detail);
  static void __fastcall CGTooltip::GetSpellTargetString(/*<register ecx>*/ /*|0x4|*/ char* buf, /*<register edx>*/ /*|0x4|*/ unsigned int bufSize, /*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellRec* spell, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int effectIndex);
  static void __fastcall CGTooltip::GetSummonedByString(/*<register ecx>*/ /*|0x4|*/ class CGUnit_C* unitPtr, /*<register edx>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int size);
  static char* __fastcall CGTooltip::GetItemQualityColorString(/*<register ecx>*/ /*|0x4|*/ unsigned int quality);
  static void __fastcall CGTooltip::RegisterScriptMethods();
  static void __fastcall CGTooltip::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  class CLayoutFrame* __thiscall GetOwner();
  void __thiscall CGTooltip::SetOwner(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CLayoutFrame* owner, /*<regrel ebx+0xc>*/ /*|0x4|*/ float x, /*<regrel ebx+0x10>*/ /*|0x4|*/ float y);
  void __thiscall CGTooltip::SetOwner(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CLayoutFrame* owner, /*<regrel ebx+0xc>*/ /*|0x4|*/ enum TOOLTIP_ANCHORPOINT anchorpoint, /*<regrel ebx+0x10>*/ /*|0x4|*/ float yoffset);
  void __thiscall CGTooltip::SetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  void __thiscall CGTooltip::ClearLines();
  void __thiscall CGTooltip::AddLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* leftText, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* rightText, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector& leftColor, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::CImVector& rightColor, /*<regrel ebp+0x18>*/ /*|0x4|*/ int wrapped);
  void __thiscall CGTooltip::AddLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0x10>*/ /*|0x4|*/ int wrapped);
  void __thiscall CGTooltip::AddLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* leftText, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* rightText, /*<regrel ebp+0x10>*/ /*|0x4|*/ int wrapped);
  unsigned int __thiscall NumLines();
  void __thiscall CGTooltip::AppendText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  void __thiscall CGTooltip::SetTooltipPadding(/*<regrel ebp+0x8>*/ /*|0x4|*/ float right);
  void __thiscall CGTooltip::CalculateSize();
  int __thiscall CGTooltip::SetUnit(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& unit);
  void __thiscall CGTooltip::SetObject(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& object);
  int __thiscall CGTooltip::SetItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int itemID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& refGUID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned __int64& itemGUID, /*<regrel ebp+0x14>*/ /*|0x4|*/ int nameOnly, /*<regrel ebp+0x18>*/ /*|0x4|*/ int showComparison, /*<regrel ebp+0x1c>*/ /*|0x4|*/ struct TooltipExtendedItemInfo* info);
  int __thiscall CGTooltip::SetSpell(/*<regrel ebx+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebx+0xc>*/ /*|0x4|*/ int nameOnly, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int cooldownTime, /*<regrel ebx+0x14>*/ /*|0x4|*/ int isPet);
  void __thiscall CGTooltip::SetBuff(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char flags);
  void __thiscall CGTooltip::SetCorpse(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& corpseGUID);
  unsigned __int64& __thiscall GetObjectGUID();
  int __thiscall GetItem();
  unsigned __int64& __thiscall GetItemGUID();
  void __thiscall SetDebugUnit(unsigned __int64&);
  unsigned __int64& __thiscall GetDebugUnit();
  void __thiscall CGTooltip::FadeOut();
  void __thiscall CGTooltip(class CGTooltip&);
  void __thiscall CGTooltip::CGTooltip(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  unsigned __int64 __thiscall GetUnit();
  class CGTooltip& __thiscall operator=(class CGTooltip&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGTooltip::PostLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGTooltip::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGTooltip::~CGTooltip();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGTooltip::HideThis();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGTooltip::ShowThis();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGTooltip::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x330>

class SArchive {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ enum SARCHIVE_TYPE m_type;
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* m_archive;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x8>

class CGPlayer_C : class CGUnit_C,  class CGPlayer  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x9e4>*/ /*|0x4|*/ unsigned int m_framesSinceUpdate;
  /*<thisrel this+0x9e8>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x9ec>*/ /*|0x4|*/ int m_lastWeaponModeSent;
  /*<thisrel this+0x9f0>*/ /*|0x2c|*/ class TSHashTable<TRADESKILLLINE,HASHKEY_NONE> m_tradeSkillLines;
  /*<thisrel this+0xa1c>*/ /*|0x50|*/ class TSGrowableArray<int> m_craftSpells[4];
  /*<thisrel this+0xa6c>*/ /*|0x10|*/ int m_craftActivators[4];
  /*<thisrel this+0xa7c>*/ /*|0xcf0|*/ struct HMODEL__* m_components[23][36];
  /*<thisrel this+0x176c>*/ /*|0xb8|*/ struct TexComponentInfo m_texComponentInfo[23];
  /*<thisrel this+0x1828>*/ /*|0x8|*/ unsigned __int64 m_lootingUnit;
  /*<thisrel this+0x1830>*/ /*|0x8|*/ unsigned __int64 m_lootingUnitSent;
  /*<thisrel this+0x1838>*/ /*|0x18|*/ class CGBag_C m_inventory;
  /*<thisrel this+0x1850>*/ /*|0x8|*/ unsigned __int64 m_lastKillerGUID;
  /*<thisrel this+0x1858>*/ /*|0x4|*/ int m_pendingItemStats;

  // base classes -----------------------------------
  // baseclass class CGUnit_C
  // <base data offset+0x0>

  // baseclass class CGPlayer
  // <base data offset+0x9e0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGPlayer_C::SellItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 merchant, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 item, /*<register ecx>*/ /*|0x4|*/ unsigned int amount);
  static unsigned __int64 __fastcall GetActive();
  static void __fastcall CGPlayer_C::SetActive(/*<register ecx>*/ /*|0x4|*/ class CGPlayer_C* playerPtr);
  static void __fastcall CGPlayer_C::TogglePlayerBounds();
  static unsigned int __fastcall CGPlayer_C::GetProficiency(/*<register cl>*/ /*|0x1|*/ unsigned char type);
  static unsigned int __fastcall CGPlayer_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);
  static void __fastcall CGPlayer_C::Initialize();
  static void __fastcall CGPlayer_C::Shutdown();
  static void __fastcall CGPlayer_C::XBuyItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 merchant, /*<register ecx>*/ /*|0x4|*/ unsigned int itemID, /*<register dl>*/ /*|0x1|*/ unsigned char quantity, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char autoEquip);
  static void __fastcall CGPlayer_C::XBuyItemInSlot(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 merchant, /*<register ecx>*/ /*|0x4|*/ unsigned int itemID, /*<register dl>*/ /*|0x1|*/ unsigned char quantity, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 container, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char slot);
  static void __fastcall XBuyItemInBag(unsigned __int64, unsigned int, unsigned char, unsigned __int64);
  static void __fastcall CGPlayer_C::UpdateQuestStatusAll();
  static void __fastcall CGPlayer_C::UpdateTaxiStatusAll();
  static void __fastcall CGPlayer_C::UpdateBindStatusAll();
  static unsigned int __fastcall CGPlayer_C::GetNewContinentID();
  static struct ITEMEXPIRATION* __fastcall CGPlayer_C::GetPendingItemExpirationNode(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& itemGUID);
  static void __fastcall CGPlayer_C::UpdatePendingItemExpiration(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& itemGUID);
  static void __fastcall CGPlayer_C::OnItemDelete(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 listener);
  static void __fastcall CGPlayer_C::SaveBindPoint(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static class NTempest::C3Vector& __fastcall CGPlayer_C::GetBindPoint();
  static unsigned int __fastcall CGPlayer_C::GetLootItem(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static unsigned int __fastcall CGPlayer_C::GetLootItemDisplayID(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static unsigned int __fastcall CGPlayer_C::GetLootItemQuantity(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static void __fastcall CGPlayer_C::StartGiftWrap(/*<register ecx>*/ /*|0x4|*/ class CGItem_C* wrapper);
  static void __fastcall CGPlayer_C::CancelGiftWrap();
  static unsigned char __fastcall CGPlayer_C::IsGiftWrapping();
  static void __fastcall CGPlayer_C::InstallGMHandlers();
  static void __fastcall CGPlayer_C::UninstallGMHandlers();
  static void __fastcall CGPlayer_C::StartGhosting(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGPlayer_C::StartGhosting(/*<register ecx>*/ /*|0x4|*/ char* name);
  static void __fastcall CGPlayer_C::StopGhosting();
  static void __fastcall CGPlayer_C::GMIdle();
  static void __fastcall CGPlayer_C::SetRealActivePlayer(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static unsigned __int64 __fastcall CGPlayer_C::GetRealActivePlayer();
  static void __fastcall CGPlayer_C::AddDeferredDamage(/*<register ecx>*/ /*|0x4|*/ int normal, /*<register edx>*/ /*|0x4|*/ unsigned int flags, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int damage, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 victim);
  static void __fastcall CGPlayer_C::AddDeferredSpellMiss(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim, /*<register ecx>*/ /*|0x4|*/ enum MISS_REASON reason, /*<register edx>*/ /*|0x4|*/ int spellID);
  static void __fastcall CGPlayer_C::ProcessDeferredDamage();
  static void __fastcall CGPlayer_C::ProcessDeferredSpellMiss();

  // non-virtual functions --------------------------
  void __thiscall CGPlayer_C(class CGPlayer_C&);
  void __thiscall CGPlayer_C::CGPlayer_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGPlayer_C::~CGPlayer_C();
  void __thiscall CGPlayer_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGPlayer_C::SetActiveMirrorHandlers();
  void __thiscall CGPlayer_C::PostInit(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  int __thiscall CGPlayer_C::SwapInventorySlots(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slotA, /*<regrel ebp+0xc>*/ /*|0x4|*/ int slotB);
  int __thiscall CGPlayer_C::ReportBagItemSubtypeMismatch(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char bagSlot);
  int __thiscall CGPlayer_C::OnTerrainClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CTerrainClickEvent& __formal);
  void __thiscall CGPlayer_C::OnUnitDeath(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall CGPlayer_C::OnObjectDestruct(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall CGPlayer_C::SaveDeathMessage(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall CGPlayer_C::CheckKillerFeedback();
  int __thiscall CGPlayer_C::CanEngageTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unitPtr);
  void __thiscall CGPlayer_C::PlayerFlagsChanged(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char old);
  void __thiscall CGPlayer_C::SendTextEmote(/*<regrel ebp+0x8>*/ /*|0x4|*/ class EmotesTextRec* rec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& target);
  void __thiscall CGPlayer_C::HandleRepopRequest();
  void __thiscall CGPlayer_C::MoveItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 itemContainer, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0x1c>*/ /*|0x8|*/ unsigned __int64 newContainer, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int newSlot);
  void __thiscall CGPlayer_C::SwapItems(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 cursorItem, /*<regrel ebx+0x10>*/ /*|0x8|*/ unsigned __int64 cursorContainer, /*<regrel ebx+0x18>*/ /*|0x4|*/ int cursorSlot, /*<regrel ebx+0x1c>*/ /*|0x8|*/ unsigned __int64 containerB, /*<regrel ebx+0x24>*/ /*|0x4|*/ int slotB, /*<regrel ebx+0x28>*/ /*|0x4|*/ int force);
  void __thiscall CGPlayer_C::SplitItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 cursorItem, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 cursorContainer, /*<regrel ebp+0x18>*/ /*|0x4|*/ int cursorSlot, /*<regrel ebp+0x1c>*/ /*|0x8|*/ unsigned __int64 containerB, /*<regrel ebp+0x24>*/ /*|0x4|*/ int slotB, /*<regrel ebp+0x28>*/ /*|0x4|*/ int quantity);
  void __thiscall CGPlayer_C::DropItemInCursor(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 cursorItem, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 cursorItemPack, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int cursorSlot);
  void __thiscall CGPlayer_C::AutoStoreItemInBag(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 cursorItem, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 cursorContainer, /*<regrel ebp+0x18>*/ /*|0x4|*/ int cursorSlot, /*<regrel ebp+0x1c>*/ /*|0x8|*/ unsigned __int64 containerB, /*<regrel ebp+0x24>*/ /*|0x4|*/ int ignoreOwnershipRules);
  void __thiscall CGPlayer_C::AutoEquipCursorItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  void __thiscall CGPlayer_C::AutoEquipItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 container, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0x14>*/ /*|0x4|*/ int force);
  void __thiscall CGPlayer_C::AutoStoreLootItem(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char slot);
  void __thiscall CGPlayer_C::PutLootInSlot(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 container, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char containerSlot, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char lootSlot);
  void __thiscall PutLootInBag(unsigned __int64, unsigned char);
  unsigned char __thiscall CGPlayer_C::FindSlotIndex(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 obj);
  void __thiscall CGPlayer_C::ClearPendingEquip(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int equip);
  int __thiscall CGPlayer_C::HasEquipped(/*<regrel ebp+0x8>*/ /*|0x4|*/ int classID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int subclassID);
  int __thiscall CGPlayer_C::LootUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  int __thiscall CGPlayer_C::OnLootResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnLootReleaseResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnLootRemoved(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnLootMoneyNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnLootClearMoney(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnLootItemNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::CanLoot(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unitPtr);
  unsigned __int64& __thiscall GetUnitLootingSent();
  unsigned int __thiscall CGPlayer_C::GetPlayerAnimState();
  void __thiscall CGPlayer_C::SheatheWeapon(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char sheathe);
  void __thiscall CGPlayer_C::TrySheathingWeapon();
  void __thiscall CGPlayer_C::AttachObjComponent(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char defer, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char sheathe, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int sheatheAttachmentSlot);
  void __thiscall CGPlayer_C::AddComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int displayID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ int slot, /*<regrel ebp+0x14>*/ /*|0x4|*/ int commit);
  void __thiscall CGPlayer_C::RemoveComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char commitItemGeosets, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char defer, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char removeRecord);
  void __thiscall CGPlayer_C::LootMoney();
  int __thiscall CGPlayer_C::CanUseItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemStats* stats, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum GAME_ERROR_TYPE& reason);
  void __thiscall CGPlayer_C::InviteToGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* target);
  int __thiscall CGPlayer_C::InviteToGroup(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 target);
  void __thiscall CGPlayer_C::Uninvite(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* target);
  int __thiscall CGPlayer_C::Uninvite(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 target);
  void __thiscall CGPlayer_C::SetNewLeader(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* target);
  int __thiscall CGPlayer_C::SetNewLeader(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 target);
  void __thiscall CGPlayer_C::AcceptGroup();
  void __thiscall CGPlayer_C::DeclineGroup();
  void __thiscall CGPlayer_C::LeaveGroup();
  void __thiscall CGPlayer_C::SetLootMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum LOOT_METHOD method, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 master);
  void __thiscall CGPlayer_C::AcceptGuild();
  void __thiscall CGPlayer_C::DeclineGuild();
  int __thiscall CGPlayer_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGPlayer_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  int __thiscall CGPlayer_C::OnVendorInventory(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverListQuests(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverInvalidQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverSendQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverRequestItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverChooseReward(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverQuestComplete(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverQuestFailed(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnQuestGiverStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnTrainerList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnBuyFailed(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnBuySucceeded(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnSellResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPlayer_C::QueryQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver, /*<regrel ebp+0xc>*/ /*|0x4|*/ int questID);
  void __thiscall CGPlayer_C::AcceptQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver, /*<regrel ebp+0xc>*/ /*|0x4|*/ int questID);
  void __thiscall CGPlayer_C::CompleteQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver, /*<regrel ebp+0xc>*/ /*|0x4|*/ int questID);
  void __thiscall CGPlayer_C::GiveQuestItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver, /*<regrel ebp+0xc>*/ /*|0x4|*/ int questID);
  void __thiscall CGPlayer_C::GetQuestReward(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver, /*<regrel ebp+0xc>*/ /*|0x4|*/ int questID, /*<regrel ebp+0x10>*/ /*|0x4|*/ int itemChoice);
  void __thiscall CGPlayer_C::CancelQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questGiver);
  void __thiscall CGPlayer_C::QuestLogRemoveQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ int entry);
  void __thiscall CGPlayer_C::QuestLogSwapQuest(/*<regrel ebp+0x8>*/ /*|0x4|*/ int entry1, /*<regrel ebp+0xc>*/ /*|0x4|*/ int entry2);
  void __thiscall CGPlayer_C::UpdateQuestStatus(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGPlayer_C::UpdateQuestStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& guid);
  void __thiscall CGPlayer_C::UpdateTaxiStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGPlayer_C::UpdateBindStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGPlayer_C::TrainerBuySpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& trainer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int spellID);
  void __thiscall CGPlayer_C::OnSpellFailed(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellRec* spellRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int reason);
  void __thiscall CGPlayer_C::RequestPetitionSignatures(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item);
  void __thiscall CGPlayer_C::BuyPetition(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& petitionUnit, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGPetition* petition);
  void __thiscall CGPlayer_C::TurnInGuildCharter();
  int __thiscall CGPlayer_C::OnPetitionShowSignatures(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnPetitionShowList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnSignedResults(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::OnTurnInPetitionResults(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPlayer_C::PlayMacroSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ int category);
  void __thiscall CGPlayer_C::PlayVocalMacro(/*<regrel ebp+0x8>*/ /*|0x4|*/ int category);
  void __thiscall CGPlayer_C::DeleteWornItems();
  unsigned int __thiscall GetFramesSinceUpdate();
  void __thiscall SkipUpdate();
  void __thiscall UpdateText();
  void __thiscall CGPlayer_C::InspectPlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& guid);
  void __thiscall CGPlayer_C::ReceiveResurrectRequest(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall CGPlayer_C::AcceptResurrectRequest(/*<regrel ebp+0x8>*/ /*|0x4|*/ int accept);
  void __thiscall CGPlayer_C::AddKnownSpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int slot, /*<regrel ebp+0x10>*/ /*|0x4|*/ int learned, /*<regrel ebp+0x14>*/ /*|0x4|*/ int addToBook);
  void __thiscall CGPlayer_C::DelKnownSpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  class TSGrowableArray<int>* __thiscall CGPlayer_C::GetTradeSkills(/*<regrel ebp+0x8>*/ /*|0x4|*/ int skillLine);
  class TSGrowableArray<int>* __thiscall CGPlayer_C::GetCraftSkills(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SPELL_CAST_UI_TYPE type);
  int __thiscall CGPlayer_C::GetCraftSkillActivator(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SPELL_CAST_UI_TYPE type);
  int __thiscall CGPlayer_C::GetSkillIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ int skillID);
  unsigned char __thiscall CGPlayer_C::GetExpandedSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int skillID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& rank, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& modifier);
  int __thiscall CGPlayer_C::GetSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int skillID);
  int __thiscall CGPlayer_C::ValidateSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slotID, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 cursorItem);
  int __thiscall CGPlayer_C::OnAttackBreakHandler();
  int __thiscall CGPlayer_C::OnAttackIconPressed();
  void __thiscall CGPlayer_C::SetCombatMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ int state);
  int __thiscall IsInCombatMode();
  void __thiscall CGPlayer_C::KillExitCombatModeSheatheTimer();
  void __thiscall CGPlayer_C::ResetCombatModeTimer(/*<regrel ebp+0x8>*/ /*|0x4|*/ int newCombat);
  void __thiscall CGPlayer_C::KillCombatModeTimer();
  unsigned int __thiscall CGPlayer_C::GetCombatModeTimerInterval();
  void __thiscall CGPlayer_C::OnItemDelete(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item);
  void __thiscall SetLootCloseSentFlag();
  void __thiscall CGPlayer_C::ToggleSheathe(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char ignoreAnim);
  void __thiscall CGPlayer_C::StartSheatheAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INVENTORY_SLOTS slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int hip, /*<regrel ebp+0x10>*/ /*|0x4|*/ int both);
  void __thiscall CGPlayer_C::SetInventoryMirrorHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (handler*)(unsigned __int64, unsigned int, unsigned int, void*, void*));
  void __thiscall CGPlayer_C::UnsetInventoryMirrorHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (handler*)(unsigned __int64, unsigned int, unsigned int, void*, void*));
  void __thiscall CGPlayer_C::SetPlayerMirrorHandlers();
  void __thiscall CGPlayer_C::UnsetPlayerMirrorHandlers();
  void __thiscall CGPlayer_C::UnsetActiveMirrorHandlers();
  void __thiscall CGPlayer_C::InitPreferredGeosets();
  void __thiscall CGPlayer_C::InitComponents();
  class CGPlayer_C& __thiscall operator=(class CGPlayer_C&);
  int __thiscall CGPlayer_C::IsQuestUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGPlayer_C::ShopFromMerchant(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& merchant);
  void __thiscall CGPlayer_C::TalkToQuestUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& questUnit);
  void __thiscall CGPlayer_C::TalkToTrainer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& trainerUnit);
  void __thiscall CGPlayer_C::TalkToBinder(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& binderUnit);
  void __thiscall CGPlayer_C::TalkToBanker(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& bankerUnit);
  void __thiscall CGPlayer_C::TalkToTabardVendor(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& tabardUnit);
  void __thiscall CGPlayer_C::TalkToNpcPetition(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& petitionUnit);
  void __thiscall CGPlayer_C::SaveTabard(/*<regrel ebx+0x8>*/ /*|0x4|*/ int eStyle, /*<regrel ebx+0xc>*/ /*|0x4|*/ int eColor, /*<regrel ebx+0x10>*/ /*|0x4|*/ int bStyle, /*<regrel ebx+0x14>*/ /*|0x4|*/ int bColor, /*<regrel ebx+0x18>*/ /*|0x4|*/ int bg, /*<regrel ebx+0x1c>*/ /*|0x8|*/ unsigned __int64 vendor);
  unsigned char __thiscall CGPlayer_C::OnGuildChanged();
  void __thiscall CGPlayer_C::GuildInfoLoaded(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& guildList);
  void __thiscall SetGuildMirrorHandler();
  void __thiscall UnsetGuildMirrorHandler();
  class CGBag_C* __thiscall Inventory();
  class CGBag_C* __thiscall Inventory();
  void __thiscall CGPlayer_C::ReadItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 containerGUID, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char slot);
  void __thiscall CGPlayer_C::ReadItem(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char packSlot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char slot);
  void __thiscall CGPlayer_C::ReadItemResult(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPlayer_C::HandleMountResult(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int result);
  void __thiscall CGPlayer_C::HandleDismountResult(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int result);
  int __thiscall CGPlayer_C::GetLanguageSkill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int language, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& skill);
  unsigned int __thiscall CGPlayer_C::GetDefaultLanguage();
  void __thiscall CGPlayer_C::OnTaxiNodeStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPlayer_C::ShowTaxiNodes(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGPlayer_C::QueryTaxiNodes(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& unit);
  void __thiscall CGPlayer_C::StartTaxi(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 vendor, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int startNode, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int destNode);
  void __thiscall CGPlayer_C::HandleActivateTaxiReply(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int code);
  unsigned char __thiscall CGPlayer_C::CanTrack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* object);
  unsigned char __thiscall CGPlayer_C::CanTrack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  int __thiscall CGPlayer_C::DeathBindDistanceCompare(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& bindStonePosition);
  unsigned int __thiscall GetDisplayRace();
  unsigned int __thiscall GetDisplaySex();
  void __thiscall CGPlayer_C::OnLootGameObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& gameObject, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char lootAnim);
  void __thiscall ClearLootingUnitSent();
  class CGItem_C* __thiscall CGPlayer_C::GetSoulstone();
  void __thiscall CGPlayer_C::UseSoulstone();
  void __thiscall CGPlayer_C::FixComponenting(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* itemPtr);
  void __thiscall CGPlayer_C::CheckWeaponDefenseRankChange();
  void __thiscall CGPlayer_C::CheckWeaponDefenseRankChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand);
  unsigned char __thiscall CGPlayer_C::GetPackAndSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char& packSlot, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char& slot);
  void __thiscall CGPlayer_C::OpenLootItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* item);
  void __thiscall CGPlayer_C::OpenWrappedItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* item);
  void __thiscall CGPlayer_C::CheckWeaponRankChange();
  void __thiscall CGPlayer_C::CheckDefenseRankChange();
  int __thiscall CGPlayer_C::GetWeaponSpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand);
  void __thiscall SetBankMirrorHandlers();
  void __thiscall UnsetBankMirrorHandlers();
  int __thiscall CGPlayer_C::OnSplitMoneyNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPlayer_C::IncrementPendingItemStats();
  void __thiscall CGPlayer_C::DecrementPendingItemStats();
  unsigned char __thiscall CGPlayer_C::FindItemSlot(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 containerGUID, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGItem_C* item);
  void __thiscall CGPlayer_C::GiftWrap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* item);
  void __thiscall CGPlayer_C::BotMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* points, /*<regrel ebp+0x10>*/ /*|0x4|*/ int count, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long duration, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CGPlayer_C::BotSpline();
  void __thiscall CGPlayer_C::SetFarSightFocus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* obj);
  void __thiscall CGPlayer_C::ToggleFarSight();
  void __thiscall CGPlayer_C::ClearFarSight();
  int __thiscall IsInFarSight();
  class CGUnit_C* __thiscall CGPlayer_C::GetPossessedUnit();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PostReenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnAttackStart(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnAttackStop(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 previousTarget, /*<regrel ebp+0x10>*/ /*|0x4|*/ int nowDead);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::CombatLoggingFlagChanged();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::SetEmoteState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::SetTorsoAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::SetBaseAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGPlayer_C::ShouldRenderUnitName(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mode);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::CommitTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  virtual /*<vtableoff 0x0>*/ unsigned int __thiscall CGPlayer_C::UpdateUnitNameString(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int localPlayerFlags, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int otherUnitsFlags, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int bufferSize);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::GetAFKText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int size);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::GetDNDText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int size);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::GetGMText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int size);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnBadAttackFacing(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnBadAttackPosition(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim, /*<regrel ebp+0x10>*/ /*|0x4|*/ float range);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnBadAttackTarget(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnNotStanding(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnDeath();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnDeathAnimate();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::LootAnimEndHandler();
  virtual /*<vtableoff 0x0>*/ unsigned __int64 __thiscall CGPlayer_C::GetUnitBeingLooted();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGPlayer_C::GetModelFileName();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PlayUnitSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum UNITSOUNDTYPE soundType, /*<regrel ebp+0xc>*/ /*|0x4|*/ int alwaysPlay);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PlayFoleySound();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::HandleSpellEventSound();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PlayDeathThudCameraShake();
  virtual /*<vtableoff 0x0>*/ unsigned int __thiscall CGPlayer_C::GetImpactType();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGPlayer_C::GetSpellCastingTime(/*<regrel ebx+0x8>*/ /*|0x4|*/ int spellID);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGPlayer_C::GetSpellRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGPlayer_C::GetDefenseSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& base, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& modifier);
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGPlayer_C::GetAttackSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int hand, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& modifier);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::UpdateObjComponentVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* itemPtr, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct ItemEnchantment* enchantments, /*<regrel ebp+0x10>*/ /*|0x4|*/ int num);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::ClearItemVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEATTACHMENTINFO* info);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::SetItemVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEATTACHMENTINFO* info, /*<regrel ebp+0xc>*/ /*|0x4|*/ class ItemVisualsRec* rec, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char force);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnAttackerStateChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO& roundInfo);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::HandleMirrorTimerDamage(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct MIRRORTIMERDAMAGE& log);
  virtual /*<vtableoff 0x0>*/ unsigned __int64 __thiscall CGPlayer_C::GetLocalTarget();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::UnitHit(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum VICTIMSTATES newState, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 attacker);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::SetLastWeaponModeSent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int mode);
  virtual /*<vtableoff 0x0>*/ unsigned int __thiscall CGPlayer_C::DetermineWoundSequence();
  virtual /*<vtableoff 0x0>*/ class CGBag_C* __thiscall CGPlayer_C::GetBag();
  virtual /*<vtableoff 0x0>*/ class CGBag_C* __thiscall CGPlayer_C::GetBag();
  virtual /*<vtableoff 0x0>*/ struct VirtualItemInfo* __thiscall CGPlayer_C::GetVirtualItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char ignoreDisarmFlag);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGPlayer_C::GetVirtualItemDisplayID(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  virtual /*<vtableoff 0x0>*/ struct VirtualItemInfo* __thiscall CGPlayer_C::GetDefendingItem();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnMount();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnDismount();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGPlayer_C::GetMountScale();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGPlayer_C::CanBeMounted();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGPlayer_C::ShouldRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long worldStatus);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PreAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::CleanupUnitArtwork(/*<regrel ebp+0x8>*/ /*|0x4|*/ int playerModelChanged, /*<regrel ebp+0xc>*/ /*|0x4|*/ int wasPlayerModel);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::ReinitializeUnitArtwork();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::PostReinitializeArtwork();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::ChangeStandState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int standState);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnStandStateChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldState, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x19c>*/ void __thiscall CGPlayer_C::ItemReceived(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemStats* stats);
  virtual /*<vtableoff 0x0>*/ enum UNITAFFILIATION __thiscall CGPlayer_C::GetGUIDAffiliation(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 unit);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGPlayer_C::OnLevelChange();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGPlayer_C::GetBlockChance();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGPlayer_C::GetDodgeChance();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGPlayer_C::GetParryChance();
};
// <size 0x1860>

class CGUnit_C : class CGObject_C,  class CGUnit  {

  // static data ------------------------------------
  static /*<rva 0xa18cf8>*/ /*|0x8|*/ unsigned __int64 m_activeMover;

  // non-static data --------------------------------
  /*<thisrel this+0x108>*/ /*|0x4|*/ int m_questCountKilled;
  /*<thisrel this+0x10c>*/ /*|0x4|*/ int m_questCountNeeded;
  /*<thisrel this+0x110>*/ /*|0x4|*/ struct HMODEL__* m_resEffectModel;
  /*<thisrel this+0x118>*/ /*|0x8|*/ unsigned __int64 m_meleeTargetDeathHold;
  /*<thisrel this+0x120>*/ /*|0x4|*/ int m_precastSheatheHoldTimer;
  /*<thisrel this+0x124>*/ /*|0x4|*/ int m_customAttackSound;
  /*<thisrel this+0x128>*/ /*|0xc|*/ class NTempest::C3Vector m_customAttackPosition;
  /*<thisrel this+0x134>*/ /*|0x4|*/ unsigned int m_splashSoundID;
  /*<thisrel this+0x138>*/ /*|0x4|*/ unsigned int m_disengageLookAtTimer;
  /*<thisrel this+0x13c>*/ /*|0x14|*/ class TSGrowableArray<ANIMENDDATA> m_animEndCallbackList;
  /*<thisrel this+0x150>*/ /*|0x21c|*/ struct ANIMENDDATA* m_callbackList[135];
  /*<thisrel this+0x36c>*/ /*|0x4|*/ class CreatureStats_C* m_stats;
  /*<thisrel this+0x370>*/ /*|0x4|*/ class CreatureDisplayInfoRec* m_displayInfo;
  /*<thisrel this+0x374>*/ /*|0x4|*/ class CreatureDisplayInfoExtraRec* m_displayInfoExtra;
  /*<thisrel this+0x378>*/ /*|0x4|*/ class CreatureModelDataRec* m_modelData;
  /*<thisrel this+0x37c>*/ /*|0x4|*/ class CreatureSoundDataRec* m_soundData;
  /*<thisrel this+0x380>*/ /*|0x4|*/ class CreatureSoundDataRec* m_mountedSoundData;
  /*<thisrel this+0x384>*/ /*|0x4|*/ class UnitBloodLevelsRec* m_bloodRec;
  /*<thisrel this+0x388>*/ /*|0xc0|*/ struct AuraVisual m_auraVisual[12];
  /*<thisrel this+0x448>*/ /*|0xc|*/ class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> > m_activeAuraInfo;
  /*<thisrel this+0x454>*/ /*|0x4|*/ enum ANIMENUMERATION m_pendingImpactAnim;
  /*<thisrel this+0x458>*/ /*|0x4|*/ struct HMODEL__* m_tempCharModel;
  /*<thisrel this+0x45c>*/ /*|0x14|*/ class TSGrowableArray<char> m_deathHoldBuffer;
  /*<thisrel this+0x470>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_deathHoldBufferIndices;
  /*<thisrel this+0x484>*/ /*|0x4|*/ int m_lastDeathTime;
  /*<thisrel this+0x488>*/ /*|0x4|*/ int m_nextDeathHoldCheckTime;
  /*<thisrel this+0x48c>*/ /*|0x14|*/ class TSGrowableArray<QUESTGIVEREMOTENODE> m_emoteQueue;
  /*<thisrel this+0x4a0>*/ /*|0x4|*/ struct HMODEL__* m_interactIconModel;
  /*<thisrel this+0x4a4>*/ /*|0xc|*/ class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> > m_bloodSplatNodes;
  /*<thisrel this+0x4b0>*/ /*|0x4|*/ unsigned int m_nextAllowableBloodPool;
  /*<thisrel this+0x4b4>*/ /*|0xc|*/ class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> > m_animQueue;
  /*<thisrel this+0x4c0>*/ /*|0x10|*/ class CCombatClient m_combat;
  /*<thisrel this+0x4d0>*/ /*|0x4|*/ struct ANIMQUEUENODE* m_currentDamageInfo;
  /*<thisrel this+0x4d4>*/ /*|0x4|*/ unsigned int m_readySequence;
  /*<thisrel this+0x4d8>*/ /*|0x4|*/ unsigned int m_animEndTime;
  /*<thisrel this+0x4dc>*/ /*|0x4|*/ unsigned int m_animBaseDuration;
  /*<thisrel this+0x4e0>*/ /*|0x4|*/ unsigned int m_animStartTime;
  /*<thisrel this+0x4e4>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x4e8>*/ /*|0x4|*/ unsigned int m_animFlags;
  /*<thisrel this+0x4ec>*/ /*|0x4|*/ unsigned int m_footprintTextureID;
  /*<thisrel this+0x4f0>*/ /*|0x4|*/ unsigned int m_terrain;
  /*<thisrel this+0x4f4>*/ /*|0x8|*/ class NTempest::C2Vector m_footprintSize;
  /*<thisrel this+0x4fc>*/ /*|0x4|*/ float m_footprintParticleScale;
  /*<thisrel this+0x500>*/ /*|0x118|*/ struct DEBUGHITROLLINFO m_hitInformation;
  /*<thisrel this+0x618>*/ /*|0x4|*/ enum ANIMENUMERATION m_spellPrecastingAnim;
  /*<thisrel this+0x61c>*/ /*|0x4|*/ enum ANIMENUMERATION m_spellCastingAnim;
  /*<thisrel this+0x620>*/ /*|0x4|*/ enum ANIMENUMERATION m_deferredPrecastAnim;
  /*<thisrel this+0x624>*/ /*|0x4|*/ int m_animatingAura;
  /*<thisrel this+0x628>*/ /*|0x4|*/ unsigned int m_emoteID;
  /*<thisrel this+0x62c>*/ /*|0x4|*/ unsigned int m_spellCastingEffectKit;
  /*<thisrel this+0x630>*/ /*|0x4|*/ unsigned int m_spellCastingSoundID;
  /*<thisrel this+0x634>*/ /*|0x4|*/ int m_spellCastingCameraShakeID;
  /*<thisrel this+0x638>*/ /*|0x50|*/ struct MISSILESTRUCT m_spellMissileStruct;
  /*<thisrel this+0x688>*/ /*|0x4|*/ float m_lastSentFacing;
  /*<thisrel this+0x68c>*/ /*|0x4|*/ float m_lastSentPitch;
  /*<thisrel this+0x690>*/ /*|0x4|*/ struct HPLAYERNAME__* m_unitNameHandle;
  /*<thisrel this+0x694>*/ /*|0x4|*/ int m_accumulatedXPDrop;
  /*<thisrel this+0x698>*/ /*|0x4|*/ int m_castingSpell;
  /*<thisrel this+0x69c>*/ /*|0x4|*/ int m_interruptedSpell;
  /*<thisrel this+0x6a0>*/ /*|0x4|*/ int m_lastSpellCastAnimTime;
  /*<thisrel this+0x6a4>*/ /*|0x4|*/ int m_nextBreath;
  /*<thisrel this+0x6a8>*/ /*|0x4|*/ int m_nextMountBreath;
  /*<thisrel this+0x6ac>*/ /*|0x4|*/ int m_scriptRegistered;
  /*<thisrel this+0x6b0>*/ /*|0x4|*/ float m_displayFacing;
  /*<thisrel this+0x6b4>*/ /*|0x4|*/ float m_smoothFacing;
  /*<thisrel this+0x6b8>*/ /*|0x10|*/ float m_savedFacingDeltas[4];
  /*<thisrel this+0x6c8>*/ /*|0x4|*/ float m_forcedDisplayFacing;
  /*<thisrel this+0x6cc>*/ /*|0x4|*/ unsigned int m_deathTime;
  /*<thisrel this+0x6d0>*/ /*|0x8|*/ unsigned __int64 m_lastCombatTarget;
  /*<thisrel this+0x6d8>*/ /*|0x8|*/ unsigned __int64 m_targetUnit;
  /*<thisrel this+0x6e0>*/ /*|0x4|*/ unsigned int m_currentBaseAnimState;
  /*<thisrel this+0x6e4>*/ /*|0x4|*/ unsigned int m_currentBaseAnim;
  /*<thisrel this+0x6e8>*/ /*|0x4|*/ unsigned int m_currentTorsoAnimState;
  /*<thisrel this+0x6ec>*/ /*|0x4|*/ unsigned int m_currentTorsoAnim;
  /*<thisrel this+0x6f0>*/ /*|0x4|*/ unsigned int m_currentMountAnimState;
  /*<thisrel this+0x6f4>*/ /*|0x4|*/ unsigned int m_currentWoundStartTime;
  /*<thisrel this+0x6f8>*/ /*|0x4|*/ unsigned int m_currentWoundAnimDuration;
  /*<thisrel this+0x6fc>*/ /*|0x4|*/ unsigned int m_spellFizzleTimer;
  /*<thisrel this+0x700>*/ /*|0x4|*/ unsigned int m_deathHolds;
  /*<thisrel this+0x704>*/ /*|0x4|*/ enum QUEST_GIVER_STATUS m_questGiverStatus;
  /*<thisrel this+0x708>*/ /*|0xc|*/ class NTempest::C3Vector m_serverLoc;
  /*<thisrel this+0x714>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> m_debugPathPoints;
  /*<thisrel this+0x728>*/ /*|0x4|*/ unsigned int m_numDebugPathNodes;
  /*<thisrel this+0x72c>*/ /*|0x4|*/ struct Sound* m_spellLoopedSound;
  /*<thisrel this+0x730>*/ /*|0x4|*/ struct Sound* m_creatureLoopSound;
  /*<thisrel this+0x734>*/ /*|0x4|*/ unsigned int m_mountedFootprintID;
  /*<thisrel this+0x738>*/ /*|0x8|*/ class NTempest::C2Vector m_mountedFootprintSize;
  /*<thisrel this+0x740>*/ /*|0x4|*/ struct HMODEL__* m_fadingPureMountModel;
  /*<thisrel this+0x744>*/ /*|0x4|*/ enum PUREMOUNTFADEMODE m_pureMountFadeMode;
  /*<thisrel this+0x748>*/ /*|0x4|*/ unsigned int m_pureMountFadeStartTime;
  /*<thisrel this+0x74c>*/ /*|0x4|*/ float m_fadingMountFacing;
  /*<thisrel this+0x750>*/ /*|0xc|*/ class NTempest::C3Vector m_fadingMountPos;
  /*<thisrel this+0x75c>*/ /*|0x4|*/ float m_fadingMountScale;
  /*<thisrel this+0x760>*/ /*|0x4|*/ class NPCSoundsRec* m_NPCSoundsRec;
  /*<thisrel this+0x764>*/ /*|0x4|*/ unsigned int m_lastGlobalClickCount;
  /*<thisrel this+0x768>*/ /*|0x4|*/ unsigned int m_pissedCount;
  /*<thisrel this+0x76c>*/ /*|0x4|*/ unsigned int m_numNPCPissedSounds;
  /*<thisrel this+0x770>*/ /*|0x4|*/ struct HCHARGEOSET__* m_geosetHandle;
  /*<thisrel this+0x774>*/ /*|0x4|*/ struct HTEXCOMPONENT__* m_texComponent;
  /*<thisrel this+0x778>*/ /*|0x3c|*/ unsigned int m_preferredGeosets[15];
  /*<thisrel this+0x7b4>*/ /*|0x4|*/ int m_displayHealth;
  /*<thisrel this+0x7b8>*/ /*|0xc|*/ class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> > m_impactEffectsDesc;
  /*<thisrel this+0x7c4>*/ /*|0x84|*/ class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> > m_spellEffectLists[11];
  /*<thisrel this+0x848>*/ /*|0xc|*/ class NTempest::C3iVector m_currentEmissive;
  /*<thisrel this+0x854>*/ /*|0x4|*/ int m_pendingHitSpellID;
  /*<thisrel this+0x858>*/ /*|0x14|*/ class TSGrowableArray<unsigned __int64> m_pendingHitAnimVictims;
  /*<thisrel this+0x86c>*/ /*|0xe0|*/ int m_auraFlags[56];
  /*<thisrel this+0x94c>*/ /*|0x4|*/ int m_walkStateAnim;
  /*<thisrel this+0x950>*/ /*|0x4|*/ int m_standStateAnim;
  /*<thisrel this+0x954>*/ /*|0x4|*/ float m_baseRadius;
  /*<thisrel this+0x958>*/ /*|0x4|*/ unsigned int m_ammoDisplayID;
  /*<thisrel this+0x95c>*/ /*|0x4|*/ unsigned int m_ammoInvType;
  /*<thisrel this+0x960>*/ /*|0x4|*/ unsigned int m_rangedStandTimer;
  /*<thisrel this+0x964>*/ /*|0x14|*/ struct ACTIVEATTACHMENTINFO* m_attachments[5];
  /*<thisrel this+0x978>*/ /*|0x14|*/ struct ACTIVEATTACHMENTINFO* m_deferredAttachments[5];
  /*<thisrel this+0x98c>*/ /*|0x14|*/ int m_weaponTrails[5];
  /*<thisrel this+0x9a0>*/ /*|0x4|*/ struct HMODEL__* m_paperDollModel;
  /*<thisrel this+0x9a4>*/ /*|0x4|*/ int m_sheatheReasons;
  /*<thisrel this+0x9a8>*/ /*|0x8|*/ enum ANIMENUMERATION m_handAnim[2];
  /*<thisrel this+0x9b0>*/ /*|0x4|*/ unsigned int m_deferredSheatheFlags;
  /*<thisrel this+0x9b4>*/ /*|0x4|*/ enum SHEATHEREASONS m_deferredSheatheReason;
  /*<thisrel this+0x9b8>*/ /*|0x4|*/ int m_savedChannelSpellID;
  /*<thisrel this+0x9bc>*/ /*|0x14|*/ class TSGrowableArray<unsigned __int64> m_savedChannelSpellTargets;
  /*<thisrel this+0x9d0>*/ /*|0x4|*/ struct SPELLEFFECTDESC* m_channelSpellEffect;
  /*<thisrel this+0x9d4>*/ /*|0x4|*/ class SpellRec* m_shapeShiftPoof;
  /*<thisrel this+0x9d8>*/ /*|0x4|*/ struct FishingLineObject* m_fishingLineObject;

  // base classes -----------------------------------
  // baseclass class CGObject_C
  // <base data offset+0x0>

  // baseclass class CGUnit
  // <base data offset+0x30>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGUnit_C::Initialize();
  static void __fastcall CGUnit_C::Shutdown();
  static void __fastcall CGUnit_C::PostShutdown();
  static void __fastcall CGUnit_C::NamePlateShow(/*<register ecx>*/ /*|0x4|*/ int show);
  static void __fastcall CGUnit_C::RemoveAllNamePlates();
  static void __fastcall CGUnit_C::UpdateUnitNameplates(/*<register ecx>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  static void __fastcall CGUnit_C::ResortAllUnitNameplates(/*<register ecx>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  static void __fastcall CGUnit_C::SetActiveMover(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static unsigned __int64 __fastcall GetActiveMover();
  static void __fastcall CGUnit_C::StopMoveHeartbeatTimer();
  static void __fastcall CGUnit_C::StartMoveHeartbeatTimer();
  static unsigned char __fastcall CGUnit_C::FactionHasReputation(/*<register ecx>*/ /*|0x4|*/ int faction);
  static enum UNIT_REACTION __fastcall CGUnit_C::UnitReaction(/*<register ecx>*/ /*|0x4|*/ int factionID, /*<register edx>*/ /*|0x4|*/ class CGUnit_C* unit, /*<regrel ebp+0x8>*/ /*|0x4|*/ int trueSight);
  static unsigned int __fastcall CGUnit_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);
  static void __fastcall CGUnit_C::InitializeTextureVariations(/*<register ecx>*/ /*|0x4|*/ class CreatureDisplayInfoRec* displayInfo, /*<register edx>*/ /*|0x4|*/ struct HMODEL__* theModel, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CreatureModelDataRec* modelData);
  static int __fastcall CGUnit_C::GetAnimPriority(/*<register ecx>*/ /*|0x4|*/ int state);

  // non-virtual functions --------------------------
  void __thiscall CGUnit_C(class CGUnit_C&);
  void __thiscall CGUnit_C::CGUnit_C(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebx+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebx+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGUnit_C::~CGUnit_C();
  void __thiscall CGUnit_C::InitializeExtendedDisplay();
  void __thiscall CGUnit_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGUnit_C::PostInit(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall CGUnit_C::PostMovementUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientMoveUpdate& update);
  void __thiscall CGUnit_C::UpdateUnitCollisionBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* modelFileName);
  void __thiscall SetCreatureStats(class CreatureStats_C*);
  void __thiscall CGUnit_C::UpdateUnitAlpha();
  unsigned char __thiscall IsClientControlled();
  void __thiscall CGUnit_C::UnitInitializeModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::UnitInitializeMountModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::UnitUninitializeModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  int __thiscall CGUnit_C::GetCreatureType();
  void __thiscall CGUnit_C::SetLocalTarget(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 target);
  void __thiscall CGUnit_C::HandleAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  void __thiscall CGUnit_C::HandleMountedAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  int __thiscall CGUnit_C::CanBeLooted(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long currentTime);
  float __thiscall GetBoundingRadius();
  unsigned char __thiscall CGUnit_C::IsTurningState();
  void __thiscall CGUnit_C::SetMirrorHandlers();
  void __thiscall CGUnit_C::UnsetMirrorHandlers();
  int __thiscall CGUnit_C::OnMoveEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnMonsterMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall CGUnit_C::OnForceMoveChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum NETMESSAGE msgID, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnMoveStopLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnStrafeStartLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CGUnit_C::OnStrafeStopLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnSetRunModeLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int run);
  void __thiscall CGUnit_C::OnSetFacingLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::OnSetFacingGUIDLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid);
  void __thiscall CGUnit_C::OnTeleportLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::OnTeleportNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::OnEnableCollisionLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnDisableCollisionLocalNoUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnToggleCollisionLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnPendingMoveStateChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId);
  void __thiscall CGUnit_C::OnCollideFalling(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnCollideFallLand(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::BuildMovementUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE messageId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::SendMovementUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE messageId);
  void __thiscall CGUnit_C::UpdateSmoothFacing();
  float __thiscall CGUnit_C::GetSmoothFacing();
  float __thiscall GetRawSmoothFacing();
  void __thiscall CGUnit_C::SetSmoothFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::UpdateSwimmingStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inWater, /*<regrel ebp+0x10>*/ /*|0x4|*/ float depth);
  void __thiscall CGUnit_C::SendRedirectionMessage();
  void __thiscall CGUnit_C::UpdateDisplayFacing();
  int __thiscall CGUnit_C::ShouldShuffle();
  float __thiscall CGUnit_C::GetDisplayFacing();
  void __thiscall CGUnit_C::OnRestoreHealth();
  void __thiscall CGUnit_C::UpdateMoveInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CClientMoveUpdate& update);
  void __thiscall CGUnit_C::SetClientInitData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CClientObjCreate& init, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char partialUpdateOfActivePlayer);
  void __thiscall CGUnit_C::PostSetClientInitData(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientMoveUpdate& update);
  int __thiscall CGUnit_C::IsWalking();
  void __thiscall CGUnit_C::GetSwimMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix* worldMatrix);
  void __thiscall CGUnit_C::OnAttackSwing(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victimGUID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int clientTimeStamp);
  void __thiscall CGUnit_C::SaveQuestAddItemMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ int killed, /*<regrel ebp+0xc>*/ /*|0x4|*/ int needed);
  void __thiscall CGUnit_C::ProcessQuestItemMessages();
  unsigned char __thiscall DoNotLogDeath();
  enum MISS_REASON __thiscall CGUnit_C::AdjustVictimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MISS_REASON reason);
  void __thiscall CGUnit_C::AdjustVictimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo);
  void __thiscall CGUnit_C::InitializeResEffectModel();
  void __thiscall CGUnit_C::ClearResEffectModel();
  void __thiscall CGUnit_C::AttachResEffectModel();
  void __thiscall CGUnit_C::DetatchResEffectModel();
  void __thiscall CGUnit_C::ShowPlayerXPGained();
  void __thiscall CGUnit_C::OnEncounter(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum AI_REACTION reaction);
  void __thiscall CGUnit_C::QueueBloodSplat(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum BLOODSPURTLOCATION linkPoint);
  void __thiscall CGUnit_C::HandleBloodPool(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int currentTime);
  int __thiscall HasBloodRec();
  class UnitBloodRec* __thiscall CGUnit_C::GetBloodRecord();
  void __thiscall CGUnit_C::AddBloodPool();
  void __thiscall CGUnit_C::RemoveBloodPool();
  void __thiscall CGUnit_C::GetResistanceAndBuffs(/*<regrel ebp+0x8>*/ /*|0x4|*/ int r, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& realResistance, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& effectiveResistance, /*<regrel ebp+0x14>*/ /*|0x4|*/ int& buffPositive, /*<regrel ebp+0x18>*/ /*|0x4|*/ int& buffNegative);
  int __thiscall CGUnit_C::IsUnderWater();
  void __thiscall CGUnit_C::SetForcedAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* string);
  void __thiscall CGUnit_C::ResetForcedAnimation();
  void __thiscall CGUnit_C::ForceUpdateBaseAnimation();
  void __thiscall CGUnit_C::SetVictimAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum VICTIMSTATES newState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int unitDead, /*<regrel ebp+0x10>*/ /*|0x4|*/ int criticalHit, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int victimRoundDuration, /*<regrel ebp+0x18>*/ /*|0x4|*/ int processNow);
  unsigned char __thiscall CGUnit_C::QueueVictimAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum VICTIMSTATES newState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int unitDead, /*<regrel ebp+0x10>*/ /*|0x4|*/ int criticalHit, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int victimRoundDuration);
  unsigned __int64 __thiscall IsAttacking();
  unsigned __int64 __thiscall IsAttackingNow();
  void __thiscall ClearAttackSent();
  void __thiscall CGUnit_C::DoVictimFeedback(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo, /*<regrel ebp+0xc>*/ /*|0x4|*/ int showAnimation);
  void __thiscall CGUnit_C::ShowWorldText(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo);
  void __thiscall CGUnit_C::PerformSpellProcImpact(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spell);
  void __thiscall CGUnit_C::AddVictimDeathHold(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* victimPtr);
  void __thiscall CGUnit_C::SetMeleeDeathHold(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* victimPtr);
  void __thiscall CGUnit_C::ClearMeleeDeathHold();
  void __thiscall CGUnit_C::PrintAttackSeqErrorMsg(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fallBack);
  struct ANIMQUEUENODE* __thiscall CGUnit_C::ProcessAnimQueue();
  void __thiscall CGUnit_C::PurgeAnimNodes(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char doNotProcess);
  struct ANIMQUEUENODE* __thiscall CGUnit_C::GetNewAnimNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ int leaveUnlinked);
  void __thiscall CGUnit_C::RecycleAnimNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMQUEUENODE* node);
  void __thiscall CGUnit_C::CheckPendingVictimFeedback();
  void __thiscall CGUnit_C::CheckPendingMissileRelease(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* position);
  void __thiscall CGUnit_C::PlayParrySound(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char ignoreMainHand, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::PlayImpactSound(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 attacker, /*<regrel ebp+0x10>*/ /*|0x4|*/ int criticalHit, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum COMBATHAND hand);
  void __thiscall CGUnit_C::PlayCustomAttackSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sound, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::SetCustomAttackSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sound, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::PlayDeathThud();
  void __thiscall CGUnit_C::PlaySplashSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  struct VirtualItemInfo* __thiscall CGUnit_C::GetParryingItem(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char ignoreMainHand);
  struct VirtualItemInfo* __thiscall CGUnit_C::GetAttackingWeapon(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand);
  unsigned char __thiscall CGUnit_C::GetWeaponSwingType(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char mainHand, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum WEAPONSWING_SOUNDTYPES& type);
  int __thiscall CGUnit_C::GetUnitSize();
  void __thiscall CGUnit_C::PlayStandSound();
  void __thiscall CGUnit_C::WoundAnimEndHandler();
  void __thiscall CGUnit_C::DodgeAnimEndHandler();
  void __thiscall CGUnit_C::AttackAnimEndHandler();
  void __thiscall CGUnit_C::DeathAnimEndHandler();
  void __thiscall CGUnit_C::NPCAnimEndHandler();
  void __thiscall CGUnit_C::RangedWeaponAnimEndHandler();
  void __thiscall CGUnit_C::ThrowAnimEndHandler();
  int __thiscall CGUnit_C::JumpTakeOffFinishedHandler();
  int __thiscall CGUnit_C::JumpLandFinishedHandler();
  void __thiscall CGUnit_C::GenericAnimEndHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum ANIMENUMERATION animID, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param);
  void __thiscall CGUnit_C::InstallSeqEndHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int animID);
  void __thiscall CGUnit_C::UpdateMountAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  unsigned char __thiscall CGUnit_C::BaseAnimLocksHead();
  unsigned char __thiscall CGUnit_C::TorsoAnimLocksHead();
  unsigned char __thiscall CGUnit_C::TorsoAnimOverridesBase();
  unsigned char __thiscall UnitHeadLocked();
  void __thiscall CGUnit_C::SpellDelayed(/*<regrel ebp+0x8>*/ /*|0x4|*/ int delay);
  void __thiscall CGUnit_C::StopSpellFizzleTimer(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char status);
  void __thiscall CGUnit_C::StopRangedAttackPrecast();
  void __thiscall CGUnit_C::EndSpellEffects(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char status);
  void __thiscall CGUnit_C::MaybeSaveChannelSpellTargets(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSStackArray<unsigned __int64>& targets);
  unsigned char __thiscall CGUnit_C::CheckAndReportSpellInhibitFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellRec* spell, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGItem_C* item);
  void __thiscall CGUnit_C::PendingPrecastInterrupt(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  void __thiscall CGUnit_C::StoreSpellMissileEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& target, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& destination, /*<regrel ebp+0x10>*/ /*|0x4|*/ float speed, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int ammoDisplayID, /*<regrel ebp+0x18>*/ /*|0x4|*/ int inventoryType, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class SpellVisualRec* rec, /*<regrel ebp+0x20>*/ /*|0x1|*/ unsigned char hits, /*<regrel ebp+0x24>*/ /*|0x4|*/ enum MISS_REASON reason, /*<regrel ebp+0x28>*/ /*|0x4|*/ unsigned int spellID, /*<regrel ebp+0x2c>*/ /*|0x1|*/ unsigned char wasProc);
  void __thiscall CGUnit_C::PlaySpellLoopedSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ int soundID);
  void __thiscall CGUnit_C::SetBaseAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newAnim);
  void __thiscall CGUnit_C::SetTorsoAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newAnim);
  int __thiscall CGUnit_C::SetTorsoAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int state, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long duration, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CGUnit_C::ClearTorsoAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CGUnit_C::IsPreemptableWoundAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int state);
  int __thiscall CGUnit_C::IsAttackAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int state);
  int __thiscall CGUnit_C::ShouldDelayLevelupAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int state);
  int __thiscall CGUnit_C::ShouldDelayLevelupAnim();
  int __thiscall CGUnit_C::GetFactionTemplate();
  enum UNIT_REACTION __thiscall CGUnit_C::UnitReaction(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall IsFriend(class CGUnit_C*);
  unsigned char __thiscall IsPeaceful(class CGUnit_C*);
  unsigned char __thiscall IsEnemy(class CGUnit_C*);
  unsigned char __thiscall CGUnit_C::CanAssist(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall CGUnit_C::CanInteract(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* object);
  unsigned char __thiscall CGUnit_C::CanInteract(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall CGUnit_C::CanAttack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall CanAttackNow(class CGUnit_C*);
  unsigned char __thiscall CGUnit_C::CanCooperate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall CGUnit_C::IsUnitInGroup(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  int __thiscall IsStunned();
  int __thiscall IsPacified();
  int __thiscall IsDisarmed();
  int __thiscall IsPlayingDeathAnim();
  int __thiscall IsPlayingLayDownAnim();
  int __thiscall IsPlayingSleepAnim();
  int __thiscall IsPlayingGetUpAnim();
  void __thiscall CGUnit_C::UpdateDisplay(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now);
  void __thiscall CGUnit_C::CheckRendering();
  void __thiscall CGUnit_C::OnStopRender();
  void __thiscall CGUnit_C::LookAtTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* target);
  void __thiscall CGUnit_C::LookAtTarget();
  void __thiscall CGUnit_C::UpdateLookAtTarget();
  void __thiscall SetDead();
  void __thiscall CGUnit_C::RemoveObjectLookAt();
  void __thiscall CGUnit_C::ApplyObjectCameraSpaceLookAt(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& target);
  unsigned int __thiscall CGUnit_C::GetAnimationState();
  int __thiscall CGUnit_C::PlayBaseAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ int newAnimState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int newAnim, /*<regrel ebp+0x10>*/ /*|0x4|*/ int forceNoFidget, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned char& checkImpacts);
  void __thiscall CGUnit_C::ApplyStrafeRotation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  void __thiscall CGUnit_C::SetStrafeRotation();
  int __thiscall CGUnit_C::SetTorsoSequence(/*<regrel ebp+0x8>*/ /*|0x4|*/ float timeScale, /*<regrel ebp+0xc>*/ /*|0x4|*/ int flags);
  float __thiscall CGUnit_C::GetAnimTimeScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int duration, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CGUnit_C::StoreSequenceEndCallbacks(/*<regrel ebp+0x8>*/ /*|0x4|*/ int anim);
  void __thiscall CGUnit_C::ProcessAnimEndCallbacks();
  void __thiscall CGUnit_C::ClearAnimCallbackData();
  void __thiscall CGUnit_C::ShowBloodSpurt(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* attacker, /*<regrel ebp+0xc>*/ /*|0x4|*/ int crushingBlow);
  enum BLOODSPURTLOCATION __thiscall CGUnit_C::DetermineBloodLinkPoint(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* attacker);
  int __thiscall CGUnit_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGUnit_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  int __thiscall HasInteractIcon();
  void __thiscall CGUnit_C::RefreshInteractIcon();
  void __thiscall CGUnit_C::RemoveInteractIcon();
  void __thiscall CGUnit_C::UpdateInteractIcon(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INTERACTICONTYPE which);
  void __thiscall CGUnit_C::UpdateInteractIcon(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum QUEST_GIVER_STATUS status);
  enum QUEST_GIVER_STATUS __thiscall GetQuestGiverStatus();
  void __thiscall SetQuestGiverStatus(enum QUEST_GIVER_STATUS);
  void __thiscall CGUnit_C::EnableWeaponTrail(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0xc>*/ /*|0x4|*/ int fadeOutRate, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int duration);
  int __thiscall CGUnit_C::GetDebugStateInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO* attackInfo);
  void __thiscall CGUnit_C::SetDebugHitRolls(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO& info);
  void __thiscall ClearDebugFlags();
  void __thiscall SetUnitBadFacing();
  int __thiscall CGUnit_C::IsBadFacing();
  int __thiscall IsDeathFlagSet();
  void __thiscall RemoveForceDisplayFacingFlag();
  void __thiscall CGUnit_C::DetermineReadySequence(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char forceNormal);
  void __thiscall CGUnit_C::UpdateReadyAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemStats* stats);
  unsigned int __thiscall CGUnit_C::GetRunSequence();
  unsigned int __thiscall CGUnit_C::GetStopSequence();
  unsigned int __thiscall GetReadySequence();
  unsigned int __thiscall CGUnit_C::GetRangedReadySequence();
  void __thiscall CGUnit_C::AddDeathHold();
  void __thiscall CGUnit_C::DelDeathHold();
  unsigned int __thiscall GetDeathHolds();
  void __thiscall CGUnit_C::AddDamageDone(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int damage, /*<regrel ebp+0xc>*/ /*|0x4|*/ int normalCombatDamage, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags, /*<regrel ebp+0x14>*/ /*|0x8|*/ unsigned __int64 attacker, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int spellID);
  void __thiscall CGUnit_C::SpellEventHit();
  unsigned char __thiscall CGUnit_C::IsSlotComponented(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int offset, /*<regrel ebp+0xc>*/ /*|0x4|*/ int ignoreUsingRangedWeapon);
  void __thiscall CGUnit_C::ProcessLocalMoveEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId);
  void __thiscall CGUnit_C::SetFingersSeq(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* charModel, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int startFinger, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int lastFinger);
  void __thiscall CGUnit_C::ResetFingersSeq(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* charModel, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int startFinger, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int lastFinger);
  void __thiscall CGUnit_C::SetHandState(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct VirtualItemInfo* item, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int startFinger, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int lastFinger);
  void __thiscall CGUnit_C::SetHandsState(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::OnTeleport(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnMoveStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ int forward);
  void __thiscall CGUnit_C::OnMoveStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnStrafeStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ int left);
  void __thiscall CGUnit_C::OnStrafeStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnJump(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnTurnStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ int left);
  void __thiscall CGUnit_C::OnTurnStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnPitchStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ int up);
  void __thiscall CGUnit_C::OnPitchStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnSetRunMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ int run);
  void __thiscall CGUnit_C::OnSetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnSetPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnToggleCollision(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnRunSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnWalkSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnSwimSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnTurnRateChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGUnit_C::OnTeleportAck(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnSwimStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnSwimStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::OnMoveHeartBeat(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CGUnit_C::InitializeSequenceFlags();
  float __thiscall CGUnit_C::DetermineWalkRunTimeScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ int currentState);
  int __thiscall CGUnit_C::SetAttackerAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo, /*<regrel ebp+0xc>*/ /*|0x4|*/ int processNow);
  void __thiscall AddDamageTimer(unsigned __int64, enum VICTIMSTATES, int, unsigned int, float, int, int);
  void __thiscall CGUnit_C::CheckPendingThrownWeaponReattach(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char force);
  int __thiscall ShouldReattachThrownWeapon();
  void __thiscall SetReattachThrownWeapon(int);
  unsigned int __thiscall GetCurrentBaseAnimState();
  unsigned int __thiscall GetCurrentTorsoAnimState();
  unsigned int __thiscall GetCurrentBaseAnim();
  unsigned int __thiscall CGUnit_C::GetCurrentTorsoAnim();
  unsigned int __thiscall GetFlags();
  int __thiscall GotRangedWeaponRelease();
  unsigned int __thiscall CGUnit_C::ChooseAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int state);
  int __thiscall CGUnit_C::CurrentAnimIncludesHit();
  unsigned int __thiscall CGUnit_C::GetAttackerAnimEx(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct VirtualItemInfo* itemInfo);
  unsigned int __thiscall CGUnit_C::DetermineAttackerSequence(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand);
  unsigned int __thiscall CGUnit_C::DetermineParrySequence();
  class CreatureSoundDataRec* __thiscall CGUnit_C::GetSoundData();
  class CreatureSoundDataRec* __thiscall CGUnit_C::GetMountSoundDataRec();
  void __thiscall CGUnit_C::HandleCombatAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long value, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::HandlePlayStandSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long code, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* eventName);
  void __thiscall CGUnit_C::FootstepAnimEventHit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ int isLeftFoot);
  void __thiscall CGUnit_C::HandleFootstepAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::HandleFootfallAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::PlayFidgetSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fidgetNumber);
  void __thiscall CGUnit_C::SetupFootprints();
  int __thiscall CGUnit_C::IsSplashing(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGUnit_C::MarkSwimAnimations();
  void __thiscall CGUnit_C::MarkFootstepAnimations(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::QueryModelStats();
  void __thiscall CGUnit_C::QueryMountModelStats();
  class CGUnit_C& __thiscall operator=(class CGUnit_C&);
  unsigned char __thiscall CGUnit_C::SetSpellPreCastingAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum ANIMENUMERATION anim);
  unsigned char __thiscall CGUnit_C::SetSpellCastingAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum ANIMENUMERATION anim, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int effectKit, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int soundID, /*<regrel ebp+0x14>*/ /*|0x4|*/ int camShakeID, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum ANIMENUMERATION& finalAnim);
  void __thiscall CGUnit_C::ClearSpellCastAnimInfo();
  void __thiscall CGUnit_C::SetSpellImpactKit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellVisualKitRec* impactKit);
  class SpellVisualKitRec* __thiscall CGUnit_C::GetRangedSpellAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char castKit);
  void __thiscall CGUnit_C::HandleCastAnimEvent();
  void __thiscall CGUnit_C::OnAuraChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int previousValue);
  void __thiscall CGUnit_C::SetAuraMirrorHandlers();
  void __thiscall CGUnit_C::UnsetAuraMirrorHandlers();
  void __thiscall CGUnit_C::SetAuraMirrorHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (handler*)(unsigned __int64, unsigned int, unsigned int, void*, void*));
  void __thiscall CGUnit_C::UnsetAuraMirrorHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (handler*)(unsigned __int64, unsigned int, unsigned int, void*, void*));
  void __thiscall CGUnit_C::RemoveAuraEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int previousSpell);
  void __thiscall CGUnit_C::AddAuraEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char startNow);
  void __thiscall CGUnit_C::RemoveAuraVisual(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum UNITEFFECTATTACHPPOINT attach);
  void __thiscall CGUnit_C::MaybeAttachAura(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum UNITEFFECTATTACHPPOINT attach, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int effect, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int spellID, /*<regrel ebp+0x14>*/ /*|0x4|*/ int priority, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char permanent);
  void __thiscall CGUnit_C::FinishAuraDecays();
  unsigned char __thiscall CGUnit_C::IsSpellAuraAnimActive(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& anim);
  unsigned char __thiscall CGUnit_C::IsSpellChannelAnimActive(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& anim);
  struct ACTIVEAURAINFO* __thiscall CGUnit_C::FindActiveAuraInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot);
  void __thiscall CGUnit_C::RefreshAuraVisuals();
  void __thiscall CGUnit_C::AddPendingShapeshiftEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ int oldSpell);
  void __thiscall CGUnit_C::AddKitAuras(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellVisualKitRec* kitRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SpellRec* spellRec);
  void __thiscall ClearChannelAuraInfo();
  void __thiscall CGUnit_C::UpdateMovementAnimSpeed(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forMount, /*<regrel ebp+0xc>*/ /*|0x4|*/ int currentState);
  void __thiscall CGUnit_C::PerformLevelUpAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  void __thiscall CGUnit_C::CheckLevelUpAnimFlag(/*<regrel ebp+0x8>*/ /*|0x4|*/ int oldState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int newState);
  void __thiscall CGUnit_C::SetRangedWeaponPullAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ int duration);
  void __thiscall CGUnit_C::SetRangedWeaponReleaseAnim();
  void __thiscall CGUnit_C::ThrownMissileReleased();
  void __thiscall CGUnit_C::AttachVirtualComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char deferApply);
  void __thiscall CGUnit_C::AttachVirtualMonsterWeapons();
  void __thiscall CGUnit_C::VirtualComponentChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int oldValue);
  void __thiscall CGUnit_C::DetachVirtualComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int vslot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char defer, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char removeRecord);
  void __thiscall SetDebugPathPosition(class NTempest::C3Vector&);
  void __thiscall CGUnit_C::RenderDebugPathing();
  void __thiscall CGUnit_C::InitializeUnitName();
  void __thiscall CGUnit_C::ShutdownWorldName();
  void __thiscall CGUnit_C::UpdatePlayerNameWorldText();
  void __thiscall CGUnit_C::UpdatePlayerNameColor();
  void __thiscall CGUnit_C::TriggerPlayerNameUpdate();
  char* __thiscall CGUnit_C::GetUnitName();
  char* __thiscall CGUnit_C::GetUnitTitle();
  void __thiscall CGUnit_C::AddWorldDamageText(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int damage, /*<regrel ebp+0xc>*/ /*|0x4|*/ int normalCombatDamage);
  void __thiscall CGUnit_C::AddWorldCritText(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int damage, /*<regrel ebp+0xc>*/ /*|0x4|*/ int normalCombatDamage);
  void __thiscall CGUnit_C::AddWorldText(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MISS_REASON reason);
  void __thiscall CGUnit_C::AddWorldText(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WORLDTEXTMISSTYPE type);
  void __thiscall CGUnit_C::AddWorldXPGainText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int xpGain);
  void __thiscall CGUnit_C::PlayerNameVisibilityChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ int nameVisible);
  void __thiscall CGUnit_C::StoreXPGain(/*<regrel ebp+0x8>*/ /*|0x4|*/ int XP);
  void __thiscall CGUnit_C::PickNextRunHandler();
  void __thiscall CGUnit_C::SpellAnimEndHandler();
  void __thiscall CGUnit_C::RangedPrecastEndHandler();
  int __thiscall CGUnit_C::SetCastingSpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char force, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char precastAnimSuccessful);
  int __thiscall GetCastingSpell();
  void __thiscall CGUnit_C::KillSpellLoopedSound();
  void __thiscall CGUnit_C::KillCreatureLoopSound();
  void __thiscall CGUnit_C::InitializeLoopSound();
  enum UNITEFFECTSPECIALS __thiscall CGUnit_C::DetermineBreathEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* duration);
  void __thiscall CGUnit_C::BreathHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forceOnMount);
  void __thiscall CGUnit_C::ProcessBreathParticles(/*<regrel ebp+0x8>*/ /*|0x4|*/ int currentTime);
  struct HMODEL__* __thiscall CGUnit_C::GetMountedModel();
  struct HMODEL__* __thiscall CGUnit_C::DuplicateCharacterModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CGUnit_C::ClearMountAnimState();
  void __thiscall CGUnit_C::CreateUnitMount();
  void __thiscall CGUnit_C::DestroyUnitMount(/*<regrel ebp+0x8>*/ /*|0x4|*/ int doNotUpdateAnim);
  void __thiscall CGUnit_C::UpdateUnitMountInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ int immediate, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int changedFlags);
  int __thiscall UnitMountShowing();
  struct HMODEL__* __thiscall CGUnit_C::GetMountModel();
  void __thiscall CGUnit_C::DestroyFadingMounts();
  void __thiscall CGUnit_C::CreateFadeOutMount();
  void __thiscall CGUnit_C::CreateFadeInMount();
  void __thiscall CGUnit_C::UpdateFadingMountModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  void __thiscall CGUnit_C::OnMountCancelled();
  unsigned int __thiscall CGUnit_C::GetPlayerNameAttachmentPoint();
  void __thiscall CGUnit_C::OnCharmedChanged();
  void __thiscall CGUnit_C::ClearTempCharModel();
  void __thiscall CGUnit_C::SetTempCharModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::GetFootprintInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* id, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector* size);
  void __thiscall CGUnit_C::BuildSelectionRotMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  void __thiscall SetTexComponentLoaded(int);
  int __thiscall IsTexComponentLoaded();
  void __thiscall CGUnit_C::ReinitializeWeaponTrails();
  float __thiscall GetBaseRadius();
  void __thiscall CGUnit_C::UpdateBaseRadius(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGUnit_C::AddUnitNamePlate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  void __thiscall CGUnit_C::InsertSortedNamePlate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct NAMEPLATEDESC* desc);
  void __thiscall CGUnit_C::RemoveUnitNamePlate();
  int __thiscall CGUnit_C::PlayNPCSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NPCSOUNDS sound, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CGUnit_C::OnNPCHello();
  void __thiscall CGUnit_C::OnNPCGoodbye();
  void __thiscall CGUnit_C::DDADDLOG(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* file, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int line);
  void __thiscall CGUnit_C::DDDELLOG(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* file, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int line);
  void __thiscall CGUnit_C::DDGENLOG(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* file, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int line);
  void __thiscall CGUnit_C::DumpGeneralDeathHoldLog(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSLOG__* handle, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<char>* stringBuffer);
  void __thiscall CGUnit_C::DDWRITELOG(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer);
  int __thiscall CGUnit_C::DisplayInfoNeedsUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& playerModelChanged, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& wasPlayerModel);
  void __thiscall CGUnit_C::UpdateDisplayInfo();
  void __thiscall CGUnit_C::RefreshDataPointers();
  void __thiscall CGUnit_C::StandStateChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldState);
  void __thiscall CGUnit_C::NPCFlagChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldNPCFlags);
  void __thiscall CGUnit_C::SitSleepAnimEndHandler();
  int __thiscall CGUnit_C::IsPlayingSittingOrStandingAnim();
  int __thiscall CGUnit_C::PlayEmoteAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int flags);
  void __thiscall CGUnit_C::RequestTalkEmote(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TALKANIMATION talkAnim);
  unsigned int __thiscall CGUnit_C::GetEmoteAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID);
  void __thiscall CGUnit_C::SetEmoteQueue(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct QUESTGIVEREMOTENODE* list, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int num);
  void __thiscall CGUnit_C::SetEmoteQueue(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSStackArray<QUESTGIVEREMOTENODE>& list);
  int __thiscall CGUnit_C::SetEmoteAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int flags);
  void __thiscall CGUnit_C::ProcessEmoteQueue();
  int __thiscall CGUnit_C::EmoteProcType(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EMOTESPECPROCS& proc);
  void __thiscall CGUnit_C::RegisterScript();
  void __thiscall CGUnit_C::UnregisterScript();
  struct HCHARGEOSET__* __thiscall GetGeosetHandle();
  struct HTEXCOMPONENT__* __thiscall GetTexComponent();
  int __thiscall CGUnit_C::IsModelComponentable();
  unsigned int __thiscall CGUnit_C::GetDisplayRace();
  unsigned int __thiscall CGUnit_C::GetDisplaySex();
  char* __thiscall CGUnit_C::GetDisplayTextureName();
  unsigned int __thiscall CGUnit_C::SkinVariationID();
  unsigned int __thiscall CGUnit_C::FaceID();
  unsigned int __thiscall CGUnit_C::HairStyleID();
  unsigned int __thiscall CGUnit_C::HairColorID();
  unsigned int __thiscall CGUnit_C::FacialHairID();
  unsigned int* __thiscall GetPreferredGeosets();
  unsigned int __thiscall GetNumPreferredGeosets();
  void __thiscall CGUnit_C::InitPreferredGeosets();
  void __thiscall CGUnit_C::InitializeNPCItems();
  int __thiscall GetDisplayHealth();
  void __thiscall CGUnit_C::SignalDisplayHealthUpdate();
  void __thiscall CGUnit_C::UpdateDisplayHealth();
  int __thiscall CGUnit_C::IsInStandSitTransition();
  int __thiscall CGUnit_C::IsInSitSleepPosition();
  int __thiscall GetSpellLevel(int);
  class SkillLineAbilityRec* __thiscall CGUnit_C::LookupAbility(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  unsigned char __thiscall CGUnit_C::IsSpellKnown(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  unsigned char __thiscall CGUnit_C::IsSpellSuperceded(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  int __thiscall CGUnit_C::GetSpellSkillLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  void __thiscall CGUnit_C::SetImpactKitEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGUnit_C* target, /*<regrel ebp+0x10>*/ /*|0x4|*/ class SpellVisualKitRec* impactKit, /*<regrel ebp+0x14>*/ /*|0x4|*/ int immediate);
  void __thiscall CGUnit_C::PlayImpactKit(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SpellVisualKitRec* impactKit);
  void __thiscall CGUnit_C::CheckPendingImpactKit();
  void __thiscall CGUnit_C::AddSpellProcAuraEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ int auraslot, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SpellVisualKitRec* rec);
  void __thiscall CGUnit_C::AddSpellProcOneShotEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SpellVisualKitRec* rec);
  void __thiscall CGUnit_C::RemoveSpellProcAuraEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEAURAINFO* rec);
  struct SPELLEFFECTDESC* __thiscall CGUnit_C::FindSpellEffectProcDesc(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellVisualKitRec* rec);
  void __thiscall CGUnit_C::RefreshSpellProcEffects();
  void __thiscall CGUnit_C::UpdateSpellProcEffects(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime);
  void __thiscall CGUnit_C::AddEmissiveColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CGUnit_C::RemoveEmissiveColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CGUnit_C::SetStandStateAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ int standAnim);
  void __thiscall CGUnit_C::SetWalkStateAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ int walkAnim);
  int __thiscall CGUnit_C::GetStandStateAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  int __thiscall CGUnit_C::GetWalkStateAnim();
  class SpellVisualRec* __thiscall CGUnit_C::GetAppropriateSpellVisual(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SpellRec* spellRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SpellVisualRec& filled);
  struct SPELLEFFECTDESC* __thiscall CGUnit_C::GetActiveEffect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >& list);
  void __thiscall CGUnit_C::AddHitAnimHolds(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSStackArray<unsigned __int64>& targets);
  void __thiscall CGUnit_C::CheckPendingSpellAnimHits();
  void __thiscall CGUnit_C::SpellAnimHit(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  void __thiscall CGUnit_C::InternalProcessSpellProcEffects(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SPELLPROC_ACTION action, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  void __thiscall CGUnit_C::OnDynamicFlagsChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldValue);
  void __thiscall CGUnit_C::OnChannelSpellChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldSpell);
  void __thiscall CGUnit_C::ClearSavedChannelSpellTargets();
  int __thiscall GetSavedChannelSpellID();
  class TSGrowableArray<unsigned __int64>& __thiscall GetSavedChannelSpellTargets();
  unsigned char __thiscall IsBeingStalked();
  unsigned char __thiscall GetLootPermission();
  void __thiscall CGUnit_C::DrawBowString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos);
  void __thiscall CGUnit_C::ShowHandArrow(/*<regrel ebp+0x8>*/ /*|0x4|*/ int show);
  void __thiscall SetShowHandArrowFlag(int);
  unsigned char __thiscall GetShowingHandArrow();
  void __thiscall SetShowingHandArrowFlag(int);
  void __thiscall SetAmmoDisplay(unsigned int, unsigned int);
  struct HMODEL__* __thiscall CGUnit_C::GetRangedWeaponModel();
  void __thiscall CGUnit_C::ClearRangedStandTimer();
  void __thiscall CGUnit_C::OnRangedStandTimer();
  void __thiscall CGUnit_C::SetRangedStandTimer();
  void __thiscall CGUnit_C::AddObjectComponentBySlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ int invSlot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int displayID, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inventoryType, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char forceAlternate, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char deferApply, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char sheathe, /*<regrel ebp+0x20>*/ /*|0x4|*/ int sheathedAttachmentPoint, /*<regrel ebp+0x24>*/ /*|0x1|*/ unsigned char showHidden);
  struct ACTIVEATTACHMENTINFO* __thiscall CGUnit_C::CreateAttachmentInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ int invSlot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int displayID, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inventoryType, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char forceAlternate, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char sheathe, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int sheathedAttachmentPoint, /*<regrel ebp+0x20>*/ /*|0x1|*/ unsigned char showHidden);
  void __thiscall CGUnit_C::RemoveObjectComponentByInvSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ int invSlot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char deferDeleteFromModel, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char removeRecord);
  unsigned char __thiscall CGUnit_C::SheatheObjComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char sheathe);
  void __thiscall CGUnit_C::ClearActiveAttachmentInfo();
  void __thiscall CGUnit_C::SetAttachmentHidden(/*<regrel ebp+0x8>*/ /*|0x4|*/ int attachmentSlot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char hide);
  unsigned char __thiscall CGUnit_C::ApplyAttachmentInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* characterModel, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char sheathe, /*<regrel ebp+0x10>*/ /*|0x4|*/ int attachmentSlot, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char force);
  unsigned char __thiscall CGUnit_C::UpdateVisibilitySlots(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* characterModel, /*<regrel ebp+0xc>*/ /*|0x4|*/ int aSlot, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ACTIVEATTACHMENTINFO**& found, /*<regrel ebp+0x14>*/ /*|0x4|*/ int displayID, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char deferApply);
  unsigned char __thiscall CGUnit_C::WeaponAttached(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum COMBATHAND hand);
  void __thiscall CGUnit_C::ClearWeaponTrailHandles();
  void __thiscall CGUnit_C::ClearDeferredAttachment(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* charModel, /*<regrel ebp+0xc>*/ /*|0x4|*/ int slot);
  void __thiscall CGUnit_C::RefreshAttachmentInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* theModel);
  void __thiscall CGUnit_C::ReinitializePaperdollModel();
  void __thiscall CGUnit_C::CreatePaperdollModel();
  struct HMODEL__* __thiscall CGUnit_C::GetPaperDollModel(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char duplicateModel);
  void __thiscall CGUnit_C::DestroyPaperdollModel();
  void __thiscall CGUnit_C::CheckDeferredSheathing();
  void __thiscall CGUnit_C::SetSheatheReason(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SHEATHEREASONS reason, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char on, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char suppressSound);
  void __thiscall CGUnit_C::SheatheOrUnsheatheItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SHEATHEREASONS reason, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char sheathe, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char playSound);
  void __thiscall CGUnit_C::MaybeStartSheatheAnim();
  void __thiscall CGUnit_C::DisableWeaponTrails();
  void __thiscall CGUnit_C::HandleSheatheAnimEvent(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char clearSheatheAnim, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char suppressSound);
  void __thiscall CGUnit_C::SheatheAnimEndHandler();
  unsigned char __thiscall IsItemSwapFlagSet();
  void __thiscall SetItemSwapFlag(unsigned char);
  void __thiscall CGUnit_C::SetWeaponMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WEAPONMODE mode);
  void __thiscall CGUnit_C::WeaponModeChanged();
  void __thiscall CGUnit_C::UpdateSheatheRangedReasons(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char suppressSound);
  void __thiscall CGUnit_C::HandlePrecastStart(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char precast);
  void __thiscall CGUnit_C::HandlePrecastStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char force);
  unsigned char __thiscall CGUnit_C::SetSheathingSequence();
  void __thiscall CGUnit_C::HandleRemotePlayerSheathing();
  void __thiscall CGUnit_C::HandleLocalPlayerSheathing();
  unsigned char __thiscall CGUnit_C::SheatheAnimPlaying();
  unsigned char __thiscall SheatheAnimEventEncountered();
  void __thiscall SetSheatheEventEncountered(unsigned char);
  void __thiscall CGUnit_C::ClearTrackingTarget(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char snapToTargetOnClear);
  void __thiscall CGUnit_C::SaveTrackingTarget(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 target, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum TRACKTYPE type, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char snapToTargetOnClear);
  unsigned __int64 __thiscall CGUnit_C::GetTrackingTarget();
  unsigned char __thiscall CGUnit_C::TrackingTargetMoving();
  void __thiscall CGUnit_C::HandleFollowTarget();
  void __thiscall CGUnit_C::OnMovementInitiated(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char facingOnly);
  void __thiscall CGUnit_C::OnMoveStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forward);
  void __thiscall CGUnit_C::OnMoveStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnStrafeStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CGUnit_C::OnStrafeStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnTurnStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CGUnit_C::OnTurnStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnSetFacingLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::OnSetRawFacingLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CGUnit_C::OnPitchStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int up);
  void __thiscall CGUnit_C::OnPitchStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnSetPitchLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float pitch);
  void __thiscall CGUnit_C::OnJumpLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnSwimStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnSwimStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CGUnit_C::OnRunSpeedChangeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum NETMESSAGE msgID, /*<regrel ebp+0x10>*/ /*|0x4|*/ float speed);
  void __thiscall CGUnit_C::OnWalkSpeedChangeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float speed);
  void __thiscall CGUnit_C::OnSwimSpeedChangeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum NETMESSAGE msgID, /*<regrel ebp+0x10>*/ /*|0x4|*/ float speed);
  void __thiscall CGUnit_C::OnAllSpeedChangeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float speed);
  void __thiscall CGUnit_C::OnTurnRateChangeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float rate);
  void __thiscall CGUnit_C::OnSetRunModeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int run);
  void __thiscall CGUnit_C::ToggleRunModeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  unsigned char __thiscall CGUnit_C::IsShapeShifted();
  void __thiscall CGUnit_C::AttackUnit(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CGUnit_C* newVictim);
  void __thiscall CGUnit_C::OnCombatModeTimer();
  void __thiscall CGUnit_C::ClearFishingObject();
  void __thiscall CGUnit_C::ProcessChannelObject();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::Disable(/*<regrel ebx+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::PostReenable();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::IsSolidSelectable();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::IsSolidCollidable();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::CanHighlight();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::CanBeTargetted();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::OnLeftClick();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::OnRightClick();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGUnit_C::GetObjectName();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::ShouldFadeIn();
  virtual /*<vtableoff 0x98>*/ void __thiscall CGUnit_C::GetAFKText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x9c>*/ void __thiscall CGUnit_C::GetDNDText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0xa0>*/ void __thiscall CGUnit_C::GetGMText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0xa4>*/ unsigned __int64 __thiscall CGUnit_C::GetLocalTarget();
  virtual /*<vtableoff 0xa8>*/ void __thiscall CGUnit_C::HandleSpellEventSound();
  virtual /*<vtableoff 0xac>*/ void __thiscall CGUnit_C::CombatLoggingFlagChanged();
  virtual /*<vtableoff 0xb0>*/ unsigned __int64 __thiscall CGUnit_C::GetUnitBeingLooted();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vec);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGUnit_C::GetPosition();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGUnit_C::GetFacing();
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGUnit_C::GetGroundNormal();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::GetWorldMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix* worldMatrix);
  virtual /*<vtableoff 0xb4>*/ void __thiscall CGUnit_C::StopAttack();
  virtual /*<vtableoff 0xb8>*/ void __thiscall CGUnit_C::OnAttackStart(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0xbc>*/ void __thiscall CGUnit_C::OnAttackStop(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 previousTarget, /*<regrel ebp+0x10>*/ /*|0x4|*/ int nowDead);
  virtual /*<vtableoff 0xc0>*/ void __thiscall CGUnit_C::OnDeath();
  virtual /*<vtableoff 0xc4>*/ void __thiscall CGUnit_C::OnDeathAnimate();
  virtual /*<vtableoff 0xc8>*/ void __thiscall CGUnit_C::OnGetAttacked(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 attacker);
  virtual /*<vtableoff 0xcc>*/ void __thiscall CGUnit_C::OnBadAttackFacing(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victimGUID);
  virtual /*<vtableoff 0xd0>*/ void __thiscall CGUnit_C::OnBadAttackTarget(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0xd4>*/ void __thiscall CGUnit_C::OnBadAttackPosition(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victimGUID, /*<regrel ebp+0x10>*/ /*|0x4|*/ float range);
  virtual /*<vtableoff 0xd8>*/ void __thiscall CGUnit_C::OnNotStanding(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  virtual /*<vtableoff 0xdc>*/ void __thiscall CGUnit_C::UnitHit(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum VICTIMSTATES __formal, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 __formal);
  virtual /*<vtableoff 0xe0>*/ void __thiscall CGUnit_C::OnAttackerStateChange(/*<regrel ebx+0x8>*/ /*|0x4|*/ struct ATTACKROUNDINFO& roundInfo);
  virtual /*<vtableoff 0xe4>*/ void __thiscall CGUnit_C::HandleMirrorTimerDamage(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct MIRRORTIMERDAMAGE& log);
  virtual /*<vtableoff 0xe8>*/ int __thiscall CGUnit_C::QueueAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum ANIMQUEUETYPE type, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct ATTACKROUNDINFO* roundInfo);
  virtual /*<vtableoff 0xec>*/ void __thiscall CGUnit_C::ProcessDiscardedAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMQUEUENODE* node, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char doNotProcess);
  virtual /*<vtableoff 0xf0>*/ void __thiscall CGUnit_C::ProcessAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMQUEUENODE* node);
  virtual /*<vtableoff 0xf4>*/ void __thiscall CGUnit_C::PlayUnitSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum UNITSOUNDTYPE soundType, /*<regrel ebp+0xc>*/ /*|0x4|*/ int alwaysPlay);
  virtual /*<vtableoff 0xf8>*/ void __thiscall CGUnit_C::PlayFoleySound();
  virtual /*<vtableoff 0xfc>*/ unsigned int __thiscall CGUnit_C::GetImpactType();
  virtual /*<vtableoff 0x100>*/ struct VirtualItemInfo* __thiscall CGUnit_C::GetDefendingItem();
  virtual /*<vtableoff 0x104>*/ void __thiscall CGUnit_C::PlayDeathThudCameraShake();
  virtual /*<vtableoff 0x108>*/ void __thiscall CGUnit_C::LootAnimEndHandler();
  virtual /*<vtableoff 0x10c>*/ void __thiscall CGUnit_C::RestoreUnit();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGUnit_C::GetModelFileName();
  virtual /*<vtableoff 0x110>*/ void __thiscall CGUnit_C::UpdateBaseAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  virtual /*<vtableoff 0x110>*/ void __thiscall CGUnit_C::UpdateBaseAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  virtual /*<vtableoff 0x114>*/ void __thiscall CGUnit_C::StartSpellFizzleTimer(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int castingTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ int animSet);
  virtual /*<vtableoff 0x118>*/ void __thiscall CGUnit_C::SetTorsoAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x11c>*/ void __thiscall CGUnit_C::SetBaseAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x120>*/ unsigned int __thiscall CGUnit_C::DetermineWoundSequence();
  virtual /*<vtableoff 0x124>*/ void __thiscall CGUnit_C::OnFlagChanged(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned int oldFlags);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::GetSelectionHighlightColor(/*<regrel ebx+0x8>*/ /*|0x4|*/ class NTempest::CImVector* outPtr);
  virtual /*<vtableoff 0x128>*/ struct VirtualItemInfo* __thiscall CGUnit_C::GetVirtualItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char ignoreDisarmFlag);
  virtual /*<vtableoff 0x12c>*/ int __thiscall CGUnit_C::GetVirtualItemDisplayID(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  virtual /*<vtableoff 0x130>*/ int __thiscall CGUnit_C::ShouldRenderUnitName(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mode);
  virtual /*<vtableoff 0x134>*/ void __thiscall CGUnit_C::CommitTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  virtual /*<vtableoff 0x138>*/ unsigned int __thiscall CGUnit_C::UpdateUnitNameString(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned int localPlayerFlags, /*<regrel ebx+0xc>*/ /*|0x4|*/ unsigned int otherUnitsFlags, /*<regrel ebx+0x10>*/ /*|0x4|*/ char* buffer, /*<regrel ebx+0x14>*/ /*|0x4|*/ unsigned int bufferSize);
  virtual /*<vtableoff 0x13c>*/ void __thiscall CGUnit_C::OnPickNextStandHandler();
  virtual /*<vtableoff 0x0>*/ struct HMODEL__* __thiscall CGUnit_C::GetCharacterModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* mountedPtr);
  virtual /*<vtableoff 0x140>*/ float __thiscall CGUnit_C::GetMountScale();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::UpdatePlayerName();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::OnSpecialMountAnim();
  virtual /*<vtableoff 0x144>*/ void __thiscall CGUnit_C::OnMount();
  virtual /*<vtableoff 0x148>*/ void __thiscall CGUnit_C::OnDismount();
  virtual /*<vtableoff 0x14c>*/ unsigned char __thiscall CGUnit_C::CanBeMounted();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::UpdateModelLoadStatus();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::UpdateAttachmentLoadStatus();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::UpdateTexComponentLoadStatus();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGUnit_C::ShouldRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long worldStatus);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::UpdateRenderFacing();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGUnit_C::GetRenderFacing();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::PreRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ int currentTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::PreAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::PostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::ObjectPostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& matrix, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGUnit_C::RenderTargetSelection();
  virtual /*<vtableoff 0x150>*/ void __thiscall CGUnit_C::CleanupUnitArtwork(/*<regrel ebp+0x8>*/ /*|0x4|*/ int playerModelChanged, /*<regrel ebp+0xc>*/ /*|0x4|*/ int wasPlayerModel);
  virtual /*<vtableoff 0x154>*/ void __thiscall CGUnit_C::ReinitializeUnitArtwork();
  virtual /*<vtableoff 0x158>*/ void __thiscall CGUnit_C::PostReinitializeArtwork();
  virtual /*<vtableoff 0x15c>*/ void __thiscall CGUnit_C::OnStandStateChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldState, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x160>*/ void __thiscall CGUnit_C::ChangeStandState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int standState);
  virtual /*<vtableoff 0x164>*/ void __thiscall CGUnit_C::SetEmoteState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int emoteID);
  virtual /*<vtableoff 0x0>*/ enum UNITAFFILIATION __thiscall CGUnit_C::GetGUIDAffiliation(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 unit);
  virtual /*<vtableoff 0x168>*/ int __thiscall CGUnit_C::GetSpellRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  virtual /*<vtableoff 0x16c>*/ unsigned char __thiscall CGUnit_C::GetDefenseSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& base, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& modifier);
  virtual /*<vtableoff 0x170>*/ unsigned char __thiscall CGUnit_C::GetAttackSkillRank(/*<regrel ebp+0x8>*/ /*|0x4|*/ int hand, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& base, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& modifier);
  virtual /*<vtableoff 0x174>*/ void __thiscall CGUnit_C::OnLevelChange();
  virtual /*<vtableoff 0x178>*/ float __thiscall CGUnit_C::GetBlockChance();
  virtual /*<vtableoff 0x17c>*/ float __thiscall CGUnit_C::GetDodgeChance();
  virtual /*<vtableoff 0x180>*/ float __thiscall CGUnit_C::GetParryChance();
  virtual /*<vtableoff 0x184>*/ int __thiscall CGUnit_C::GetSpellCastingTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID);
  virtual /*<vtableoff 0x188>*/ void __thiscall CGUnit_C::UpdateObjComponentVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGItem_C* __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct ItemEnchantment* __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x18c>*/ void __thiscall CGUnit_C::ClearItemVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEATTACHMENTINFO* __formal);
  virtual /*<vtableoff 0x190>*/ void __thiscall CGUnit_C::SetItemVisuals(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEATTACHMENTINFO* __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ class ItemVisualsRec* __formal, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char __formal);
  virtual /*<vtableoff 0x194>*/ void __thiscall CGUnit_C::SetLastWeaponModeSent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int mode);
};
// <size 0x9e0>

class COsSharedMemory {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ void* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_size;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned char m_opaqueData[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsSharedMemory::COsSharedMemory();
  void __thiscall COsSharedMemory::~COsSharedMemory();
  unsigned char __thiscall COsSharedMemory::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int size, /*<regrel ebp+0x10>*/ /*|0x4|*/ int mode);
  unsigned char __thiscall COsSharedMemory::ChangeAccess(/*<regrel ebp+0x8>*/ /*|0x4|*/ int newAccess);
  void __thiscall COsSharedMemory::Destroy();
  void* __thiscall Data();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class CStatus {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CStatus::STATUSENTRY,8> statusList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CStatus::Clear();
  int __thiscall CStatus::IsEmpty();
  void __thiscall CStatus::GetErrorStr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long bufchars, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum STATUS_TYPE minSeverity);
  unsigned int __thiscall CStatus::GetErrorStrLen(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum STATUS_TYPE minSeverity);
  char* __thiscall CStatus::GetErrorStrAlloc(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum STATUS_TYPE minSeverity);
  enum STATUS_TYPE __thiscall CStatus::GetHighestSeverity();
  void __thiscall CStatus(class CStatus&);
  void __thiscall CStatus();
  class CStatus& __thiscall operator=(class CStatus&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CStatus::~CStatus();
  virtual /*<vtableoff 0x4>*/ void __thiscall CStatus::Display();
  virtual /*<vtableoff 0xc>*/ void __thiscall CStatus::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus& source);
  virtual /*<vtableoff 0xc>*/ void __cdecl CStatus::Add(/*<regrel ebp+0xc>*/ /*|0x4|*/ enum STATUS_TYPE severity, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* format, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CStatus::STATUSENTRY* pnextstatus);
  virtual /*<vtableoff 0x10>*/ void __cdecl CStatus::Prepend(/*<regrel ebp+0xc>*/ /*|0x4|*/ enum STATUS_TYPE severity, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* format, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CStatus::STATUSENTRY* pnextstatus);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class CGObject_C : class CGObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_renderScale;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_highlightTypes;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_objectHeight;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned long m_worldObject;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int m_fadeStartTime;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_fadeDuration;
  /*<thisrel this+0x2c>*/ /*|0x1|*/ unsigned char m_alpha;
  /*<thisrel this+0x2d>*/ /*|0x1|*/ unsigned char m_startAlpha;
  /*<thisrel this+0x2e>*/ /*|0x1|*/ unsigned char m_endAlpha;
  /*<thisrel this+0x2f>*/ /*|0x1|*/ unsigned char m_maxAlpha;

  // base classes -----------------------------------
  // baseclass class CGObject
  // <base data offset+0x4>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGObject_C::Initialize();
  static void __fastcall CGObject_C::Shutdown();
  static void __fastcall CGObject_C::UpdateAllWorldObjects();
  static unsigned int __fastcall CGObject_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);

  // non-virtual functions --------------------------
  void __thiscall CGObject_C(class CGObject_C&);
  void __thiscall CGObject_C::CGObject_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGObject_C::~CGObject_C();
  void __thiscall CGObject_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGObject_C::SetTypeID(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum OBJECT_TYPE_ID typeID);
  void __thiscall CGObject_C::PostInit(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall PostMovementUpdate();
  int __thiscall CGObject_C::IsPostInited();
  int __thiscall CGObject_C::IsInReenable();
  void __thiscall CGObject_C::AddWorldObject();
  void __thiscall CGObject_C::UpdateWorldObject();
  void __thiscall CGObject_C::RemoveWorldObject();
  unsigned long __thiscall GetWorldObject();
  int __thiscall CGObject_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGObject_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  float __thiscall GetObjectHeight();
  void __thiscall CGObject_C::SetAnimated(/*<regrel ebp+0x8>*/ /*|0x4|*/ int animated);
  struct HMODEL__* __thiscall GetObjectModel();
  void __thiscall CGObject_C::SetObjectModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  int __thiscall CGObject_C::AddAttachment(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* parent, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int parentIndex, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HMODEL__* child, /*<regrel ebp+0x14>*/ /*|0x4|*/ float scale);
  int __thiscall CGObject_C::ObjectModelSetSequence(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* modelName);
  int __thiscall CGObject_C::ObjectModelSetBoneSequence(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int objectID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CGObject_C::InitModelFileName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* modelFileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int size);
  void __thiscall CGObject_C::ReportMissingAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int sequence, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* modelName);
  void __thiscall CGObject_C::ReportMissingBone(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int objectID, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* modelName);
  void __thiscall CGObject_C::ReportMissingAttachment(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int objectID, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* modelName);
  void __thiscall CGObject_C::ReportMissingEventObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int objectID, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* modelName);
  void __thiscall CGObject_C::ReportNoAnimation(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* modelName);
  int __thiscall CGObject_C::ObjectIsRendering();
  void __thiscall CGObject_C::ObjectSetNotRendering();
  int __thiscall CGObject_C::IsDisabled();
  int __thiscall CGObject_C::IsObjectModelLoaded();
  int __thiscall CGObject_C::AreAttachmentsLoaded();
  void __thiscall CGObject_C::ReportMissingAnimObj(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* message, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int objectID, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* modelName);
  class CGObject_C& __thiscall operator=(class CGObject_C&);
  void __thiscall CGObject_C::HideHighlightType(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum HIGHLIGHTTYPE type);
  void __thiscall CGObject_C::ShowHighlightType(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum HIGHLIGHTTYPE type);
  float __thiscall GetRenderScale();
  void __thiscall SetRenderScale(float);
  void __thiscall CGObject_C::Animate();
  void __thiscall CGObject_C::Animate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& camRelativeMatrix);
  void __thiscall CGObject_C::UpdateObjectHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CGObject_C::SetCircleRenderStates();
  unsigned char __thiscall GetAlpha();
  void __thiscall SetMaxAlpha(unsigned char);
  void __thiscall CGObject_C::DoFade(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char alpha, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fadeTimeMs);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGObject_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x4>*/ void __thiscall CGObject_C::Reenable();
  virtual /*<vtableoff 0x8>*/ void __thiscall CGObject_C::PostReenable();
  virtual /*<vtableoff 0xc>*/ class CGBag_C* __thiscall CGObject_C::GetBag();
  virtual /*<vtableoff 0x14>*/ void __thiscall CGObject_C::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vec);
  virtual /*<vtableoff 0x14>*/ class NTempest::C3Vector __thiscall CGObject_C::GetPosition();
  virtual /*<vtableoff 0x18>*/ float __thiscall CGObject_C::GetFacing();
  virtual /*<vtableoff 0x1c>*/ float __thiscall CGObject_C::GetScale();
  virtual /*<vtableoff 0x20>*/ class NTempest::C3Vector __thiscall CGObject_C::GetGroundNormal();
  virtual /*<vtableoff 0x24>*/ struct HMODEL__* __thiscall CGObject_C::GetCharacterModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* mounted);
  virtual /*<vtableoff 0x28>*/ char* __thiscall GetModelFileName() = 0;
  virtual /*<vtableoff 0x2c>*/ int __thiscall CGObject_C::GetSelectionHighlightColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector* outPtr);
  virtual /*<vtableoff 0x30>*/ void __thiscall CGObject_C::RenderTargetSelection();
  virtual /*<vtableoff 0x34>*/ int __thiscall CGObject_C::UpdateModelLoadStatus();
  virtual /*<vtableoff 0x38>*/ int __thiscall CGObject_C::UpdateAttachmentLoadStatus();
  virtual /*<vtableoff 0x3c>*/ int __thiscall CGObject_C::UpdateTexComponentLoadStatus();
  virtual /*<vtableoff 0x40>*/ void __thiscall CGObject_C::PreRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ int currentTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  virtual /*<vtableoff 0x44>*/ void __thiscall CGObject_C::PreAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  virtual /*<vtableoff 0x48>*/ void __thiscall CGObject_C::PostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGWorldFrame* worldFrame);
  virtual /*<vtableoff 0x4c>*/ void __thiscall CGObject_C::GetWorldMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix* worldMatrix);
  virtual /*<vtableoff 0x50>*/ int __thiscall CGObject_C::ShouldRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long worldStatus);
  virtual /*<vtableoff 0x58>*/ void __thiscall CGObject_C::ObjectPostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& matrix, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  virtual /*<vtableoff 0x58>*/ void __thiscall CGObject_C::ObjectPostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float renderFacing, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  virtual /*<vtableoff 0x5c>*/ void __thiscall CGObject_C::UpdateRenderFacing();
  virtual /*<vtableoff 0x60>*/ float __thiscall CGObject_C::GetRenderFacing();
  virtual /*<vtableoff 0x64>*/ void __thiscall CGObject_C::OnSpecialMountAnim();
  virtual /*<vtableoff 0x68>*/ void __thiscall CGObject_C::UpdatePlayerName();
  virtual /*<vtableoff 0x6c>*/ int __thiscall CGObject_C::IsSolidSelectable();
  virtual /*<vtableoff 0x70>*/ int __thiscall CGObject_C::IsSolidCollidable();
  virtual /*<vtableoff 0x74>*/ int __thiscall CGObject_C::CanHighlight();
  virtual /*<vtableoff 0x78>*/ int __thiscall CGObject_C::CanBeTargetted();
  virtual /*<vtableoff 0x7c>*/ int __thiscall CGObject_C::FloatingTooltip();
  virtual /*<vtableoff 0x80>*/ void __thiscall CGObject_C::OnLeftClick();
  virtual /*<vtableoff 0x84>*/ void __thiscall CGObject_C::OnRightClick();
  virtual /*<vtableoff 0x88>*/ class NTempest::C34Matrix __thiscall CGObject_C::GetMatrix();
  virtual /*<vtableoff 0x8c>*/ int __thiscall CGObject_C::ShouldFadeIn();
  virtual /*<vtableoff 0x90>*/ char* __thiscall CGObject_C::GetObjectName();
  virtual /*<vtableoff 0x94>*/ int __thiscall CGObject_C::GetPageTextID(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (func*)(int, unsigned __int64&, void*, unsigned char));
};
// <size 0x30>

class CKeyFrameTrackBase {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CKeyFrame* m_keyFrames;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_numKeyFrames;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_keyFrameSize;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class CArray<CKeySeq> m_indices;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_globalSeqId;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CKeyFrameTrackBase(class CKeyFrameTrackBase&);
  void __thiscall CKeyFrameTrackBase::CKeyFrameTrackBase();
  void __thiscall CKeyFrameTrackBase::~CKeyFrameTrackBase();
  unsigned int __thiscall TotalKeys();
  unsigned int __thiscall NumKeysThisSeq(unsigned int);
  unsigned int __thiscall NumKeysThisSeqSafe(unsigned int);
  void __thiscall SetGlobalSequenceId(unsigned int);
  void __thiscall CKeyFrameTrackBase::SetNumKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int numKeys, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int keySize);
  void __thiscall CKeyFrameTrackBase::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time);
  void __thiscall CKeyFrameTrackBase::SetSequenceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CArray<CAnimSequence>& seq);
  unsigned int __thiscall CKeyFrameTrackBase::SetAnimTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CBaseStatus& sequence, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CKeyTrackStatus* keyStat, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct InterpInfo& interpData);
  int __thiscall CKeyFrameTrackBase::JustPastKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimSequence& seqShared, /*<regrel ebp+0x10>*/ /*|0x4|*/ int seqElapsed, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char sequenceId, /*<regrel ebp+0x18>*/ /*|0x4|*/ int seqIsNew, /*<regrel ebp+0x1c>*/ /*|0x4|*/ struct CKeyTrackStatus& prev, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CKeyTrackStatus& curr);
  int __thiscall SequenceNeverChanges();
  int __thiscall SequenceChanges();
  unsigned int __thiscall Bytes();
  struct CKeyFrame* __thiscall CKeyFrameTrackBase::NextKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyFrame* key);
  struct CKeyFrame* __thiscall CKeyFrameTrackBase::NextKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyFrame* key);
  unsigned int __thiscall FirstKeyId(unsigned int);
  unsigned int __thiscall NextKeyId(unsigned int, unsigned int);
  int __thiscall CKeyFrameTrackBase::JustPastKeyForward(/*<regrel ebp+0x8>*/ /*|0x4|*/ int elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimSequence& seqShared, /*<regrel ebp+0x10>*/ /*|0x4|*/ int seqElapsed, /*<regrel ebp+0x14>*/ /*|0x4|*/ int seqIsNew, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CKeyTrackStatus& prev, /*<regrel ebp+0x1c>*/ /*|0x4|*/ struct CKeyTrackStatus& curr);
  int __thiscall CKeyFrameTrackBase::JustPastKeyBackward(/*<regrel ebp+0x8>*/ /*|0x4|*/ int elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimSequence& seqShared, /*<regrel ebp+0x10>*/ /*|0x4|*/ int seqElapsed, /*<regrel ebp+0x14>*/ /*|0x4|*/ int seqIsNew, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CKeyTrackStatus& prev, /*<regrel ebp+0x1c>*/ /*|0x4|*/ struct CKeyTrackStatus& curr);
  unsigned int __thiscall LastKeyId(unsigned int);
  struct CKeyFrame* __thiscall CKeyFrameTrackBase::GetKeyFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int keyId);
  struct CKeyFrame* __thiscall CKeyFrameTrackBase::GetKeyFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int keyId);
  unsigned int __thiscall CKeyFrameTrackBase::TimeDiff(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyFrame& curr, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CKeyFrame& next, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int seqTime);
  unsigned int __thiscall KeyFrameSize();
  void __thiscall CKeyFrameTrackBase::ISetAnimTime(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char sequenceId, /*<regrel ebp+0xc>*/ /*|0x4|*/ int seqIsNew, /*<regrel ebp+0x10>*/ /*|0x4|*/ int milliseconds, /*<regrel ebp+0x14>*/ /*|0x4|*/ int endtime, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CKeyTrackStatus* keyStat);
  void __thiscall CKeyFrameTrackBase::ISetAnimTimeConstSeq(/*<regrel ebp+0x8>*/ /*|0x4|*/ int milliseconds, /*<regrel ebp+0xc>*/ /*|0x4|*/ int endtime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CKeyTrackStatus* keyStat);
  unsigned int __thiscall CKeyFrameTrackBase::FindKeyForTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int currSeq, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int currKeyId, /*<regrel ebp+0x10>*/ /*|0x4|*/ int targettime);
  unsigned int __thiscall CKeyFrameTrackBase::FindKeyForTimeConstSeq(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int currKeyId, /*<regrel ebp+0xc>*/ /*|0x4|*/ int targettime);
  class CKeyFrameTrackBase& __thiscall operator=(class CKeyFrameTrackBase&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class C3Color {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float b;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float g;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float r;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall C3Color::C3Color(/*<regrel ebp+0x8>*/ /*|0x4|*/ class C3Color& x);
  void __thiscall C3Color::C3Color(/*<regrel ebp+0x8>*/ /*|0x4|*/ float r, /*<regrel ebp+0xc>*/ /*|0x4|*/ float g, /*<regrel ebp+0x10>*/ /*|0x4|*/ float b);
  void __thiscall C3Color::C3Color();
  class C3Color& __thiscall operator+=(class C3Color&);
  class C3Color& __thiscall operator+=(float);
  class C3Color& __thiscall operator-=(class C3Color&);
  class C3Color& __thiscall operator-=(float);
  class C3Color& __thiscall operator*=(float);
  class C3Color& __thiscall operator/=(float);
  int __thiscall operator==(class C3Color&);
  int __thiscall operator!=(class C3Color&);

  // virtual functions ------------------------------
};
// <size 0xc>

class CGxLight {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<bitfield this+0x0>*/ /*|0x4|*/ int m_enabled:0:1;
  /*<bitfield this+0x0>*/ /*|0x4|*/ int m_isOmni:1:1;
  /*<thisrel this+0x4>*/ /*|0xc|*/ class NTempest::C3Vector m_dir;
  /*<thisrel this+0x10>*/ /*|0x4|*/ class NTempest::CImVector m_ambColor;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class NTempest::CImVector m_dirColor;
  /*<thisrel this+0x18>*/ /*|0x4|*/ class NTempest::CImVector m_specColor;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_ambIntensity;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_dirIntensity;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_specIntensity;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float m_constantAttenuation;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_linearAttenuation;
  /*<thisrel this+0x30>*/ /*|0x4|*/ float m_quadraticAttenuation;
  /*<thisrel this+0x34>*/ /*|0x4|*/ float m_attenStart;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float m_attenEnd;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxLight(class CGxLight&);
  void __thiscall CGxLight::CGxLight();
  class CGxLight& __thiscall CGxLight::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxLight& __that);
  void __thiscall CGxLight::~CGxLight();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class HASHKEY_CONSTSTRI : class HASHKEY_CONSTSTR  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class HASHKEY_CONSTSTR
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_CONSTSTRI::HASHKEY_CONSTSTRI(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  void __thiscall HASHKEY_CONSTSTRI::HASHKEY_CONSTSTRI();
  unsigned char __thiscall HASHKEY_CONSTSTRI::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  unsigned char __thiscall operator==(class HASHKEY_CONSTSTRI&);

  // virtual functions ------------------------------
};
// <size 0x4>

class HASHKEY_STRI : class HASHKEY_STR  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class HASHKEY_STR
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_STRI(char*);
  void __thiscall HASHKEY_STRI(class HASHKEY_STRI&);
  void __thiscall HASHKEY_STRI::HASHKEY_STRI();
  class HASHKEY_STRI& __thiscall operator=(class HASHKEY_STRI&);
  class HASHKEY_STRI& __thiscall HASHKEY_STRI::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  unsigned char __thiscall HASHKEY_STRI::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  unsigned char __thiscall operator==(class HASHKEY_STRI&);
  void __thiscall HASHKEY_STRI::~HASHKEY_STRI();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CMsgBuffer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_freeData;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_read;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_write;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned char* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMsgBuffer::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall Reserve(unsigned int);
  void __thiscall CMsgBuffer(unsigned int);
  void __thiscall ~CMsgBuffer();
  void __thiscall Reset();
  int __thiscall Bytes();
  unsigned int __thiscall GetReadPosition();
  void __thiscall SetReadPosition(unsigned int);
  unsigned int __thiscall GetWritePosition();
  void __thiscall SetWritePosition(unsigned int);
  unsigned char* __thiscall Data();
  void __thiscall SetData(unsigned char*, unsigned int, int);
  void __thiscall CMsgBuffer::AddChar(/*<regrel ebp+0x8>*/ /*|0x1|*/ char val);
  void __thiscall CMsgBuffer::AddUchar(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char val);
  void __thiscall CMsgBuffer::AddByte(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char val);
  void __thiscall CMsgBuffer::AddTchar(/*<regrel ebp+0x8>*/ /*|0x1|*/ char val);
  void __thiscall CMsgBuffer::AddTcharArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0x10>*/ /*|0x4|*/ int zeroExtra);
  void __thiscall CMsgBuffer::AddTcharString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str, /*<regrel ebp+0xc>*/ /*|0x4|*/ int compress);
  void __thiscall CMsgBuffer::AddShort(/*<regrel ebp+0x8>*/ /*|0x2|*/ short val);
  void __thiscall CMsgBuffer::AddUshort(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short val);
  void __thiscall CMsgBuffer::AddWord(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short val);
  void __thiscall CMsgBuffer::AddInt(/*<regrel ebp+0x8>*/ /*|0x4|*/ int val);
  void __thiscall CMsgBuffer::AddUint(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int val);
  void __thiscall CMsgBuffer::AddLong(/*<regrel ebp+0x8>*/ /*|0x4|*/ long val);
  void __thiscall CMsgBuffer::AddUlong(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long val);
  void __thiscall CMsgBuffer::AddDword(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long val);
  void __thiscall CMsgBuffer::AddLongLong(/*<regrel ebp+0x8>*/ /*|0x8|*/ __int64 val);
  void __thiscall CMsgBuffer::AddUlongLong(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 val);
  void __thiscall CMsgBuffer::AddFloat(/*<regrel ebp+0x8>*/ /*|0x4|*/ float val);
  void __thiscall CMsgBuffer::AddData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::AddData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::AddWordArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::AddDwordArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::AddUintArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::AddFloatArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ float* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall AddArray(unsigned int*, unsigned int);
  void __thiscall AddArray(float*, unsigned int);
  void __thiscall AddArray(unsigned long*, unsigned int);
  void __thiscall AddArray(unsigned short*, unsigned int);
  void __thiscall AddArray(unsigned char*, unsigned int);
  char __thiscall CMsgBuffer::GetChar();
  unsigned char __thiscall CMsgBuffer::GetUchar();
  unsigned char __thiscall CMsgBuffer::GetByte();
  char __thiscall CMsgBuffer::GetTchar();
  void __thiscall CMsgBuffer::GetTcharArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  unsigned int __thiscall CMsgBuffer::GetTcharStringBufferLength(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* wide);
  void __thiscall CMsgBuffer::GetTcharString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bufferLength, /*<regrel ebp+0x10>*/ /*|0x4|*/ int wide);
  short __thiscall CMsgBuffer::GetShort();
  unsigned short __thiscall CMsgBuffer::GetUshort();
  unsigned short __thiscall CMsgBuffer::GetWord();
  int __thiscall CMsgBuffer::GetInt();
  unsigned int __thiscall CMsgBuffer::GetUint();
  long __thiscall CMsgBuffer::GetLong();
  unsigned long __thiscall CMsgBuffer::GetUlong();
  unsigned long __thiscall CMsgBuffer::GetDword();
  __int64 __thiscall CMsgBuffer::GetLongLong();
  unsigned __int64 __thiscall CMsgBuffer::GetUlongLong();
  float __thiscall CMsgBuffer::GetFloat();
  void __thiscall CMsgBuffer::GetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ int count);
  void* __thiscall CMsgBuffer::GetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ int count);
  void __thiscall CMsgBuffer::GetWordArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::GetDwordArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::GetFloatArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ float* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CMsgBuffer::GetUintArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall GetArray(unsigned int*, unsigned int);
  void __thiscall GetArray(float*, unsigned int);
  void __thiscall GetArray(unsigned long*, unsigned int);
  void __thiscall GetArray(unsigned short*, unsigned int);
  void __thiscall GetArray(unsigned char*, unsigned int);
  void __thiscall __dflt_ctor_closure();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CDataAllocator {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long m_bytesPerData;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long m_dataPerBlock;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned long m_dataUsed;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CDataAllocator::Block* m_blockList;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct CDataAllocator::Data* m_dataList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CDataAllocator(class CDataAllocator&);
  void __thiscall CDataAllocator::CDataAllocator(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long bytesPerData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long dataPerBlock);
  void __thiscall CDataAllocator::~CDataAllocator();
  void __thiscall CDataAllocator::Clear(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineNumber);
  void* __thiscall CDataAllocator::GetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ int zero, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ int lineNumber);
  void __thiscall CDataAllocator::PutData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ int lineNumber);
  unsigned long __thiscall BytesPerData();
  unsigned long __thiscall DataPerBlock();
  unsigned long __thiscall DataUsed();
  class CDataAllocator& __thiscall operator=(class CDataAllocator&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CDataRecycler {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ long m_nodesRecyclable;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_nodesPerBlock;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CDataRecycler::NodeBlock* m_nodeBlockList;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct CDataRecycler::Node* m_nodeFullList;
  /*<thisrel this+0x14>*/ /*|0x4|*/ struct CDataRecycler::Node* m_nodeEmptyList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CDataRecycler(class CDataRecycler&);
  void __thiscall CDataRecycler::CDataRecycler(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodesPerBlock, /*<regrel ebp+0xc>*/ /*|0x4|*/ long maxNodes);
  void __thiscall CDataRecycler::GetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long& bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x14>*/ /*|0x4|*/ int lineNumber);
  void __thiscall CDataRecycler::PutData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x14>*/ /*|0x4|*/ int lineNumber);
  void __thiscall GetAndResizeData(unsigned long, void*&, unsigned long&, char*, int);
  class CDataRecycler& __thiscall operator=(class CDataRecycler&);
  void __thiscall CDataRecycler::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CDataRecycler::Node** list, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CDataRecycler::NodeBlock* nodeBlock);
  void __thiscall Link(struct CDataRecycler::NodeBlock**, struct CDataRecycler::NodeBlock*);
  void __thiscall Link(struct CDataRecycler::Node**, struct CDataRecycler::Node*);
  void __thiscall CDataRecycler::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ void** list, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* item, /*<regrel ebp+0x10>*/ /*|0x4|*/ int nextOffset);
  struct CDataRecycler::NodeBlock* __thiscall Unlink(struct CDataRecycler::NodeBlock**);
  struct CDataRecycler::Node* __thiscall Unlink(struct CDataRecycler::Node**);
  void* __thiscall CDataRecycler::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ void** list, /*<regrel ebp+0xc>*/ /*|0x4|*/ int nextOffset);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CDataRecycler::~CDataRecycler();
  virtual /*<vtableoff 0x4>*/ void __thiscall CDataRecycler::Clear();
  virtual /*<vtableoff 0x8>*/ void* __thiscall CDataRecycler::AllocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long allocBytes, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long* bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x14>*/ /*|0x4|*/ int lineNumber);
  virtual /*<vtableoff 0xc>*/ void* __thiscall CDataRecycler::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long allocBytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long* bytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x18>*/ /*|0x4|*/ int lineNumber);
  virtual /*<vtableoff 0x10>*/ void __thiscall CDataRecycler::FreeData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ int lineNumber);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x18>

class TRefCnt {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long m_refcnt;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall IncrRef();
  void __thiscall DecrRef();
  void __thiscall TRefCnt(class TRefCnt&);
  void __thiscall TRefCnt();
  class TRefCnt& __thiscall operator=(class TRefCnt&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall TRefCnt::DeleteSelf();
  virtual /*<vtableoff 0x4>*/ void __thiscall ~TRefCnt();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x8>

class CStringRep : class TSHashObject<CStringRep,HASHKEY_STR>,  class TRefCnt  {

  // static data ------------------------------------
  static /*<rva 0x4c4070>*/ /*|0x20|*/ class CStringRep s_nullRep;

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSHashObject<CStringRep,HASHKEY_STR>
  // <base data offset+0x8>

  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CStringRep(class CStringRep&);
  void __thiscall CStringRep();
  int __thiscall CStringRep::IsString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  int __thiscall operator==(char*);
  int __thiscall CStringRep::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStringRep& r);
  class CStringRep& __thiscall operator=(class CStringRep&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x8>*/ void __thiscall CStringRep::DecrRef();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CStringRep();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CStringManager : class TSHashTable<CStringRep,HASHKEY_STR>  {

  // static data ------------------------------------
  static /*<rva 0x4c40a4>*/ /*|0x4|*/ class CStringManager* s_stringManager;

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSHashTable<CStringRep,HASHKEY_STR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CStringManager* __fastcall CStringManager::Get();
  static void __fastcall CStringManager::DestroyManager();

  // non-virtual functions --------------------------
  void __thiscall CStringManager(class CStringManager&);
  void __thiscall CStringManager();
  class CStringRep& __thiscall CStringManager::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  class CStringRep& __thiscall CStringManager::Find(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  class CStringManager& __thiscall operator=(class CStringManager&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CStringManager::~CStringManager();
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class RCString : class TRefCnt  {

  // static data ------------------------------------
  static /*<rva 0x4c4090>*/ /*|0xc|*/ class RCString s_nullString;

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TRefCntPtr<CStringRep> m_rep;

  // base classes -----------------------------------
  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall RCString::Copy(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* source);
  void __thiscall RCString::Copy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class RCString& source);
  void __thiscall RCString::Free();
  class RCString __thiscall RCString::Cat(/*<regrel ebp+0x8>*/ /*|0x4|*/ class RCString* __$ReturnUdt, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* lstr);
  void __thiscall RCString(class RCString&);
  void __thiscall RCString(char*);
  class RCString& __thiscall operator=(class RCString*);
  class RCString& __thiscall operator=(class RCString&);
  class RCString& __thiscall operator=(char*);
  int __thiscall RCString::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  int __thiscall RCString::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class RCString& r);
  class RCString& __thiscall RCString::operator+=(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* rstr);
  class RCString& __thiscall RCString::operator+=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class RCString& r);
  class RCString __thiscall RCString::SubString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class RCString* __$ReturnUdt, /*<regrel ebp+0xc>*/ /*|0x2|*/ short start);
  char* __thiscall RCString::GetString();
  char* __thiscall operator const char *();
  void __thiscall RCString::Get(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buf, /*<regrel ebp+0xc>*/ /*|0x2|*/ short bufSize);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall RCString::~RCString();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class SCritSect {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ unsigned char m_opaqueData[24];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class SCritSect& __thiscall operator=(class SCritSect&);
  void __thiscall SCritSect::SCritSect();
  void __thiscall SCritSect(class SCritSect&);
  void __thiscall SCritSect::~SCritSect();
  void __thiscall SCritSect::Enter();
  void __thiscall SCritSect::Leave();
  int __thiscall SCritSect::TryEnter();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class HASHKEY_STR { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* m_str;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_STR(char*);
  void __thiscall HASHKEY_STR(class HASHKEY_STR&);
  void __thiscall HASHKEY_STR::HASHKEY_STR();
  void __thiscall HASHKEY_STR::~HASHKEY_STR();
  class HASHKEY_STR& __thiscall HASHKEY_STR::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  class HASHKEY_STR& __thiscall operator=(class HASHKEY_STR&);
  unsigned char __thiscall operator==(char*);
  unsigned char __thiscall operator==(class HASHKEY_STR&);
  char* __thiscall GetString();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CHandleObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_refcount;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CHandleObject(class CHandleObject&);
  void __thiscall CHandleObject();
  class CHandleObject& __thiscall operator=(class CHandleObject&);
  void __thiscall DecRef();
  void __thiscall IncRef();
  int __thiscall GetRefCount();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CHandleObject();
  virtual /*<vtableoff 0x4>*/ char* __thiscall CHandleObject::GetObjectName();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x8>

class HASHKEY_NONE { // +

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned char __thiscall HASHKEY_NONE::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class HASHKEY_NONE& __formal);

  // virtual functions ------------------------------
};
// <size 0x1>

class CObserver : class TRefCnt  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class EventRegistry* m_pEventRegistry;

  // base classes -----------------------------------
  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class EventRegistry* __thiscall CObserver::GetRegistry(/*<regrel ebp+0x8>*/ /*|0x4|*/ int create);
  void __thiscall CObserver(class CObserver&);
  void __thiscall CObserver();
  void __thiscall CObserver::UnregisterCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (callback*)(class CEvent&, void*));
  void __thiscall CObserver::UnregisterEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CObserver* pObserver);
  int __thiscall CObserver::IsEventRegistered(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id);
  int __thiscall CObserver::IsEventRegisteredBy(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CObserver* pObserver);
  void __thiscall CObserver::ClearRegistry();
  struct EventReg* __thiscall CObserver::GetEventReg(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int eventId, /*<regrel ebp+0xc>*/ /*|0x4|*/ int create);
  class CObserver& __thiscall operator=(class CObserver&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CObserver::~CObserver();
  virtual /*<vtableoff 0x8>*/ void __thiscall CObserver::RegisterCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (callback*)(class CEvent&, void*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* param);
  virtual /*<vtableoff 0xc>*/ void __thiscall CObserver::RegisterEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ int expectedEventId, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CObserver* pObserver);
  virtual /*<vtableoff 0x10>*/ int __thiscall CObserver::OnEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CEvent& event);
  virtual /*<vtableoff 0x18>*/ int __thiscall CObserver::DispatchEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CEvent& event);
  virtual /*<vtableoff 0x18>*/ int __thiscall CObserver::DispatchEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CEvent& event);
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class EventRegistry : class TSHashTable<EventReg,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSHashTable<EventReg,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall EventRegistry(class EventRegistry&);
  void __thiscall EventRegistry();
  class EventRegistry& __thiscall operator=(class EventRegistry&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall EventRegistry::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EventReg* pReg);
  virtual /*<vtableoff 0x0>*/ struct EventReg* __thiscall EventRegistry::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<EventReg,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~EventRegistry();
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class CEvent : class TRefCnt  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int id;
  /*<thisrel this+0xc>*/ /*|0x4|*/ void* param;

  // base classes -----------------------------------
  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CEvent(class CEvent&);
  void __thiscall CEvent(unsigned int, void*);
  unsigned int __thiscall Id();
  void __thiscall SetId(unsigned int);
  void* __thiscall GetParam();
  void __thiscall SetParam(void*);
  class CEvent& __thiscall operator=(class CEvent&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class CInputObserver : class CObserver  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CObserver
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall CInputObserver::OnChar(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_CHAR* pCharEvtData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnKeyDown(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnKeyRepeat(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnKeyUp(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseDown(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseUp(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseMove(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseMoveRelative(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseModeChanged(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnMouseWheel(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnIme(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_IME* pImeData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnWindowSize(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_SIZE* pSizeData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CInputObserver::OnWindowFocus(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_FOCUS* pFocusData, /*<register edx>*/ /*|0x4|*/ void* param);
  static class CInputObserver* __fastcall CInputObserver::GetInputObserver();
  static void __fastcall CInputObserver::RegisterKeyDown(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterKeyDown(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterKeyDownRepeating(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterKeyDownRepeating(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterKeyUp(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterKeyUp(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterChar(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterChar(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseDown(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseDown(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseUp(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseUp(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseMove(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseMove(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseMoveRelative(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseMoveRelative(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseModeChanged(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseModeChanged(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterMouseWheel(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterMouseWheel(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterIme(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterIme(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterWindowSize(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterWindowSize(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::RegisterWindowFocus(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::UnregisterWindowFocus(/*<register ecx>*/ /*|0x4|*/ class CObserver* pObs);
  static void __fastcall CInputObserver::SetMouseMode(/*<register ecx>*/ /*|0x4|*/ enum MOUSEMODE mode, /*<register edx>*/ /*|0x4|*/ unsigned int holdButton);

  // non-virtual functions --------------------------
  void __thiscall CInputObserver(class CInputObserver&);
  void __thiscall CInputObserver();
  class CInputObserver& __thiscall operator=(class CInputObserver&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CInputObserver();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CCharEvent : class CEvent,  struct EVENT_DATA_CHAR  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_CHAR
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall IsShiftDown();
  static int __fastcall IsControlDown();
  static int __fastcall IsAltDown();

  // non-virtual functions --------------------------
  void __thiscall CCharEvent(class CCharEvent&);
  void __thiscall CCharEvent(struct EVENT_DATA_CHAR&);
  void __thiscall CCharEvent();
  class CCharEvent& __thiscall operator=(class CCharEvent&);
  class CCharEvent& __thiscall operator=(struct EVENT_DATA_CHAR&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CCharEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x1c>

class CKeyEvent : class CEvent,  struct EVENT_DATA_KEY  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_KEY
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall IsShiftDown();
  static int __fastcall IsControlDown();
  static int __fastcall IsAltDown();

  // non-virtual functions --------------------------
  void __thiscall CKeyEvent(class CKeyEvent&);
  void __thiscall CKeyEvent(struct EVENT_DATA_KEY&);
  void __thiscall CKeyEvent();
  class CKeyEvent& __thiscall operator=(class CKeyEvent&);
  class CKeyEvent& __thiscall operator=(struct EVENT_DATA_KEY&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CKeyEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CMouseEvent : class CEvent,  struct EVENT_DATA_MOUSE  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_MOUSE
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMouseEvent(class CMouseEvent&);
  void __thiscall CMouseEvent(struct EVENT_DATA_MOUSE&);
  void __thiscall CMouseEvent();
  class CMouseEvent& __thiscall operator=(class CMouseEvent&);
  class CMouseEvent& __thiscall CMouseEvent::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE& rhs);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CMouseEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x34>

class CImeEvent : class CEvent,  struct EVENT_DATA_IME  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_IME
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CImeEvent(class CImeEvent&);
  void __thiscall CImeEvent(struct EVENT_DATA_IME&);
  void __thiscall CImeEvent();
  class CImeEvent& __thiscall operator=(class CImeEvent&);
  class CImeEvent& __thiscall operator=(struct EVENT_DATA_IME&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CImeEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CSizeEvent : class CEvent,  struct EVENT_DATA_SIZE  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_SIZE
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSizeEvent(class CSizeEvent&);
  void __thiscall CSizeEvent(struct EVENT_DATA_SIZE&);
  void __thiscall CSizeEvent();
  class CSizeEvent& __thiscall operator=(class CSizeEvent&);
  class CSizeEvent& __thiscall operator=(struct EVENT_DATA_SIZE&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CSizeEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x18>

class CFocusEvent : class CEvent,  struct EVENT_DATA_FOCUS  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // baseclass struct EVENT_DATA_FOCUS
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFocusEvent(class CFocusEvent&);
  void __thiscall CFocusEvent(struct EVENT_DATA_FOCUS&);
  void __thiscall CFocusEvent();
  class CFocusEvent& __thiscall operator=(class CFocusEvent&);
  class CFocusEvent& __thiscall operator=(struct EVENT_DATA_FOCUS&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CFocusEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14>

class CSRWLock {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ unsigned char m_opaqueData[12];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class CSRWLock& __thiscall operator=(class CSRWLock&);
  void __thiscall CSRWLock::CSRWLock();
  void __thiscall CSRWLock(class CSRWLock&);
  void __thiscall CSRWLock::~CSRWLock();
  void __thiscall CSRWLock::Enter(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting);
  void __thiscall CSRWLock::Leave(/*<regrel ebp+0x8>*/ /*|0x4|*/ int fromwriting);
  int __thiscall CSRWLock::TryEnter(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class SSyncObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned char m_opaqueData[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SSyncObject::Copy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SSyncObject& rhs);
  void __thiscall SSyncObject::SSyncObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SSyncObject& rhs);
  void __thiscall SSyncObject::SSyncObject();
  void __thiscall SSyncObject::~SSyncObject();
  class SSyncObject& __thiscall SSyncObject::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SSyncObject& rhs);
  int __thiscall SSyncObject::Valid();
  void __thiscall SSyncObject::Close();
  unsigned long __thiscall SSyncObject::Wait(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeoutMs);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class SThread : class SSyncObject  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class SSyncObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall SThread::Create(/*<register ecx>*/ /*|0x4|*/ unsigned int  (threadProc*)(void*), /*<register edx>*/ /*|0x4|*/ void* param, /*<regrel ebp+0x8>*/ /*|0x4|*/ class SThread& thread, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* threadName);

  // non-virtual functions --------------------------
  void __thiscall SThread(class SThread&);
  void __thiscall SThread::SThread();
  void __thiscall SThread::~SThread();
  class SThread& __thiscall operator=(class SThread&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class SEvent : class SSyncObject  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class SSyncObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SEvent(class SEvent&);
  void __thiscall SEvent::SEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int manualReset, /*<regrel ebp+0xc>*/ /*|0x4|*/ int initialValue);
  void __thiscall SEvent::~SEvent();
  class SEvent& __thiscall operator=(class SEvent&);
  int __thiscall SEvent::Set();
  int __thiscall SEvent::Reset();
  void __thiscall __dflt_ctor_closure();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CSBasePriority {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CSBasePriorityQueue* m_queue;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_index;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Construct();
  void __thiscall CSBasePriority(class CSBasePriority&);
  void __thiscall CSBasePriority();
  void __thiscall ~CSBasePriority();
  class CSBasePriority& __thiscall operator=(class CSBasePriority&);
  int __thiscall IsLinked();
  void __thiscall CSBasePriority::Relink();
  void __thiscall SetQueuePosition(class CSBasePriorityQueue*, unsigned int);
  void __thiscall CSBasePriority::Unlink();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int __thiscall Compare(class CSBasePriority*) = 0;
};
// <size 0xc>

class CSimpleHyperlinkButton : class CSimpleButton  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2f4>*/ /*|0x4|*/ char* m_hyperlink;
  /*<thisrel this+0x2f8>*/ /*|0x8|*/ class TSLink<CSimpleHyperlinkButton> m_link;

  // base classes -----------------------------------
  // baseclass class CSimpleButton
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleHyperlinkButton(class CSimpleHyperlinkButton&);
  void __thiscall CSimpleHyperlinkButton::CSimpleHyperlinkButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleHyperlinkedFrame* parent);
  void __thiscall CSimpleHyperlinkButton::SetHyperlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* string, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct GXUFONTHYPERLINKINFO* hyperlink);
  class CSimpleHyperlinkButton& __thiscall operator=(class CSimpleHyperlinkButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkButton::~CSimpleHyperlinkButton();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkButton::OnLayerCursorEnter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkButton::OnLayerCursorExit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkButton::OnClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MOUSEBUTTON button);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x300>

class CSimpleHyperlinkedFrame : class CSimpleFrame  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0xc|*/ class TSExplicitList<CSimpleHyperlinkButton,760> m_hyperlinkButtons;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ int m_onHyperlinkEnter;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ int m_onHyperlinkLeave;
  /*<thisrel this+0x2c0>*/ /*|0x4|*/ int m_onHyperlinkClick;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleHyperlinkedFrame(class CSimpleHyperlinkedFrame&);
  void __thiscall CSimpleHyperlinkedFrame::CSimpleHyperlinkedFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall SetOnHyperlinkEnterScript(char*);
  void __thiscall RunOnHyperlinkEnterScript(char*);
  void __thiscall SetOnHyperlinkLeaveScript(char*);
  void __thiscall RunOnHyperlinkLeaveScript(char*);
  void __thiscall SetOnHyperlinkClickScript(char*);
  void __thiscall RunOnHyperlinkClickScript(char*, enum MOUSEBUTTON);
  class CSimpleHyperlinkButton* __thiscall CSimpleHyperlinkedFrame::CreateHyperlinkButton();
  void __thiscall CSimpleHyperlinkedFrame::ReleaseHyperlinkButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleHyperlinkButton* button);
  class CSimpleHyperlinkedFrame& __thiscall operator=(class CSimpleHyperlinkedFrame&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkedFrame::~CSimpleHyperlinkedFrame();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHyperlinkedFrame::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x8c>*/ void __thiscall CSimpleHyperlinkedFrame::OnHyperlinkEnter(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* link);
  virtual /*<vtableoff 0x90>*/ void __thiscall CSimpleHyperlinkedFrame::OnHyperlinkLeave(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* link);
  virtual /*<vtableoff 0x94>*/ void __thiscall CSimpleHyperlinkedFrame::OnHyperlinkClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* link, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum MOUSEBUTTON button);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c4>

class CSimpleFontString : class FrameScript_Object,  class CSimpleRegion  {

  // static data ------------------------------------
  static /*<rva 0xcb96d8>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ unsigned int m_registryContext;
  /*<thisrel this+0x80>*/ /*|0x4|*/ struct HTEXTFONT__* m_font;
  /*<thisrel this+0x84>*/ /*|0x4|*/ float m_fontHeight;
  /*<thisrel this+0x88>*/ /*|0x4|*/ int m_textMaxSize;
  /*<thisrel this+0x8c>*/ /*|0x4|*/ int m_textCurSize;
  /*<thisrel this+0x90>*/ /*|0x4|*/ char* m_text;
  /*<thisrel this+0x94>*/ /*|0x4|*/ float m_spacing;
  /*<thisrel this+0x98>*/ /*|0x4|*/ struct HTEXTBLOCK__* m_string;
  /*<thisrel this+0x9c>*/ /*|0x4|*/ float m_cachedWidth;
  /*<thisrel this+0xa0>*/ /*|0x4|*/ float m_cachedHeight;
  /*<thisrel this+0xa4>*/ /*|0x4|*/ class NTempest::CImVector m_shadowColor;
  /*<thisrel this+0xa8>*/ /*|0x8|*/ class NTempest::C2Vector m_shadowOffset;
  /*<thisrel this+0xb0>*/ /*|0x8|*/ class NTempest::C2Vector m_justificationOffset;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ int m_alphaGradientStart;
  /*<thisrel this+0xbc>*/ /*|0x4|*/ int m_alphaGradientLength;
  /*<thisrel this+0xc0>*/ /*|0x4|*/ unsigned int m_styleFlags;

  // base classes -----------------------------------
  // baseclass class FrameScript_Object
  // <base data offset+0x0>

  // baseclass class CSimpleRegion
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleFontString::RegisterScriptMethods();
  static void __fastcall CSimpleFontString::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleFontString(class CSimpleFontString&);
  void __thiscall CSimpleFontString::CSimpleFontString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer, /*<regrel ebp+0x10>*/ /*|0x4|*/ int show);
  void __thiscall CSimpleFontString::PreLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleFontString::PostLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall CSimpleFontString::AddToRegistry(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int context);
  void __thiscall SetAttributes(class CSimpleFontStringAttributes&);
  int __thiscall CSimpleFontString::SetFont(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* font, /*<regrel ebp+0xc>*/ /*|0x4|*/ float fontHeight, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int fontFlags);
  void __thiscall CSimpleFontString::SetTextHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float height);
  void __thiscall CSimpleFontString::SetTextLength(/*<regrel ebp+0x8>*/ /*|0x4|*/ int size);
  int __thiscall GetTextLength();
  void __thiscall CSimpleFontString::SetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  void __thiscall SetText(int);
  char* __thiscall GetText();
  void __thiscall GetText(char*, int);
  void __thiscall SetHorizontalAlignment(unsigned int);
  unsigned int __thiscall GetHorizontalAlignment();
  void __thiscall SetVerticalAlignment(unsigned int);
  unsigned int __thiscall GetVerticalAlignment();
  void __thiscall CSimpleFontString::SetJustificationOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  void __thiscall SetTextColor(class NTempest::CImVector&);
  void __thiscall SetTextColor(float, float, float, float);
  void __thiscall GetTextColor(class NTempest::CImVector&);
  void __thiscall SetStyleFlags(unsigned int);
  unsigned int __thiscall GetStyleFlags();
  void __thiscall SetCanWrapOnSpace(int);
  void __thiscall SetFixedColor(int);
  void __thiscall SetIgnoreColorCodes(int);
  void __thiscall SetIgnoreNewlines(int);
  void __thiscall SetIgnoreHyperlinks(int);
  void __thiscall CSimpleFontString::SetSpacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float spacing);
  float __thiscall GetSpacing();
  void __thiscall CSimpleFontString::AddShadow(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector& offset);
  void __thiscall CSimpleFontString::RemoveShadow();
  int __thiscall HasShadow();
  unsigned char __thiscall CSimpleFontString::SetAlphaGradient(/*<regrel ebp+0x8>*/ /*|0x4|*/ int startChar, /*<regrel ebp+0xc>*/ /*|0x4|*/ int length);
  void __thiscall CSimpleFontString::UpdateString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect* rect);
  char* __thiscall GetFontName();
  float __thiscall GetFontHeight();
  unsigned int __thiscall GetFontFlags();
  float __thiscall CSimpleFontString::GetStringWidth();
  float __thiscall CSimpleFontString::GetStringHeight();
  void __thiscall GetShadowColor(class NTempest::CImVector&);
  void __thiscall GetShadowOffset(class NTempest::C2Vector&);
  float __thiscall CSimpleFontString::GetTextWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int textBytes);
  unsigned int __thiscall CSimpleFontString::WrapText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ float maxWidth, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* lineOffsets, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int maxLines);
  unsigned int __thiscall CSimpleFontString::GetNumCharsWithinWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int textBytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ float maxWidth);
  unsigned int __thiscall CSimpleFontString::GetNumCharsWithinWidthFromEnd(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int textBytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ float maxWidth);
  struct CGxString* __thiscall GetString();
  void __thiscall ChangeStyleFlags(unsigned int, int);
  class CSimpleFontString& __thiscall operator=(class CSimpleFontString&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::~CSimpleFontString();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ char* __thiscall CSimpleFontString::GetName();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::OnGxColorChanged();
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleFontString::GetWidth();
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleFontString::GetHeight();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::SetLayoutScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char force);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::Draw(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFontString::ClearFromSimpleRegistry();
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleFontString::GetLayoutFrameByName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleFontString::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc4>

class CSimpleFrame : class FrameScript_Object,  class CLayoutFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb92e8>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x60>*/ /*|0x4|*/ class CSimpleTop* m_top;
  /*<thisrel this+0x64>*/ /*|0x4|*/ class CSimpleFrame* m_parent;
  /*<thisrel this+0x68>*/ /*|0x4|*/ class CSimpleFrame* m_tooltip;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ class CSimpleTitleRegion* m_titleRegion;
  /*<thisrel this+0x70>*/ /*|0x4|*/ enum CSimpleFrame::__unnamed_7d_ m_initialized_state;
  /*<thisrel this+0x74>*/ /*|0x4|*/ int m_id;
  /*<thisrel this+0x78>*/ /*|0x4|*/ char* m_frameName;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ unsigned int m_frameRegContext;
  /*<thisrel this+0x80>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x84>*/ /*|0x4|*/ int m_strata;
  /*<thisrel this+0x88>*/ /*|0x4|*/ int m_level;
  /*<thisrel this+0x8c>*/ /*|0x1|*/ unsigned char m_alpha;
  /*<thisrel this+0x90>*/ /*|0x4|*/ unsigned int m_eventmask;
  /*<thisrel this+0x94>*/ /*|0x4|*/ int m_shown;
  /*<thisrel this+0x98>*/ /*|0x4|*/ int m_visible;
  /*<thisrel this+0x9c>*/ /*|0x10|*/ class NTempest::CRect m_hitRect;
  /*<thisrel this+0xac>*/ /*|0x10|*/ class NTempest::CRect m_hitOffset;
  /*<thisrel this+0xbc>*/ /*|0x4|*/ int m_highlightLocked;
  /*<thisrel this+0xc0>*/ /*|0x4|*/ unsigned int m_lookForDrag;
  /*<thisrel this+0xc4>*/ /*|0x4|*/ int m_mouseDown;
  /*<thisrel this+0xc8>*/ /*|0x4|*/ int m_dragging;
  /*<thisrel this+0xcc>*/ /*|0x4|*/ enum MOUSEBUTTON m_dragButton;
  /*<thisrel this+0xd0>*/ /*|0x8|*/ class NTempest::C2Vector m_clickPoint;
  /*<thisrel this+0xd8>*/ /*|0x4|*/ int m_loading;
  /*<thisrel this+0xdc>*/ /*|0x4|*/ int m_onLoad;
  /*<thisrel this+0xe0>*/ /*|0x4|*/ int m_onSizeChanged;
  /*<thisrel this+0xe4>*/ /*|0x4|*/ int m_onUpdate;
  /*<thisrel this+0xe8>*/ /*|0x4|*/ int m_onShow;
  /*<thisrel this+0xec>*/ /*|0x4|*/ int m_onHide;
  /*<thisrel this+0xf0>*/ /*|0x4|*/ int m_onEnter;
  /*<thisrel this+0xf4>*/ /*|0x4|*/ int m_onLeave;
  /*<thisrel this+0xf8>*/ /*|0x4|*/ int m_onMouseDown;
  /*<thisrel this+0xfc>*/ /*|0x4|*/ int m_onMouseUp;
  /*<thisrel this+0x100>*/ /*|0x4|*/ int m_onMouseWheel;
  /*<thisrel this+0x104>*/ /*|0x4|*/ int m_onDragStart;
  /*<thisrel this+0x108>*/ /*|0x4|*/ int m_onDragStop;
  /*<thisrel this+0x10c>*/ /*|0x4|*/ int m_onReceiveDrag;
  /*<thisrel this+0x110>*/ /*|0x4|*/ int m_onChar;
  /*<thisrel this+0x114>*/ /*|0x4|*/ int m_onKeyDown;
  /*<thisrel this+0x118>*/ /*|0x4|*/ int m_onKeyUp;
  /*<thisrel this+0x11c>*/ /*|0x14|*/ int m_drawenabled[5];
  /*<thisrel this+0x130>*/ /*|0x4|*/ class CBackdropGenerator* m_backdrop;
  /*<thisrel this+0x134>*/ /*|0xc|*/ class TSList<REGIONNODE,TSGetLink<REGIONNODE> > m_regions;
  /*<thisrel this+0x140>*/ /*|0x3c|*/ class TSList<REGIONNODE,TSGetLink<REGIONNODE> > m_drawlayers[5];
  /*<thisrel this+0x17c>*/ /*|0x4|*/ unsigned int m_batchDirty;
  /*<thisrel this+0x180>*/ /*|0x104|*/ class CRenderBatch m_batch[5];
  /*<thisrel this+0x284>*/ /*|0xc|*/ class TSExplicitList<CRenderBatch,44> m_renderList;
  /*<thisrel this+0x290>*/ /*|0xc|*/ class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> > m_children;
  /*<thisrel this+0x29c>*/ /*|0x8|*/ class TSLink<CSimpleFrame> topLink;
  /*<thisrel this+0x2a4>*/ /*|0x8|*/ class TSLink<CSimpleFrame> drawLink;

  // base classes -----------------------------------
  // baseclass class FrameScript_Object
  // <base data offset+0x0>

  // baseclass class CLayoutFrame
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleFrame::RegisterScriptMethods();
  static void __fastcall CSimpleFrame::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleFrame(class CSimpleFrame&);
  void __thiscall CSimpleFrame::CSimpleFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleFrame::LoadXML_Layers(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall IsInitialized();
  void __thiscall CSimpleFrame::SetFrameFlag(/*<regrel ebp+0x8>*/ /*|0x4|*/ int flag, /*<regrel ebp+0xc>*/ /*|0x4|*/ int on);
  void __thiscall SetToplevel(int);
  int __thiscall IsToplevel();
  void __thiscall SetOccluded(int);
  int __thiscall IsOccluded();
  void __thiscall SetMovable(int);
  int __thiscall IsMovable();
  void __thiscall SetResizable(int);
  int __thiscall IsResizable();
  void __thiscall SetUserPlaced(int);
  int __thiscall IsUserPlaced();
  void __thiscall CSimpleFrame::SetBeingScrolled(/*<regrel ebp+0x8>*/ /*|0x4|*/ int on);
  int __thiscall IsBeingScrolled();
  int __thiscall IsParentDrawn();
  void __thiscall CSimpleFrame::SetFrameStrata(/*<regrel ebp+0x8>*/ /*|0x4|*/ int strata);
  int __thiscall GetFrameStrata();
  int __thiscall IsDialog();
  int __thiscall IsTooltip();
  void __thiscall CSimpleFrame::SetFrameLevel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int level, /*<regrel ebp+0xc>*/ /*|0x4|*/ int shiftChildren);
  int __thiscall GetFrameLevel();
  class CSimpleTop* __thiscall GetTop();
  void __thiscall CSimpleFrame::Raise();
  void __thiscall CSimpleFrame::Lower();
  void __thiscall SetTitleRegion(class CSimpleTitleRegion*);
  class CSimpleTitleRegion* __thiscall GetTitleRegion();
  int __thiscall ScaleBy(float, float, enum FRAMEPOINT, class NTempest::CRect*);
  int __thiscall DragBy(float, float, enum FRAMEPOINT, class NTempest::CRect*);
  void __thiscall CSimpleFrame::SetBackdrop(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CBackdropGenerator* backdrop);
  class CBackdropGenerator* __thiscall GetBackdrop();
  int __thiscall CSimpleFrame::SetHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxBlend blendMode);
  int __thiscall CSimpleFrame::SetHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* texFile, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxBlend blendMode);
  unsigned char __thiscall GetAlpha();
  void __thiscall CSimpleFrame::EnableDrawLayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int drawlayer);
  void __thiscall CSimpleFrame::DisableDrawLayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int drawlayer);
  void __thiscall CSimpleFrame::RegisterRegion(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleRegion* region);
  void __thiscall CSimpleFrame::UnregisterRegion(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleRegion* region);
  void __thiscall CSimpleFrame::AddFrameRegion(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleRegion* region, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer);
  void __thiscall CSimpleFrame::RemoveFrameRegion(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleRegion* region, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer);
  void __thiscall CSimpleFrame::NotifyDrawLayerChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int drawlayer);
  void __thiscall CSimpleFrame::NotifyDrawLayersChanged();
  void __thiscall SetId(int);
  int __thiscall GetId();
  int __thiscall CSimpleFrame::AddToFrameRegistry(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* frameName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int context);
  void __thiscall CSimpleFrame::ClearFromSimpleRegistry();
  void __thiscall CSimpleFrame::SetParent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  class CSimpleFrame* __thiscall GetParent();
  class CSimpleFrame* __thiscall CSimpleFrame::GetToplevelFrame();
  int __thiscall CSimpleFrame::IsAncestor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  class TSList<REGIONNODE,TSGetLink<REGIONNODE> >& __thiscall GetRegions();
  class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >& __thiscall GetChildren();
  void __thiscall SetTooltip(class CSimpleFrame*);
  int __thiscall Hide();
  int __thiscall Show();
  int __thiscall IsShown();
  int __thiscall IsVisible();
  void __thiscall CSimpleFrame::EnableEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleEventType event, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int priority);
  void __thiscall CSimpleFrame::DisableEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleEventType event);
  void __thiscall CSimpleFrame::RegisterForEvents();
  void __thiscall CSimpleFrame::UnregisterForEvents();
  void __thiscall CSimpleFrame::SetHitRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CSimpleFrame::SetHitRectInsets(/*<regrel ebp+0x8>*/ /*|0x4|*/ float left, /*<regrel ebp+0xc>*/ /*|0x4|*/ float right, /*<regrel ebp+0x10>*/ /*|0x4|*/ float top, /*<regrel ebp+0x14>*/ /*|0x4|*/ float bottom);
  int __thiscall CSimpleFrame::GetHitRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CSimpleFrame::OnUpdateBatch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int layer);
  void __thiscall RegisterForDrag(unsigned int);
  void __thiscall SetOnLoadScript(char*);
  void __thiscall RunOnLoadScript();
  void __thiscall SetOnSizeChangedScript(char*);
  void __thiscall RunOnSizeChangedScript(float, float);
  void __thiscall SetOnUpdateScript(char*);
  void __thiscall RunOnUpdateScript(float);
  void __thiscall SetOnShowScript(char*);
  void __thiscall RunOnShowScript();
  void __thiscall SetOnHideScript(char*);
  void __thiscall RunOnHideScript();
  void __thiscall SetOnEnterScript(char*);
  void __thiscall RunOnEnterScript();
  void __thiscall SetOnLeaveScript(char*);
  void __thiscall RunOnLeaveScript();
  void __thiscall SetOnMouseDownScript(char*);
  void __thiscall RunOnMouseDownScript(enum MOUSEBUTTON);
  void __thiscall SetOnMouseUpScript(char*);
  void __thiscall RunOnMouseUpScript(enum MOUSEBUTTON);
  void __thiscall SetOnMouseWheelScript(char*);
  void __thiscall RunOnMouseWheelScript(int);
  void __thiscall SetOnDragStartScript(char*);
  void __thiscall RunOnDragStartScript(enum MOUSEBUTTON);
  void __thiscall SetOnDragStopScript(char*);
  void __thiscall RunOnDragStopScript();
  void __thiscall SetOnReceiveDragScript(char*);
  void __thiscall RunOnReceiveDragScript();
  void __thiscall SetOnCharScript(char*);
  void __thiscall RunOnCharScript(char*);
  void __thiscall SetOnKeyDownScript(char*);
  void __thiscall RunOnKeyDownScript(char*);
  void __thiscall SetOnKeyUpScript(char*);
  void __thiscall RunOnKeyUpScript(char*);
  void __thiscall AnchorDrawRegion(class CSimpleRegion*, unsigned int);
  void __thiscall UnanchorDrawRegion(class CSimpleRegion*);
  void __thiscall CSimpleFrame::ParentFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleFrame::UnparentFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  class CSimpleFrame& __thiscall operator=(class CSimpleFrame&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::~CSimpleFrame();
  virtual /*<vtableoff 0xc>*/ void __thiscall CSimpleFrame::DelayedDelete();
  virtual /*<vtableoff 0x10>*/ void __thiscall CSimpleFrame::PreLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x14>*/ void __thiscall CSimpleFrame::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x18>*/ void __thiscall CSimpleFrame::PostLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleFrame::GetLayoutParent();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CSimpleFrame::GetName();
  virtual /*<vtableoff 0x1c>*/ void __thiscall CSimpleFrame::SetAlpha(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char alpha);
  virtual /*<vtableoff 0x20>*/ int __thiscall CSimpleFrame::FrameDefPostInitialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int createContext, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* context);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::SetDeferredResize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::SetLayoutScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char force);
  virtual /*<vtableoff 0x24>*/ int __thiscall CSimpleFrame::TestHitRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& pt);
  virtual /*<vtableoff 0x28>*/ void __thiscall CSimpleFrame::OnLayerShow();
  virtual /*<vtableoff 0x2c>*/ void __thiscall CSimpleFrame::OnLayerHide();
  virtual /*<vtableoff 0x30>*/ void __thiscall CSimpleFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x34>*/ int __thiscall CSimpleFrame::OnLayerTrackUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x3c>*/ void __thiscall CSimpleFrame::OnFrameRender();
  virtual /*<vtableoff 0x3c>*/ void __thiscall CSimpleFrame::OnFrameRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ float w, /*<regrel ebp+0xc>*/ /*|0x4|*/ float h);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x44>*/ void __thiscall CSimpleFrame::OnLayerCursorEnter();
  virtual /*<vtableoff 0x48>*/ void __thiscall CSimpleFrame::OnLayerCursorExit();
  virtual /*<vtableoff 0x4c>*/ int __thiscall CSimpleFrame::OnLayerIme(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CImeEvent& evt);
  virtual /*<vtableoff 0x50>*/ int __thiscall CSimpleFrame::OnLayerKeyDownRepeat(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x54>*/ int __thiscall CSimpleFrame::OnLayerChar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CCharEvent& evt);
  virtual /*<vtableoff 0x58>*/ int __thiscall CSimpleFrame::OnLayerKeyDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x5c>*/ int __thiscall CSimpleFrame::OnLayerKeyUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x60>*/ int __thiscall CSimpleFrame::OnLayerMouseDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x64>*/ int __thiscall CSimpleFrame::OnLayerMouseUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x68>*/ int __thiscall CSimpleFrame::OnLayerMouseWheel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x6c>*/ int __thiscall CSimpleFrame::OnLayerMouseMoveRelative(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x70>*/ void __thiscall CSimpleFrame::OnDragStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x74>*/ void __thiscall CSimpleFrame::OnDragStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x78>*/ void __thiscall CSimpleFrame::OnReceiveDrag(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x7c>*/ void __thiscall CSimpleFrame::LockHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int lock);
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleFrame::GetLayoutFrameByName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x80>*/ int __thiscall CSimpleFrame::HideThis();
  virtual /*<vtableoff 0x84>*/ int __thiscall CSimpleFrame::ShowThis();
  virtual /*<vtableoff 0x88>*/ void __thiscall CSimpleFrame::ClearChildrenFromSimpleRegistry();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2ac>

class XMLNode {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class XMLNode* m_parent;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class XMLNode* m_child;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0xc>*/ /*|0x4|*/ char* m_body;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_num_attributes;
  /*<thisrel this+0x14>*/ /*|0x4|*/ struct XMLNode::XMLAttribute* m_attributes;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_offset;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ class XMLNode* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall XMLNode(class XMLNode*, char*);
  void __thiscall ~XMLNode();
  char* __thiscall GetName();
  char* __thiscall GetBody();
  int __thiscall GetNumAttributes();
  char* __thiscall GetAttributeNameByIndex(int);
  char* __thiscall GetAttributeValueByIndex(int);
  char* __thiscall GetAttributeByName(char*);
  int __thiscall GetParentBodyOffset();
  class XMLNode* __thiscall GetChild();
  class XMLNode* __thiscall GetChildByName(char*);
  class XMLNode* __thiscall GetSibling();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CFramePointRelative : class CFramePoint  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CLayoutFrame* m_relative;
  /*<thisrel this+0x8>*/ /*|0x4|*/ enum FRAMEPOINT m_framePoint;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class NTempest::C2Vector m_offset;

  // base classes -----------------------------------
  // baseclass class CFramePoint
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFramePointRelative(class CFramePointRelative&);
  void __thiscall CFramePointRelative(class CLayoutFrame*, enum FRAMEPOINT, float, float);
  class CFramePointRelative& __thiscall operator=(class CFramePointRelative&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ float __thiscall CFramePointRelative::X(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale);
  virtual /*<vtableoff 0x0>*/ float __thiscall CFramePointRelative::Y(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale);
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CFramePointRelative::GetRelative();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CFramePointRelative();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14>

class CLayoutFrame {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x10|*/ class TSFixedArray<CFramePoint *> m_points;
  /*<thisrel this+0x14>*/ /*|0x4|*/ struct CLayoutFrame::__unnamed_108_ m_guard;
  /*<thisrel this+0x18>*/ /*|0xc|*/ class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> > m_resizeList;
  /*<thisrel this+0x24>*/ /*|0x1|*/ unsigned char m_resizeCounter;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x2c>*/ /*|0x10|*/ class NTempest::CRect m_rect;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float m_width;
  /*<thisrel this+0x40>*/ /*|0x4|*/ float m_height;
  /*<thisrel this+0x44>*/ /*|0x4|*/ float m_layoutScale;
  /*<thisrel this+0x48>*/ /*|0x8|*/ class TSLink<CLayoutFrame> resizeLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CLayoutFrame::RemoveFromResizeList(/*<register ecx>*/ /*|0x4|*/ class CLayoutFrame* pFrame);
  static unsigned int __fastcall CLayoutFrame::ResizePending();
  static void __fastcall CLayoutFrame::ClearResizePendingList();

  // non-virtual functions --------------------------
  float __thiscall CLayoutFrame::GetFirstPointX(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum FRAMEPOINT* pointarray, /*<regrel ebp+0xc>*/ /*|0x4|*/ int elements);
  float __thiscall CLayoutFrame::GetFirstPointY(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum FRAMEPOINT* pointarray, /*<regrel ebp+0xc>*/ /*|0x4|*/ int elements);
  void __thiscall CLayoutFrame::FreePoints();
  void __thiscall CLayoutFrame::DestroyLayout();
  void __thiscall CLayoutFrame(class CLayoutFrame&);
  void __thiscall CLayoutFrame::CLayoutFrame();
  float __thiscall CLayoutFrame::Left();
  float __thiscall CLayoutFrame::Top();
  float __thiscall CLayoutFrame::Right();
  float __thiscall CLayoutFrame::Bottom();
  float __thiscall CLayoutFrame::CenterY();
  float __thiscall CLayoutFrame::CenterX();
  int __thiscall CLayoutFrame::CalculateRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect* rect);
  int __thiscall IsRectValid();
  void __thiscall CLayoutFrame::SetPoint(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum FRAMEPOINT point, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CLayoutFrame* relative, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum FRAMEPOINT relativePoint, /*<regrel ebp+0x14>*/ /*|0x4|*/ float offsetX, /*<regrel ebp+0x18>*/ /*|0x4|*/ float offsetY, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int doResize);
  void __thiscall CLayoutFrame::SetPoint(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum FRAMEPOINT point, /*<regrel ebp+0xc>*/ /*|0x4|*/ float x, /*<regrel ebp+0x10>*/ /*|0x4|*/ float y, /*<regrel ebp+0x14>*/ /*|0x4|*/ int doResize);
  void __thiscall CLayoutFrame::SetAllPoints(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* relative, /*<regrel ebp+0xc>*/ /*|0x4|*/ int doResize);
  void __thiscall CLayoutFrame::Clear(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* relative, /*<regrel ebp+0xc>*/ /*|0x4|*/ int doResize);
  void __thiscall CLayoutFrame::ClearAllPoints(/*<regrel ebp+0x8>*/ /*|0x4|*/ int doResize);
  class CFramePoint* __thiscall GetPoint(enum FRAMEPOINT);
  int __thiscall HasPoints();
  void __thiscall CLayoutFrame::RegisterResize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int dependency);
  void __thiscall CLayoutFrame::UnregisterResize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* frame);
  int __thiscall CLayoutFrame::IsResizeDependency(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* pNewDependentFrame);
  int __thiscall IsResizeDeferred();
  void __thiscall CLayoutFrame::Resize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  int __thiscall CLayoutFrame::IsResizePending();
  float __thiscall GetLayoutScale();
  void __thiscall CLayoutFrame::SetWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float width);
  void __thiscall CLayoutFrame::SetHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float height);
  int __thiscall CLayoutFrame::FlattenFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* top, /*<regrel ebp+0xc>*/ /*|0x4|*/ float width, /*<regrel ebp+0x10>*/ /*|0x4|*/ float height, /*<regrel ebp+0x14>*/ /*|0x4|*/ float delta_x, /*<regrel ebp+0x18>*/ /*|0x4|*/ float delta_y, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::CRect* finalrect);
  int __thiscall CLayoutFrame::ScaleBy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* top, /*<regrel ebp+0xc>*/ /*|0x4|*/ float scale_x, /*<regrel ebp+0x10>*/ /*|0x4|*/ float scale_y, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum FRAMEPOINT anchorpoint, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::CRect* finalrect);
  int __thiscall CLayoutFrame::DragBy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* top, /*<regrel ebp+0xc>*/ /*|0x4|*/ float delta_x, /*<regrel ebp+0x10>*/ /*|0x4|*/ float delta_y, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum FRAMEPOINT dragpoint, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::CRect* finalrect);
  int __thiscall CLayoutFrame::PtInFrameRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& pt);
  void __thiscall CLayoutFrame::CageMouseInFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable);
  class CLayoutFrame& __thiscall operator=(class CLayoutFrame&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CLayoutFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x4>*/ int __thiscall CLayoutFrame::OnFrameResize();
  virtual /*<vtableoff 0x8>*/ void __thiscall CLayoutFrame::~CLayoutFrame();
  virtual /*<vtableoff 0xc>*/ void __thiscall CLayoutFrame::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x10>*/ class CLayoutFrame* __thiscall CLayoutFrame::GetLayoutParent();
  virtual /*<vtableoff 0x14>*/ void __thiscall CLayoutFrame::SetDeferredResize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable);
  virtual /*<vtableoff 0x18>*/ int __thiscall CLayoutFrame::SetRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x1c>*/ int __thiscall CLayoutFrame::GetRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect* rect);
  virtual /*<vtableoff 0x20>*/ void __thiscall CLayoutFrame::SetLayoutScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char force);
  virtual /*<vtableoff 0x24>*/ float __thiscall CLayoutFrame::GetWidth();
  virtual /*<vtableoff 0x28>*/ float __thiscall CLayoutFrame::GetHeight();
  virtual /*<vtableoff 0x2c>*/ int __thiscall CLayoutFrame::IsAttachmentOrigin();
  virtual /*<vtableoff 0x30>*/ class CLayoutFrame* __thiscall CLayoutFrame::GetLayoutFrameByName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x50>

class CSimpleTexture : class FrameScript_Object,  class CSimpleRegion  {

  // static data ------------------------------------
  static /*<rva 0xcb9714>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;
  static /*<rva 0x4af8d8>*/ /*|0x4|*/ enum EGxTexFilter s_textureFilterMode;

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ unsigned int m_registryContext;
  /*<thisrel this+0x80>*/ /*|0x4|*/ struct HTEXTURE__* m_texture;
  /*<thisrel this+0x84>*/ /*|0x4|*/ enum EGxBlend m_alphamode;
  /*<thisrel this+0x88>*/ /*|0x30|*/ class NTempest::C3Vector m_position[4];
  /*<thisrel this+0xb8>*/ /*|0x20|*/ class NTempest::C2Vector m_texCoord[4];
  /*<thisrel this+0xd8>*/ /*|0x4|*/ int m_TexCoordModifiesPosition;

  // base classes -----------------------------------
  // baseclass class FrameScript_Object
  // <base data offset+0x0>

  // baseclass class CSimpleRegion
  // <base data offset+0x10>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall SetTextureFilterMode(enum EGxTexFilter);
  static void __fastcall CSimpleTexture::RegisterScriptMethods();
  static void __fastcall CSimpleTexture::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleTexture(class CSimpleTexture&);
  void __thiscall CSimpleTexture::CSimpleTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer, /*<regrel ebp+0x10>*/ /*|0x4|*/ int show);
  void __thiscall CSimpleTexture::PreLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleTexture::PostLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall CSimpleTexture::AddToRegistry(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int context);
  int __thiscall CSimpleTexture::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HTEXTURE__* texHandle);
  int __thiscall CSimpleTexture::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  int __thiscall CSimpleTexture::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* file, /*<regrel ebp+0xc>*/ /*|0x4|*/ int uvWrapping);
  void __thiscall CSimpleTexture::SetBlendMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBlend mode);
  void __thiscall CSimpleTexture::SetTexCoord(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* texCoord);
  void __thiscall CSimpleTexture::SetTexCoord(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall SetTexCoordModifiesPosition(int);
  void __thiscall CSimpleTexture::TexCorrectRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CSimpleTexture::SetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  struct HTEXTURE__* __thiscall GetHTEXTURE();
  class CGxTex* __thiscall CSimpleTexture::GetTexture();
  enum EGxBlend __thiscall GetAlphaMode();
  class NTempest::C3Vector* __thiscall GetPosition();
  class NTempest::C2Vector* __thiscall GetTexCoord();
  class CSimpleTexture& __thiscall operator=(class CSimpleTexture&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTexture::~CSimpleTexture();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTexture::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ char* __thiscall CSimpleTexture::GetName();
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleTexture::GetWidth();
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleTexture::GetHeight();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTexture::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTexture::Draw(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTexture::ClearFromSimpleRegistry();
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleTexture::GetLayoutFrameByName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleTexture::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xdc>

class CSimpleButton : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb9694>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ class CObserver* m_observer;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ unsigned int m_observerEventId;
  /*<thisrel this+0x2b4>*/ /*|0x4|*/ class CObserver* m_trackObserver;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ unsigned int m_trackEnterEventId;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ unsigned int m_trackExitEventId;
  /*<thisrel this+0x2c0>*/ /*|0x4|*/ enum CSimpleButtonState m_state;
  /*<thisrel this+0x2c4>*/ /*|0x4|*/ int m_stateLocked;
  /*<thisrel this+0x2c8>*/ /*|0x4|*/ unsigned int m_clickAction;
  /*<thisrel this+0x2cc>*/ /*|0x4|*/ class CSimpleFontString* m_disabledText;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ class CSimpleFontString* m_text;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ class CSimpleFontString* m_highlightText;
  /*<thisrel this+0x2d8>*/ /*|0x8|*/ class NTempest::C2Vector m_pressedOffset;
  /*<thisrel this+0x2e0>*/ /*|0xc|*/ class CSimpleTexture* m_textures[3];
  /*<thisrel this+0x2ec>*/ /*|0x4|*/ class CSimpleTexture* m_activeTexture;
  /*<thisrel this+0x2f0>*/ /*|0x4|*/ int m_onClick;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleButton::RegisterScriptMethods();
  static void __fastcall CSimpleButton::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleButton(class CSimpleButton&);
  void __thiscall CSimpleButton::CSimpleButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleButton::SetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* text);
  void __thiscall CSimpleButton::SetDisabledText(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* text);
  void __thiscall CSimpleButton::SetHighlightText(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* text);
  class CSimpleFontString* __thiscall GetText();
  class CSimpleFontString* __thiscall GetDisabledText();
  class CSimpleFontString* __thiscall GetHighlightText();
  void __thiscall CSimpleButton::SetTextString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  void __thiscall CSimpleButton::SetDisabledTextString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  void __thiscall CSimpleButton::SetHighlightTextString(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  char* __thiscall GetTextString();
  char* __thiscall GetDisabledTextString();
  char* __thiscall GetHighlightTextString();
  void __thiscall CSimpleButton::SetTextColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CSimpleButton::SetDisabledTextColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CSimpleButton::SetHighlightTextColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CSimpleButton::SetPressedOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& offset);
  void __thiscall CSimpleButton::SetStateTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleButtonState state, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CSimpleTexture* texture);
  int __thiscall CSimpleButton::SetStateTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleButtonState state, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* texFile);
  class CSimpleTexture* __thiscall GetStateTexture(enum CSimpleButtonState);
  int __thiscall IsEnabled();
  void __thiscall CSimpleButton::SetClickAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int action);
  int __thiscall IsMouseButtonHandled(enum MOUSEBUTTON);
  void __thiscall CSimpleButton::RegisterClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int eventId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CObserver* observer);
  void __thiscall CSimpleButton::RegisterTrack(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int enterEventId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int exitEventId, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CObserver* observer);
  enum CSimpleButtonState __thiscall GetButtonState();
  void __thiscall SetOnClickScript(char*);
  void __thiscall RunOnClickScript(enum MOUSEBUTTON);
  void __thiscall CSimpleButton::UpdateTextState(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleButtonState state);
  class CSimpleButton& __thiscall operator=(class CSimpleButton&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::~CSimpleButton();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x8c>*/ void __thiscall CSimpleButton::Enable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enabled);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::OnLayerHide();
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleButton::OnLayerMouseDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleButton::OnLayerMouseUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::OnDragStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::OnLayerCursorEnter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::OnLayerCursorExit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleButton::LockHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int lock);
  virtual /*<vtableoff 0x90>*/ void __thiscall CSimpleButton::OnClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MOUSEBUTTON button);
  virtual /*<vtableoff 0x94>*/ void __thiscall CSimpleButton::SetButtonState(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleButtonState state, /*<regrel ebp+0xc>*/ /*|0x4|*/ int stateLocked);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleButton::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2f4>

class CSimpleCheckbox : class CSimpleButton  {

  // static data ------------------------------------
  static /*<rva 0xcb964c>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2f4>*/ /*|0x4|*/ int m_checked;
  /*<thisrel this+0x2f8>*/ /*|0x4|*/ class CSimpleTexture* m_checkedTexture;
  /*<thisrel this+0x2fc>*/ /*|0x4|*/ class CSimpleTexture* m_disabledTexture;

  // base classes -----------------------------------
  // baseclass class CSimpleButton
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleCheckbox::RegisterScriptMethods();
  static void __fastcall CSimpleCheckbox::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleCheckbox(class CSimpleCheckbox&);
  void __thiscall CSimpleCheckbox::CSimpleCheckbox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleCheckbox::SetCheckedTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture);
  int __thiscall CSimpleCheckbox::SetCheckedTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* texFile);
  void __thiscall CSimpleCheckbox::SetDisabledCheckedTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture);
  int __thiscall CSimpleCheckbox::SetDisabledCheckedTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* texFile);
  void __thiscall CSimpleCheckbox::SetChecked(/*<regrel ebp+0x8>*/ /*|0x4|*/ int state, /*<regrel ebp+0xc>*/ /*|0x4|*/ int force);
  int __thiscall GetChecked();
  class CSimpleCheckbox& __thiscall operator=(class CSimpleCheckbox&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleCheckbox::~CSimpleCheckbox();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleCheckbox::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleCheckbox::Enable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enabled);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleCheckbox::OnClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MOUSEBUTTON click);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleCheckbox::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x300>

class CSimpleEditBox : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb9614>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;
  static /*<rva 0xcb93f0>*/ /*|0x4|*/ class CSimpleEditBox* s_currentFocus;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ unsigned int m_dirtyFlags;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ class CSimpleFontString* m_string;
  /*<thisrel this+0x2b4>*/ /*|0x4|*/ char* m_text;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ unsigned int* m_textInfo;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ char* m_textHidden;
  /*<thisrel this+0x2c0>*/ /*|0x4|*/ int m_textLength;
  /*<thisrel this+0x2c4>*/ /*|0x4|*/ int m_textLengthMax;
  /*<thisrel this+0x2c8>*/ /*|0x4|*/ int m_textLettersMax;
  /*<thisrel this+0x2cc>*/ /*|0x4|*/ int m_textSize;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ int m_visiblePos;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ int m_visibleLen;
  /*<thisrel this+0x2d8>*/ /*|0xc|*/ class CSimpleTexture* m_highlight[3];
  /*<thisrel this+0x2e4>*/ /*|0x4|*/ int m_highlightLeft;
  /*<thisrel this+0x2e8>*/ /*|0x4|*/ int m_highlightRight;
  /*<thisrel this+0x2ec>*/ /*|0x4|*/ int m_highlightDrag;
  /*<thisrel this+0x2f0>*/ /*|0x4|*/ class CSimpleTexture* m_cursor;
  /*<thisrel this+0x2f4>*/ /*|0x4|*/ int m_cursorPos;
  /*<thisrel this+0x2f8>*/ /*|0x4|*/ float m_cursorBlinkSpeed;
  /*<thisrel this+0x2fc>*/ /*|0x4|*/ float m_blinkElapsedTime;
  /*<thisrel this+0x300>*/ /*|0x4|*/ int m_password;
  /*<thisrel this+0x304>*/ /*|0x4|*/ int m_multiline;
  /*<thisrel this+0x308>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_visibleLines;
  /*<thisrel this+0x31c>*/ /*|0x4|*/ int m_autoFocus;
  /*<thisrel this+0x320>*/ /*|0x4|*/ int m_numHistory;
  /*<thisrel this+0x324>*/ /*|0x4|*/ int m_curHistory;
  /*<thisrel this+0x328>*/ /*|0x10|*/ class TSFixedArray<char *> m_history;
  /*<thisrel this+0x338>*/ /*|0x30|*/ struct CSimpleEditBox::__unnamed_10d_ m_actions[6];
  /*<thisrel this+0x368>*/ /*|0x4|*/ int m_imeInputMode;
  /*<thisrel this+0x36c>*/ /*|0x4|*/ class CSimpleTexture* m_clauseHighlight;
  /*<thisrel this+0x370>*/ /*|0x4|*/ int m_clauseLeft;
  /*<thisrel this+0x374>*/ /*|0x4|*/ int m_clauseRight;
  /*<thisrel this+0x378>*/ /*|0x4|*/ class CSimpleMessageFrame* m_candidatesFrame;
  /*<thisrel this+0x37c>*/ /*|0x4|*/ class CSimpleTexture* m_candidatesHighlight;
  /*<thisrel this+0x380>*/ /*|0x10|*/ class NTempest::CRect m_editTextInset;
  /*<thisrel this+0x390>*/ /*|0x4|*/ int m_onEnterPressed;
  /*<thisrel this+0x394>*/ /*|0x4|*/ int m_onEscapePressed;
  /*<thisrel this+0x398>*/ /*|0x4|*/ int m_onSpacePressed;
  /*<thisrel this+0x39c>*/ /*|0x4|*/ int m_onTabPressed;
  /*<thisrel this+0x3a0>*/ /*|0x4|*/ int m_onTextChanged;
  /*<thisrel this+0x3a4>*/ /*|0x4|*/ int m_onTextSet;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleEditBox::SetKeyboardFocus(/*<register ecx>*/ /*|0x4|*/ class CSimpleEditBox* focus);
  static void __fastcall CSimpleEditBox::ClearKeyboardFocus(/*<register ecx>*/ /*|0x4|*/ class CSimpleEditBox* focus);
  static void __fastcall CSimpleEditBox::RegisterScriptMethods();
  static void __fastcall CSimpleEditBox::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleEditBox(class CSimpleEditBox&);
  void __thiscall CSimpleEditBox::CSimpleEditBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall SetPassword(int);
  void __thiscall CSimpleEditBox::SetMultiLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enabled);
  void __thiscall CSimpleEditBox::SetAutoFocus(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enabled);
  void __thiscall CSimpleEditBox::SetEditTextInsets(/*<regrel ebp+0x8>*/ /*|0x4|*/ float right, /*<regrel ebp+0xc>*/ /*|0x4|*/ float left, /*<regrel ebp+0x10>*/ /*|0x4|*/ float top, /*<regrel ebp+0x14>*/ /*|0x4|*/ float bottom);
  void __thiscall SetTextSizeLimit(int);
  void __thiscall SetTextLetterLimit(int);
  void __thiscall CSimpleEditBox::SetFont(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* font, /*<regrel ebp+0xc>*/ /*|0x4|*/ float fontHeight, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int fontFlags);
  void __thiscall SetTextColor(class NTempest::CImVector&);
  void __thiscall SetCursorColor(class NTempest::CImVector&);
  void __thiscall SetHighlightColor(class NTempest::CImVector&);
  void __thiscall AddShadow(class NTempest::CImVector&, class NTempest::C2Vector&);
  void __thiscall SetCursorPosition(int);
  void __thiscall SetCursorBlinkSpeed(float);
  void __thiscall HideCursor();
  void __thiscall CSimpleEditBox::SetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text);
  char* __thiscall GetText();
  void __thiscall CSimpleEditBox::HighlightText();
  void __thiscall CSimpleEditBox::Insert(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int utf16);
  void __thiscall CSimpleEditBox::Insert(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* utf8string, /*<regrel ebp+0xc>*/ /*|0x4|*/ int isIME);
  void __thiscall CSimpleEditBox::SetHistoryLines(/*<regrel ebp+0x8>*/ /*|0x4|*/ int numLines);
  void __thiscall CSimpleEditBox::AddHistoryLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* line);
  void __thiscall RegisterEnter(unsigned int, class CObserver*);
  void __thiscall RegisterEscape(unsigned int, class CObserver*);
  void __thiscall RegisterSpace(unsigned int, class CObserver*);
  void __thiscall RegisterTab(unsigned int, class CObserver*);
  void __thiscall RegisterTextChanged(unsigned int, class CObserver*);
  void __thiscall RegisterTextSet(unsigned int, class CObserver*);
  void __thiscall SetOnEnterPressedScript(char*);
  void __thiscall RunOnEnterPressedScript();
  void __thiscall SetOnEscapePressedScript(char*);
  void __thiscall RunOnEscapePressedScript();
  void __thiscall SetOnSpacePressedScript(char*);
  void __thiscall RunOnSpacePressedScript();
  void __thiscall SetOnTabPressedScript(char*);
  void __thiscall RunOnTabPressedScript();
  void __thiscall SetOnTextChangedScript(char*);
  void __thiscall RunOnTextChangedScript();
  void __thiscall SetOnTextSetScript(char*);
  void __thiscall RunOnTextSetScript();
  void __thiscall CSimpleEditBox::UpdateSizes(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CSimpleEditBox::UpdateTextInfo();
  int __thiscall CSimpleEditBox::GetNumToLen(/*<regrel ebp+0x8>*/ /*|0x4|*/ int offset, /*<regrel ebp+0xc>*/ /*|0x4|*/ int amount, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char checkHyperLink);
  int __thiscall CSimpleEditBox::GetLenToNum(/*<regrel ebp+0x8>*/ /*|0x4|*/ int offset, /*<regrel ebp+0xc>*/ /*|0x4|*/ int amount);
  int __thiscall CSimpleEditBox::NextCharOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int offset);
  int __thiscall CSimpleEditBox::PrevCharOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int offset);
  int __thiscall CSimpleEditBox::GetOffsetToLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int offset);
  void __thiscall CSimpleEditBox::GrowText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int size);
  void __thiscall CSimpleEditBox::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ int amount);
  void __thiscall CSimpleEditBox::DeleteForward();
  void __thiscall CSimpleEditBox::DeleteForwardWord();
  void __thiscall CSimpleEditBox::DeleteBackward();
  void __thiscall CSimpleEditBox::DeleteBackwardWord();
  void __thiscall CSimpleEditBox::DeleteToStart();
  void __thiscall CSimpleEditBox::DeleteToEnd();
  void __thiscall CSimpleEditBox::DeleteText();
  void __thiscall CSimpleEditBox::DeleteSubstring(/*<regrel ebp+0x8>*/ /*|0x4|*/ int left, /*<regrel ebp+0xc>*/ /*|0x4|*/ int right);
  void __thiscall CSimpleEditBox::Move(/*<regrel ebp+0x8>*/ /*|0x4|*/ int distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveForward(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveForwardWord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveBackward(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveBackwardWord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveToStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveToEnd(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveForwardLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  void __thiscall CSimpleEditBox::MoveBackwardLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ int highlight);
  int __thiscall IsHighlighted();
  void __thiscall CSimpleEditBox::StartHighlight();
  void __thiscall CSimpleEditBox::ExtendHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int distance);
  void __thiscall ClearHighlight();
  void __thiscall CSimpleEditBox::DeleteHighlight();
  void __thiscall CSimpleEditBox::ForwardHistory();
  void __thiscall CSimpleEditBox::BackwardHistory();
  int __thiscall CSimpleEditBox::ConvertCoordinateToIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& position);
  void __thiscall CSimpleEditBox::MakeTextVisible(/*<regrel ebp+0x8>*/ /*|0x4|*/ int position, /*<regrel ebp+0xc>*/ /*|0x4|*/ float offset, /*<regrel ebp+0x10>*/ /*|0x4|*/ float stringWidth);
  void __thiscall CSimpleEditBox::UpdateVisibleText();
  void __thiscall CSimpleEditBox::UpdateVisibleHighlight();
  void __thiscall CSimpleEditBox::UpdateVisibleCursor();
  void __thiscall CSimpleEditBox::UpdateHighlightArea(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleRegion* area, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left, /*<regrel ebp+0x10>*/ /*|0x4|*/ int right);
  void __thiscall CSimpleEditBox::CopyToClipboard();
  void __thiscall CSimpleEditBox::PasteFromClipboard();
  void __thiscall RegisterAction(int, unsigned int, class CObserver*);
  void __thiscall CSimpleEditBox::DispatchAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int action);
  void __thiscall CSimpleEditBox::CreateClauseHighlight();
  void __thiscall CSimpleEditBox::CreateCandidatesFrame();
  void __thiscall CSimpleEditBox::ShowCandidates();
  void __thiscall CSimpleEditBox::HideCandidates();
  void __thiscall CSimpleEditBox::UpdateLanguageIndicator();
  void __thiscall CSimpleEditBox::UpdateClauseInfo();
  int __thiscall CSimpleEditBox::PopulateCandidates(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long which);
  class CSimpleEditBox& __thiscall operator=(class CSimpleEditBox&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::~CSimpleEditBox();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::OnLayerShow();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::OnLayerHide();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerTrackUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleEditBox::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerChar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CCharEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerIme(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CImeEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerKeyDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerKeyDownRepeat(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerKeyUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CKeyEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerMouseDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::OnLayerMouseUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleEditBox::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x3a8>

class CSimpleFontStringAttributes {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x4>*/ /*|0xc|*/ class RCString m_font;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_fontHeight;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_fontFlags;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_spacing;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int m_styleFlags;
  /*<thisrel this+0x20>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x24>*/ /*|0x4|*/ class NTempest::CImVector m_shadowColor;
  /*<thisrel this+0x28>*/ /*|0x8|*/ class NTempest::C2Vector m_shadowOffset;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleFontStringAttributes(class CSimpleFontStringAttributes&);
  void __thiscall CSimpleFontStringAttributes::CSimpleFontStringAttributes(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontStringAttributes* attrib);
  void __thiscall SetFont(char*, float, unsigned int);
  unsigned char __thiscall HasFont();
  char* __thiscall GetFontName();
  float __thiscall GetFontHeight();
  unsigned int __thiscall GetFontFlags();
  void __thiscall SetHorizontalAlignment(unsigned int);
  void __thiscall SetVerticalAlignment(unsigned int);
  void __thiscall SetStyleFlags(unsigned int);
  void __thiscall SetColor(class NTempest::CImVector&);
  void __thiscall SetAlpha(unsigned char);
  class NTempest::CImVector& __thiscall GetColor();
  void __thiscall AddShadow(class NTempest::CImVector&, class NTempest::C2Vector&);
  void __thiscall SetSpacing(float);
  float __thiscall GetSpacing();
  void __thiscall CSimpleFontStringAttributes::UpdateString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* string, /*<regrel ebp+0xc>*/ /*|0x4|*/ int force);
  class CSimpleFontStringAttributes& __thiscall CSimpleFontStringAttributes::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontStringAttributes& rhs);
  class CSimpleFontStringAttributes& __thiscall CSimpleFontStringAttributes::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString& rhs);
  void __thiscall CSimpleFontStringAttributes::CopyFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontStringAttributes& rhs);
  void __thiscall CSimpleFontStringAttributes::~CSimpleFontStringAttributes();
  void __thiscall __dflt_ctor_closure();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class CSimpleHTML : class CSimpleHyperlinkedFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb95c8>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2c4>*/ /*|0xc|*/ class TSList<REGIONNODE,TSGetLink<REGIONNODE> > m_content;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ class CLayoutFrame* m_layoutAnchor;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ float m_layoutOffset;
  /*<thisrel this+0x2d8>*/ /*|0xc0|*/ class CSimpleFontStringAttributes m_attrib[4];
  /*<thisrel this+0x398>*/ /*|0xc|*/ class TSExplicitList<CSimpleHyperlinkButton,760> m_hyperlinks;

  // base classes -----------------------------------
  // baseclass class CSimpleHyperlinkedFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleHTML::RegisterScriptMethods();
  static void __fastcall CSimpleHTML::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleHTML(class CSimpleHTML&);
  void __thiscall CSimpleHTML::CSimpleHTML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall SetTextAttributes(class CSimpleFontStringAttributes&, enum HTML_TEXT_TYPE);
  class CSimpleFontStringAttributes& __thiscall GetTextAttributes(enum HTML_TEXT_TYPE);
  unsigned char __thiscall CSimpleHTML::SetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleHTML::ClearContent();
  void __thiscall CSimpleHTML::ParseBODY(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleHTML::ParseP(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum HTML_TEXT_TYPE textType, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleHTML::ParseIMG(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleHTML::AddText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CSimpleFontStringAttributes& attrib);
  class CSimpleHTML& __thiscall operator=(class CSimpleHTML&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHTML::~CSimpleHTML();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleHTML::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleHTML::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x3a4>

class CSimpleMessageFrame : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb9580>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ unsigned int m_rows;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ unsigned int m_numVisible;
  /*<thisrel this+0x2b4>*/ /*|0x10|*/ class NTempest::CRect m_messageFrameArea;
  /*<thisrel this+0x2c4>*/ /*|0x10|*/ class NTempest::CRect m_messageFrameInset;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ int m_textMaxSize;
  /*<thisrel this+0x2d8>*/ /*|0x30|*/ class CSimpleFontStringAttributes m_attrib;
  /*<thisrel this+0x308>*/ /*|0x4|*/ float m_fadeDuration;
  /*<thisrel this+0x30c>*/ /*|0x4|*/ enum CSimpleMessageFrame::SimpleMessageFrameInsertMode m_insertMode;
  /*<thisrel this+0x310>*/ /*|0x14|*/ class TSGrowableArray<MessageData> m_pendingMessages;
  /*<thisrel this+0x324>*/ /*|0x14|*/ class TSGrowableArray<CSimpleMessageFrameLine> m_lines;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleMessageFrame::RegisterScriptMethods();
  static void __fastcall CSimpleMessageFrame::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageFrame(class CSimpleMessageFrame&);
  void __thiscall CSimpleMessageFrame::CSimpleMessageFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleMessageFrame::SetMessageFrameInsets(/*<regrel ebp+0x8>*/ /*|0x4|*/ float right, /*<regrel ebp+0xc>*/ /*|0x4|*/ float left, /*<regrel ebp+0x10>*/ /*|0x4|*/ float top, /*<regrel ebp+0x14>*/ /*|0x4|*/ float bottom);
  void __thiscall CSimpleMessageFrame::SetTextLength(/*<regrel ebp+0x8>*/ /*|0x4|*/ int size);
  void __thiscall SetFont(char*, float, int);
  void __thiscall SetHorizontalAlignment(unsigned int);
  void __thiscall SetColor(class NTempest::CImVector&);
  void __thiscall AddShadow(class NTempest::CImVector&, class NTempest::C2Vector&);
  void __thiscall SetSpacing(float);
  void __thiscall SetFadeDuration(float);
  void __thiscall CSimpleMessageFrame::SetInsertMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CSimpleMessageFrame::SimpleMessageFrameInsertMode mode);
  void __thiscall CSimpleMessageFrame::Clear();
  void __thiscall CSimpleMessageFrame::ClearPending();
  void __thiscall CSimpleMessageFrame::AddPendingMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0x10>*/ /*|0x4|*/ float timeVisible, /*<regrel ebp+0x14>*/ /*|0x4|*/ int permanent);
  void __thiscall CSimpleMessageFrame::ScrollMessages(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int start);
  void __thiscall CSimpleMessageFrame::HideLineNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleMessageFrameLineNode* node);
  void __thiscall CSimpleMessageFrame::ShowLineNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleMessageFrameLineNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ float timeVisible, /*<regrel ebp+0x10>*/ /*|0x4|*/ float fadeDuration, /*<regrel ebp+0x14>*/ /*|0x4|*/ int permanent);
  class CSimpleMessageFrame& __thiscall operator=(class CSimpleMessageFrame&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageFrame::~CSimpleMessageFrame();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageFrame::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x8c>*/ void __thiscall CSimpleMessageFrame::AddMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0x10>*/ /*|0x4|*/ float timeVisible, /*<regrel ebp+0x14>*/ /*|0x4|*/ int permanent);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleMessageFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x338>

class CSimpleMessageScrollFrame : class CSimpleHyperlinkedFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb953c>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2c4>*/ /*|0x4|*/ int m_numMessages;
  /*<thisrel this+0x2c8>*/ /*|0x4|*/ int m_maxMessages;
  /*<thisrel this+0x2cc>*/ /*|0x4|*/ int m_currentLine;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ int m_currentScroll;
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ int m_numDisplayed;
  /*<thisrel this+0x2d8>*/ /*|0x4|*/ int m_atTop;
  /*<thisrel this+0x2dc>*/ /*|0x4|*/ int m_atBottom;
  /*<thisrel this+0x2e0>*/ /*|0x4|*/ int m_textMaxSize;
  /*<thisrel this+0x2e4>*/ /*|0x30|*/ class CSimpleFontStringAttributes m_attrib;
  /*<thisrel this+0x314>*/ /*|0x4|*/ int m_fading;
  /*<thisrel this+0x318>*/ /*|0x4|*/ float m_fadeDuration;
  /*<thisrel this+0x31c>*/ /*|0x4|*/ float m_timeVisible;
  /*<thisrel this+0x320>*/ /*|0x10|*/ class NTempest::CRect m_messageFrameArea;
  /*<thisrel this+0x330>*/ /*|0x10|*/ class NTempest::CRect m_messageFrameInset;
  /*<thisrel this+0x340>*/ /*|0x14|*/ class TSGrowableArray<CSimpleMessageScrollFrameLine> m_lines;
  /*<thisrel this+0x354>*/ /*|0x14|*/ class TSGrowableArray<CSimpleMessageScrollFrameDisplayNode> m_displayNodes;
  /*<thisrel this+0x368>*/ /*|0xc|*/ class TSExplicitList<CSimpleHyperlinkButton,760> m_hyperlinks;

  // base classes -----------------------------------
  // baseclass class CSimpleHyperlinkedFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleMessageScrollFrame::RegisterScriptMethods();
  static void __fastcall CSimpleMessageScrollFrame::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageScrollFrame(class CSimpleMessageScrollFrame&);
  void __thiscall CSimpleMessageScrollFrame::CSimpleMessageScrollFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent, /*<regrel ebp+0xc>*/ /*|0x4|*/ int maxLines);
  void __thiscall CSimpleMessageScrollFrame::SetMaxLines(/*<regrel ebp+0x8>*/ /*|0x4|*/ int maxLines);
  void __thiscall CSimpleMessageScrollFrame::SetMessageFrameInsets(/*<regrel ebp+0x8>*/ /*|0x4|*/ float right, /*<regrel ebp+0xc>*/ /*|0x4|*/ float left, /*<regrel ebp+0x10>*/ /*|0x4|*/ float top, /*<regrel ebp+0x14>*/ /*|0x4|*/ float bottom);
  void __thiscall CSimpleMessageScrollFrame::SetTextLength(/*<regrel ebp+0x8>*/ /*|0x4|*/ int size);
  void __thiscall SetFont(char*, float, int);
  void __thiscall SetHorizontalAlignment(unsigned int);
  void __thiscall SetColor(class NTempest::CImVector&);
  void __thiscall AddShadow(class NTempest::CImVector&, class NTempest::C2Vector&);
  void __thiscall SetSpacing(float);
  class CSimpleFontStringAttributes* __thiscall GetTextAttributes();
  void __thiscall SetFade(int);
  void __thiscall SetTimeVisible(float);
  void __thiscall SetFadeDuration(float);
  void __thiscall CSimpleMessageScrollFrame::AddMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CSimpleFontStringAttributes* attrib);
  unsigned int __thiscall CSimpleMessageScrollFrame::AddMultiLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CSimpleFontStringAttributes* attrib);
  void __thiscall CSimpleMessageScrollFrame::Clear();
  int __thiscall CanScroll();
  int __thiscall CSimpleMessageScrollFrame::ScrollUp();
  int __thiscall CSimpleMessageScrollFrame::ScrollDown();
  void __thiscall CSimpleMessageScrollFrame::PageUp();
  void __thiscall CSimpleMessageScrollFrame::PageDown();
  void __thiscall CSimpleMessageScrollFrame::ScrollToTop();
  void __thiscall CSimpleMessageScrollFrame::ScrollToBottom();
  int __thiscall GetNumDisplayLines();
  int __thiscall AtBottom();
  void __thiscall CSimpleMessageScrollFrame::ScrollMessages(/*<regrel ebp+0x8>*/ /*|0x4|*/ int start);
  void __thiscall CSimpleMessageScrollFrame::UpdateNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleMessageScrollFrameDisplayNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CSimpleMessageScrollFrameLine* line, /*<regrel ebp+0x10>*/ /*|0x4|*/ int resetTimers);
  void __thiscall CSimpleMessageScrollFrame::RefreshMessages();
  void __thiscall CSimpleMessageScrollFrame::RefreshHyperlinks();
  class CSimpleMessageScrollFrame& __thiscall operator=(class CSimpleMessageScrollFrame&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageScrollFrame::~CSimpleMessageScrollFrame();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageScrollFrame::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageScrollFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageScrollFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleMessageScrollFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x374>

class CSimpleScrollFrame : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb94fc>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ int m_updateScrollChild;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ class CSimpleFrame* m_scrollChild;
  /*<thisrel this+0x2b4>*/ /*|0x8|*/ class NTempest::C2Vector m_scrollRange;
  /*<thisrel this+0x2bc>*/ /*|0x8|*/ class NTempest::C2Vector m_scrollOffset;
  /*<thisrel this+0x2c4>*/ /*|0x4|*/ int m_onHorizontalScroll;
  /*<thisrel this+0x2c8>*/ /*|0x4|*/ int m_onVerticalScroll;
  /*<thisrel this+0x2cc>*/ /*|0x4|*/ int m_onScrollRangeChanged;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleScrollFrame::RegisterScriptMethods();
  static void __fastcall CSimpleScrollFrame::UnregisterScriptMethods();
  static void __fastcall CSimpleScrollFrame::RenderScrollChild(/*<register ecx>*/ /*|0x4|*/ void* param);

  // non-virtual functions --------------------------
  void __thiscall CSimpleScrollFrame(class CSimpleScrollFrame&);
  void __thiscall CSimpleScrollFrame::CSimpleScrollFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleScrollFrame::SetScrollChild(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleScrollFrame::SetHorizontalScroll(/*<regrel ebp+0x8>*/ /*|0x4|*/ float offset);
  void __thiscall CSimpleScrollFrame::SetVerticalScroll(/*<regrel ebp+0x8>*/ /*|0x4|*/ float offset);
  float __thiscall GetHorizontalScroll();
  float __thiscall GetVerticalScroll();
  float __thiscall GetHorizontalScrollRange();
  float __thiscall GetVerticalScrollRange();
  void __thiscall CSimpleScrollFrame::UpdateScrollChildRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ float w, /*<regrel ebp+0xc>*/ /*|0x4|*/ float h);
  void __thiscall UpdateScrollChildRect();
  void __thiscall SetOnHorizontalScrollScript(char*);
  void __thiscall RunOnHorizontalScrollScript();
  void __thiscall SetOnVerticalScrollScript(char*);
  void __thiscall RunOnVerticalScrollScript();
  void __thiscall SetOnScrollRangeChangedScript(char*);
  void __thiscall RunOnScrollRangeChangedScript();
  void __thiscall CSimpleScrollFrame::UpdateScrollChild();
  class CSimpleScrollFrame& __thiscall operator=(class CSimpleScrollFrame&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::~CSimpleScrollFrame();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::OnFrameRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleScrollFrame::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ float w, /*<regrel ebp+0xc>*/ /*|0x4|*/ float h);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleScrollFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2d0>

class CSimpleSlider : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb94b8>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_changed:0:1;
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_rangeSet:1:1;
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_valueSet:2:1;
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_buttonDown:3:1;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ float m_baseValue;
  /*<thisrel this+0x2b4>*/ /*|0x4|*/ float m_range;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ float m_value;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ float m_valueStep;
  /*<thisrel this+0x2c0>*/ /*|0x4|*/ class CSimpleTexture* m_thumbTexture;
  /*<thisrel this+0x2c4>*/ /*|0x4|*/ enum SLIDER_ORIENTATION m_orientation;
  /*<thisrel this+0x2c8>*/ /*|0x4|*/ int m_onValueChanged;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleSlider::RegisterScriptMethods();
  static void __fastcall CSimpleSlider::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleSlider(class CSimpleSlider&);
  void __thiscall CSimpleSlider::CSimpleSlider(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleSlider::SetThumbTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture, /*<regrel ebp+0xc>*/ /*|0x4|*/ int layer);
  void __thiscall CSimpleSlider::SetOrientation(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SLIDER_ORIENTATION orientation);
  void __thiscall CSimpleSlider::SetMinMaxValues(/*<regrel ebp+0x8>*/ /*|0x4|*/ float min, /*<regrel ebp+0xc>*/ /*|0x4|*/ float max);
  void __thiscall CSimpleSlider::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ float value);
  void __thiscall CSimpleSlider::SetValueStep(/*<regrel ebp+0x8>*/ /*|0x4|*/ float step);
  float __thiscall GetMinValue();
  float __thiscall GetMaxValue();
  float __thiscall GetValue();
  float __thiscall GetValueStep();
  enum SLIDER_ORIENTATION __thiscall GetOrientation();
  int __thiscall IsHorizontal();
  int __thiscall IsVertical();
  void __thiscall SetOnValueChangedScript(char*);
  void __thiscall RunOnValueChangedScript();
  float __thiscall StepValue(float);
  class CSimpleSlider& __thiscall operator=(class CSimpleSlider&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleSlider::~CSimpleSlider();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleSlider::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleSlider::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleSlider::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleSlider::OnLayerTrackUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleSlider::OnFrameSizeChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleSlider::OnLayerMouseDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleSlider::OnLayerMouseUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleSlider::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2cc>

class CSimpleStatusBar : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb9480>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_changed:0:1;
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_rangeSet:1:1;
  /*<bitfield this+0x2ac>*/ /*|0x4|*/ int m_valueSet:2:1;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ float m_minValue;
  /*<thisrel this+0x2b4>*/ /*|0x4|*/ float m_maxValue;
  /*<thisrel this+0x2b8>*/ /*|0x4|*/ float m_value;
  /*<thisrel this+0x2bc>*/ /*|0x4|*/ class CSimpleTexture* m_barTexture;
  /*<thisrel this+0x2c0>*/ /*|0x4|*/ int m_onValueChanged;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleStatusBar::RegisterScriptMethods();
  static void __fastcall CSimpleStatusBar::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CSimpleStatusBar(class CSimpleStatusBar&);
  void __thiscall CSimpleStatusBar::CSimpleStatusBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleStatusBar::SetBarTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture, /*<regrel ebp+0xc>*/ /*|0x4|*/ int layer);
  int __thiscall CSimpleStatusBar::SetBarTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* texFile, /*<regrel ebp+0xc>*/ /*|0x4|*/ int layer);
  void __thiscall CSimpleStatusBar::SetMinMaxValues(/*<regrel ebp+0x8>*/ /*|0x4|*/ float min, /*<regrel ebp+0xc>*/ /*|0x4|*/ float max);
  float __thiscall GetValue();
  float __thiscall GetMinValue();
  float __thiscall GetMaxValue();
  void __thiscall SetOnValueChangedScript(char*);
  void __thiscall RunOnValueChangedScript();
  class CSimpleStatusBar& __thiscall operator=(class CSimpleStatusBar&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleStatusBar::~CSimpleStatusBar();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleStatusBar::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleStatusBar::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x8c>*/ void __thiscall CSimpleStatusBar::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ float value);
  virtual /*<vtableoff 0x90>*/ void __thiscall CSimpleStatusBar::SetStatusBarColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  virtual /*<vtableoff 0x94>*/ float __thiscall CSimpleStatusBar::GetAnimValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleStatusBar::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleStatusBar::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c4>

class CSimpleMessageScrollFrameLine {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* string;
  /*<thisrel this+0x4>*/ /*|0x30|*/ class CSimpleFontStringAttributes attrib;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int isVisible;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float timeLeft;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float fadeLeft;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageScrollFrameLine(class CSimpleMessageScrollFrameLine&);
  void __thiscall CSimpleMessageScrollFrameLine();
  void __thiscall CSimpleMessageScrollFrameLine::~CSimpleMessageScrollFrameLine();
  class CSimpleMessageScrollFrameLine& __thiscall operator=(class CSimpleMessageScrollFrameLine&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class FrameScript_Object {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ int lua_registered;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int lua_objectRef;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_onEvent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall FillScriptMethodTable(struct FrameScript_Method*, int, class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>&);
  static void __fastcall EmptyScriptMethodTable(class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>&);
  static int __fastcall LookupScriptMethod(struct lua_State*);
  static int __fastcall LookupScriptMethod(struct lua_State*, char*, class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>&);

  // non-virtual functions --------------------------
  void __thiscall FrameScript_Object(class FrameScript_Object&);
  void __thiscall FrameScript_Object(struct lua_State*);
  void __thiscall FrameScript_Object();
  void __thiscall RegisterScriptObject(char*);
  void __thiscall UnregisterScriptObject(char*);
  int __thiscall LookupScriptMethod(struct lua_State*, char*);
  int __thiscall RegisterScriptEvent(char*);
  void __thiscall UnregisterScriptEvent(char*);
  void __thiscall UnregisterAllScriptEvents();
  void __thiscall SetEventScript(int&, char*, char*);
  void __thiscall SetOnEventScript(char*);
  void __cdecl OnScriptEvent(char*, char*, char*);
  void __thiscall OnScriptEvent(char*);
  class FrameScript_Object& __thiscall operator=(class FrameScript_Object&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~FrameScript_Object();
  virtual /*<vtableoff 0x4>*/ char* __thiscall GetName();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class CSimpleRegion : class CLayoutFrame  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x50>*/ /*|0x1|*/ unsigned char m_color_a;
  /*<thisrel this+0x51>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x58>*/ /*|0x4|*/ class NTempest::CImVector* m_GxColor;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ class CSimpleFrame* m_frame;
  /*<thisrel this+0x60>*/ /*|0x4|*/ unsigned int m_drawlayer;
  /*<thisrel this+0x64>*/ /*|0x4|*/ int m_visible;

  // base classes -----------------------------------
  // baseclass class CLayoutFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleRegion(class CSimpleRegion&);
  void __thiscall CSimpleRegion::CSimpleRegion(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer, /*<regrel ebp+0x10>*/ /*|0x4|*/ int show);
  void __thiscall CSimpleRegion::SetVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CSimpleRegion::GetVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  class NTempest::CImVector* __thiscall GetGxColor();
  void __thiscall CSimpleRegion::Show();
  void __thiscall CSimpleRegion::Hide();
  int __thiscall IsVisible();
  void __thiscall CSimpleRegion::SetFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int drawlayer, /*<regrel ebp+0x10>*/ /*|0x4|*/ int show);
  void __thiscall CSimpleRegion::OnRegionChanged();
  class CSimpleFrame* __thiscall GetParentFrame();
  class CSimpleRegion& __thiscall operator=(class CSimpleRegion&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleRegion::~CSimpleRegion();
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleRegion::GetLayoutParent();
  virtual /*<vtableoff 0x34>*/ void __thiscall CSimpleRegion::OnGxColorChanged();
  virtual /*<vtableoff 0x38>*/ void __thiscall Draw(class CRenderBatch*) = 0;
  virtual /*<vtableoff 0x3c>*/ void __thiscall ClearFromSimpleRegistry() = 0;
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x68>

class CRenderBatch {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x14|*/ class TSGrowableArray<CSimpleBatchedTexture> m_texturelist;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ struct CGxStringBatch* m_stringbatch;
  /*<thisrel this+0x20>*/ /*|0xc|*/ class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> > m_callbacks;
  /*<thisrel this+0x2c>*/ /*|0x8|*/ class TSLink<CRenderBatch> renderLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CRenderBatch(class CRenderBatch&);
  void __thiscall CRenderBatch::CRenderBatch();
  void __thiscall CRenderBatch::QueueTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleTexture* texture);
  void __thiscall CRenderBatch::QueueFontString(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFontString* string);
  void __thiscall CRenderBatch::QueueCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (callback*)(void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param);
  void __thiscall CRenderBatch::Finish();
  void __thiscall CRenderBatch::Clear();
  unsigned int __thiscall Count();
  class CRenderBatch& __thiscall operator=(class CRenderBatch&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CRenderBatch::~CRenderBatch();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x34>

class CSimpleMessageScrollFrameDisplayNode : class TRefCnt  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CSimpleFontStringRecord* string;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleMessageScrollFrameLine* line;
  /*<thisrel this+0x10>*/ /*|0x30|*/ class CSimpleFontStringAttributes attrib;

  // base classes -----------------------------------
  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageScrollFrameDisplayNode::CSimpleMessageScrollFrameDisplayNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleMessageScrollFrameDisplayNode& rhs);
  void __thiscall CSimpleMessageScrollFrameDisplayNode::CSimpleMessageScrollFrameDisplayNode();
  class CSimpleMessageScrollFrameDisplayNode& __thiscall operator=(class CSimpleMessageScrollFrameDisplayNode&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageScrollFrameDisplayNode::~CSimpleMessageScrollFrameDisplayNode();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x40>

class CSimpleFontStringRecord : class CSimpleFontString,  class TRefCnt  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CSimpleFontString
  // <base data offset+0x0>

  // baseclass class TRefCnt
  // <base data offset+0xc4>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleFontStringRecord(class CSimpleFontStringRecord&);
  void __thiscall CSimpleFontStringRecord(class CSimpleFrame*, unsigned int, int);
  class CSimpleFontStringRecord& __thiscall operator=(class CSimpleFontStringRecord&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CSimpleFontStringRecord();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xcc>

class CSimpleMessageFrameLine {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float offsetX;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float offsetY;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CSimpleMessageFrameLineNode* stringNode;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageFrameLine(class CSimpleMessageFrameLine&);
  void __thiscall CSimpleMessageFrameLine::CSimpleMessageFrameLine();
  void __thiscall ~CSimpleMessageFrameLine();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class CSimpleMessageFrameLineNode : class TRefCnt  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NTempest::CImVector color;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleFontString* string;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float timeLeft;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float fadeLeft;
  /*<bitfield this+0x18>*/ /*|0x4|*/ int permanent:0:1;
  /*<bitfield this+0x18>*/ /*|0x4|*/ int isVisible:1:1;

  // base classes -----------------------------------
  // baseclass class TRefCnt
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleMessageFrameLineNode(class CSimpleMessageFrameLineNode&);
  void __thiscall CSimpleMessageFrameLineNode::CSimpleMessageFrameLineNode();
  class CSimpleMessageFrameLineNode& __thiscall operator=(class CSimpleMessageFrameLineNode&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleMessageFrameLineNode::~CSimpleMessageFrameLineNode();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x1c>

class CSimpleButtonClickEvent : class CEvent  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ enum MOUSEBUTTON button;

  // base classes -----------------------------------
  // baseclass class CEvent
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleButtonClickEvent(class CSimpleButtonClickEvent&);
  void __thiscall CSimpleButtonClickEvent(unsigned int);
  class CSimpleButtonClickEvent& __thiscall operator=(class CSimpleButtonClickEvent&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CSimpleButtonClickEvent();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14>

class CBackdropGenerator {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CSimpleTexture* m_backgroundTexture;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CSimpleTexture* m_leftTexture;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CSimpleTexture* m_rightTexture;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleTexture* m_topTexture;
  /*<thisrel this+0x10>*/ /*|0x4|*/ class CSimpleTexture* m_bottomTexture;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class CSimpleTexture* m_topLeftTexture;
  /*<thisrel this+0x18>*/ /*|0x4|*/ class CSimpleTexture* m_topRightTexture;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ class CSimpleTexture* m_bottomLeftTexture;
  /*<thisrel this+0x20>*/ /*|0x4|*/ class CSimpleTexture* m_bottomRightTexture;
  /*<thisrel this+0x24>*/ /*|0xc|*/ class RCStaticString m_background;
  /*<thisrel this+0x30>*/ /*|0xc|*/ class RCStaticString m_border;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_pieces;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int m_tileBackground;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_blendAll;
  /*<thisrel this+0x48>*/ /*|0x4|*/ float m_cornerSize;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ float m_backgroundSize;
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_topInset;
  /*<thisrel this+0x54>*/ /*|0x4|*/ float m_bottomInset;
  /*<thisrel this+0x58>*/ /*|0x4|*/ float m_leftInset;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ float m_rightInset;
  /*<thisrel this+0x60>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x64>*/ /*|0x4|*/ class NTempest::CImVector m_borderColor;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBackdropGenerator(class CBackdropGenerator&);
  void __thiscall CBackdropGenerator::CBackdropGenerator();
  void __thiscall CBackdropGenerator::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall SetBackdropTextures(char*, char*, unsigned int, int);
  void __thiscall SetBackdropTextures(class RCStaticString&, class RCStaticString&, unsigned int, int);
  void __thiscall SetCornerSize(float);
  void __thiscall SetBackgroundSize(float);
  void __thiscall SetBackgroundInsets(float, float, float, float);
  void __thiscall CBackdropGenerator::SetOutput(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* output);
  void __thiscall CBackdropGenerator::Generate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect* rect);
  void __thiscall CBackdropGenerator::SetVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CBackdropGenerator::GetVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CBackdropGenerator::SetBorderVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CBackdropGenerator::GetBorderVertexColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  class CBackdropGenerator& __thiscall operator=(class CBackdropGenerator&);
  void __thiscall CBackdropGenerator::~CBackdropGenerator();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x68>

class RCStaticString : class RCString  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class RCString
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* __thiscall operator const char *();
  class RCStaticString& __thiscall operator=(class RCStaticString&);
  class RCStaticString& __thiscall operator=(char*);
  void __thiscall RCStaticString(class RCStaticString&);
  void __thiscall RCStaticString();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~RCStaticString();
  virtual /*<vtableoff 0x4>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CSimpleModel : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb933c>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ struct HCAMERA__* m_camera;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ unsigned int m_cameraIndex;
  /*<thisrel this+0x2b4>*/ /*|0x3c|*/ class CGxLight m_light;
  /*<thisrel this+0x2f0>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x2fc>*/ /*|0x4|*/ float m_facing;
  /*<thisrel this+0x300>*/ /*|0x4|*/ float m_scale;
  /*<thisrel this+0x304>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x308>*/ /*|0x4|*/ class NTempest::CImVector m_fogColor;
  /*<thisrel this+0x30c>*/ /*|0x4|*/ float m_fogNear;
  /*<thisrel this+0x310>*/ /*|0x4|*/ float m_fogFar;
  /*<thisrel this+0x314>*/ /*|0x18|*/ class NTempest::CAaBox m_cachedExtents;
  /*<thisrel this+0x32c>*/ /*|0x4|*/ int m_onUpdateModel;
  /*<thisrel this+0x330>*/ /*|0x4|*/ int m_onAnimFinished;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleModel::RegisterScriptMethods();
  static void __fastcall CSimpleModel::UnregisterScriptMethods();
  static void __fastcall CSimpleModel::RenderModel(/*<register ecx>*/ /*|0x4|*/ void* param);

  // non-virtual functions --------------------------
  void __thiscall CSimpleModel(class CSimpleModel&);
  void __thiscall CSimpleModel::CSimpleModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CSimpleModel::SetModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CSimpleModel::SetModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* sourcefile, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CModelCreate* data, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CStatus* status);
  void __thiscall CSimpleModel::SetCamera(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HCAMERA__* camera);
  void __thiscall CSimpleModel::SetCameraByIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CSimpleModel::SetLight(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxLight& light);
  void __thiscall SetPosition(class NTempest::C3Vector&);
  void __thiscall SetFacing(float);
  void __thiscall SetScale(float);
  void __thiscall CSimpleModel::SetSequence(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  int __thiscall CSimpleModel::SetSequenceTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int timeOffset);
  int __thiscall CSimpleModel::AdvanceTime();
  void __thiscall CSimpleModel::ReplaceTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int materialID, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* textureName);
  struct HMODEL__* __thiscall GetModel();
  struct HCAMERA__* __thiscall GetCamera();
  class NTempest::C3Vector __thiscall GetPosition();
  float __thiscall GetFacing();
  float __thiscall GetScale();
  int __thiscall HasFog();
  void __thiscall SetFog(int);
  int __thiscall IsModelLoaded();
  int __thiscall CSimpleModel::ModelJustLoaded();
  int __thiscall IsUserFlagSet(unsigned int);
  void __thiscall SetUserFlag(unsigned int, int);
  void __thiscall SetModelLoaded(int);
  int __thiscall IsWaitingForCamera();
  void __thiscall SetWaitingForCamera(int);
  class NTempest::CImVector& __thiscall CSimpleModel::GetFogColor();
  void __thiscall SetFogColor(class NTempest::CImVector&);
  float __thiscall GetFogNear();
  float __thiscall GetFogFar();
  void __thiscall SetFogNear(float);
  void __thiscall SetFogFar(float);
  void __thiscall SetOnUpdateModelScript(char*);
  void __thiscall RunOnUpdateModelScript();
  void __thiscall SetOnAnimFinishedScript(char*);
  void __thiscall RunOnAnimFinishedScript();
  void __thiscall CSimpleModel::FinishLoadingModel();
  void __thiscall CSimpleModel::SetCameraInternal(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HCAMERA__* camera);
  class CSimpleModel& __thiscall operator=(class CSimpleModel&);
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleModel::~CSimpleModel();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleModel::LoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleModel::LoadXML_Scripts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleModel::GetWidth();
  virtual /*<vtableoff 0x0>*/ float __thiscall CSimpleModel::GetHeight();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleModel::SetAlpha(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char alpha);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleModel::OnFrameRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  virtual /*<vtableoff 0x8c>*/ void __thiscall CSimpleModel::UpdateModel();
  virtual /*<vtableoff 0x0>*/ int __thiscall CSimpleModel::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x334>

class CSimpleRender {

  // static data ------------------------------------
  static /*<rva 0xcb72c0>*/ /*|0xc|*/ class NTempest::C3Vector s_normal;
  static /*<rva 0x4af8d0>*/ /*|0x8|*/ unsigned short s_indices[4];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CSimpleRender::DrawBatch(/*<register ecx>*/ /*|0x4|*/ class CRenderBatch* batch);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CSimpleTop : class CLayoutFrame  {

  // static data ------------------------------------
  static /*<rva 0xcb6220>*/ /*|0x4|*/ class CSimpleTop* s_instance;

  // non-static data --------------------------------
  /*<thisrel this+0x50>*/ /*|0x4|*/ struct HLAYER__* m_screenLayer;
  /*<thisrel this+0x54>*/ /*|0x4|*/ struct HLAYER__* m_cursorLayer;
  /*<thisrel this+0x58>*/ /*|0x4|*/ struct HMODEL__* m_cursor;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ int m_cursorVisible;
  /*<thisrel this+0x60>*/ /*|0x4|*/ class CSimpleFrame* m_mouseFocus;
  /*<thisrel this+0x64>*/ /*|0x4|*/ class CSimpleFrame* m_mouseCapture;
  /*<thisrel this+0x68>*/ /*|0xc30|*/ class CSimpleFrame* m_keydownCapture[780];
  /*<thisrel this+0xc98>*/ /*|0xc|*/ class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> > m_frames;
  /*<thisrel this+0xca4>*/ /*|0xc|*/ class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> > m_destroyed;
  /*<thisrel this+0xcb0>*/ /*|0x18|*/ class CFrameStrata* m_strata[6];
  /*<thisrel this+0xcc8>*/ /*|0x24|*/ struct CSimpleTop::frame_layout m_layout;
  /*<thisrel this+0xcec>*/ /*|0x280|*/ class CSimpleSortedArray<FRAMEPRIORITY *> m_eventqueue[4][5];
  /*<thisrel this+0xf6c>*/ /*|0x4|*/ unsigned long m_eventTime;
  /*<thisrel this+0xf70>*/ /*|0x4|*/ int m_checkFocus;
  /*<thisrel this+0xf74>*/ /*|0x24|*/ struct EVENT_DATA_MOUSE m_mousePosition;
  /*<thisrel this+0xf98>*/ /*|0x4|*/ int  (m_mouseButtonCallback*)(class CMouseEvent&);
  /*<thisrel this+0xf9c>*/ /*|0x4|*/ int  (m_displaySizeCallback*)(class CSizeEvent&);

  // base classes -----------------------------------
  // baseclass class CLayoutFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CSimpleTop* __fastcall GetInstance();
  static int __fastcall CSimpleTop::OnChar(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_CHAR* pCharEvtData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnIme(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_IME* pImeData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnKeyDown(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnKeyUp(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnKeyDownRepeat(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_KEY* pKeyData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnMouseMove(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnMouseMoveRelative(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnMouseDown(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnMouseUp(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnMouseWheel(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_MOUSE* pMouseData, /*<register edx>*/ /*|0x4|*/ void* param);
  static int __fastcall CSimpleTop::OnDisplaySizeChanged(/*<register ecx>*/ /*|0x4|*/ struct EVENT_DATA_SIZE* pSizeData, /*<register edx>*/ /*|0x4|*/ void* param);

  // non-virtual functions --------------------------
  void __thiscall CSimpleTop(class CSimpleTop&);
  void __thiscall CSimpleTop::CSimpleTop();
  void __thiscall CSimpleTop::EnumerateFrames(/*<regrel ebp+0x8>*/ /*|0x4|*/ int  (callback*)(class CSimpleFrame*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param);
  void __thiscall CSimpleTop::ValidateDeletedFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleTop::RegisterFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleTop::UnregisterFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleTop::NotifyFrameMovedOrResized(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall CSimpleTop::NotifyFrameLayerChanged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  void __thiscall CSimpleTop::RegisterForEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CSimpleEventType event, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int priority);
  void __thiscall CSimpleTop::UnregisterForEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CSimpleEventType event);
  void __thiscall CSimpleTop::RegisterForDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall RegisterForMouseButton(int  (*)(class CMouseEvent&));
  void __thiscall UnregisterForMouseButton(int  (*)(class CMouseEvent&));
  void __thiscall RegisterForDisplaySize(int  (*)(class CSizeEvent&));
  void __thiscall UnregisterForDisplaySize(int  (*)(class CSizeEvent&));
  void __thiscall CSimpleTop::SetCursor(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* cursor);
  void __thiscall HideCursor();
  void __thiscall ShowCursor();
  void __thiscall GetMousePosition(class NTempest::C2Vector&);
  class CSimpleFrame* __thiscall GetLayerUnderCursor();
  int __thiscall CSimpleTop::RaiseFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ int checkOcclusion);
  int __thiscall CSimpleTop::RaiseFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& pt);
  int __thiscall CSimpleTop::LowerFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame);
  void __thiscall SetLayoutMode(int);
  int __thiscall IsLayoutEnabled();
  int __thiscall IsMovingOrResizing();
  int __thiscall CSimpleTop::StartMoveOrResizeFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& start, /*<regrel ebp+0xc>*/ /*|0x4|*/ int resize);
  int __thiscall CSimpleTop::StartMoveOrResizeFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* frame, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMouseEvent& start, /*<regrel ebp+0x10>*/ /*|0x4|*/ int resize);
  void __thiscall CSimpleTop::MoveOrResizeFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  void __thiscall CSimpleTop::StopMoveOrResizeFrame();
  unsigned long __thiscall GetLastEventTime();
  void __thiscall UpdateEventTime(unsigned long);
  void __thiscall CSimpleTop::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  void __thiscall CSimpleTop::OnLayerRender();
  void __thiscall CSimpleTop::DrawCursor();
  void __thiscall CSimpleTop::EnableEvents();
  void __thiscall CSimpleTop::DisableEvents();
  class CSimpleTop& __thiscall operator=(class CSimpleTop&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSimpleTop::~CSimpleTop();
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xfa0>

class CSimpleTitleRegion : class CLayoutFrame  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x50>*/ /*|0x4|*/ class CLayoutFrame* m_parent;

  // base classes -----------------------------------
  // baseclass class CLayoutFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleTitleRegion(class CSimpleTitleRegion&);
  void __thiscall CSimpleTitleRegion();
  void __thiscall SetParent(class CLayoutFrame*);
  class CSimpleTitleRegion& __thiscall operator=(class CSimpleTitleRegion&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ class CLayoutFrame* __thiscall CSimpleTitleRegion::GetLayoutParent();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CSimpleTitleRegion();
  virtual /*<vtableoff 0x8>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x54>

class CFramePoint {

  // static data ------------------------------------
  static /*<rva 0xcb9754>*/ /*|0x4|*/ float UNDEFINED;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFramePoint(class CFramePoint&);
  void __thiscall CFramePoint();
  class CFramePoint& __thiscall operator=(class CFramePoint&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CFramePoint();
  virtual /*<vtableoff 0x4>*/ float __thiscall X(float) = 0;
  virtual /*<vtableoff 0x8>*/ float __thiscall Y(float) = 0;
  virtual /*<vtableoff 0xc>*/ class CLayoutFrame* __thiscall CFramePoint::GetRelative();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x4>

class CFramePointAbsolute : class CFramePoint  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x8|*/ class NTempest::C2Vector m_point;

  // base classes -----------------------------------
  // baseclass class CFramePoint
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFramePointAbsolute(class CFramePointAbsolute&);
  void __thiscall CFramePointAbsolute(float, float);
  class CFramePointAbsolute& __thiscall operator=(class CFramePointAbsolute&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ float __thiscall CFramePointAbsolute::X(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale);
  virtual /*<vtableoff 0x0>*/ float __thiscall CFramePointAbsolute::Y(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CFramePointAbsolute();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CFrameStrata {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int batchDirty;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int levelsDirty;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int topLevel;
  /*<thisrel this+0xc>*/ /*|0x10|*/ class TSFixedArray<CFrameStrataNode *> levels;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFrameStrata(class CFrameStrata&);
  void __thiscall CFrameStrata();
  void __thiscall CFrameStrata::~CFrameStrata();
  int __thiscall EnumerateFrames(int  (*)(class CSimpleFrame*, void*), void*);
  void __thiscall AddFrame(class CSimpleFrame*);
  void __thiscall DelFrame(class CSimpleFrame*);
  class CSimpleFrame* __thiscall GetToplevelFrame(class NTempest::C2Vector&);
  void __thiscall RaiseFrame(class CSimpleFrame*);
  void __thiscall OnFrameMovedOrResized(class CSimpleFrame*);
  void __thiscall OnFrameLayerChanged(class CSimpleFrame*, unsigned int);
  void __thiscall OnLayerWindowSizeChanged();
  void __thiscall OnLayerUpdate(float);
  void __thiscall CompressLevels();
  int __thiscall CFrameStrata::FrameOccluded(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* thisFrame);
  void __thiscall CFrameStrata::CheckOcclusion();
  int __thiscall BuildBatches(int);
  void __thiscall RenderBatches();
  class CFrameStrata& __thiscall operator=(class CFrameStrata&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CFrameStrataNode {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class TSExplicitList<CSimpleFrame,668> frames;
  /*<thisrel this+0xc>*/ /*|0x104|*/ class CRenderBatch batches[5];
  /*<thisrel this+0x110>*/ /*|0x4|*/ unsigned int batchDirty;
  /*<thisrel this+0x114>*/ /*|0xc|*/ class TSExplicitList<CRenderBatch,44> renderList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFrameStrataNode(class CFrameStrataNode&);
  void __thiscall CFrameStrataNode();
  void __thiscall ~CFrameStrataNode();
  int __thiscall IsEmpty();
  int __thiscall AddFrame(class CSimpleFrame*);
  int __thiscall DelFrame(class CSimpleFrame*);
  void __thiscall OnLayerUpdate(float);
  int __thiscall CFrameStrataNode::BuildBatches();
  void __thiscall RenderBatches();
  class CFrameStrataNode& __thiscall operator=(class CFrameStrataNode&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x120>

class FRAMEPRIORITY {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CSimpleFrame* frame;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int priority;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int __thiscall SimpleSortedArrayValue();

  // virtual functions ------------------------------
};
// <size 0x8>

class TSet {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x400|*/ struct TSet::__unnamed_d6_ set[64];
  /*<thisrel this+0x400>*/ /*|0x4|*/ int count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall TSet();
  void __thiscall TSet::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int token, /*<regrel ebp+0xc>*/ /*|0x4|*/ int needed, /*<regrel ebp+0x10>*/ /*|0x4|*/ int allowDuplicates);
  int __thiscall TSet::Check(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int token);
  int __thiscall TSet::Found(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int token);
  int __thiscall TSet::NotFound(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int token);
  void __thiscall TSet::Complete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMDLStatus* status);

  // virtual functions ------------------------------
};
// <size 0x404>

class CMDLStatus : class CStatus  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CStatus
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMDLStatus::FatalBadFileName(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* path);
  void __thiscall CMDLStatus::FatalDuplicate(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* found, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalUnmatched(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* item1, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count1, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* item2, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int count2, /*<regrel ebp+0x18>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalNotFound(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalNotFound(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* expected, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalUnexpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* found, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalExpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* found, /*<regrel ebp+0x10>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalExpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* expected, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* found, /*<regrel ebp+0x10>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalEOF(/*<regrel ebp+0x8>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::WarningCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ long expected, /*<regrel ebp+0x10>*/ /*|0x4|*/ long actual, /*<regrel ebp+0x14>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalOverran(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* section, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus::FatalFlunked(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* section, /*<regrel ebp+0xc>*/ /*|0x4|*/ int lineno);
  void __thiscall CMDLStatus(class CMDLStatus&);
  void __thiscall CMDLStatus();
  class CMDLStatus& __thiscall operator=(class CMDLStatus&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CMDLStatus();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class Parser {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class mdl_scan& m_scanner;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMDLStatus* m_status;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Parser(class CMDLStatus*, class mdl_scan&);
  void __thiscall Parser::FatalDuplicate(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* found);
  void __thiscall Parser::FatalUnmatched(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* item1, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count1, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* item2, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int count2);
  void __thiscall Parser::FatalNotFound(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what);
  void __thiscall Parser::FatalNotFound(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* expected);
  void __thiscall Parser::FatalUnexpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* found);
  void __thiscall Parser::FatalExpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* found);
  void __thiscall Parser::FatalExpected(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* expected, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* found);
  void __thiscall Parser::FatalEOF();
  void __thiscall Parser::WarningCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ long expected, /*<regrel ebp+0x10>*/ /*|0x4|*/ long actual);
  int __thiscall FoundError();
  void __thiscall Parser::Expect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int cachedtoken, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* tokentext);
  void __thiscall Parser::Expect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int what);
  long __thiscall Parser::ExpectInt(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int cachedtoken, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* tokentext, /*<regrel ebp+0x10>*/ /*|0x4|*/ union UTokenData* cachedvalue);
  long __thiscall Parser::ExpectInt();
  float __thiscall Parser::ExpectFloat();
  char* __thiscall Parser::ExpectString(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int cachedtoken, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* tokentext, /*<regrel ebp+0x10>*/ /*|0x4|*/ union UTokenData* cachedvalue);
  char* __thiscall Parser::ExpectString();
  long __thiscall Parser::GetOptionalInt(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int cachedtoken, /*<regrel ebp+0xc>*/ /*|0x4|*/ union UTokenData* cachedvalue, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* token, /*<regrel ebp+0x14>*/ /*|0x4|*/ char** tokentext);
  long __thiscall Parser::GetOptionalInt(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* token, /*<regrel ebp+0xc>*/ /*|0x4|*/ char** tokentext, /*<regrel ebp+0x10>*/ /*|0x4|*/ union UTokenData* savedvalue);
  int __thiscall Parser::GetOptionalToken(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int expected, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int cachedtoken, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* token, /*<regrel ebp+0x14>*/ /*|0x4|*/ char** tokentext);
  int __thiscall Parser::GetOptionalToken(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int expected, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* token, /*<regrel ebp+0x10>*/ /*|0x4|*/ char** tokentext);
  unsigned int __thiscall Parser::Token(/*<regrel ebp+0x8>*/ /*|0x4|*/ char** ppszToken, /*<regrel ebp+0xc>*/ /*|0x4|*/ union UTokenData* pdata);
  int __thiscall Parser::GetLineNumber();
  class Parser& __thiscall operator=(class Parser&);

  // virtual functions ------------------------------
};
// <size 0xc>

class mdl_scan {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int* state;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int size;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int mustfree;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int mdl_end;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int mdl_start;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int mdl_lastc;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int mdlLexFatal;
  /*<thisrel this+0x20>*/ /*|0x1|*/ char save;
  /*<thisrel this+0x24>*/ /*|0x4|*/ union mdl_data tokendata;
  /*<thisrel this+0x28>*/ /*|0x4|*/ char* mdltext;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ char* mdlin;
  /*<thisrel this+0x30>*/ /*|0x4|*/ struct _iobuf* mdlout;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int mdllineno;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int mdlleng;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall mdl_scan(class mdl_scan&);
  void __thiscall mdl_scan::mdl_scan(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* in, /*<regrel ebp+0xc>*/ /*|0x4|*/ int sz);
  void __thiscall mdl_scan::~mdl_scan();
  int __thiscall mdl_scan::mdllex();
  int __thiscall mdlgetc();
  int __thiscall mdl_scan::input();
  int __thiscall mdl_scan::unput(/*<regrel ebp+0x8>*/ /*|0x4|*/ int c);
  void __thiscall mdl_scan::mdl_reset();
  void __thiscall setinput(char*);
  void __thiscall setoutput(struct _iobuf*);
  void __thiscall NLSTATE();
  void __thiscall YY_INIT();
  void __thiscall YY_USER();
  void __thiscall YY_SCANNER();
  void __thiscall mdlless(int);
  void __thiscall mdl_scan::mdlcomment(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* mat);
  int __thiscall mdlmapch(int, int);
  class mdl_scan& __thiscall operator=(class mdl_scan&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int __thiscall mdl_scan::mdlwrap();
  virtual /*<vtableoff 0x4>*/ void __cdecl mdl_scan::mdlerror(/*<regrel ebp+0xc>*/ /*|0x4|*/ char* fmt, ...);
  virtual /*<vtableoff 0x8>*/ void __thiscall mdl_scan::output(/*<regrel ebp+0x8>*/ /*|0x4|*/ int c);
  virtual /*<vtableoff 0xc>*/ void __thiscall mdl_scan::YY_FATAL(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* msg);
  virtual /*<vtableoff 0x10>*/ void __thiscall mdl_scan::ECHO();
};
// <size 0x3c>

class CMdlScanner : class mdl_scan  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x3c>*/ /*|0x4|*/ class CMDLStatus* m_status;

  // base classes -----------------------------------
  // baseclass class mdl_scan
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMdlScanner(class CMdlScanner&);
  void __thiscall CMdlScanner(class CMDLStatus*, char*, int);
  class CMdlScanner& __thiscall operator=(class CMdlScanner&);
  void __thiscall ~CMdlScanner();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __cdecl CMdlScanner::mdlerror(/*<regrel ebp+0xc>*/ /*|0x4|*/ char* fmt, ...);
};
// <size 0x40>

class SFile {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ enum SFILE_TYPE m_type;
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* m_fileptr;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SArchive* m_archive;
  /*<thisrel this+0xc>*/ /*|0x4|*/ char* m_filename;
  /*<thisrel this+0x10>*/ /*|0x4|*/ char* m_actualname;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_size;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned char* m_zbuffer;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ struct z_stream_s* m_zstream;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int m_curOffset;
  /*<thisrel this+0x24>*/ /*|0x18|*/ class SCritSect m_lock;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ void* m_hsfile;
  /*<thisrel this+0x40>*/ /*|0x4|*/ struct ZipFileFCB* m_zipFile;
  /*<thisrel this+0x44>*/ /*|0x10|*/ class MD5 m_md5;
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_haveMD5;
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_closeAfterLoad;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ unsigned int m_asyncCount;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall SFile::DoAsyncRead(/*<register ecx>*/ /*|0x4|*/ class ASYNCREAD* ptr);
  static unsigned int __stdcall SFile::ReadProc(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* __formal);
  static void __fastcall SFile::InitializeReadThread();
  static void __fastcall SFile::QueueReadRequest(/*<register ecx>*/ /*|0x4|*/ class SFile* fileptr, /*<register edx>*/ /*|0x4|*/ void* buffer, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long bytestoread, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static int __fastcall SFile::DoZRead(/*<register ecx>*/ /*|0x4|*/ class SFile* fileptr, /*<register edx>*/ /*|0x4|*/ void* buffer, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long bytestoread, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long* bytesread);
  static unsigned long __stdcall SFile::GetFileSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long* filesizehigh);
  static int __stdcall SFile::GetMD5(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file, /*<regrel ebp+0xc>*/ /*|0x4|*/ class MD5& sum);
  static unsigned long __stdcall SFile::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename, /*<regrel ebp+0xc>*/ /*|0x4|*/ class SFile** file);
  static unsigned long __stdcall SFile::OpenEx(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SArchive* archive, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags, /*<regrel ebp+0x14>*/ /*|0x4|*/ class SFile** file);
  static unsigned long __stdcall SFile::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* fileptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* buffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long bytestoread, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long* bytesread, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped, /*<regrel ebp+0x1c>*/ /*|0x4|*/ struct _TASYNCPARAMBLOCK* asyncparam);
  static unsigned long __stdcall SFile::Load(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SArchive* archive, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename, /*<regrel ebp+0x10>*/ /*|0x4|*/ void** buffer, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long* bytes, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned long extraBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned long flags, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static unsigned long __stdcall SFile::LoadFile(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename, /*<regrel ebp+0xc>*/ /*|0x4|*/ void** buffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long* bytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long extraBytes, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static int __stdcall SFile::Unload(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* buffer);
  static unsigned long __stdcall SFile::Close(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file);
  static int __stdcall SFile::GetActualFileName(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long bufferchars);
  static int __stdcall SFile::GetBasePath(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long bufferchars);
  static int __stdcall SFile::SetBasePath(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* path);
  static int __stdcall SFile::SetDataPath(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* path);
  static int __stdcall SFile::SetDataPathAlternate(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* path);
  static int __stdcall SFile::FileExists(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  static unsigned long __stdcall SFile::SetFilePointer(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file, /*<regrel ebp+0xc>*/ /*|0x4|*/ long distancetomove, /*<regrel ebp+0x10>*/ /*|0x4|*/ long* distancetomovehigh, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long movemethod);
  static int __stdcall SFile::EnableDirectAccess(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long access);
  static void __stdcall SFile::CreateOverlapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static void __stdcall SFile::DestroyOverlapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static void __stdcall SFile::ResetOverlapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static void __stdcall SFile::WaitOverlapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static int __stdcall SFile::PollOverlapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped);
  static int __stdcall SFile::OpenArchive(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* archivename, /*<regrel ebp+0xc>*/ /*|0x4|*/ int priority, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags, /*<regrel ebp+0x14>*/ /*|0x4|*/ class SArchive** handle);
  static int __stdcall SFile::CloseArchive(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SArchive* archive);
  static int __stdcall SFile::List(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SArchive* archive, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (cb*)(char*, void*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* param);
  static struct SDIR* __stdcall SFile::OpenDir(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  static void __stdcall SFile::CloseDir(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SDIR* dir);
  static struct SDIRENT* __stdcall SFile::ReadDir(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SDIR* dir);
  static void __stdcall SFile::EnableHash(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char enable);
  static void __stdcall SFile::RebuildHash();
  static void __stdcall SFile::DisableSFileCheckDisk();
  static void __stdcall DisableSFileCritSection();
  static void __fastcall SFile::Destroy();

  // non-virtual functions --------------------------
  void __thiscall SFile(class SFile&);
  void __thiscall SFile::SFile(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum SFILE_TYPE type);
  void __thiscall SFile::~SFile();
  class SFile& __thiscall operator=(class SFile&);
  enum SFILE_TYPE __thiscall GetDiskType();
  unsigned long __thiscall GetFileSize();
  int __thiscall GetMD5(class MD5&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x60>

class CModelComplex : class CModelBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x50>*/ /*|0x14|*/ class TSGrowableArray<CGeoset> m_geosets;
  /*<thisrel this+0x64>*/ /*|0x14|*/ class TSGrowableArray<CGeosetShared> m_addlGeosets;
  /*<thisrel this+0x78>*/ /*|0x14|*/ class TSGrowableArray<CGeosetColor> m_geosetColor;
  /*<thisrel this+0x8c>*/ /*|0x14|*/ class TSGrowableArray<CCustomGeoset> m_custGeosets;
  /*<thisrel this+0xa0>*/ /*|0x14|*/ class TSGrowableArray<HMATERIAL__ *> m_materials;
  /*<thisrel this+0xb4>*/ /*|0x14|*/ class TSGrowableArray<CModelTexture> m_textures;
  /*<thisrel this+0xc8>*/ /*|0x10|*/ class TSFixedArray<unsigned long> m_lights;
  /*<thisrel this+0xd8>*/ /*|0x10|*/ class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > > m_attached;
  /*<thisrel this+0xe8>*/ /*|0x10|*/ class TSFixedArray_<unsigned char,1296321606,484> m_attachmentFlags;
  /*<thisrel this+0xf8>*/ /*|0x10|*/ class TSFixedArray<CParticleEmitter2 *> m_emitters2;
  /*<thisrel this+0x108>*/ /*|0x10|*/ class TSFixedArray<CRibbonEmitter *> m_ribbons;
  /*<thisrel this+0x118>*/ /*|0x10|*/ class TSFixedArray<HCAMERA__ *> m_cameras;
  /*<thisrel this+0x128>*/ /*|0x10|*/ class TSFixedArray<unsigned int> m_cameraOrder;
  /*<thisrel this+0x138>*/ /*|0x10|*/ class TSFixedArray<NTempest::C34Matrix> m_hitTestMtx;

  // base classes -----------------------------------
  // baseclass class CModelBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CModelComplex::CModelComplex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelSimple& source);
  void __thiscall CModelComplex::CModelComplex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void __thiscall CModelComplex();
  void __thiscall CModelComplex::~CModelComplex();
  class CModelComplex& __thiscall operator=(class CModelSimple&);
  class CModelComplex& __thiscall operator=(class CModelComplex&);
  void __thiscall CModelComplex::CopyAttachments(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void __thiscall CModelComplex::CopyCameras(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void __thiscall CModelComplex::CopyLights(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void __thiscall CModelComplex::CopyEmitters(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void __thiscall CModelComplex::CopyRibbons(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelComplex& source);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x148>

class CModelSimple : class CModelBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x50>*/ /*|0x2c|*/ class TSCArray<CGeoset,5> m_geosets;
  /*<thisrel this+0x7c>*/ /*|0x54|*/ class TSCArray<CGeosetColor,5> m_geosetColor;
  /*<thisrel this+0xd0>*/ /*|0x18|*/ class TSCArray<CCustomGeoset,1> m_custGeosets;
  /*<thisrel this+0xe8>*/ /*|0x14|*/ class TSCArray<HMATERIAL__ *,4> m_materials;
  /*<thisrel this+0xfc>*/ /*|0x24|*/ class TSCArray<CModelTexture,4> m_textures;

  // base classes -----------------------------------
  // baseclass class CModelBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CModelSimple::CModelSimple(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelSimple& source);
  void __thiscall CModelSimple();
  void __thiscall CModelSimple::~CModelSimple();
  class CModelSimple& __thiscall operator=(class CModelSimple&);
  void __thiscall CModelSimple::CopyMaterials(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelSimple& source);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x120>

class CRibbonEmitter {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_refCount;
  /*<thisrel this+0x4>*/ /*|0x14|*/ class TSGrowableArray<float> m_edges;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned int m_writePos;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int m_readPos;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_startTime;
  /*<thisrel this+0x24>*/ /*|0xc|*/ class NTempest::C3Vector m_prevPos;
  /*<thisrel this+0x30>*/ /*|0xc|*/ class NTempest::C3Vector m_cameraPos;
  /*<thisrel this+0x3c>*/ /*|0x14|*/ class TSGrowableArray<CRibbonVertex> m_gxVertices;
  /*<thisrel this+0x50>*/ /*|0x14|*/ class TSGrowableArray<unsigned short> m_gxIndices;
  /*<thisrel this+0x64>*/ /*|0x4|*/ float m_ooLifeSpan;
  /*<thisrel this+0x68>*/ /*|0x4|*/ float m_tmpDU;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ float m_tmpDV;
  /*<thisrel this+0x70>*/ /*|0x4|*/ float m_ooTmpDU;
  /*<thisrel this+0x74>*/ /*|0x4|*/ float m_ooTmpDV;
  /*<thisrel this+0x78>*/ /*|0x10|*/ class NTempest::CRect m_texSlotBox;
  /*<thisrel this+0x88>*/ /*|0xc|*/ class NTempest::C3Vector m_prevVertical;
  /*<thisrel this+0x94>*/ /*|0xc|*/ class NTempest::C3Vector m_currVertical;
  /*<thisrel this+0xa0>*/ /*|0xc|*/ class NTempest::C3Vector m_prevDir;
  /*<thisrel this+0xac>*/ /*|0xc|*/ class NTempest::C3Vector m_currDir;
  /*<thisrel this+0xb8>*/ /*|0xc|*/ class NTempest::C3Vector m_prevDirScaled;
  /*<thisrel this+0xc4>*/ /*|0xc|*/ class NTempest::C3Vector m_currDirScaled;
  /*<thisrel this+0xd0>*/ /*|0xc|*/ class NTempest::C3Vector m_below0;
  /*<thisrel this+0xdc>*/ /*|0xc|*/ class NTempest::C3Vector m_below1;
  /*<thisrel this+0xe8>*/ /*|0xc|*/ class NTempest::C3Vector m_above0;
  /*<thisrel this+0xf4>*/ /*|0xc|*/ class NTempest::C3Vector m_above1;
  /*<thisrel this+0x100>*/ /*|0x4|*/ float m_edgesPerSec;
  /*<thisrel this+0x104>*/ /*|0x4|*/ float m_edgeLifeSpan;
  /*<thisrel this+0x108>*/ /*|0x14|*/ class TSGrowableArray<CRibbonMat> m_materials;
  /*<thisrel this+0x11c>*/ /*|0x14|*/ class TSGrowableArray<HTEXTURE__ *> m_textures;
  /*<thisrel this+0x130>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_replaces;
  /*<thisrel this+0x144>*/ /*|0x4|*/ class NTempest::CImVector m_diffuseClr;
  /*<thisrel this+0x148>*/ /*|0x10|*/ class NTempest::CRect m_texBox;
  /*<thisrel this+0x158>*/ /*|0x4|*/ unsigned int m_rows;
  /*<thisrel this+0x15c>*/ /*|0x4|*/ unsigned int m_cols;
  /*<bitfield this+0x160>*/ /*|0x4|*/ unsigned int m_posSet:0:1;
  /*<bitfield this+0x160>*/ /*|0x4|*/ unsigned int m_initialized:1:1;
  /*<bitfield this+0x160>*/ /*|0x4|*/ unsigned int m_enabled:2:1;
  /*<bitfield this+0x160>*/ /*|0x4|*/ unsigned int m_updated:3:1;
  /*<bitfield this+0x160>*/ /*|0x4|*/ unsigned int m_singletonUpdated:4:1;
  /*<thisrel this+0x164>*/ /*|0xc|*/ class NTempest::C3Vector m_currPos;
  /*<thisrel this+0x170>*/ /*|0x4|*/ unsigned int m_texSlot;
  /*<thisrel this+0x174>*/ /*|0x4|*/ float m_above;
  /*<thisrel this+0x178>*/ /*|0x4|*/ float m_below;
  /*<thisrel this+0x17c>*/ /*|0x4|*/ float m_gravity;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CRibbonEmitter::PrivCopy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRibbonEmitter& rhs);
  void __thiscall CRibbonEmitter::InitInterpDeltas();
  void __thiscall CRibbonEmitter::InterpEdge(/*<regrel ebp+0x8>*/ /*|0x4|*/ float age, /*<regrel ebp+0xc>*/ /*|0x4|*/ float t, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int advance);
  void __thiscall CRibbonEmitter::Advance(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int amount);
  void __thiscall CRibbonEmitter::ConvertTexSlotToTexCoords();
  void __thiscall BuildMaterialStack();
  void __thiscall CRibbonEmitter::CloseTextureHandles();
  void __thiscall CRibbonEmitter::CRibbonEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRibbonEmitter& rhs);
  void __thiscall CRibbonEmitter::CRibbonEmitter();
  void __thiscall CRibbonEmitter::~CRibbonEmitter();
  class CRibbonEmitter& __thiscall CRibbonEmitter::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRibbonEmitter& rhs);
  class CRibbonEmitter* __thiscall Clone();
  void __thiscall CRibbonEmitter::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ float edgesPerSec, /*<regrel ebp+0xc>*/ /*|0x4|*/ float edgeLifeSpanInSec, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector& diffuseClr, /*<regrel ebp+0x14>*/ /*|0x4|*/ class TSGrowableArray<HTEXTURE__ *>& textures, /*<regrel ebp+0x18>*/ /*|0x4|*/ class TSGrowableArray<CRibbonMat>& materials, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& replaces, /*<regrel ebp+0x20>*/ /*|0x4|*/ class NTempest::CRect& texBox, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int rows, /*<regrel ebp+0x28>*/ /*|0x4|*/ unsigned int cols);
  void __thiscall CRibbonEmitter::SetPos(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& orient, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPosition);
  void __thiscall CRibbonEmitter::SetMats(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<CRibbonMat>& materials, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<HTEXTURE__ *>& textures, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& replaces);
  unsigned int __thiscall CRibbonEmitter::ReplaceTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int replaceableId, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HTEXTURE__* texture);
  void __thiscall CRibbonEmitter::MaterialDisableLight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int disable);
  void __thiscall CRibbonEmitter::MaterialDisableFog(/*<regrel ebp+0x8>*/ /*|0x4|*/ int disable);
  void __thiscall CRibbonEmitter::SetColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ float r, /*<regrel ebp+0xc>*/ /*|0x4|*/ float g, /*<regrel ebp+0x10>*/ /*|0x4|*/ float b);
  void __thiscall CRibbonEmitter::SetAlpha(/*<regrel ebp+0x8>*/ /*|0x4|*/ float a);
  void __thiscall CRibbonEmitter::SetEnabled(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable_);
  void __thiscall CRibbonEmitter::SetTexSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void __thiscall CRibbonEmitter::SetAbove(/*<regrel ebp+0x8>*/ /*|0x4|*/ float above);
  void __thiscall CRibbonEmitter::SetBelow(/*<regrel ebp+0x8>*/ /*|0x4|*/ float below);
  void __thiscall CRibbonEmitter::SetGravity(/*<regrel ebp+0x8>*/ /*|0x4|*/ float gravity);
  void __thiscall CRibbonEmitter::SingletonMgrUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ int suppressNewEdges);
  void __thiscall CRibbonEmitter::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec, /*<regrel ebp+0xc>*/ /*|0x4|*/ int suppressNewEdges);
  int __thiscall CRibbonEmitter::Render();
  int __thiscall CRibbonEmitter::IsDead();
  class CRibbonEmitter* __thiscall CRibbonEmitter::AddRef();
  void __thiscall CRibbonEmitter::DecRef();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x180>

class CParticleEmitter2 {

  // static data ------------------------------------
  static /*<rva 0x4048f0>*/ /*|0x4|*/ float VEL_UPDATE_TIME;
  static /*<rva 0x4048f4>*/ /*|0x4|*/ float MIN_ZSOURCE;
  static /*<rva 0x9c5f5c>*/ /*|0x28|*/ class NTempest::CPriorityQ<CSortableParticleRecord,CSortableParticleRecord> m_pq;
  static /*<rva 0x9c6008>*/ /*|0x200|*/ float m_rndTable[128];
  static /*<rva 0x0>*/ /*|0x4|*/ unsigned int s_vertexNdx;
  static /*<rva 0x0>*/ /*|0x4|*/ unsigned int s_indexNdx;
  static /*<rva 0x9c6248>*/ /*|0x40|*/ class NTempest::C44Matrix s_particleToView;
  static /*<rva 0x9c620c>*/ /*|0x30|*/ class NTempest::C3Vector s_quadVectors[4];
  static /*<rva 0x9c623c>*/ /*|0x4|*/ unsigned int s_maxParticles;
  static /*<rva 0x9c5ff8>*/ /*|0x4|*/ unsigned int s_renderedParticles;
  static /*<rva 0x9c5ffc>*/ /*|0x4|*/ unsigned int s_renderedIndices;

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_refCount;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_numNew;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_textureLog;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_ooTextureWidth;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_ooTextureHeight;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_priorityPlane;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ enum CParticleEmitter2::PARTICLE_EMITTER_TYPE m_emitterType;
  /*<thisrel this+0x20>*/ /*|0x4|*/ enum CParticleEmitter2::PARTICLE_TYPE m_particleType;
  /*<thisrel this+0x24>*/ /*|0x8|*/ class NTempest::CRndSeed m_randSeed;
  /*<thisrel this+0x2c>*/ /*|0x14|*/ class TSGrowableArray<CParticle2> m_particles;
  /*<thisrel this+0x40>*/ /*|0x14|*/ class TSGrowableArray<CParticle2_Model> m_modelParticles;
  /*<thisrel this+0x54>*/ /*|0x18|*/ class CParticleStack m_alive;
  /*<thisrel this+0x6c>*/ /*|0x18|*/ class CParticleStack m_dead;
  /*<thisrel this+0x84>*/ /*|0x14|*/ class TSCArray<CParticleEmitter2 *,4> m_childEmitter;
  /*<thisrel this+0x98>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x9c>*/ /*|0x4|*/ unsigned int m_verticesPerParticle;
  /*<thisrel this+0xa0>*/ /*|0x4|*/ unsigned int m_indicesPerParticle;
  /*<thisrel this+0xa4>*/ /*|0x4|*/ float m_elapsedTime;
  /*<thisrel this+0xa8>*/ /*|0x4|*/ float m_particleEmissionRate;
  /*<thisrel this+0xac>*/ /*|0x4|*/ float m_particleLifeSpan;
  /*<thisrel this+0xb0>*/ /*|0x4|*/ float m_particleTailLength;
  /*<thisrel this+0xb4>*/ /*|0xc4|*/ class TSCArray<CParticleKey,2> m_particleKeys;
  /*<thisrel this+0x178>*/ /*|0x4|*/ float m_particleVelocity;
  /*<thisrel this+0x17c>*/ /*|0x4|*/ float m_particleAcceleration;
  /*<thisrel this+0x180>*/ /*|0x4|*/ float m_particleVelocityVariation;
  /*<thisrel this+0x184>*/ /*|0x4|*/ float m_particleZsource;
  /*<thisrel this+0x188>*/ /*|0x4|*/ float m_particleAngularVelocity;
  /*<thisrel this+0x18c>*/ /*|0x8|*/ struct CParticleMat m_particleMaterial;
  /*<thisrel this+0x194>*/ /*|0x4|*/ unsigned int m_textureRows;
  /*<thisrel this+0x198>*/ /*|0x4|*/ unsigned int m_textureColumns;
  /*<thisrel this+0x19c>*/ /*|0x4|*/ struct HTEXTURE__* m_hTex;
  /*<thisrel this+0x1a0>*/ /*|0x4|*/ unsigned int m_replaceableId;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_enabled:0:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_enabled2:1:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_particleHasHead:2:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_particleHasTail:3:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_sortZ:4:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_needSquirt:5:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_updated:6:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_paused:7:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_useModelSpace:8:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_inheritScale:9:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_instantVelLin:a:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_0XKill:b:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_extrude:c:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_xyQuads:d:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_zvelOnly:e:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_tumbler:f:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_tailGrows:10:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_project:11:1;
  /*<bitfield this+0x1a4>*/ /*|0x4|*/ unsigned long m_follow:12:1;
  /*<thisrel this+0x1a8>*/ /*|0x4|*/ float m_twinkleFPS;
  /*<thisrel this+0x1ac>*/ /*|0x4|*/ float m_twinkleOnOff;
  /*<thisrel this+0x1b0>*/ /*|0x4|*/ float m_twinkleScaleMin;
  /*<thisrel this+0x1b4>*/ /*|0x4|*/ float m_twinkleScaleMax;
  /*<thisrel this+0x1b8>*/ /*|0x4|*/ float m_twinkleScaleRange;
  /*<thisrel this+0x1bc>*/ /*|0x4|*/ float m_ivelScale;
  /*<thisrel this+0x1c0>*/ /*|0x8|*/ class NTempest::C2Vector m_tumblex;
  /*<thisrel this+0x1c8>*/ /*|0x8|*/ class NTempest::C2Vector m_tumbley;
  /*<thisrel this+0x1d0>*/ /*|0x8|*/ class NTempest::C2Vector m_tumblez;
  /*<thisrel this+0x1d8>*/ /*|0x4|*/ float m_drag;
  /*<thisrel this+0x1dc>*/ /*|0xc|*/ class NTempest::C3Vector m_windVector;
  /*<thisrel this+0x1e8>*/ /*|0x4|*/ float m_windTime;
  /*<thisrel this+0x1ec>*/ /*|0x4|*/ float m_followB;
  /*<thisrel this+0x1f0>*/ /*|0x4|*/ float m_followM;
  /*<thisrel this+0x1f4>*/ /*|0x30|*/ class NTempest::C34Matrix m_modelToWorld;
  /*<thisrel this+0x224>*/ /*|0xc|*/ class NTempest::C3Vector m_cameraWorldPos;
  /*<thisrel this+0x230>*/ /*|0xc|*/ class NTempest::C3Vector m_prevModelToWorldTrans;
  /*<thisrel this+0x23c>*/ /*|0x4|*/ float m_elapsedVelUpdate;
  /*<thisrel this+0x240>*/ /*|0xc|*/ class NTempest::C3Vector m_frameInstantVelLin;
  /*<thisrel this+0x24c>*/ /*|0x4|*/ float m_frameScale;
  /*<thisrel this+0x250>*/ /*|0x4|*/ float m_followScalar;
  /*<thisrel this+0x254>*/ /*|0xc|*/ class NTempest::C3Vector m_followVector;
  /*<thisrel this+0x260>*/ /*|0xc|*/ class NTempest::C3Vector m_stepFollowVector;
  /*<thisrel this+0x26c>*/ /*|0xc|*/ class NTempest::C3Vector m_xyAxis;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CParticleEmitter2::BufRenderParticles(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);

  // non-virtual functions --------------------------
  void __thiscall CParticleEmitter2::SyncReserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int arraySize, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int oldSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int oldReserve);
  void __thiscall CParticleEmitter2::SyncAllocation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int arraySize);
  int __thiscall IsEnabled();
  void __thiscall CParticleEmitter2::EmitNewParticles(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  void __thiscall EmitParticle(float, class NTempest::C34Matrix&);
  class CParticleEmitter2& __thiscall operator=(class CParticleEmitter2&);
  float __thiscall CParticleEmitter2::CalcVelocity();
  int __thiscall CParticleEmitter2::MoveParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2_Model& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime);
  int __thiscall CParticleEmitter2::MoveParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime);
  int __thiscall CParticleEmitter2::RenderParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2_Model& p);
  int __thiscall RenderParticle(class CParticle2&, class NTempest::C34Matrix&, unsigned int, unsigned int);
  int __thiscall CParticleEmitter2::IRenderParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxVertexPNCT0* vtx);
  void __thiscall CParticleEmitter2::IRenderVertices(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CParticleEmitter2::IRenderIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CParticleEmitter2::ProjectParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p);
  void __thiscall CParticleEmitter2::RenderParticles();
  void __thiscall CParticleEmitter2::RenderParticleModels();
  class CParticle2* __thiscall GetParticle(unsigned int);
  void __thiscall CParticleEmitter2::CParticleEmitter2(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter2& rhs, /*<regrel ebp+0xc>*/ /*|0x4|*/ int deep);
  void __thiscall CParticleEmitter2::CParticleEmitter2();
  void __thiscall CParticleEmitter2::SingletonMgrUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ int suppressNewParticles);
  void __thiscall CParticleEmitter2::InternalUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int suppressNewParticles);
  void __thiscall CParticleEmitter2::StepUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int suppressNewParticles);
  void __thiscall CParticleEmitter2::UpdateXform(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& modelToWorld, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos);
  void __thiscall SetTumble(class NTempest::C2Vector&, class NTempest::C2Vector&);
  void __thiscall CParticleEmitter2::SetEnabled(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable, /*<regrel ebp+0xc>*/ /*|0x4|*/ int recurse);
  void __thiscall CParticleEmitter2::SetEnabled2(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable2, /*<regrel ebp+0xc>*/ /*|0x4|*/ int recurse);
  void __thiscall CParticleEmitter2::SetLifeSpan(/*<regrel ebp+0x8>*/ /*|0x4|*/ float lifeSpan);
  void __thiscall CParticleEmitter2::SetVelocity(/*<regrel ebp+0x8>*/ /*|0x4|*/ float velocity);
  void __thiscall CParticleEmitter2::SetAcceleration(/*<regrel ebp+0x8>*/ /*|0x4|*/ float acceleration);
  void __thiscall CParticleEmitter2::SetVelocityVariation(/*<regrel ebp+0x8>*/ /*|0x4|*/ float variation);
  void __thiscall SetAngularVelocity(float);
  void __thiscall CParticleEmitter2::SetZsource(/*<regrel ebp+0x8>*/ /*|0x4|*/ float zsource);
  void __thiscall CParticleEmitter2::SetMaterial(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CParticleMat& material, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HTEXTURE__* hTex);
  void __thiscall CParticleEmitter2::MaterialDisableLight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int disable);
  void __thiscall CParticleEmitter2::MaterialDisableFog(/*<regrel ebp+0x8>*/ /*|0x4|*/ int disable);
  void __thiscall CParticleEmitter2::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HTEXTURE__* hTex);
  void __thiscall CParticleEmitter2::SetReplaceableId(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int id);
  void __thiscall CParticleEmitter2::SetKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int keyNdx, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CParticleKey& key);
  void __thiscall CParticleEmitter2::SetTextureDimensions(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int rows, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int columns);
  void __thiscall CParticleEmitter2::SetParticleStyle(/*<regrel ebp+0x8>*/ /*|0x4|*/ int hasHead, /*<regrel ebp+0xc>*/ /*|0x4|*/ int hasTail, /*<regrel ebp+0x10>*/ /*|0x4|*/ float tailLength, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char tailGrows);
  void __thiscall CParticleEmitter2::SetSortZ(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sortZ);
  void __thiscall SetPriorityPlane(int);
  void __thiscall SetUseModelSpace(int);
  void __thiscall SetInstantVel(int);
  void __thiscall SetInstantVelScale(float);
  void __thiscall Set0XKill(int);
  void __thiscall SetInheritScale(int);
  void __thiscall SetExtrude(int);
  void __thiscall SetXYQuads(int);
  void __thiscall SetProject(int);
  void __thiscall CParticleEmitter2::AddChildEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter2* child);
  void __thiscall CParticleEmitter2::SetModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall SetTwinkleFPS(float);
  void __thiscall SetTwinkleOnOff(float);
  void __thiscall SetTwinkleScale(float, float);
  void __thiscall SetZVelOnly(int);
  void __thiscall SetTumbleReverse(int);
  void __thiscall SetTumbleX(class NTempest::C2Vector&);
  void __thiscall SetTumbleY(class NTempest::C2Vector&);
  void __thiscall SetTumbleZ(class NTempest::C2Vector&);
  void __thiscall SetDrag(float);
  void __thiscall SetWind(class NTempest::C3Vector&, float);
  void __thiscall CParticleEmitter2::SetFollowParams(/*<regrel ebp+0x8>*/ /*|0x4|*/ float speed1, /*<regrel ebp+0xc>*/ /*|0x4|*/ float scale1, /*<regrel ebp+0x10>*/ /*|0x4|*/ float speed2, /*<regrel ebp+0x14>*/ /*|0x4|*/ float scale2);
  void __thiscall SetFollow(int);
  enum CParticleEmitter2::PARTICLE_EMITTER_TYPE __thiscall EmitterType();
  int __thiscall CParticleEmitter2::Enabled();
  int __thiscall CParticleEmitter2::Enabled2();
  float __thiscall CParticleEmitter2::EmissionRate();
  float __thiscall CParticleEmitter2::LifeSpan();
  float __thiscall CParticleEmitter2::Velocity();
  float __thiscall CParticleEmitter2::Acceleration();
  float __thiscall CParticleEmitter2::VelocityVariation();
  float __thiscall AngularVelocity();
  struct CParticleMat __thiscall Material();
  struct HTEXTURE__* __thiscall Texture();
  unsigned int __thiscall CParticleEmitter2::ReplaceableId();
  class CParticleEmitter2* __thiscall ChildEmitter(unsigned int);
  class CParticleKey& __thiscall CParticleEmitter2::Key(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int keyNdx);
  void __thiscall CParticleEmitter2::TextureDimensions(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& rows, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& columns);
  void __thiscall CParticleEmitter2::ParticleStyle(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& hasHead, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& hasTail, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& tailLength);
  int __thiscall CParticleEmitter2::SortZ();
  int __thiscall PriorityPlane();
  int __thiscall UseModelSpace();
  void __thiscall CParticleEmitter2::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix& modelToWorld, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos);
  void __thiscall CParticleEmitter2::Squirt();
  void __thiscall CParticleEmitter2::Render();
  void __thiscall CParticleEmitter2::Flush();
  class CParticleEmitter2* __thiscall CParticleEmitter2::AddRef();
  void __thiscall CParticleEmitter2::DecRef();
  void __thiscall __local_vftable_ctor_closure();
  void __thiscall __copy_ctor_closure(class CParticleEmitter2&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CParticleEmitter2::Sync();
  virtual /*<vtableoff 0x8>*/ void __thiscall CParticleEmitter2::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2_Model& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  virtual /*<vtableoff 0x8>*/ void __thiscall CParticleEmitter2::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  virtual /*<vtableoff 0xc>*/ void __thiscall CParticleEmitter2::DestroyParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p);
  virtual /*<vtableoff 0x10>*/ class CParticleEmitter2* __thiscall Clone(int) = 0;
  virtual /*<vtableoff 0x14>*/ void __thiscall CParticleEmitter2::~CParticleEmitter2();
  virtual /*<vtableoff 0x18>*/ void __thiscall SetWidth(float) = 0;
  virtual /*<vtableoff 0x1c>*/ void __thiscall SetHeight(float) = 0;
  virtual /*<vtableoff 0x20>*/ void __thiscall SetLatitude(float) = 0;
  virtual /*<vtableoff 0x24>*/ void __thiscall SetLongitude(float) = 0;
  virtual /*<vtableoff 0x28>*/ void __thiscall CParticleEmitter2::SetEmissionRate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float particlesPerSecond);
  virtual /*<vtableoff 0x14>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x278>

class CParticleKey {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class NTempest::CImVector m_startColor;
  /*<thisrel this+0x4>*/ /*|0x10|*/ int m_deltaColor[4];
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_initialHead;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_deltaHead;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_initialTail;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_deltaTail;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_startScale;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float m_deltaScale;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_startTime;
  /*<thisrel this+0x30>*/ /*|0x4|*/ float m_ooSegLength;
  /*<thisrel this+0x34>*/ /*|0x4|*/ float m_endTime;
  /*<thisrel this+0x38>*/ /*|0x4|*/ class NTempest::CImVector m_endColor;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_headStart;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int m_headEnd;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_tailStart;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_tailEnd;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ float m_endScale;
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_repeat;
  /*<thisrel this+0x54>*/ /*|0x4|*/ float m_normStartTime;
  /*<thisrel this+0x58>*/ /*|0x4|*/ float m_normEndTime;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ float m_lifeSpan;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CParticleKey::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float time, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& headCell, /*<regrel ebp+0x14>*/ /*|0x4|*/ int& tailCell, /*<regrel ebp+0x18>*/ /*|0x4|*/ float& scale);
  void __thiscall CParticleKey(class CParticleKey&);
  void __thiscall CParticleKey::CParticleKey();
  void __thiscall CParticleKey::SetSegment(/*<regrel ebp+0x8>*/ /*|0x4|*/ float normStartTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float normEndTime);
  void __thiscall CParticleKey::SetLifeSpan(/*<regrel ebp+0x8>*/ /*|0x4|*/ float lifeSpan);
  void __thiscall CParticleKey::SetRepeat(/*<regrel ebp+0x8>*/ /*|0x4|*/ float repeat);
  void __thiscall CParticleKey::SetColors(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector start, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector end);
  void __thiscall CParticleKey::SetHeadCells(/*<regrel ebp+0x8>*/ /*|0x4|*/ int start, /*<regrel ebp+0xc>*/ /*|0x4|*/ int end);
  void __thiscall CParticleKey::SetTailCells(/*<regrel ebp+0x8>*/ /*|0x4|*/ int start, /*<regrel ebp+0xc>*/ /*|0x4|*/ int end);
  void __thiscall CParticleKey::SetScales(/*<regrel ebp+0x8>*/ /*|0x4|*/ float start, /*<regrel ebp+0xc>*/ /*|0x4|*/ float end);
  void __thiscall CParticleKey::Segment(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& startTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& endTime);
  void __thiscall CParticleKey::LifeSpan(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& lifeSpan);
  void __thiscall CParticleKey::Repeat(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& repeat);
  void __thiscall CParticleKey::Colors(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& start, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& end);
  void __thiscall CParticleKey::HeadCells(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& start, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& end);
  void __thiscall CParticleKey::TailCells(/*<regrel ebp+0x8>*/ /*|0x4|*/ int& start, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& end);
  void __thiscall CParticleKey::Scales(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& start, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& end);
  class CParticleKey& __thiscall CParticleKey::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleKey& __that);
  void __thiscall ~CParticleKey();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x60>

class CModelBase {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ void  (m_PickLights*)(void*, class NTempest::C3Vector, class NTempest::C3Vector&, unsigned int);
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* m_pickLightsParm;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0xc>*/ /*|0x30|*/ class NTempest::C34Matrix m_modelToWorld;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_texBones;
  /*<thisrel this+0x40>*/ /*|0x4|*/ struct HANIM__* m_anim;
  /*<thisrel this+0x44>*/ /*|0x4|*/ struct HMODEL__* m_boundsModel;
  /*<thisrel this+0x48>*/ /*|0x4|*/ unsigned int m_aaBoxCustGeoId;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ struct HMODEL__* m_collideModel;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CModelBase::CModelBase(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModelBase& source);
  void __thiscall CModelBase::CModelBase(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CModelBase::~CModelBase();
  class CModelBase& __thiscall operator=(class CModelBase&);
  void __thiscall __dflt_ctor_closure();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x50>

class CModel : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CModelBase* data;
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct HMODEL__* dupSource;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CModelCreate* createData;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct HMODELSHARED__* shared;
  /*<thisrel this+0x14>*/ /*|0x4|*/ enum EModelLoad state;
  /*<thisrel this+0x18>*/ /*|0xc|*/ class TSList<CModelModItem,TSGetLink<CModelModItem> > modelModQueue;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CModel::CModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModel& source);
  void __thiscall CModel(enum EModelLoad);
  void __thiscall CModel::FinishDuplication(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CModel& source);
  void __thiscall CModel::DeleteAsyncObj();
  class CModel& __thiscall operator=(class CModel&);
  void __thiscall CModel::RemoveModelCommandsFromQueue();
  void __thiscall __dflt_ctor_closure();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CModel::~CModel();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CMatrixGroupTree {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CMatrixGroup> nodes;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int numMatrices;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int __thiscall CMatrixGroupTree::AddNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* matrixGroup, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numMatrices);
  void __thiscall CMatrixGroupTree(class CMatrixGroupTree&);
  void __thiscall CMatrixGroupTree();
  unsigned int __thiscall GroupCount();
  unsigned int __thiscall MatrixCount();
  unsigned int __thiscall CMatrixGroupTree::Insert(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* matrixGroup, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numMatrices);
  int __thiscall CMatrixGroupTree::GroupsEqual(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* matrixGroup1, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numMatrices1, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* matrixGroup2, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numMatrices2);
  int __thiscall CMatrixGroupTree::GroupLessThan(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* matrixGroup1, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numMatrices1, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* matrixGroup2, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numMatrices2);
  class CMatrixGroupTree& __thiscall operator=(class CMatrixGroupTree&);
  void __thiscall ~CMatrixGroupTree();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CAsyncObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SFile* file;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long offset;
  /*<thisrel this+0x8>*/ /*|0x4|*/ void* buffer;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long size;
  /*<thisrel this+0x10>*/ /*|0x4|*/ void* userArg;
  /*<thisrel this+0x14>*/ /*|0x4|*/ void  (userPostloadCallback*)(void*);
  /*<thisrel this+0x18>*/ /*|0x4|*/ class SCritSect* critSect;
  /*<thisrel this+0x1c>*/ /*|0x1|*/ unsigned char isLoaded;
  /*<thisrel this+0x1d>*/ /*|0x1|*/ unsigned char canReorder;
  /*<thisrel this+0x20>*/ /*|0x8|*/ class TSLink<CAsyncObject> link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CAsyncObject(class CAsyncObject&);
  void __thiscall CAsyncObject();
  class CAsyncObject& __thiscall operator=(class CAsyncObject&);
  void __thiscall ~CAsyncObject();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class SoundFileCache {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall SoundFileCache::Initialize(/*<register ecx>*/ /*|0x4|*/ int cacheSizeMB);
  static void __fastcall SoundFileCache::Shutdown();
  static unsigned int __stdcall SoundFileCache::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  static int __stdcall SoundFileCache::Read(/*<regrel ebx+0x8>*/ /*|0x4|*/ void* buffer, /*<regrel ebx+0xc>*/ /*|0x4|*/ int size, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int handle);
  static int __stdcall SoundFileCache::Seek(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int handle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int pos, /*<regrel ebp+0x10>*/ /*|0x1|*/ char mode);
  static int __stdcall SoundFileCache::Tell(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int handle);
  static void __stdcall SoundFileCache::Close(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int handle);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CMyLoader : struct IDirectMusicLoader  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ long m_cRef;
  /*<thisrel this+0x8>*/ /*|0x208|*/ unsigned short m_wzSearchPath[260];

  // base classes -----------------------------------
  // baseclass struct IDirectMusicLoader
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMyLoader(class CMyLoader&);
  void __thiscall CMyLoader::CMyLoader();
  void __thiscall CMyLoader::~CMyLoader();
  long __thiscall CMyLoader::Init();
  class CMyLoader& __thiscall operator=(class CMyLoader&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::QueryInterface(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& iid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void** ppv);
  virtual /*<vtableoff 0x0>*/ unsigned long __stdcall CMyLoader::AddRef();
  virtual /*<vtableoff 0x0>*/ unsigned long __stdcall CMyLoader::Release();
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::GetObjectA(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _DMUS_OBJECTDESC* myDesc, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct _GUID& riid, /*<regrel ebp+0x14>*/ /*|0x4|*/ void** ppv);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::SetSearchDirectory(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::SetObject(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _DMUS_OBJECTDESC* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::ScanDirectory(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned short* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::CacheObject(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirectMusicObject* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::ReleaseObject(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirectMusicObject* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::ClearCache(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::EnableCache(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyLoader::EnumObject(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct _GUID& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct _DMUS_OBJECTDESC* __formal);
};
// <size 0x210>

class MY_DMUS_OBJECTDESC : struct _DMUS_OBJECTDESC  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x350>*/ /*|0x4|*/ struct ASYNCLOADER* asyncLoader;

  // base classes -----------------------------------
  // baseclass struct _DMUS_OBJECTDESC
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x358>

class CMyIStream : struct IStream,  struct IDirectMusicGetLoader  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ long m_cRef;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct IDirectMusicLoader* m_pLoader;
  /*<thisrel this+0x10>*/ /*|0x8|*/ __int64 m_cursor;
  /*<thisrel this+0x18>*/ /*|0x4|*/ struct ASYNCLOADER* m_loader;

  // base classes -----------------------------------
  // baseclass struct IStream
  // <base data offset+0x0>

  // baseclass struct IDirectMusicGetLoader
  // <base data offset+0x4>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMyIStream(class CMyIStream&);
  void __thiscall CMyIStream();
  void __thiscall ~CMyIStream();
  long __thiscall CMyIStream::Attach(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* tzFile, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirectMusicLoader* pLoader);
  void __thiscall CMyIStream::Detach();
  class CMyIStream& __thiscall operator=(class CMyIStream&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::QueryInterface(struct _GUID&, void**);
  virtual /*<vtableoff 0x0>*/ unsigned long __stdcall CMyIStream::AddRef();
  virtual /*<vtableoff 0x0>*/ unsigned long __stdcall CMyIStream::Release();
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::GetLoader(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirectMusicLoader** ppLoader);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Read(/*<regrel ebp+0xc>*/ /*|0x4|*/ void* pv, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long cb, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long* pcb);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Seek(/*<regrel ebp+0xc>*/ /*|0x8|*/ union _LARGE_INTEGER dlibMove, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long dwOrigin, /*<regrel ebp+0x18>*/ /*|0x4|*/ union _ULARGE_INTEGER* out);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Clone(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct IStream** ppstm);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Write(/*<regrel ebp+0xc>*/ /*|0x4|*/ void* __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::SetSize(/*<regrel ebp+0xc>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::CopyTo(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct IStream* __formal, /*<regrel ebp+0x10>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal, /*<regrel ebp+0x18>*/ /*|0x4|*/ union _ULARGE_INTEGER* __formal, /*<regrel ebp+0x1c>*/ /*|0x4|*/ union _ULARGE_INTEGER* __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Commit(/*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Revert();
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::LockRegion(/*<regrel ebp+0xc>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal, /*<regrel ebp+0x14>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned long __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::UnlockRegion(/*<regrel ebp+0xc>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal, /*<regrel ebp+0x14>*/ /*|0x8|*/ union _ULARGE_INTEGER __formal, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned long __formal);
  virtual /*<vtableoff 0x0>*/ long __stdcall CMyIStream::Stat(/*<regrel ebp+0xc>*/ /*|0x4|*/ struct tagSTATSTG* __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long __formal);
};
// <size 0x20>

class CCritSect {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ struct _RTL_CRITICAL_SECTION m_critsect;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CCritSect(class CCritSect&);
  void __thiscall CCritSect::CCritSect();
  void __thiscall CCritSect::~CCritSect();
  class CCritSect& __thiscall operator=(class CCritSect&);
  void __thiscall CCritSect::Enter(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal);
  void __thiscall CCritSect::Enter();
  void __thiscall CCritSect::Leave(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal);
  void __thiscall CCritSect::Leave();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CInitCritSect {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ long m_spinLock;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CCritSect* m_critsect;
  /*<thisrel this+0x8>*/ /*|0x18|*/ unsigned char m_critsectData[24];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall CInitCritSect::Enter();
  void __thiscall CInitCritSect::Leave();

  // virtual functions ------------------------------
};
// <size 0x20>

class OsTimeManager {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ __int64 cpuTicksPerSecond_qp;
  /*<thisrel this+0x8>*/ /*|0x8|*/ __int64 cpuTicksPerSecond_ti;
  /*<thisrel this+0x10>*/ /*|0x4|*/ class SThread timeMgrThread;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class SEvent shutdownEvt;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned long sleepVal;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int hasQPF;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __stdcall OsTimeManager::TimeKeeper(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* __formal);

  // non-virtual functions --------------------------
  void __thiscall OsTimeManager(class OsTimeManager&);
  void __thiscall OsTimeManager::OsTimeManager();
  void __thiscall OsTimeManager::~OsTimeManager();
  void __thiscall OsTimeManager::Shutdown();
  void __thiscall OsTimeManager::Calibrate();
  void __thiscall OsTimeManager::Snapshot(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsTimeManager::TimeSnapshot* time);
  class OsTimeManager& __thiscall operator=(class OsTimeManager&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class COsDialog {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* mHandle;
  /*<thisrel this+0x8>*/ /*|0x4|*/ void* mTooltips;
  /*<thisrel this+0xc>*/ /*|0x4|*/ void  (mCallback*)(struct OsGuiCallbackParams&);
  /*<thisrel this+0x10>*/ /*|0x4|*/ void* mCallbackParam;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<COsControl *> mControls;
  /*<thisrel this+0x28>*/ /*|0x4|*/ class COsControl* mCancelButton;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mTrackMouse;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mMouseInside;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int mNeedNewTrack;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int mTooltipsEnabled;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int mContextMenuEnabled;
  /*<thisrel this+0x40>*/ /*|0x4|*/ class COsMenu* mContextMenu;
  /*<thisrel this+0x44>*/ /*|0x4|*/ unsigned int mFlags;
  /*<thisrel this+0x48>*/ /*|0x14|*/ class TSGrowableArray<void *> mDisabledWindows;
  /*<thisrel this+0x5c>*/ /*|0x8|*/ class NTempest::C2iVector mMinSize;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsDialog(class COsDialog&);
  void __thiscall COsDialog::COsDialog(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindowHandle, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsDialog::~COsDialog();
  void __thiscall COsDialog::AddControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsControl* inControl);
  void __thiscall COsDialog::DeleteControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsControl* inControl);
  void __thiscall COsDialog::DetachControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsControl* inControl);
  int __thiscall COsDialog::FindControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsControl* inControl);
  class COsControl* __thiscall COsDialog::FindControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inHandle);
  int __thiscall COsDialog::ProcessMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inMsgData);
  void __thiscall COsDialog::CheckEvents();
  void* __thiscall GetHandle();
  void* __thiscall COsDialog::GetParentWindow();
  void* __thiscall COsDialog::GetTooltips();
  void __thiscall COsDialog::EnableTooltips(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DisableTooltips();
  void __thiscall SetCancelButton(class COsControl*);
  void __thiscall COsDialog::SetTrackMouse(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  int __thiscall COsDialog::IsMouseInside();
  void __thiscall COsDialog::SetCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (inFunc*)(struct OsGuiCallbackParams&), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsDialog::BringToFront();
  int __thiscall COsDialog::IsInFront();
  void __thiscall COsDialog::SetInputFocus();
  void __thiscall COsDialog::Show(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall Hide();
  int __thiscall COsDialog::IsShowing();
  int __thiscall COsDialog::IsEnabled();
  void __thiscall COsDialog::SetRedraw(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall COsDialog::Refresh(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inErase);
  void __thiscall COsDialog::SetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  void __thiscall COsDialog::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outY, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inClient);
  void __thiscall COsDialog::GetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inClientOnly);
  void __thiscall COsDialog::SetMinSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
  int __thiscall COsDialog::GetMinSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH);
  void __thiscall COsDialog::SetTitle(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText);
  void __thiscall COsDialog::SetContextMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsMenu* inMenu);
  void __thiscall EnableContextMenu(int);
  void __thiscall DisableContextMenu();
  int __thiscall COsDialog::HasFlag(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int inFlag);
  int __thiscall COsDialog::CanDoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inAction);
  int __thiscall COsDialog::DoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inAction);
  int __thiscall COsDialog::OnAccept();
  int __thiscall COsDialog::OnCancel();
  int __thiscall COsDialog::OnMouseUp();
  int __thiscall COsDialog::OnMouseDown();
  int __thiscall COsDialog::OnMouseLeave();
  int __thiscall COsDialog::OnMouseMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  int __thiscall COsDialog::OnContextMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  int __thiscall COsDialog::OnEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inItemID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inNotifyCode, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inCode);
  int __thiscall COsDialog::OnControlTab();
  void __thiscall COsDialog::ApplyModality(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  class COsDialog& __thiscall operator=(class COsDialog&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsDialog::SetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
};
// <size 0x64>

class COsMenuBar {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<COsMenu *> mMenus;
  /*<thisrel this+0x14>*/ /*|0x4|*/ void* mWindowHandle;
  /*<thisrel this+0x18>*/ /*|0x4|*/ void* mMenuBarHandle;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ void* mAccelerators;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsMenuBar(class COsMenuBar&);
  void __thiscall COsMenuBar::COsMenuBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindowHandle);
  void __thiscall COsMenuBar::~COsMenuBar();
  void __thiscall COsMenuBar::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<COsMenu *>& inMenus);
  void __thiscall COsMenuBar::UpdateAccelerators();
  void __thiscall COsMenuBar::Refresh();
  void* __thiscall GetWindow();
  void* __thiscall GetAccelerators();
  class COsMenuBar& __thiscall operator=(class COsMenuBar&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class COsMenu {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1|*/ unsigned char mID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* mMenuHandle;
  /*<thisrel this+0x8>*/ /*|0x20|*/ char mTitle[32];
  /*<thisrel this+0x28>*/ /*|0x14|*/ class TSGrowableArray<OsGuiMenuHotkey> mHotkeys;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall COsMenu::AppendHotkeyText(/*<register ecx>*/ /*|0x4|*/ char* inText, /*<register edx>*/ /*|0x4|*/ struct OsGuiMenuHotkey& inHotkey);

  // non-virtual functions --------------------------
  void __thiscall COsMenu(class COsMenu&);
  void __thiscall COsMenu::COsMenu();
  void __thiscall COsMenu::COsMenu(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char inID, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inTitle);
  void __thiscall COsMenu::~COsMenu();
  void __thiscall COsMenu::Clear();
  int __thiscall COsMenu::GetNumItems();
  void __thiscall COsMenu::AddTextItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct OsGuiMenuHotkey* inHotkey);
  void __thiscall COsMenu::AddSubMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inTitle, /*<regrel ebp+0x10>*/ /*|0x4|*/ class COsMenu* inMenu);
  void __thiscall COsMenu::AddSeparator(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  int __thiscall COsMenu::GetHotkey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct OsGuiMenuHotkey* outHotkey);
  void __thiscall COsMenu::EnableItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall DisableItem(int);
  void __thiscall COsMenu::CheckItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall COsMenu::SetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  void __thiscall COsMenu::RemoveItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  unsigned char __thiscall GetID();
  void* __thiscall GetMenuHandle();
  char* __thiscall GetTitle();
  void __thiscall COsMenu::AddHotkey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsMenu::RemoveHotkey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  class COsMenu& __thiscall operator=(class COsMenu&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class CBasicDlgTemplate {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x12|*/ struct DLGTEMPLATE header;
  /*<thisrel this+0x12>*/ /*|0x2|*/ unsigned short noMenu;
  /*<thisrel this+0x14>*/ /*|0x2|*/ unsigned short noClass;
  /*<thisrel this+0x16>*/ /*|0x2|*/ unsigned short noTitle;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBasicDlgTemplate(unsigned short, unsigned short);

  // virtual functions ------------------------------
};
// <size 0x18>

class COsControl {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int mFlags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class COsDialog* mDialog;
  /*<thisrel this+0xc>*/ /*|0x2|*/ short mID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int mType;
  /*<thisrel this+0x14>*/ /*|0x4|*/ void* mHandle;
  /*<thisrel this+0x18>*/ /*|0x4|*/ void  (mCallback*)(struct OsGuiCallbackParams&);
  /*<thisrel this+0x1c>*/ /*|0x4|*/ void* mCallbackParam;
  /*<thisrel this+0x20>*/ /*|0x4|*/ class COsMenu* mContextMenu;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int mContextMenuEnabled;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int mRedrawLevel;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsControl(class COsControl&);
  void __thiscall COsControl::COsControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inType, /*<regrel ebp+0x10>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsControl::COsControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inType, /*<regrel ebp+0x10>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int inFlags);
  short __thiscall GetID();
  int __thiscall GetType();
  void* __thiscall GetHandle();
  class COsDialog* __thiscall GetDialog();
  void __thiscall COsControl::SetRedraw(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall COsControl::Refresh(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inErase);
  void __thiscall COsControl::SetCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (inFunc*)(struct OsGuiCallbackParams&), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsControl::SetFont(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inFont);
  void __thiscall COsControl::SetInputFocus();
  void __thiscall COsControl::LoseInputFocus();
  int __thiscall COsControl::HasInputFocus();
  void __thiscall COsControl::SetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText);
  void __thiscall COsControl::GetText(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* outText, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inBufSize);
  int __thiscall COsControl::GetTextLength();
  void __thiscall COsControl::GetTextSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0x10>*/ /*|0x4|*/ int* outH);
  void __thiscall COsControl::GetTextSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH);
  void __thiscall COsControl::Show(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall Hide();
  int __thiscall COsControl::IsShowing();
  void __thiscall COsControl::Enable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall Disable();
  int __thiscall COsControl::IsEnabled();
  void __thiscall COsControl::SetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  void __thiscall COsControl::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outY, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inParentRelative);
  void __thiscall COsControl::SetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
  void __thiscall COsControl::GetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH);
  void __thiscall COsControl::SetTooltip(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText);
  void __thiscall COsControl::SetContextMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsMenu* inMenu);
  void __thiscall EnableContextMenu(int);
  void __thiscall DisableContextMenu();
  void __thiscall COsControl::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inType, /*<regrel ebp+0x10>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int inFlags);
  int __thiscall COsControl::SendEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inEvent, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inCode);
  class COsControl& __thiscall operator=(class COsControl&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsControl::~COsControl();
  virtual /*<vtableoff 0x4>*/ void __thiscall COsControl::OnDestroy();
  virtual /*<vtableoff 0x8>*/ int __thiscall COsControl::OnEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inItemID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inNotifyCode, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inCode);
  virtual /*<vtableoff 0xc>*/ int __thiscall COsControl::OnDraw(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CiRect& __formal);
  virtual /*<vtableoff 0x10>*/ void* __thiscall COsControl::OnSetColors(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* __formal);
  virtual /*<vtableoff 0x14>*/ int __thiscall COsControl::OnReturn();
  virtual /*<vtableoff 0x18>*/ int __thiscall COsControl::OnEscape();
  virtual /*<vtableoff 0x1c>*/ int __thiscall COsControl::OnMouseDown();
  virtual /*<vtableoff 0x20>*/ int __thiscall COsControl::OnMouseUp();
  virtual /*<vtableoff 0x24>*/ void __thiscall COsControl::OnMouseMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x28>*/ void __thiscall COsControl::OnSizeChange();
  virtual /*<vtableoff 0x2c>*/ void __thiscall COsControl::OnTextChange();
  virtual /*<vtableoff 0x30>*/ int __thiscall COsControl::OnNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCode, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* __formal);
  virtual /*<vtableoff 0x34>*/ int __thiscall COsControl::OnCommand(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inParam);
  virtual /*<vtableoff 0x38>*/ int __thiscall COsControl::OnScroll(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inParam);
  virtual /*<vtableoff 0x3c>*/ int __thiscall COsControl::OnMouseWheel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x40>*/ int __thiscall COsControl::OnContextMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  virtual /*<vtableoff 0x44>*/ int __thiscall COsControl::IsHandleFromControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inHandle);
  virtual /*<vtableoff 0x48>*/ int __thiscall COsControl::CanDoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x4c>*/ int __thiscall COsControl::DoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal);
  virtual /*<vtableoff 0x50>*/ void __thiscall COsControl::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x54>*/ int __thiscall COsControl::GetValue();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsButton : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsButton(class COsButton&);
  void __thiscall COsButton::COsButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsButton::SetDefaultButton();
  void __thiscall COsButton::SetCancelButton();
  void __thiscall COsButton::SetHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  class COsButton& __thiscall operator=(class COsButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsButton();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsImageButton : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsImageButton(class COsImageButton&);
  void __thiscall COsImageButton::COsImageButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsImageButton::COsImageButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsImageButton::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inWidth, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inHeight, /*<regrel ebp+0x10>*/ /*|0x4|*/ void* inData);
  void __thiscall COsImageButton::SetHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  int __thiscall COsImageButton::IsPushed();
  class COsImageButton& __thiscall operator=(class COsImageButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsImageButton::~COsImageButton();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsImageButton::OnDestroy();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsStaticText : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ class NTempest::CImVector mTextColor;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsStaticText(class COsStaticText&);
  void __thiscall COsStaticText::COsStaticText(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsStaticText::COsStaticText(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsStaticText::SetJustification(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inJust);
  void __thiscall COsStaticText::SetTextColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& inColor);
  void __thiscall COsStaticText::Initialize();
  class COsStaticText& __thiscall operator=(class COsStaticText&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void* __thiscall COsStaticText::OnSetColors(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inContext);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsStaticText();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x30>

class COsStaticImage : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsStaticImage(class COsStaticImage&);
  void __thiscall COsStaticImage::COsStaticImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall COsStaticImage::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inWidth, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inHeight, /*<regrel ebp+0x10>*/ /*|0x4|*/ void* inData);
  void __thiscall COsStaticImage::ClearImage();
  class COsStaticImage& __thiscall operator=(class COsStaticImage&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsStaticImage::~COsStaticImage();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsStaticImage::OnDestroy();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsEditBox : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mFiltersEnabled;
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned int mFilters;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int mSelSize;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsEditBox(class COsEditBox&);
  void __thiscall COsEditBox::COsEditBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsEditBox::COsEditBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsEditBox::SetTextLimit(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inSize);
  void __thiscall COsEditBox::SelectAll();
  int __thiscall COsEditBox::GetSelectionSize();
  void __thiscall COsEditBox::EnableFilters(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DisableFilters();
  void __thiscall COsEditBox::SetFilter(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int inFilter, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  int __thiscall COsEditBox::IsCharacterAllowed(/*<regrel ebp+0x8>*/ /*|0x1|*/ char inChar);
  void __thiscall COsEditBox::UpdateSelection();
  void __thiscall COsEditBox::Initialize();
  class COsEditBox& __thiscall operator=(class COsEditBox&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int __thiscall COsEditBox::OnReturn();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsEditBox::CanDoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inAction);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsEditBox::DoClipboardAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inAction);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsEditBox();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x38>

class COsPopupMenu : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mBaseHeight;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mMaxHeight;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsPopupMenu(class COsPopupMenu&);
  void __thiscall COsPopupMenu::COsPopupMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall COsPopupMenu::SetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
  void __thiscall COsPopupMenu::ClearItems();
  int __thiscall COsPopupMenu::GetNumItems();
  void __thiscall COsPopupMenu::InsertItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inPos);
  void __thiscall COsPopupMenu::SetItemHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inHeight);
  int __thiscall COsPopupMenu::GetItemHeight();
  void __thiscall COsPopupMenu::SetMaxHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inHeight);
  void __thiscall COsPopupMenu::DeleteItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsPopupMenu::SetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  void __thiscall COsPopupMenu::AdjustHeight();
  class COsPopupMenu& __thiscall operator=(class COsPopupMenu&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsPopupMenu::~COsPopupMenu();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsPopupMenu::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsPopupMenu::GetValue();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x34>

class COsListBox : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsListBox(class COsListBox&);
  void __thiscall COsListBox::COsListBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsListBox::SelectItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall DeselectItem(int);
  void __thiscall COsListBox::SelectAll(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DeselectAll();
  int __thiscall COsListBox::IsItemSelected(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListBox::ClearItems();
  int __thiscall COsListBox::GetNumItems();
  void __thiscall COsListBox::InsertItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListBox::DeleteItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListBox::SetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  int __thiscall COsListBox::GetItemTextLength(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListBox::GetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inBuf, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inBufSize);
  void __thiscall COsListBox::SetItemHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inHeight);
  int __thiscall COsListBox::GetItemHeight();
  class COsListBox& __thiscall operator=(class COsListBox&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsListBox::~COsListBox();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsListBox::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListBox::GetValue();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListBox::OnContextMenu(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListBox::OnReturn();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsCheckbox : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mSettingSize;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mMaxWidth;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsCheckbox(class COsCheckbox&);
  void __thiscall COsCheckbox::COsCheckbox(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall COsCheckbox::COsCheckbox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall COsCheckbox::SetMaxWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inWidth);
  void __thiscall COsCheckbox::ClearValue();
  int __thiscall COsCheckbox::HasValue();
  class COsCheckbox& __thiscall operator=(class COsCheckbox&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsCheckbox::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsCheckbox::GetValue();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsCheckbox::OnEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inItemID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inNotifyCode, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inCode);
  virtual /*<vtableoff 0x0>*/ void __thiscall COsCheckbox::OnTextChange();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsCheckbox::OnSizeChange();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsCheckbox();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x34>

class COsProgressBar : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsProgressBar(class COsProgressBar&);
  void __thiscall COsProgressBar::COsProgressBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  class COsProgressBar& __thiscall operator=(class COsProgressBar&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsProgressBar::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsProgressBar::GetValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsProgressBar();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsSlider : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsSlider(class COsSlider&);
  void __thiscall COsSlider::COsSlider(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall COsSlider::SetMinValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall COsSlider::SetMaxValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  class COsSlider& __thiscall operator=(class COsSlider&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsSlider::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsSlider::GetValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsSlider();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsTreeView : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ void* mImages;
  /*<thisrel this+0x30>*/ /*|0x14|*/ class TSGrowableArray<int> mUnusedImageIDs;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int mDragging;
  /*<thisrel this+0x48>*/ /*|0x18|*/ struct OsGuiTVDDInfo mDragInfo;
  /*<thisrel this+0x60>*/ /*|0x4|*/ void* mDragImage;
  /*<thisrel this+0x64>*/ /*|0x4|*/ int  (mDragHandler*)(struct OsGuiTVDDInfo&, void*);
  /*<thisrel this+0x68>*/ /*|0x4|*/ void* mDragHandlerParam;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int  (mCanEditFunc*)(void*, void*);
  /*<thisrel this+0x70>*/ /*|0x4|*/ void* mCanEditParam;
  /*<thisrel this+0x74>*/ /*|0x4|*/ void  (mExpandFunc*)(void*, void*);
  /*<thisrel this+0x78>*/ /*|0x4|*/ void* mExpandParam;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ int mTextLimit;
  /*<thisrel this+0x80>*/ /*|0x4|*/ int mFiltersEnabled;
  /*<thisrel this+0x84>*/ /*|0x4|*/ unsigned int mFilters;
  /*<thisrel this+0x88>*/ /*|0x14|*/ class TSGrowableArray<OsGuiTreeItemParams> mItemParams;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsTreeView(class COsTreeView&);
  void __thiscall COsTreeView::COsTreeView(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsTreeView::COsTreeView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsTreeView::SetBackgroundColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& inColor);
  void __thiscall COsTreeView::ClearItems();
  void __thiscall COsTreeView::DeleteItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void* __thiscall COsTreeView::InsertItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inParent, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inAfter, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* inText);
  void __thiscall COsTreeView::SetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  void __thiscall COsTreeView::GetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inBuf, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inBufSize);
  void __thiscall COsTreeView::SetItemParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void* __thiscall COsTreeView::GetItemParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::SetItemColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& inColor);
  void __thiscall COsTreeView::ResetItemColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  class NTempest::CImVector __thiscall COsTreeView::GetItemColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector* __$ReturnUdt);
  void* __thiscall COsTreeView::GetItemParent(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  int __thiscall COsTreeView::GetItemNumChildren(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void* __thiscall COsTreeView::GetItemChild(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inIndex);
  void __thiscall COsTreeView::SetItemImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inWidth, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inHeight, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* inData);
  void __thiscall COsTreeView::ExpandItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall CollapseItem(void*);
  int __thiscall COsTreeView::IsItemExpanded(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::OnExpandedItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::EnsureItemVisible(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::EditItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  class NTempest::CiRect __thiscall COsTreeView::GetItemRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect* __$ReturnUdt);
  void __thiscall COsTreeView::RefreshItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void* __thiscall COsTreeView::GetFirstVisibleItem();
  void __thiscall COsTreeView::SetFirstVisibleItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::EnumerateItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inParent, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (inFunc*)(class COsTreeView*, void*, void*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsTreeView::EnumerateAllItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (inFunc*)(class COsTreeView*, void*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsTreeView::SelectItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  int __thiscall COsTreeView::IsItemSelected(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void* __thiscall COsTreeView::GetSelectedItem();
  void __thiscall DeselectItem(void*);
  void __thiscall COsTreeView::SelectAll(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DeselectAll();
  void __thiscall COsTreeView::GetSelectionInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsGuiTVSelectionInfo* outInfo);
  void __thiscall COsTreeView::EnableDragDrop(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DisableDragDrop();
  void __thiscall COsTreeView::SetDragDropHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ int  (inFunc*)(struct OsGuiTVDDInfo&, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsTreeView::SetDropTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::SetInsertionMark(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inAfter);
  int __thiscall OnClick();
  void __thiscall COsTreeView::OnBeginDrag(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inX, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inY);
  void __thiscall COsTreeView::OnEndDrag();
  int __thiscall COsTreeView::OnBeginEdit(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  int __thiscall COsTreeView::OnEndEdit(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inNewText);
  void __thiscall COsTreeView::SetTextLimit(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inSize);
  void __thiscall COsTreeView::EnableFilters(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall DisableFilters();
  void __thiscall COsTreeView::SetFilter(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int inFilter, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  int __thiscall COsTreeView::IsCharacterAllowed(/*<regrel ebp+0x8>*/ /*|0x1|*/ char inChar);
  void __thiscall COsTreeView::SetCanEditFunction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int  (inFunc*)(void*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsTreeView::SetExpandFunction(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (inFunc*)(void*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  void __thiscall COsTreeView::InitializeTreeView();
  void* __thiscall COsTreeView::GetEditControl();
  void __thiscall COsTreeView::CreateDragImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  void __thiscall COsTreeView::DestroyDragImage();
  int __thiscall COsTreeView::RunDragHandler();
  void* __thiscall COsTreeView::FindItemUnderCursor();
  void __thiscall COsTreeView::OnDeleteItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  int __thiscall COsTreeView::FindUnusedParams();
  void __thiscall COsTreeView::InitParams(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  struct OsGuiTreeItemParams* __thiscall COsTreeView::GetParams(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inItem);
  class COsTreeView& __thiscall operator=(class COsTreeView&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsTreeView::~COsTreeView();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsTreeView::OnSizeChange();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::OnMouseDown();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::OnMouseUp();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::OnReturn();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::OnEscape();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::OnNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCode, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTreeView::IsHandleFromControl(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inHandle);
  virtual /*<vtableoff 0x0>*/ void __thiscall COsTreeView::OnMouseMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inX, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inY);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x9c>

class COsTextButton : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ class NTempest::CImVector mActiveColor;
  /*<thisrel this+0x30>*/ /*|0x4|*/ class NTempest::CImVector mPushedColor;
  /*<thisrel this+0x34>*/ /*|0x4|*/ class NTempest::CImVector mGreyedColor;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int mUnderline;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsTextButton(class COsTextButton&);
  void __thiscall COsTextButton::COsTextButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID);
  void __thiscall SetActiveColor(class NTempest::CImVector&);
  void __thiscall SetPushedColor(class NTempest::CImVector&);
  void __thiscall SetGreyedColor(class NTempest::CImVector&);
  void __thiscall SetUnderline(int);
  class COsTextButton& __thiscall operator=(class COsTextButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTextButton::OnDraw(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inContext, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inState, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CiRect& inRect);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsTextButton();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x3c>

class COsStaticBox : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x14|*/ class TSGrowableArray<NTempest::CiRect> mTransRect;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsStaticBox(class COsStaticBox&);
  void __thiscall COsStaticBox(void*, short, unsigned int);
  void __thiscall COsStaticBox(class COsDialog*, short, unsigned int);
  void __thiscall COsStaticBox::ClearTransparentRects();
  void __thiscall COsStaticBox::AddTransparentRect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& inRect);
  class COsStaticBox& __thiscall operator=(class COsStaticBox&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int __thiscall COsStaticBox::OnDraw(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inContext, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CiRect& inRect);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsStaticBox();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x40>

class COsSpinButton : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsSpinButton(class COsSpinButton&);
  void __thiscall COsSpinButton::COsSpinButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsSpinButton::COsSpinButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsSpinButton::SetValueRange(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inMinVal, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inMaxVal);
  void __thiscall COsSpinButton::OnSpinMouseUp();
  void __thiscall COsSpinButton::Initialize();
  class COsSpinButton& __thiscall operator=(class COsSpinButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsSpinButton::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsSpinButton::GetValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsSpinButton();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsRadioButton : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsRadioButton(class COsRadioButton&);
  void __thiscall COsRadioButton::COsRadioButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  class COsRadioButton& __thiscall operator=(class COsRadioButton&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsRadioButton::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsRadioButton::GetValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsRadioButton();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsTabControl : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsTabControl(class COsTabControl&);
  void __thiscall COsTabControl(class COsDialog*, short, unsigned int);
  void __thiscall COsTabControl::InsertItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inText, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inPos);
  int __thiscall COsTabControl::GetNumItems();
  int __thiscall COsTabControl::OnControlTab();
  class COsTabControl& __thiscall operator=(class COsTabControl&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsTabControl::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsTabControl::GetValue();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsTabControl();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c>

class COsListView : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mNumCols;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsListView(class COsListView&);
  void __thiscall COsListView::COsListView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsListView::InsertColumn(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListView::DeleteColumn(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  int __thiscall COsListView::GetNumColumns();
  void __thiscall COsListView::InsertRow(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListView::DeleteRow(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsListView::ClearRows();
  int __thiscall COsListView::GetNumRows();
  void __thiscall COsListView::SetRowColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& inColor);
  class NTempest::CImVector __thiscall COsListView::GetRowColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector* __$ReturnUdt);
  void __thiscall COsListView::SetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inRow, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* inText);
  void __thiscall COsListView::GetItemText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inRow, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* inBuf, /*<regrel ebp+0x14>*/ /*|0x4|*/ int inBufSize);
  void __thiscall COsListView::SetColumnWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inWidth);
  int __thiscall COsListView::GetColumnWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol);
  void __thiscall COsListView::SetColumnTitle(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  void __thiscall COsListView::GetColumnTitle(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inBuf, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inBufSize);
  void __thiscall COsListView::SetColumnJustification(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inJustify);
  void __thiscall COsListView::EnsureRowVisible(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inRow);
  void __thiscall COsListView::OnSelectionChange();
  void __thiscall COsListView::OnColumnClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCol);
  class COsListView& __thiscall operator=(class COsListView&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsListView::~COsListView();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsListView::OnSizeChange();
  virtual /*<vtableoff 0x0>*/ void __thiscall COsListView::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListView::GetValue();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListView::OnNotify(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCode, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* inParam);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsListView::OnReturn();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x30>

class COsToolBar : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ void* mImageList;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsToolBar(class COsToolBar&);
  void __thiscall COsToolBar::COsToolBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsToolBar::COsToolBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsToolBar::SetButtonSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
  void __thiscall COsToolBar::GetButtonSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH);
  void __thiscall COsToolBar::Clear();
  void __thiscall COsToolBar::AddButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsToolBar::AddSeparator(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  void __thiscall COsToolBar::RemoveButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos);
  int __thiscall COsToolBar::GetNumButtons();
  void __thiscall COsToolBar::SetButtonImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inWidth, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inHeight, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* inData);
  void __thiscall COsToolBar::SetButtonText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inText);
  void __thiscall COsToolBar::GetButtonText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* inBuf, /*<regrel ebp+0x10>*/ /*|0x4|*/ int inBufSize);
  void __thiscall COsToolBar::EnableButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall COsToolBar::CheckButton(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inVal);
  void __thiscall COsToolBar::InitializeToolBar();
  class COsToolBar& __thiscall operator=(class COsToolBar&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsToolBar::~COsToolBar();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsToolBar::OnCommand(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inParam);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x30>

class COsScrollBar : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mRealMin;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mRealMax;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int mPageSize;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsScrollBar(class COsScrollBar&);
  void __thiscall COsScrollBar::COsScrollBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsScrollBar::COsScrollBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsScrollBar::SetRange(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inMin, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inMax);
  void __thiscall COsScrollBar::SetPageSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  void __thiscall COsScrollBar::Initialize();
  void __thiscall COsScrollBar::UpdateRangeValues();
  class COsScrollBar& __thiscall operator=(class COsScrollBar&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsScrollBar::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inVal);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsScrollBar::GetValue();
  virtual /*<vtableoff 0x0>*/ int __thiscall COsScrollBar::OnScroll(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inParam);
  virtual /*<vtableoff 0x0>*/ int __thiscall COsScrollBar::OnMouseWheel(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inDelta);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~COsScrollBar();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x38>

class COsDivider : class COsControl  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int mMaxPos;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mMinPos;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int mTracking;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int mDragging;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int mDragStartMouseX;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int mDragStartMouseY;
  /*<thisrel this+0x44>*/ /*|0x10|*/ class NTempest::CiRect mDragStartPos;

  // base classes -----------------------------------
  // baseclass class COsControl
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsDivider(class COsDivider&);
  void __thiscall COsDivider::COsDivider(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsDivider::COsDivider(/*<regrel ebp+0x8>*/ /*|0x4|*/ class COsDialog* inDialog, /*<regrel ebp+0xc>*/ /*|0x2|*/ short inID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int inFlags);
  void __thiscall COsDivider::SetPositionRange(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inMin, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inMax);
  void __thiscall COsDivider::OnDivMouseDown();
  void __thiscall COsDivider::OnDivMouseMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ int __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal);
  void __thiscall COsDivider::OnDivMouseUp();
  void __thiscall COsDivider::OnDivMouseLeave();
  void __thiscall COsDivider::Initialize();
  void __thiscall COsDivider::UpdateCursor();
  class COsDivider& __thiscall operator=(class COsDivider&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsDivider::~COsDivider();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x54>

class COsWindow {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* mHandle;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class NTempest::C2iVector mMinSize;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall COsWindow(class COsWindow&);
  void __thiscall COsWindow::COsWindow(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* inWindow);
  void __thiscall COsWindow::SetMinSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int inH);
  void __thiscall COsWindow::GetMinSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* outW, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* outH);
  void __thiscall COsWindow::SetCursor(/*<regrel ebp+0x8>*/ /*|0x4|*/ int inCursor);
  void __thiscall COsWindow::SetIcon(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* inName);
  void __thiscall COsWindow::SetInputFocus();
  class COsWindow& __thiscall operator=(class COsWindow&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall COsWindow::~COsWindow();
  virtual /*<vtableoff 0x4>*/ void __thiscall COsWindow::OnResize();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class CSRgn {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct HSRGN__* m_handle;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CopyConstructor(class CSRgn&);
  void __thiscall CSRgn(class CSRgn&);
  void __thiscall CSRgn();
  void __thiscall ~CSRgn();
  class CSRgn& __thiscall operator=(class CSRgn&);
  void __thiscall AddParamf(struct RECTF*, void*);
  void __thiscall AddParami(struct tagRECT*, void*);
  void __thiscall AddRectf(struct RECTF*, void*);
  void __thiscall AddRecti(struct tagRECT*, void*);
  void __thiscall Clear();
  void __thiscall CombineRectf(struct RECTF*, void*, int);
  void __thiscall CombineRecti(struct tagRECT*, void*, int);
  void __thiscall GetBoundingRectf(struct RECTF*);
  void __thiscall GetBoundingRecti(struct tagRECT*);
  void __thiscall GetRectsf(unsigned long*, struct RECTF*);
  void __thiscall GetRectsi(unsigned long*, struct tagRECT*);
  void __thiscall GetRectParamsf(struct RECTF*, unsigned long*, void**);
  void __thiscall GetRectParamsi(struct tagRECT*, unsigned long*, void**);
  int __thiscall IsPointInRegionf(float, float);
  int __thiscall IsPointInRegioni(int, int);
  int __thiscall IsRectInRegionf(struct RECTF*);
  int __thiscall IsRectInRegioni(struct tagRECT*);
  void __thiscall Offsetf(float, float);
  void __thiscall Offseti(int, int);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CTgaFile {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SFile* m_file;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned char* m_image;
  /*<thisrel this+0x8>*/ /*|0x12|*/ struct TGAHeader m_header;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned char* m_addlHeaderData;
  /*<thisrel this+0x20>*/ /*|0x1a|*/ struct TGAFooter m_footer;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_imageBytes;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned char* m_colorMap;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CTgaFile(class CTgaFile&);
  void __thiscall CTgaFile();
  class CTgaFile& __thiscall operator=(class CTgaFile&);
  void __thiscall ~CTgaFile();
  void __thiscall CTgaFile::Close();
  unsigned int __thiscall Width();
  unsigned int __thiscall Height();
  unsigned int __thiscall Size();
  unsigned int __thiscall BytesPerPixel();
  unsigned int __thiscall Bytes();
  unsigned char __thiscall AlphaBits();
  unsigned char __thiscall PixelDepth();
  int __thiscall IsRightToLeft();
  int __thiscall IsTopDown();
  int __thiscall IsColorMapped();
  unsigned int __thiscall ColorMapEntries();
  unsigned int __thiscall ColorMapEntryBytes();
  unsigned int __thiscall ColorMapBytes();
  unsigned char* __thiscall CTgaFile::Image();
  unsigned char* __thiscall CTgaFile::Image();
  unsigned char* __thiscall ColorMap();
  unsigned char* __thiscall ColorMap();
  struct TGA32Pixel* __thiscall CTgaFile::ImageTGA32Pixel();
  struct TGA32Pixel* __thiscall CTgaFile::ImageTGA32Pixel();
  int __thiscall IsCompressed();
  int __thiscall CTgaFile::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  int __thiscall CTgaFile::LoadImageData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CTgaFile::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTgaFile& source);
  int __thiscall CTgaFile::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* pImg, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char bPixelDepth, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char bAlphaBits, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int bTopDown, /*<regrel ebp+0x20>*/ /*|0x4|*/ int bRightToLeft);
  int __thiscall CTgaFile::SetTopDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ int set);
  void __thiscall CTgaFile::AddAlphaChannel(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pAlphaData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char* pNoAlphaData, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* alpha);
  int __thiscall CTgaFile::AddAlphaChannel(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* pImg);
  int __thiscall CTgaFile::RemoveAlphaChannels();
  void __thiscall CTgaFile::RemoveHeaderTrailer();
  int __thiscall CTgaFile::Compress();
  int __thiscall CTgaFile::Write(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* path);
  unsigned long __thiscall CTgaFile::PreImageBytes();
  int __thiscall CTgaFile::ReadRawImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CTgaFile::RLEDecompressImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pRLEData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char* pData);
  int __thiscall CTgaFile::ReadRleImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CTgaFile::ReadColorMappedImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CTgaFile::ValidateColorDepth();
  void __thiscall CTgaFile::ConvertColorMapped(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int flags);
  int __thiscall CTgaFile::CountRun(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pImage, /*<regrel ebp+0xc>*/ /*|0x4|*/ int nMax);
  int __thiscall CTgaFile::RleCompressLine(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char** uncompressed, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char** compressed);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x44>

class CILayer : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x10|*/ struct RECTF rect;
  /*<thisrel this+0x18>*/ /*|0x10|*/ struct RECTF visible;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float zorder;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long flags;
  /*<thisrel this+0x30>*/ /*|0x4|*/ void* param;
  /*<thisrel this+0x34>*/ /*|0x4|*/ void  (paintfunc*)(void*, struct RECTF*, struct RECTF*, float);
  /*<thisrel this+0x38>*/ /*|0x8|*/ class TSLink<CILayer> zorderlink;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CILayer(class CILayer&);
  void __thiscall CILayer();
  class CILayer& __thiscall operator=(class CILayer&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CILayer();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x40>

class CLightning {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class NTempest::C3Vector mSrcPos;
  /*<thisrel this+0xc>*/ /*|0xc|*/ class NTempest::C3Vector mDstPos;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float mAvgSegLen;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float mWidth;
  /*<thisrel this+0x20>*/ /*|0x4|*/ class NTempest::CImVector mColor;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float mNoiseScale;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float mTexCoordScale;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float mDuration;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int mRebuildPoints;
  /*<thisrel this+0x34>*/ /*|0x10|*/ class TSFixedArray_<NTempest::C3Vector,1281976168,38> mPoints;
  /*<thisrel this+0x44>*/ /*|0x10|*/ class TSFixedArray_<NTempest::C3Vector,1281976168,39> mPos;
  /*<thisrel this+0x54>*/ /*|0x10|*/ class TSFixedArray_<NTempest::C2Vector,1281976168,40> mTexCoords;
  /*<thisrel this+0x64>*/ /*|0x10|*/ class TSFixedArray_<unsigned short,1281976168,41> mIndices;
  /*<thisrel this+0x74>*/ /*|0x4|*/ float mAccTime;
  /*<thisrel this+0x78>*/ /*|0x4|*/ struct HTEXTURE__* mTexture;
  /*<thisrel this+0x7c>*/ /*|0x8|*/ struct LightningCoordUpdateData mCoordUpdateData;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CLightning::BuildStroke(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C3Vector>& points);
  void __thiscall CLightning(class CLightning&);
  void __thiscall CLightning::CLightning();
  void __thiscall CLightning::~CLightning();
  void __thiscall SetSrcPos(class NTempest::C3Vector&);
  void __thiscall SetDstPos(class NTempest::C3Vector&);
  void __thiscall SetAvgSegLen(float);
  void __thiscall SetWidth(float);
  void __thiscall SetColor(class NTempest::CImVector);
  void __thiscall SetNoiseScale(float);
  void __thiscall SetTexCoordScale(float);
  void __thiscall CLightning::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HTEXTURE__* texture);
  void __thiscall SetCoordUpdateData(struct LightningCoordUpdateData&);
  void __thiscall SetDuration(float);
  void __thiscall GetSrcPos(class NTempest::C3Vector&);
  void __thiscall GetDstPos(class NTempest::C3Vector&);
  void __thiscall GetAvgSegLen(float&);
  void __thiscall GetWidth(float&);
  void __thiscall GetColor(class NTempest::CImVector&);
  void __thiscall GetNoiseScale(float&);
  void __thiscall GetTexCoordScale(float&);
  void __thiscall GetTexture(struct HTEXTURE__*&);
  void __thiscall GetCoordUpdateData(struct LightningCoordUpdateData&);
  void __thiscall GetDuration(float&);
  void __thiscall CLightning::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsed);
  void __thiscall CLightning::Render(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos);
  class CLightning& __thiscall operator=(class CLightning&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x84>

class CLightningManager {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CLightning *> mLiveBolts;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<int> mDeadBolts;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CLightningManager::CLightningManager();
  void __thiscall CLightningManager(class CLightningManager&);
  class CLightningManager& __thiscall operator=(class CLightningManager&);
  void __thiscall CLightningManager::~CLightningManager();
  unsigned int __thiscall CLightningManager::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& source, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& dest, /*<regrel ebp+0x10>*/ /*|0x4|*/ float avgSegLen, /*<regrel ebp+0x14>*/ /*|0x4|*/ float width, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::CImVector color, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float noiseScale, /*<regrel ebp+0x20>*/ /*|0x4|*/ float texCoordScale, /*<regrel ebp+0x24>*/ /*|0x4|*/ float duration, /*<regrel ebp+0x28>*/ /*|0x4|*/ struct HTEXTURE__* texture, /*<regrel ebp+0x2c>*/ /*|0x4|*/ void  (updateproc*)(void*, unsigned int, class NTempest::C3Vector*, class NTempest::C3Vector*), /*<regrel ebp+0x30>*/ /*|0x4|*/ void* context);
  void __thiscall CLightningManager::Remove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId);
  void __thiscall CLightningManager::Move(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* src, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* dst);
  void __thiscall CLightningManager::SetCoordUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (updateproc*)(void*, unsigned int, class NTempest::C3Vector*, class NTempest::C3Vector*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* context);
  void __thiscall CLightningManager::SetColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector color);
  float __thiscall CLightningManager::GetDuration(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId);
  void __thiscall CLightningManager::GetColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int boltId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CLightningManager::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsed);
  void __thiscall CLightningManager::Render(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CParticle {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float m_timeToLive;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_elapsed;
  /*<thisrel this+0x8>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x14>*/ /*|0xc|*/ class NTempest::C3Vector m_velocity;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_scale;
  /*<thisrel this+0x24>*/ /*|0x4|*/ struct HMODEL__* m_hmodel;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Init();
  void __thiscall CParticle::Copy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle& rhs);
  void __thiscall CParticle::Destroy();
  void __thiscall CParticle(class CParticle&);
  void __thiscall CParticle();
  class CParticle& __thiscall operator=(class CParticle&);
  void __thiscall ~CParticle();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CParticleEmitter {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_refCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_numNew;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_enabled;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_enabled2;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_particleEmissionRate;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_particleLifeSpan;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_velocity;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_acceleration;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_scale;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_latitude;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float m_longitude;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ struct HMODEL__* m_hmodel;
  /*<thisrel this+0x30>*/ /*|0x14|*/ class TSGrowableArray<CParticle> m_particles;
  /*<thisrel this+0x44>*/ /*|0x18|*/ class CParticleStack m_alive;
  /*<thisrel this+0x5c>*/ /*|0x18|*/ class CParticleStack m_dead;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CParticleEmitter::Init();
  void __thiscall CParticleEmitter::Copy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter& rhs);
  void __thiscall CParticleEmitter::Destroy();
  void __thiscall CParticleEmitter::SyncAllocation();
  void __thiscall CParticleEmitter::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos);
  void __thiscall CParticleEmitter::DestroyParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle& p);
  void __thiscall CParticleEmitter::MoveParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime);
  void __thiscall CParticleEmitter::CParticleEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter& rhs);
  void __thiscall CParticleEmitter::CParticleEmitter();
  class CParticleEmitter& __thiscall CParticleEmitter::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter& rhs);
  void __thiscall CParticleEmitter::~CParticleEmitter();
  float __thiscall CParticleEmitter::Velocity();
  float __thiscall CParticleEmitter::Acceleration();
  float __thiscall CParticleEmitter::Scale();
  float __thiscall CParticleEmitter::Latitude();
  float __thiscall CParticleEmitter::Longitude();
  float __thiscall CParticleEmitter::ParticleEmissionRate();
  float __thiscall CParticleEmitter::ParticleLifeSpan();
  void __thiscall CParticleEmitter::Enabled(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable);
  void __thiscall CParticleEmitter::Enabled2(/*<regrel ebp+0x8>*/ /*|0x4|*/ int enable2);
  void __thiscall CParticleEmitter::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraVector);
  void __thiscall CParticleEmitter::Render();
  void __thiscall CParticleEmitter::AddToModelScene();
  void __thiscall CParticleEmitter::Flush();
  void __thiscall CParticleEmitter::SetVelocity(/*<regrel ebp+0x8>*/ /*|0x4|*/ float vel);
  void __thiscall CParticleEmitter::SetAcceleration(/*<regrel ebp+0x8>*/ /*|0x4|*/ float accel);
  void __thiscall CParticleEmitter::SetScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale);
  void __thiscall CParticleEmitter::SetLatitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float latInDegrees);
  void __thiscall CParticleEmitter::SetLongitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float longitudeInDegrees);
  void __thiscall CParticleEmitter::SetParticleEmissionRate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float particlesPerSec);
  void __thiscall CParticleEmitter::SetParticleLifeSpan(/*<regrel ebp+0x8>*/ /*|0x4|*/ float lifeInSec);
  void __thiscall CParticleEmitter::SetModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* hmodel);
  struct HMODEL__* __thiscall GetModel();
  class CParticleEmitter* __thiscall CParticleEmitter::AddRef();
  void __thiscall CParticleEmitter::DecRef();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x74>

class CParticleStack {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_stack;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_stackPointer;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CParticleStack(class CParticleStack&);
  void __thiscall CParticleStack();
  void __thiscall CParticleStack::Push(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int u);
  unsigned int __thiscall CParticleStack::Pop();
  unsigned int __thiscall CParticleStack::Top();
  void __thiscall Remove(unsigned int);
  int __thiscall IsEmpty();
  void __thiscall Clear();
  unsigned int __thiscall Count();
  void __thiscall SetCount(unsigned int);
  void __thiscall ReserveSpace(unsigned int);
  unsigned int __thiscall operator[](unsigned int);
  unsigned int __thiscall operator[](unsigned int);
  class CParticleStack& __thiscall operator=(class CParticleStack&);
  void __thiscall ~CParticleStack();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CAngle : class TManaged<float>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_cos;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_sin;

  // base classes -----------------------------------
  // baseclass class TManaged<float>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Calc();
  float __thiscall CAngle::ClampTo2Pi(/*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  void __thiscall CAngle(class CAngle&);
  void __thiscall CAngle::CAngle(/*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  void __thiscall CAngle();
  float __thiscall Cos();
  float __thiscall Sin();
  class CAngle& __thiscall operator=(class CAngle&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CAngle::Set_(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& angle);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CAngle();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x28>

class CDataMgr : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x10|*/ class TSFixedArray<CBaseManaged *> m_managedArray;
  /*<thisrel this+0x18>*/ /*|0xc|*/ class TSExplicitList<CBaseManaged,4> m_updateList;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<float>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<int>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<NTempest::C33Matrix>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<NTempest::C3Vector>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<C3Color>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TManaged<NTempest::CImVector>* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CDataMgr::AddManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CBaseManaged* manage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fieldId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int dataTypeId);
  void __thiscall CDataMgr(class CDataMgr&);
  void __thiscall CDataMgr::CDataMgr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CDataMgr::LinkManaged(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CBaseManaged* m);
  void __thiscall CDataMgr::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  class CDataMgr& __thiscall operator=(class CDataMgr&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CDataMgr::~CDataMgr();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CBaseManaged {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CBaseManaged> m_link;
  /*<thisrel this+0xc>*/ /*|0x1|*/ unsigned char m_dataTypeId;
  /*<thisrel this+0xd>*/ /*|0x1|*/ unsigned char m_flags;
  /*<thisrel this+0x10>*/ /*|0x4|*/ void  (m_updateFcn*)(float, void*, void*);
  /*<thisrel this+0x14>*/ /*|0x4|*/ void* m_updateData;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_updatePriority;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBaseManaged(class CBaseManaged&);
  void __thiscall CBaseManaged::CBaseManaged();
  void __thiscall GetInfo(struct UpdateInfo*);
  void __thiscall CBaseManaged::SetUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (fcn*)(float, void*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* data, /*<regrel ebp+0x10>*/ /*|0x4|*/ float priority);
  class CBaseManaged& __thiscall operator=(class CBaseManaged&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CBaseManaged::~CBaseManaged();
  virtual /*<vtableoff 0x4>*/ void __thiscall CBaseManaged::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float __formal);
  virtual /*<vtableoff 0x8>*/ void __thiscall CBaseManaged::UpdateR(/*<regrel ebp+0x8>*/ /*|0x4|*/ float __formal);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x1c>

class CPlaneParticleEmitter : class CParticleEmitter2  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x278>*/ /*|0x4|*/ float m_width;
  /*<thisrel this+0x27c>*/ /*|0x4|*/ float m_height;
  /*<thisrel this+0x280>*/ /*|0x4|*/ float m_latitude;
  /*<thisrel this+0x284>*/ /*|0x4|*/ float m_longitude;

  // base classes -----------------------------------
  // baseclass class CParticleEmitter2
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall operator=(class CPlaneParticleEmitter&);
  void __thiscall CPlaneParticleEmitter::CPlaneParticleEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CPlaneParticleEmitter& rhs, /*<regrel ebp+0xc>*/ /*|0x4|*/ int deep);
  void __thiscall CPlaneParticleEmitter::CPlaneParticleEmitter();
  float __thiscall CPlaneParticleEmitter::Width();
  float __thiscall CPlaneParticleEmitter::Height();
  float __thiscall CPlaneParticleEmitter::Latitude();
  float __thiscall CPlaneParticleEmitter::Longitude();
  void __thiscall __local_vftable_ctor_closure();
  void __thiscall __copy_ctor_closure(class CPlaneParticleEmitter&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  virtual /*<vtableoff 0x0>*/ class CParticleEmitter2* __thiscall CPlaneParticleEmitter::Clone(/*<regrel ebp+0x8>*/ /*|0x4|*/ int deep);
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::~CPlaneParticleEmitter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::SetWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float width);
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::SetHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float height);
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::SetLatitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float latInRadians);
  virtual /*<vtableoff 0x0>*/ void __thiscall CPlaneParticleEmitter::SetLongitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float longInRadians);
  virtual /*<vtableoff 0x14>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x288>

class CParticle2 {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0xc>*/ /*|0x1|*/ unsigned char m_keyFrame;
  /*<thisrel this+0xd>*/ /*|0x1|*/ unsigned char m_flags;
  /*<thisrel this+0xe>*/ /*|0x2|*/ unsigned char m_filler[2];
  /*<thisrel this+0x10>*/ /*|0xc|*/ class NTempest::C3Vector m_velocity;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_age;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CParticle2::CParticle2();
  void __thiscall CParticle2::~CParticle2();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CSphereParticleEmitter : class CParticleEmitter2  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x278>*/ /*|0x4|*/ float m_innerRadius;
  /*<thisrel this+0x27c>*/ /*|0x4|*/ float m_outerRadius;
  /*<thisrel this+0x280>*/ /*|0x4|*/ float m_radiusRange;
  /*<thisrel this+0x284>*/ /*|0x4|*/ float m_latitude;
  /*<thisrel this+0x288>*/ /*|0x4|*/ float m_longitude;

  // base classes -----------------------------------
  // baseclass class CParticleEmitter2
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall operator=(class CSphereParticleEmitter&);
  void __thiscall CSphereParticleEmitter::CSphereParticleEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSphereParticleEmitter& rhs, /*<regrel ebp+0xc>*/ /*|0x4|*/ int deep);
  void __thiscall CSphereParticleEmitter::CSphereParticleEmitter();
  float __thiscall CSphereParticleEmitter::InnerRadius();
  float __thiscall CSphereParticleEmitter::OuterRadius();
  float __thiscall CSphereParticleEmitter::Latitude();
  float __thiscall CSphereParticleEmitter::Longitude();
  void __thiscall __local_vftable_ctor_closure();
  void __thiscall __copy_ctor_closure(class CSphereParticleEmitter&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  virtual /*<vtableoff 0x0>*/ class CParticleEmitter2* __thiscall CSphereParticleEmitter::Clone(/*<regrel ebp+0x8>*/ /*|0x4|*/ int deep);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::~CSphereParticleEmitter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::SetWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float radius);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::SetHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float radius);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::SetLatitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float latInRadians);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSphereParticleEmitter::SetLongitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float longInRadians);
  virtual /*<vtableoff 0x14>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x28c>

class CSplineParticleEmitter : class CParticleEmitter2  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x278>*/ /*|0x4|*/ float m_requestedEmissionRate;
  /*<thisrel this+0x27c>*/ /*|0x4|*/ float m_start;
  /*<thisrel this+0x280>*/ /*|0x4|*/ float m_end;
  /*<thisrel this+0x284>*/ /*|0x4|*/ float m_latitude;
  /*<thisrel this+0x288>*/ /*|0x4|*/ float m_radius;
  /*<thisrel this+0x28c>*/ /*|0x4|*/ int m_emitAtEnd;
  /*<thisrel this+0x290>*/ /*|0x30|*/ class NTempest::C3Spline_Bezier3 m_spline;

  // base classes -----------------------------------
  // baseclass class CParticleEmitter2
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall operator=(class CSplineParticleEmitter&);
  void __thiscall CSplineParticleEmitter::CSplineParticleEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSplineParticleEmitter& rhs, /*<regrel ebp+0xc>*/ /*|0x4|*/ int deep);
  void __thiscall CSplineParticleEmitter::CSplineParticleEmitter();
  void __thiscall SetActualEmissionRate();
  float __thiscall CSplineParticleEmitter::Start();
  float __thiscall CSplineParticleEmitter::End();
  float __thiscall CSplineParticleEmitter::Latitude();
  float __thiscall CSplineParticleEmitter::Radius();
  void __thiscall CSplineParticleEmitter::SetSpline(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* points, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numPoints);
  void __thiscall __local_vftable_ctor_closure();
  void __thiscall __copy_ctor_closure(class CSplineParticleEmitter&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::CreateParticle(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticle2& p, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C34Matrix& basis);
  virtual /*<vtableoff 0x0>*/ class CParticleEmitter2* __thiscall CSplineParticleEmitter::Clone(/*<regrel ebp+0x8>*/ /*|0x4|*/ int deep);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::~CSplineParticleEmitter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::SetWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float start);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::SetHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float end);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::SetLatitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float latInRadians);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::SetLongitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float radius);
  virtual /*<vtableoff 0x0>*/ void __thiscall CSplineParticleEmitter::SetEmissionRate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float particlesPerSecond);
  virtual /*<vtableoff 0x14>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c0>

class CCamera : class CDataMgr  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x24>*/ /*|0x28|*/ class TManaged<NTempest::C3Vector> m_position;
  /*<thisrel this+0x4c>*/ /*|0x28|*/ class TManaged<NTempest::C3Vector> m_target;
  /*<thisrel this+0x74>*/ /*|0x20|*/ class TManaged<float> m_distance;
  /*<thisrel this+0x94>*/ /*|0x20|*/ class TManaged<float> m_zFar;
  /*<thisrel this+0xb4>*/ /*|0x20|*/ class TManaged<float> m_zNear;
  /*<thisrel this+0xd4>*/ /*|0x28|*/ class CAngle m_aoa;
  /*<thisrel this+0xfc>*/ /*|0x28|*/ class CAngle m_fov;
  /*<thisrel this+0x124>*/ /*|0x28|*/ class CAngle m_roll;
  /*<thisrel this+0x14c>*/ /*|0x28|*/ class CAngle m_rotation;

  // base classes -----------------------------------
  // baseclass class CDataMgr
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CCamera(class CCamera&);
  void __thiscall CCamera();
  void __thiscall CCamera::SetupWorldProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& projectionRect, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  class CCamera& __thiscall operator=(class CCamera&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CCamera();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x174>

class CParticle2_Model : class CParticle2  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x20>*/ /*|0x10|*/ class NTempest::C4Quaternion m_rotation;
  /*<thisrel this+0x30>*/ /*|0xc|*/ class NTempest::C3Vector m_rotVelocity;

  // base classes -----------------------------------
  // baseclass class CParticle2
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CParticle2_Model::CParticle2_Model();
  void __thiscall CParticle2_Model::~CParticle2_Model();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class ParticleSystemManager {

  // static data ------------------------------------
  static /*<rva 0x9c5f30>*/ /*|0x4|*/ class ParticleSystemManager* manager;
  static /*<rva 0x439188>*/ /*|0x4|*/ float scaler;
  static /*<rva 0x9c5f28>*/ /*|0x4|*/ int  (sm_projectCallback*)(class NTempest::C3Segment&, float&);
  static /*<rva 0x9c5f20>*/ /*|0x4|*/ float sm_projectDistance;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CParticleEmitter *> modelEmitters;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<CParticleEmitter2 *> emitter2s;
  /*<thisrel this+0x28>*/ /*|0x14|*/ class TSGrowableArray<CParticleEmitter *> deletedModelEmitters;
  /*<thisrel this+0x3c>*/ /*|0x14|*/ class TSGrowableArray<CParticleEmitter2 *> deletedEmitter2s;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall ParticleSystemManager::RenderParticleEmitter(/*<register ecx>*/ /*|0x4|*/ void* param1, /*<register edx>*/ /*|0x4|*/ int param2);
  static void __fastcall ParticleSystemManager::RenderParticleEmitter2(/*<register ecx>*/ /*|0x4|*/ void* param1, /*<register edx>*/ /*|0x4|*/ int param2);
  static class ParticleSystemManager* __fastcall ParticleSystemManager::GetInstance();
  static void __fastcall ParticleSystemManager::Destroy();
  static void __fastcall ParticleSystemManager::SetScaler(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scaler);
  static float __fastcall ParticleSystemManager::GetScaler();
  static void __fastcall SetProjectCallback(int  (*)(class NTempest::C3Segment&, float&), float);
  static int  (*)(class NTempest::C3Segment&, float&) __fastcall GetProjectCallback();
  static float __fastcall GetProjectDistance();

  // non-virtual functions --------------------------
  void __thiscall ParticleSystemManager::~ParticleSystemManager();
  class CParticleEmitter* __thiscall ParticleSystemManager::CreateModelEmitter();
  class CPlaneParticleEmitter* __thiscall ParticleSystemManager::CreateQuadEmitter();
  class CSphereParticleEmitter* __thiscall ParticleSystemManager::CreateSphereEmitter();
  class CSplineParticleEmitter* __thiscall ParticleSystemManager::CreateSplineEmitter();
  class CParticleEmitter2* __thiscall ParticleSystemManager::DuplicateEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter2* emitter, /*<regrel ebp+0xc>*/ /*|0x4|*/ int deep);
  void __thiscall ParticleSystemManager::Flush();
  void __thiscall ParticleSystemManager::UpdateEmitters(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  void __thiscall ParticleSystemManager::DeleteModelEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter* emitter);
  void __thiscall ParticleSystemManager::DeleteEmitter2(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CParticleEmitter2* emitter);
  void __thiscall ParticleSystemManager::RenderEmitters();
  void __thiscall ParticleSystemManager(class ParticleSystemManager&);
  void __thiscall ParticleSystemManager();
  class ParticleSystemManager& __thiscall operator=(class ParticleSystemManager&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x50>

class RibbonManager {

  // static data ------------------------------------
  static /*<rva 0x9c5f34>*/ /*|0x4|*/ class RibbonManager* manager;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CRibbonEmitter *> emitters;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<CRibbonEmitter *> deletedEmitters;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall RibbonManager::RenderEmitter(/*<register ecx>*/ /*|0x4|*/ void* param1, /*<register edx>*/ /*|0x4|*/ int param2);
  static class RibbonManager* __fastcall RibbonManager::GetInstance();
  static void __fastcall RibbonManager::Destroy();

  // non-virtual functions --------------------------
  void __thiscall RibbonManager::~RibbonManager();
  class CRibbonEmitter* __thiscall RibbonManager::CreateEmitter();
  class CRibbonEmitter* __thiscall RibbonManager::DuplicateEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRibbonEmitter* emitter);
  void __thiscall RibbonManager::Flush();
  void __thiscall RibbonManager::UpdateEmitters(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  void __thiscall RibbonManager::DeleteEmitter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRibbonEmitter* emitter);
  void __thiscall RibbonManager::RenderEmitters();
  void __thiscall RibbonManager(class RibbonManager&);
  void __thiscall RibbonManager();
  class RibbonManager& __thiscall operator=(class RibbonManager&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CTexture : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x104|*/ char filename[260];
  /*<thisrel this+0x10c>*/ /*|0x4|*/ unsigned int flags;
  /*<thisrel this+0x110>*/ /*|0x2|*/ unsigned short pixBitDepth;
  /*<thisrel this+0x112>*/ /*|0x2|*/ unsigned short alphaBits;
  /*<thisrel this+0x114>*/ /*|0x4|*/ struct MipBits* mipBits;
  /*<thisrel this+0x118>*/ /*|0x10|*/ class CStatus loadStatus;
  /*<thisrel this+0x128>*/ /*|0x4|*/ class CGxTex* gxTex;
  /*<thisrel this+0x12c>*/ /*|0x4|*/ unsigned int gxWidth;
  /*<thisrel this+0x130>*/ /*|0x4|*/ unsigned int gxHeight;
  /*<thisrel this+0x134>*/ /*|0x4|*/ enum EGxTexFormat gxTexFormat;
  /*<thisrel this+0x138>*/ /*|0x4|*/ enum EGxTexFormat dataFormat;
  /*<thisrel this+0x13c>*/ /*|0x4|*/ struct CGxTexFlags gxTexFlags;
  /*<thisrel this+0x140>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0x144>*/ /*|0x8|*/ class TSLink<CTexture> link;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CTexture(class CTexture&);
  void __thiscall CTexture::CTexture();
  class CTexture& __thiscall operator=(class CTexture&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CTexture::~CTexture();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CTexture::GetObjectName();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14c>

class CBLPFile {

  // static data ------------------------------------
  static /*<rva 0x45acc8>*/ /*|0x10|*/ unsigned char s_eightBitAlphaLookup[16];
  static /*<rva 0x45acd8>*/ /*|0x2|*/ unsigned char s_oneBitAlphaLookup[2];
  static /*<rva 0x45acdc>*/ /*|0x4|*/ unsigned short s_oneBitAlphaShort[2];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct MipBits* m_images;
  /*<thisrel this+0x4>*/ /*|0x494|*/ struct BLPHeader m_header;
  /*<thisrel this+0x498>*/ /*|0x4|*/ void* m_inMemoryImage;
  /*<thisrel this+0x49c>*/ /*|0x4|*/ int m_inMemoryNeedsFree;
  /*<thisrel this+0x4a0>*/ /*|0x4|*/ unsigned int m_numLevels;
  /*<thisrel this+0x4a4>*/ /*|0x4|*/ unsigned int m_quality;
  /*<thisrel this+0x4a8>*/ /*|0x4|*/ struct HCOLORMAP__* m_colorMapping;
  /*<thisrel this+0x4ac>*/ /*|0x4|*/ enum MipMapAlgorithm m_mipMapAlgorithm;
  /*<thisrel this+0x4b0>*/ /*|0x4|*/ unsigned char* m_lockDecompMem;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall FlushFromReadCache(char*);

  // non-virtual functions --------------------------
  void __thiscall CBLPFile::SharedInit();
  void __thiscall CBLPFile(class CBLPFile&);
  void __thiscall CBLPFile();
  void __thiscall ~CBLPFile();
  void __thiscall CBLPFile::Close();
  unsigned int __thiscall Width(unsigned int);
  unsigned int __thiscall Width();
  unsigned int __thiscall Height(unsigned int);
  unsigned int __thiscall Height();
  unsigned int __thiscall Pixels(unsigned int);
  unsigned int __thiscall Pixels();
  unsigned int __thiscall CBLPFile::Bytes(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mipLevel);
  unsigned int __thiscall CBLPFile::Bytes();
  unsigned int __thiscall Quality();
  enum MIPS_TYPE __thiscall CBLPFile::HasMips();
  unsigned int __thiscall AlphaBits();
  int __thiscall CBLPFile::SetAlphaBits(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int alpha);
  int __thiscall GenerateMipLevel(unsigned int, unsigned int);
  int __thiscall GenerateMipLevels(char*, class CStatus*);
  int __thiscall GenerateMipLevels(class CStatus*);
  int __thiscall CBLPFile::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  int __thiscall CBLPFile::Source(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* fileBits);
  enum COLOR_FILE_FORMAT __thiscall GetColorEncoding();
  enum PIXEL_FORMAT __thiscall GetPreferredFormat();
  int __thiscall CBLPFile::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char*& data, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& stride);
  int __thiscall CBLPFile::Unlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mipLevel);
  int __thiscall CBLPFile::LockChain(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT pixelFormat, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct MipBits*& images, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel);
  unsigned int __thiscall GetNumLevels();
  void __thiscall CBLPFile::SetHasMips(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MIPS_TYPE hasMips);
  int __thiscall CBLPFile::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CBLPFile& source, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall CBLPFile::SetImage(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* pImg, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int alphaBits, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall SetImages(class CBLPFile&);
  int __thiscall Write(char*, enum COLOR_FILE_FORMAT);
  void __thiscall SetQuality(unsigned int);
  void __thiscall SetPreferredFormat(enum PIXEL_FORMAT);
  void __thiscall SetMipMapAlgorithm(enum MipMapAlgorithm);
  int __thiscall GetOctreePal(struct tagPALETTEENTRY*, unsigned int);
  unsigned char* __thiscall CBLPFile::Image(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int level);
  int __thiscall CBLPFile::CreateMipLevels(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int height);
  int __thiscall AddSourceImages(struct HCOLORLIST__*);
  int __thiscall ComputePalette(struct HCOLORLIST__*);
  int __thiscall Palettize(void*);
  int __thiscall MakeAlpha(unsigned char**, unsigned int);
  int __thiscall MakeJPEGS(void*);
  int __thiscall MakeDXT(void*);
  int __thiscall WriteOutputFile(void*, unsigned char*, unsigned char*, unsigned int);
  int __thiscall WriteJPEGOutputFile(void*, unsigned char*, unsigned int, unsigned int);
  int __thiscall WriteHeader(void*);
  int __thiscall PalettizeSourceImage(unsigned char**, unsigned int);
  int __thiscall BuildPalettedImages(void*);
  struct tagPALETTEENTRY* __thiscall GetBackgroundColor(int, struct tagPALETTEENTRY*);
  void __thiscall PaletteConvert(struct tagPALETTEENTRY*, struct BlpPalPixel*);
  int __thiscall CBLPFile::IsValidMip(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int level);
  int __thiscall DecompJPEG(enum PIXEL_FORMAT, unsigned int, unsigned char*&, unsigned int, void*, unsigned int&);
  int __thiscall CBLPFile::DecompPal(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* tempBuffer);
  void __thiscall CBLPFile::DecompPalFastPath(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* tempbuffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int colorSize);
  void __thiscall CBLPFile::DecompPalARGB8888(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* tempBuffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int colorSize);
  void __thiscall CBLPFile::DecompPalARGB4444(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* tempBuffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int colorSize);
  void __thiscall CBLPFile::DecompPalARGB1555(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* tempBuffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int colorSize);
  void __thiscall CBLPFile::DecompPalARGB565(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* tempBuffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int colorSize);
  int __thiscall CBLPFile::GetFormatSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* size, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int* stride);
  class CBLPFile& __thiscall operator=(class CBLPFile&);
  int __thiscall CBLPFile::LockChain2(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT pixelFormat, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct MipBits*& images, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel);
  int __thiscall CBLPFile::Lock2(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum PIXEL_FORMAT format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& stride);
  int __thiscall CBLPFile::Unlock2(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mipLevel);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4b4>

class CGxCaps {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_numTmus;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_pixelCenterOnEdge;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_texelCenterOnEdge;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_maxTextureSize;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_texOpAdd;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_texOpMod2X;
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum EGxColorFormat m_colorFormat;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_texFmtDxt;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int m_maxIndex;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_generateMipMaps;
  /*<thisrel this+0x28>*/ /*|0x20|*/ int m_rttFormat[8];
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_rttOriginUpperLeft;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ enum CGxPixelShader::Target m_pixelShaderTarget;
  /*<thisrel this+0x50>*/ /*|0x4|*/ enum CGxVertexShader::Target m_vertexShaderTarget;
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_texFilterTrilinear;
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_texFilterAnisotropic;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ unsigned int m_maxTexAnisotropy;
  /*<thisrel this+0x60>*/ /*|0x4|*/ int m_depthBias;
  /*<thisrel this+0x64>*/ /*|0x4|*/ int m_mipMapLodBias;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x68>

class HASHKEY_TEXTUREFILE {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* m_filename;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxTexFlags m_flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_TEXTUREFILE(char*, struct CGxTexFlags);
  void __thiscall HASHKEY_TEXTUREFILE(class HASHKEY_TEXTUREFILE&);
  void __thiscall HASHKEY_TEXTUREFILE();
  void __thiscall HASHKEY_TEXTUREFILE::~HASHKEY_TEXTUREFILE();
  class HASHKEY_TEXTUREFILE& __thiscall operator=(class HASHKEY_TEXTUREFILE&);
  unsigned char __thiscall operator==(class HASHKEY_TEXTUREFILE&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CGxTexCache {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CGxTex* gxTex;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long timeStamp;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class TSLink<CGxTexCache> link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxTexCache(class CGxTexCache&);
  void __thiscall CGxTexCache();
  void __thiscall ~CGxTexCache();
  class CGxTexCache& __thiscall operator=(class CGxTexCache&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class C24Matrix {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float a0;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float a1;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float b0;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float b1;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float c0;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float c1;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float d0;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float d1;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall C24Matrix(float, float, float, float, float, float, float, float);
  void __thiscall C24Matrix(float);
  void __thiscall C24Matrix();
  void __thiscall ~C24Matrix();
  float* __thiscall Access();
  float* __thiscall Access();
  float* __thiscall operator[](unsigned int);
  float* __thiscall operator[](unsigned int);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class SoundCharacterMacroLinesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_Category;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_Sex;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_Race;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_SoundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SoundCharacterMacroLinesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SoundCharacterMacroLinesRec::SoundCharacterMacroLinesRec();
  void __thiscall SoundCharacterMacroLinesRec::~SoundCharacterMacroLinesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SoundCharacterMacroLinesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class ChrRacesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_factionID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_MaleDisplayId;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_FemaleDisplayId;
  /*<thisrel this+0x14>*/ /*|0x4|*/ char* m_ClientPrefix;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_MountScale;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_BaseLanguage;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_creatureType;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_LoginEffectSpellID;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_CombatStunSpellID;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_ResSicknessSpellID;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_SplashSoundID;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_startingTaxiNodes;
  /*<thisrel this+0x38>*/ /*|0x4|*/ char* m_clientFileString;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_cinematicSequenceID;
  /*<thisrel this+0x40>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x60>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ChrRacesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ChrRacesRec::ChrRacesRec();
  void __thiscall ChrRacesRec::~ChrRacesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ChrRacesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x64>

class AREAHASHKEY {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int cont;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int area;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int subArea;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall AREAHASHKEY(unsigned int, unsigned int, unsigned int);
  void __thiscall AREAHASHKEY(class AREAHASHKEY&);
  void __thiscall AREAHASHKEY();
  class AREAHASHKEY& __thiscall AREAHASHKEY::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class AREAHASHKEY& rhs);
  int __thiscall AREAHASHKEY::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class AREAHASHKEY& rhs);
  unsigned int __thiscall GetAreaID();

  // virtual functions ------------------------------
};
// <size 0xc>

class AreaMIDIAmbiencesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_DaySequence;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_NightSequence;
  /*<thisrel this+0xc>*/ /*|0x4|*/ char* m_DLSFile;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_volume;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AreaMIDIAmbiencesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AreaMIDIAmbiencesRec::AreaMIDIAmbiencesRec();
  void __thiscall AreaMIDIAmbiencesRec::~AreaMIDIAmbiencesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AreaMIDIAmbiencesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class SoundWaterTypeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_soundType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_soundSubtype;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SoundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SoundWaterTypeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SoundWaterTypeRec::SoundWaterTypeRec();
  void __thiscall SoundWaterTypeRec::~SoundWaterTypeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SoundWaterTypeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class SoundEntriesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_soundType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0xc>*/ /*|0x28|*/ char* m_File[10];
  /*<thisrel this+0x34>*/ /*|0x28|*/ int m_Freq[10];
  /*<thisrel this+0x5c>*/ /*|0x4|*/ char* m_DirectoryBase;
  /*<thisrel this+0x60>*/ /*|0x4|*/ float m_volumeFloat;
  /*<thisrel this+0x64>*/ /*|0x4|*/ float m_pitch;
  /*<thisrel this+0x68>*/ /*|0x4|*/ float m_pitchVariation;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int m_priority;
  /*<thisrel this+0x70>*/ /*|0x4|*/ int m_channel;
  /*<thisrel this+0x74>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x78>*/ /*|0x4|*/ float m_minDistance;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ float m_maxDistance;
  /*<thisrel this+0x80>*/ /*|0x4|*/ float m_distanceCutoff;
  /*<thisrel this+0x84>*/ /*|0x4|*/ int m_EAXDef;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SoundEntriesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SoundEntriesRec::SoundEntriesRec();
  void __thiscall SoundEntriesRec::~SoundEntriesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SoundEntriesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x88>

class ZoneMusicRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_VolumeFloat;
  /*<thisrel this+0x8>*/ /*|0x8|*/ char* m_MusicFile[2];
  /*<thisrel this+0x10>*/ /*|0x8|*/ int m_SilenceIntervalMin[2];
  /*<thisrel this+0x18>*/ /*|0x8|*/ int m_SilenceIntervalMax[2];
  /*<thisrel this+0x20>*/ /*|0x8|*/ int m_SegmentLength[2];
  /*<thisrel this+0x28>*/ /*|0x8|*/ int m_SegmentPlayMin[2];
  /*<thisrel this+0x30>*/ /*|0x8|*/ int m_SegmentPlayMax[2];
  /*<thisrel this+0x38>*/ /*|0x8|*/ int m_Sounds[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ZoneMusicRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ZoneMusicRec::ZoneMusicRec();
  void __thiscall ZoneMusicRec::~ZoneMusicRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ZoneMusicRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class SheatheSoundLookupsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_classID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_subclassID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_material;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_checkMaterial;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_sheatheSound;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_unsheatheSound;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SheatheSoundLookupsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SheatheSoundLookupsRec::SheatheSoundLookupsRec();
  void __thiscall SheatheSoundLookupsRec::~SheatheSoundLookupsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SheatheSoundLookupsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class SoundSamplePreferencesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_EAX1EffectLevel;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_EAX2SampleDirect;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_EAX2SampleDirectHF;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_EAX2SampleRoom;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_EAX2SampleRoomHF;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_EAX2SampleObstruction;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_EAX2SampleObstructionLFRatio;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_EAX2SampleOcclusion;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_EAX2SampleOcclusionLFRatio;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float m_EAX2SampleOcclusionRoomRatio;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_EAX2SampleRoomRolloff;
  /*<thisrel this+0x30>*/ /*|0x4|*/ float m_EAX2SampleAirAbsorption;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_EAX2SampleOutsideVolumeHF;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float m_EAX3SampleOcclusionDirectRatio;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float m_EAX3SampleExclusion;
  /*<thisrel this+0x40>*/ /*|0x4|*/ float m_EAX3SampleExclusionLFRatio;
  /*<thisrel this+0x44>*/ /*|0x4|*/ float m_EAX3SampleDopplerFactor;
  /*<thisrel this+0x48>*/ /*|0x4|*/ float m_Fast2DPredelayTime;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ float m_Fast2DDamping;
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_Fast2DReverbTime;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SoundSamplePreferencesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SoundSamplePreferencesRec::SoundSamplePreferencesRec();
  void __thiscall SoundSamplePreferencesRec::~SoundSamplePreferencesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SoundSamplePreferencesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>

class WeaponSwingSounds2Rec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_SwingType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_Crit;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SoundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WeaponSwingSounds2Rec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WeaponSwingSounds2Rec::WeaponSwingSounds2Rec();
  void __thiscall WeaponSwingSounds2Rec::~WeaponSwingSounds2Rec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WeaponSwingSounds2Rec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class WeaponImpactSoundsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_WeaponSubClassID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_ParrySoundType;
  /*<thisrel this+0xc>*/ /*|0x28|*/ int m_impactSoundID[10];
  /*<thisrel this+0x34>*/ /*|0x28|*/ int m_critImpactSoundID[10];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WeaponImpactSoundsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WeaponImpactSoundsRec::WeaponImpactSoundsRec();
  void __thiscall WeaponImpactSoundsRec::~WeaponImpactSoundsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WeaponImpactSoundsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x5c>

class MaterialRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_materialID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_foleySoundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall MaterialRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall MaterialRec::MaterialRec();
  void __thiscall MaterialRec::~MaterialRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall MaterialRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class SoundProviderPreferencesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_Description;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_Flags;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_EAXEnvironmentSelection;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_EAXEffectVolume;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_EAXDecayTime;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_EAXDamping;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_EAX2EnvironmentSize;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_EAX2EnvironmentDiffusion;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_EAX2Room;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_EAX2RoomHF;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_EAX2DecayHFRatio;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_EAX2Reflections;
  /*<thisrel this+0x34>*/ /*|0x4|*/ float m_EAX2ReflectionsDelay;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_EAX2Reverb;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float m_EAX2ReverbDelay;
  /*<thisrel this+0x40>*/ /*|0x4|*/ float m_EAX2RoomRolloff;
  /*<thisrel this+0x44>*/ /*|0x4|*/ float m_EAX2AirAbsorption;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_EAX3RoomLF;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ float m_EAX3DecayLFRatio;
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_EAX3EchoTime;
  /*<thisrel this+0x54>*/ /*|0x4|*/ float m_EAX3EchoDepth;
  /*<thisrel this+0x58>*/ /*|0x4|*/ float m_EAX3ModulationTime;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ float m_EAX3ModulationDepth;
  /*<thisrel this+0x60>*/ /*|0x4|*/ float m_EAX3HFReference;
  /*<thisrel this+0x64>*/ /*|0x4|*/ float m_EAX3LFReference;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SoundProviderPreferencesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SoundProviderPreferencesRec::SoundProviderPreferencesRec();
  void __thiscall SoundProviderPreferencesRec::~SoundProviderPreferencesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SoundProviderPreferencesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x68>

class VocalUISoundsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_vocalUIEnum;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_raceID;
  /*<thisrel this+0xc>*/ /*|0x8|*/ int m_NormalSoundID[2];
  /*<thisrel this+0x14>*/ /*|0x8|*/ int m_PissedSoundID[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall VocalUISoundsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall VocalUISoundsRec::VocalUISoundsRec();
  void __thiscall VocalUISoundsRec::~VocalUISoundsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall VocalUISoundsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class SpellRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_school;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_category;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_castUI;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_attributes;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_attributesEx;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_shapeshiftMask;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_targets;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_targetCreatureType;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_requiresSpellFocus;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_casterAuraState;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_targetAuraState;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_castingTimeIndex;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_recoveryTime;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_categoryRecoveryTime;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_interruptFlags;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int m_auraInterruptFlags;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_channelInterruptFlags;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_procFlags;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ int m_procChance;
  /*<thisrel this+0x50>*/ /*|0x4|*/ int m_procCharges;
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_maxLevel;
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_baseLevel;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ int m_spellLevel;
  /*<thisrel this+0x60>*/ /*|0x4|*/ int m_durationIndex;
  /*<thisrel this+0x64>*/ /*|0x4|*/ int m_powerType;
  /*<thisrel this+0x68>*/ /*|0x4|*/ int m_manaCost;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int m_manaCostPerLevel;
  /*<thisrel this+0x70>*/ /*|0x4|*/ int m_manaPerSecond;
  /*<thisrel this+0x74>*/ /*|0x4|*/ int m_manaPerSecondPerLevel;
  /*<thisrel this+0x78>*/ /*|0x4|*/ int m_rangeIndex;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ float m_speed;
  /*<thisrel this+0x80>*/ /*|0x4|*/ int m_modalNextSpell;
  /*<thisrel this+0x84>*/ /*|0x8|*/ int m_totem[2];
  /*<thisrel this+0x8c>*/ /*|0x20|*/ int m_reagent[8];
  /*<thisrel this+0xac>*/ /*|0x20|*/ int m_reagentCount[8];
  /*<thisrel this+0xcc>*/ /*|0x4|*/ int m_equippedItemClass;
  /*<thisrel this+0xd0>*/ /*|0x4|*/ int m_equippedItemSubclass;
  /*<thisrel this+0xd4>*/ /*|0xc|*/ int m_effect[3];
  /*<thisrel this+0xe0>*/ /*|0xc|*/ int m_effectDieSides[3];
  /*<thisrel this+0xec>*/ /*|0xc|*/ int m_effectBaseDice[3];
  /*<thisrel this+0xf8>*/ /*|0xc|*/ int m_effectDicePerLevel[3];
  /*<thisrel this+0x104>*/ /*|0xc|*/ float m_effectRealPointsPerLevel[3];
  /*<thisrel this+0x110>*/ /*|0xc|*/ int m_effectBasePoints[3];
  /*<thisrel this+0x11c>*/ /*|0xc|*/ int m_implicitTargetA[3];
  /*<thisrel this+0x128>*/ /*|0xc|*/ int m_implicitTargetB[3];
  /*<thisrel this+0x134>*/ /*|0xc|*/ int m_effectRadiusIndex[3];
  /*<thisrel this+0x140>*/ /*|0xc|*/ int m_effectAura[3];
  /*<thisrel this+0x14c>*/ /*|0xc|*/ int m_effectAuraPeriod[3];
  /*<thisrel this+0x158>*/ /*|0xc|*/ float m_effectAmplitude[3];
  /*<thisrel this+0x164>*/ /*|0xc|*/ int m_effectChainTargets[3];
  /*<thisrel this+0x170>*/ /*|0xc|*/ int m_effectItemType[3];
  /*<thisrel this+0x17c>*/ /*|0xc|*/ int m_effectMiscValue[3];
  /*<thisrel this+0x188>*/ /*|0xc|*/ int m_effectTriggerSpell[3];
  /*<thisrel this+0x194>*/ /*|0x4|*/ int m_spellVisualID;
  /*<thisrel this+0x198>*/ /*|0x4|*/ int m_spellIconID;
  /*<thisrel this+0x19c>*/ /*|0x4|*/ int m_activeIconID;
  /*<thisrel this+0x1a0>*/ /*|0x4|*/ int m_spellPriority;
  /*<thisrel this+0x1a4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x1c4>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x1c8>*/ /*|0x20|*/ char* m_nameSubtext_lang[8];
  /*<thisrel this+0x1e8>*/ /*|0x4|*/ int m_nameSubtext_flag;
  /*<thisrel this+0x1ec>*/ /*|0x20|*/ char* m_description_lang[8];
  /*<thisrel this+0x20c>*/ /*|0x4|*/ int m_description_flag;
  /*<thisrel this+0x210>*/ /*|0x4|*/ int m_manaCostPct;
  /*<thisrel this+0x214>*/ /*|0x4|*/ int m_startRecoveryCategory;
  /*<thisrel this+0x218>*/ /*|0x4|*/ int m_startRecoveryTime;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellRec::SpellRec();
  void __thiscall SpellRec::~SpellRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x21c>

class ResistancesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_Flags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_FizzleSoundID;
  /*<thisrel this+0xc>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ResistancesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ResistancesRec::ResistancesRec();
  void __thiscall ResistancesRec::~ResistancesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ResistancesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class WowTime {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_minute;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_hour;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_weekday;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_monthDay;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_month;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_year;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall WowTime::WowEncodeTime(/*<register ecx>*/ /*|0x4|*/ unsigned int& value, /*<register edx>*/ /*|0x4|*/ class WowTime* time);
  static void __fastcall WowTime::WowEncodeTime(/*<register ecx>*/ /*|0x4|*/ unsigned int& value, /*<register edx>*/ /*|0x4|*/ int minute, /*<regrel ebp+0x8>*/ /*|0x4|*/ int hour, /*<regrel ebp+0xc>*/ /*|0x4|*/ int weekday, /*<regrel ebp+0x10>*/ /*|0x4|*/ int monthday, /*<regrel ebp+0x14>*/ /*|0x4|*/ int month, /*<regrel ebp+0x18>*/ /*|0x4|*/ int year, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int flags);
  static void __fastcall WowTime::WowDecodeTime(/*<register ecx>*/ /*|0x4|*/ unsigned int value, /*<register edx>*/ /*|0x4|*/ class WowTime* time);
  static void __fastcall WowTime::WowDecodeTime(/*<register ecx>*/ /*|0x4|*/ unsigned int value, /*<register edx>*/ /*|0x4|*/ int* minute, /*<regrel ebp+0x8>*/ /*|0x4|*/ int* hour, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* weekday, /*<regrel ebp+0x10>*/ /*|0x4|*/ int* monthday, /*<regrel ebp+0x14>*/ /*|0x4|*/ int* month, /*<regrel ebp+0x18>*/ /*|0x4|*/ int* year, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int* flags);
  static char* __fastcall WowTime::WowGetTimeString(/*<register ecx>*/ /*|0x4|*/ class WowTime* time, /*<register edx>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x8>*/ /*|0x4|*/ int maxlen);
  static char* __fastcall WowTime::WowGetTimeString(/*<register ecx>*/ /*|0x4|*/ unsigned int value, /*<register edx>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x8>*/ /*|0x4|*/ int maxlen);

  // non-virtual functions --------------------------
  void __thiscall WowTime(int, int);
  void __thiscall WowTime(unsigned int);
  void __thiscall WowTime(class WowTime&);
  void __thiscall WowTime::WowTime();
  int __thiscall WowTime::GetDaysSinceEpoch();
  void __thiscall WowTime::SetDaysSinceEpoch(/*<regrel ebp+0x8>*/ /*|0x4|*/ int days);
  int __thiscall WowTime::GetHourAndMinutes();
  void __thiscall WowTime::SetHourAndMinutes(/*<regrel ebp+0x8>*/ /*|0x4|*/ int minutes);
  int __thiscall WowTime::CompareYear(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  int __thiscall WowTime::CompareMonth(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  int __thiscall WowTime::CompareDay(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  int __thiscall WowTime::CompareWeekday(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  int __thiscall WowTime::CompareHour(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  int __thiscall WowTime::CompareMinute(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& compareTime);
  unsigned char __thiscall WowTime::InRange(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& valMin, /*<regrel ebp+0xc>*/ /*|0x4|*/ class WowTime& valMax);
  unsigned char __thiscall WowTime::operator<(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned char __thiscall WowTime::operator<=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned char __thiscall WowTime::operator>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned char __thiscall WowTime::operator>=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned char __thiscall WowTime::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned char __thiscall WowTime::operator!=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& cmpTime);
  unsigned int __thiscall operator unsigned int();

  // virtual functions ------------------------------
};
// <size 0x1c>

class CGameTime : class WowTime  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned long m_lastTick;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_timeBias;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_dateBias;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_gameMinutesElapsed;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_gameMinutesPerRealSecond;
  /*<thisrel this+0x30>*/ /*|0x4|*/ float m_gameMinutesThisTick;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned int m_timeDifferential;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned int m_lastTickMinute;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float m_dayProgression;
  /*<thisrel this+0x40>*/ /*|0x2c|*/ class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE> m_callbackLists;

  // base classes -----------------------------------
  // baseclass class WowTime
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGameTime(class CGameTime&);
  void __thiscall CGameTime::CGameTime();
  void __thiscall CGameTime::Destroy();
  int __thiscall GetTimeBias();
  int __thiscall GetDateBias();
  void __thiscall CGameTime::SetTimeDateBias(/*<regrel ebp+0x8>*/ /*|0x4|*/ int timeBias, /*<regrel ebp+0xc>*/ /*|0x4|*/ int dateBias, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char update);
  void __thiscall CGameTime::GameTimeSetTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& time);
  void __thiscall CGameTime::GameTimeUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSeconds);
  void __thiscall CGameTime::GameTimeSync(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& time, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char reset);
  void __thiscall CGameTime::GameTimeSync(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char reset);
  float __thiscall CGameTime::GameTimeSetMinutesPerSecond(/*<regrel ebp+0x8>*/ /*|0x4|*/ float minutesPerSecond);
  float __thiscall CGameTime::GameTimeGetMinutesPerSecond();
  unsigned char __thiscall IsDayTime();
  unsigned char __thiscall IsNightTime();
  struct HGAMETIMECALLBACK__* __thiscall CGameTime::GameTimeRegisterCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowTime& time, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(class WowTime&, void*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* user);
  void __thiscall CGameTime::GameTimeUnregisterCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HGAMETIMECALLBACK__* callbackHandle);
  float __thiscall CGameTime::GameTimeGetDayProgression();
  unsigned int __thiscall MinutesSinceBoot();
  void __thiscall CGameTime::TickMinute();
  void __thiscall CGameTime::PerformCallbacks(/*<regrel ebp+0x8>*/ /*|0x4|*/ int minutes);
  class CGameTime& __thiscall operator=(class CGameTime&);
  void __thiscall ~CGameTime();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x6c>

class ItemDisplayInfoRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x8|*/ char* m_modelName[2];
  /*<thisrel this+0xc>*/ /*|0x8|*/ char* m_modelTexture[2];
  /*<thisrel this+0x14>*/ /*|0x4|*/ char* m_inventoryIcon;
  /*<thisrel this+0x18>*/ /*|0x4|*/ char* m_groundModel;
  /*<thisrel this+0x1c>*/ /*|0x10|*/ int m_geosetGroup[4];
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_spellVisualID;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_groupSoundIndex;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_itemSize;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_helmetGeosetVisID;
  /*<thisrel this+0x40>*/ /*|0x20|*/ char* m_texture[8];
  /*<thisrel this+0x60>*/ /*|0x4|*/ int m_itemVisual;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemDisplayInfoRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemDisplayInfoRec::ItemDisplayInfoRec();
  void __thiscall ItemDisplayInfoRec::~ItemDisplayInfoRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemDisplayInfoRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x64>

class TerrainTypeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_TerrainID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_TerrainDesc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_FootstepSprayRun;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_FootstepSprayWalk;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_SoundID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_Flags;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TerrainTypeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TerrainTypeRec::TerrainTypeRec();
  void __thiscall TerrainTypeRec::~TerrainTypeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TerrainTypeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TerrainTypeSoundsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TerrainTypeSoundsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TerrainTypeSoundsRec::TerrainTypeSoundsRec();
  void __thiscall TerrainTypeSoundsRec::~TerrainTypeSoundsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TerrainTypeSoundsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class ItemGroupSoundsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x10|*/ int m_sound[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemGroupSoundsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemGroupSoundsRec::ItemGroupSoundsRec();
  void __thiscall ItemGroupSoundsRec::~ItemGroupSoundsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemGroupSoundsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class FootstepTerrainLookupRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_CreatureFootstepID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_TerrainSoundID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SoundID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_SoundIDSplash;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall FootstepTerrainLookupRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall FootstepTerrainLookupRec::FootstepTerrainLookupRec();
  void __thiscall FootstepTerrainLookupRec::~FootstepTerrainLookupRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall FootstepTerrainLookupRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CGItem_C : class CGObject_C,  class CGItem  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x38>*/ /*|0x8|*/ struct VirtualItemInfo m_itemInfo;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned long m_expirationTime;
  /*<thisrel this+0x44>*/ /*|0x14|*/ unsigned long m_enchantmentExpiration[5];
  /*<thisrel this+0x58>*/ /*|0x4|*/ class ItemGroupSoundsRec* m_soundsRec;

  // base classes -----------------------------------
  // baseclass class CGObject_C
  // <base data offset+0x0>

  // baseclass class CGItem
  // <base data offset+0x30>

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CGItem_C::GetInventoryArt(/*<register ecx>*/ /*|0x4|*/ int displayID);
  static unsigned int __fastcall CGItem_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);
  static void __fastcall CGItem_C::Initialize();
  static void __fastcall CGItem_C::Shutdown();
  static int __fastcall CGItem_C::IsMetal(/*<register ecx>*/ /*|0x4|*/ unsigned int material);

  // non-virtual functions --------------------------
  void __thiscall CGItem_C(class CGItem_C&);
  void __thiscall CGItem_C::CGItem_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGItem_C::~CGItem_C();
  void __thiscall CGItem_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGItem_C::PostInit(/*<regrel ebx+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall CGItem_C::PostInitWithStats();
  void __thiscall PostMovementUpdate();
  int __thiscall CGItem_C::CanBeUsed();
  int __thiscall CGItem_C::GetUseSpell();
  unsigned char __thiscall CGItem_C::Use();
  char* __thiscall CGItem_C::GetInventoryArt();
  int __thiscall CGItem_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGItem_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  int __thiscall CGItem_C::IsMetal();
  void __thiscall Lock();
  void __thiscall Unlock();
  int __thiscall IsLocked();
  void __thiscall CGItem_C::SetTranslated();
  struct VirtualItemInfo* __thiscall GetVirtualInfo();
  int __thiscall CGItem_C::GetMaxCount();
  int __thiscall CGItem_C::GetClassID();
  int __thiscall CGItem_C::GetSubtypeID();
  unsigned int __thiscall CGItem_C::GetInventoryType();
  int __thiscall CGItem_C::GetDisplayID();
  unsigned char __thiscall CGItem_C::IsExotic();
  int __thiscall CGItem_C::GetItemStaticFlag(/*<regrel ebx+0x8>*/ /*|0x4|*/ enum ITEM_STATIC_FLAGS flags);
  int __thiscall CGItem_C::GetMaterial();
  int __thiscall CGItem_C::GetSheatheType();
  int __thiscall CGItem_C::CanGoInSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  int __thiscall CGItem_C::GetSheatheInvisible();
  unsigned char __thiscall CGItem_C::IsWrapper();
  void __thiscall CGItem_C::UpdateExpirationTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ int timeLeft);
  int __thiscall CGItem_C::GetExpirationTimeLeft();
  void __thiscall CGItem_C::UpdateEnchantmentTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ int timeLeft);
  int __thiscall CGItem_C::GetEnchantmentTimeLeft(/*<regrel ebp+0x8>*/ /*|0x4|*/ int slot);
  class ItemStats* __thiscall CGItem_C::GetStats();
  void __thiscall CGItem_C::InstallObjMirrorHandlers();
  void __thiscall CGItem_C::InstallItemIDMirrorHandler();
  void __thiscall CGItem_C::UninstallItemIDMirrorHandler();
  void __thiscall CGItem_C::UpdateEnchantments();
  class CGItem_C& __thiscall operator=(class CGItem_C&);
  class ItemGroupSoundsRec* __thiscall GetGroupSoundRec();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGItem_C::Disable(/*<regrel ebx+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGItem_C::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGItem_C::OnRightClick();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGItem_C::GetModelFileName();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGItem_C::GetSelectionHighlightColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector* outPtr);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGItem_C::GetPageTextID(/*<regrel ebx+0x8>*/ /*|0x4|*/ void  (func*)(int, unsigned __int64&, void*, unsigned char));
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGItem_C::GetObjectName();
};
// <size 0x5c>

class CObjectHeapList {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CObjectHeap> m_heaps;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_objSize;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned int m_objsPerBlock;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int m_numFullHeaps;
  /*<thisrel this+0x20>*/ /*|0x50|*/ char m_heapName[80];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CObjectHeapList(class CObjectHeapList&);
  void __thiscall CObjectHeapList();
  void __thiscall SetObjectSize(unsigned int);
  unsigned int __thiscall GetObjectSize();
  void __thiscall SetObjectsPerBlock(unsigned int);
  unsigned int __thiscall GetObjectsPerBlock();
  unsigned int __thiscall GetHeapBytes();
  unsigned int __thiscall GetBytesAllocated();
  int __thiscall CObjectHeapList::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* index);
  void* __thiscall CObjectHeapList::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CObjectHeapList::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int __thiscall HeapsAvailable();
  unsigned int __thiscall CObjectHeapList::BlocksAllocated();
  unsigned int __thiscall TotalHeaps();
  void __thiscall SetName(char*);
  char* __thiscall GetName();
  int __thiscall IsHeapFull(unsigned int);
  class CObjectHeapList& __thiscall operator=(class CObjectHeapList&);
  void __thiscall ~CObjectHeapList();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x70>

class CObjectHeap {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ void* m_obj;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int* m_indexStack;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_allocated;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_bytes;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CObjectHeap::CObjectHeap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CObjectHeap& heap);
  void __thiscall CObjectHeap();
  void __thiscall CObjectHeap::~CObjectHeap();
  int __thiscall CObjectHeap::Allocate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int objSize, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int heapObjects);
  int __thiscall CObjectHeap::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int objSize, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int heapObjects, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* index);
  void __thiscall CObjectHeap::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int objSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int heapObjects);
  void* __thiscall CObjectHeap::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int objSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int heapObjects);
  unsigned int __thiscall BlocksAllocated();
  int __thiscall IsFull(unsigned int);
  class CObjectHeap& __thiscall CObjectHeap::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CObjectHeap& heap);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class type_info {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ void* _m_data;
  /*<thisrel this+0x8>*/ /*|0x1|*/ char _m_d_name[1];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* __thiscall name();
  char* __thiscall type_info::internal_raw_name();
  void __thiscall type_info(class type_info&);
  class type_info& __thiscall operator=(class type_info&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class ClntObjMgr {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<C_OBJECTHASH,CHashKeyGUID> m_objects;
  /*<thisrel this+0x2c>*/ /*|0x2c|*/ class TSHashTable<C_OBJECTHASH,CHashKeyGUID> m_lazyCleanupObjects;
  /*<thisrel this+0x58>*/ /*|0xc|*/ class TSExplicitList<C_OBJECTHASH,7648> m_lazyCleanupFifo;
  /*<thisrel this+0x64>*/ /*|0xc|*/ class TSExplicitList<C_OBJECTHASH,7648> m_freeObjects;
  /*<thisrel this+0x70>*/ /*|0xc|*/ class TSExplicitList<C_OBJECTHASH,7648> m_visibleObjects;
  /*<thisrel this+0x7c>*/ /*|0xc|*/ class TSExplicitList<C_OBJECTHASH,7656> m_reenabledObjects;
  /*<thisrel this+0x88>*/ /*|0x4|*/ int m_callingMirrorHandlers;
  /*<thisrel this+0x8c>*/ /*|0xc|*/ class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> > m_pendingObjHandlerRequests;
  /*<thisrel this+0x98>*/ /*|0x4|*/ int m_allowGuidDeref;
  /*<thisrel this+0xa0>*/ /*|0x8|*/ unsigned __int64 m_legalGuidDeref;
  /*<thisrel this+0xa8>*/ /*|0x8|*/ unsigned __int64 m_activePlayer;
  /*<thisrel this+0xb0>*/ /*|0x4|*/ enum PLAYER_TYPE m_type;
  /*<thisrel this+0xb4>*/ /*|0x4|*/ unsigned int m_mapID;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ class ClientConnection* m_net;
  /*<thisrel this+0xbc>*/ /*|0x4|*/ void* m_movement;
  /*<thisrel this+0xc0>*/ /*|0x4|*/ void* m_clientPtr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ClntObjMgr(class ClntObjMgr&);
  void __thiscall ClntObjMgr(enum PLAYER_TYPE, void*);
  void __thiscall ~ClntObjMgr();
  class ClntObjMgr& __thiscall operator=(class ClntObjMgr&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc8>

class CHashKeyGUID { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ unsigned __int64 m_guid;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CHashKeyGUID(unsigned __int64);
  void __thiscall CHashKeyGUID(class CHashKeyGUID&);
  void __thiscall CHashKeyGUID();
  void __thiscall CHashKeyGUID(int);
  class CHashKeyGUID& __thiscall operator=(class CHashKeyGUID&);
  unsigned char __thiscall operator==(class CHashKeyGUID&);
  unsigned __int64 __thiscall GetGUID();

  // virtual functions ------------------------------
};
// <size 0x8>

class CGContainer_C : class CGItem_C,  class CGContainer  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x60>*/ /*|0x18|*/ class CGBag_C m_bag;

  // base classes -----------------------------------
  // baseclass class CGItem_C
  // <base data offset+0x0>

  // baseclass class CGContainer
  // <base data offset+0x5c>

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall CGContainer_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);

  // non-virtual functions --------------------------
  void __thiscall CGContainer_C(class CGContainer_C&);
  void __thiscall CGContainer_C::CGContainer_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGContainer_C::~CGContainer_C();
  void __thiscall CGContainer_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall PostMovementUpdate();
  float __thiscall CGContainer_C::GetCloseXOffset();
  float __thiscall CGContainer_C::GetCloseYOffset();
  float __thiscall CGContainer_C::GetSlotXOffset();
  float __thiscall CGContainer_C::GetSlotYOffset();
  int __thiscall CGContainer_C::GetWidth();
  int __thiscall CGContainer_C::GetHeight();
  int __thiscall CGContainer_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGContainer_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  class CGBag_C* __thiscall Bag();
  class CGContainer_C& __thiscall operator=(class CGContainer_C&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGContainer_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGContainer_C::Reenable();
  virtual /*<vtableoff 0x0>*/ class CGBag_C* __thiscall CGContainer_C::GetBag();
};
// <size 0x78>

class CGGameObject_C : class CGObject_C,  class CGGameObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x34>*/ /*|0x8|*/ class TSLink<CGGameObject_C> moveLink;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ class CGGameObject_C_TypeBase* m_baseObj;
  /*<thisrel this+0x40>*/ /*|0x4|*/ class GameObjectStats* m_stats;
  /*<thisrel this+0x44>*/ /*|0x30|*/ class NTempest::C34Matrix m_matrix;
  /*<thisrel this+0x74>*/ /*|0x4|*/ struct HMODEL__* m_collideModel;
  /*<thisrel this+0x78>*/ /*|0x4|*/ struct HCOLLISIONDATA__* m_collideData;
  /*<thisrel this+0x7c>*/ /*|0x18|*/ class NTempest::CAaBox m_collideExtents;
  /*<thisrel this+0x94>*/ /*|0x4|*/ unsigned int m_serverTimeOffset;
  /*<bitfield this+0x98>*/ /*|0x4|*/ int m_isSolid:0:1;
  /*<bitfield this+0x98>*/ /*|0x4|*/ int m_isQuestChestForMe:1:1;

  // base classes -----------------------------------
  // baseclass class CGObject_C
  // <base data offset+0x0>

  // baseclass class CGGameObject
  // <base data offset+0x30>

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall CGGameObject_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);
  static void __fastcall CGGameObject_C::Initialize();
  static void __fastcall CGGameObject_C::Shutdown();

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C(class CGGameObject_C&);
  void __thiscall CGGameObject_C::CGGameObject_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGGameObject_C::~CGGameObject_C();
  void __thiscall CGGameObject_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGGameObject_C::PostInit(/*<regrel ebx+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall CGGameObject_C::PostPostInit();
  void __thiscall PostMovementUpdate();
  unsigned int __thiscall CGGameObject_C::CreateWorldObject(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall CGGameObject_C::SetMirrorHandlers();
  void __thiscall CGGameObject_C::UnsetMirrorHandlers();
  void __thiscall UpdateMovement(unsigned long, float);
  void __thiscall AddPassenger(class CMovementData*);
  int __thiscall CGGameObject_C::IsTransport();
  int __thiscall CGGameObject_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGGameObject_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  void __thiscall CGGameObject_C::LoadBaseObject(/*<regrel ebp+0x8>*/ /*|0x4|*/ class GameObjectStats* stats);
  enum UNIT_REACTION __thiscall CGGameObject_C::ObjectReaction(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  unsigned char __thiscall IsFriend(class CGUnit_C*);
  unsigned char __thiscall IsPeaceful(class CGUnit_C*);
  unsigned char __thiscall IsEnemy(class CGUnit_C*);
  unsigned int __thiscall GetServerTimeOffset();
  void __thiscall SetSolid(unsigned char);
  char* __thiscall CGGameObject_C::GetName();
  char* __thiscall CGGameObject_C::GetTypeName();
  char* __thiscall CGGameObject_C::GetDebugStatus();
  int __thiscall CGGameObject_C::GetType();
  unsigned int __thiscall CGGameObject_C::GetPropertyValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  class LockRec* __thiscall CGGameObject_C::GetLockRec();
  unsigned char __thiscall CGGameObject_C::IsValidOpenAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ int action);
  unsigned char __thiscall CGGameObject_C::IsValidTargetForSpell(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& caster, /*<regrel ebp+0xc>*/ /*|0x4|*/ int spellID);
  unsigned char __thiscall CGGameObject_C::IsLocked(/*<regrel ebp+0x8>*/ /*|0x4|*/ int* spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* spellSkill, /*<regrel ebp+0x10>*/ /*|0x4|*/ int* lockSkill, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CGItem_C** itemPtr, /*<regrel ebp+0x18>*/ /*|0x4|*/ int* openIndex);
  unsigned char __thiscall CGGameObject_C::CanChangeCursor();
  unsigned char __thiscall CGGameObject_C::CanUse();
  unsigned char __thiscall CGGameObject_C::CanUseNow();
  void __thiscall CGGameObject_C::StartInteraction();
  void __thiscall CGGameObject_C::CloseInteraction();
  void __thiscall CGGameObject_C::ActivateCustomAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int anim);
  struct HCOLLISIONDATA__* __thiscall GetCollideData();
  class NTempest::C3Vector __thiscall GetCollideMin();
  class NTempest::C3Vector __thiscall GetCollideMax();
  class NTempest::CAaBox __thiscall GetCollideExtents();
  void __thiscall CGGameObject_C::UpdateMatrix();
  class CGGameObject_C& __thiscall operator=(class CGGameObject_C&);
  char* __thiscall CGGameObject_C::GetModelFileNameInternal();
  unsigned char __thiscall IsQuestObjectForMe();
  int __thiscall CGGameObject_C::GetPageTextLanguage();
  int __thiscall CGGameObject_C::GetPageTextMaterial();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::PostReenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vec);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGGameObject_C::GetPosition();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGGameObject_C::GetFacing();
  virtual /*<vtableoff 0x98>*/ class NTempest::C3Vector __thiscall CGGameObject_C::GetCurrentMoveVector();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::GetWorldMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix* worldMatrix);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::UpdateModelLoadStatus();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::IsSolidSelectable();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::IsSolidCollidable();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::CanHighlight();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::FloatingTooltip();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::OnRightClick();
  virtual /*<vtableoff 0x9c>*/ int __thiscall CGGameObject_C::IsPointInside(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGGameObject_C::GetModelFileName();
  virtual /*<vtableoff 0x0>*/ class NTempest::C34Matrix __thiscall CGGameObject_C::GetMatrix();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C::ObjectPostAnimate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& matrix, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraTarg);
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGGameObject_C::GetObjectName();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C::GetPageTextID(/*<regrel ebp+0x8>*/ /*|0x4|*/ void  (func*)(int, unsigned __int64&, void*, unsigned char));
};
// <size 0x9c>

class CGDynamicObject_C : class CGObject_C,  class CGDynamicObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<bitfield this+0x34>*/ /*|0x4|*/ int m_haveStandSequence:0:1;
  /*<bitfield this+0x34>*/ /*|0x4|*/ int m_haveHoldSequence:1:1;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float m_dynamicScale;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ struct BlizzardObject* m_blizzardObject;
  /*<thisrel this+0x40>*/ /*|0x4|*/ struct Sound* m_sound;

  // base classes -----------------------------------
  // baseclass class CGObject_C
  // <base data offset+0x0>

  // baseclass class CGDynamicObject
  // <base data offset+0x30>

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall CGDynamicObject_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);

  // non-virtual functions --------------------------
  void __thiscall CGDynamicObject_C(class CGDynamicObject_C&);
  void __thiscall CGDynamicObject_C::CGDynamicObject_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGDynamicObject_C::~CGDynamicObject_C();
  void __thiscall CGDynamicObject_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGDynamicObject_C::PostInit(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall PostMovementUpdate();
  int __thiscall CGDynamicObject_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGDynamicObject_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  class SpellVisualEffectNameRec* __thiscall CGDynamicObject_C::GetVisualEffectNameRec();
  void __thiscall CGDynamicObject_C::HandleAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGDynamicObject_C::AnimFinished();
  void __thiscall UpdateDisplay(unsigned long);
  void __thiscall CGDynamicObject_C::ObjectVisKitProc();
  void __thiscall CGDynamicObject_C::ClearSound();
  class CGDynamicObject_C& __thiscall operator=(class CGDynamicObject_C&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGDynamicObject_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGDynamicObject_C::Reenable();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGDynamicObject_C::GetModelFileName();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGDynamicObject_C::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vec);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGDynamicObject_C::GetPosition();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGDynamicObject_C::GetFacing();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGDynamicObject_C::GetScale();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGDynamicObject_C::UpdateModelLoadStatus();
};
// <size 0x44>

class CGCorpse_C : class CGObject_C,  class CGCorpse  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x34>*/ /*|0x4|*/ struct HCHARGEOSET__* m_geosetHandle;
  /*<thisrel this+0x38>*/ /*|0x4|*/ struct HTEXCOMPONENT__* m_texComponent;
  /*<thisrel this+0x3c>*/ /*|0x3c|*/ unsigned int m_preferredGeosets[15];
  /*<thisrel this+0x78>*/ /*|0x4|*/ struct CORPSEANIMDATA* m_animData;

  // base classes -----------------------------------
  // baseclass class CGObject_C
  // <base data offset+0x0>

  // baseclass class CGCorpse
  // <base data offset+0x30>

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall CGCorpse_C::OffsetOf(/*<register ecx>*/ /*|0x4|*/ enum OBJECT_TYPE_ID type);

  // non-virtual functions --------------------------
  void __thiscall CGCorpse_C(class CGCorpse_C&);
  void __thiscall CGCorpse_C::CGCorpse_C(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CGCorpse_C::~CGCorpse_C();
  void __thiscall CGCorpse_C::SetStorage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long* storage);
  void __thiscall CGCorpse_C::PostInit(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  void __thiscall PostMovementUpdate();
  int __thiscall CGCorpse_C::SetBlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int i, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long data);
  void __thiscall CGCorpse_C::SetData(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  void __thiscall CGCorpse_C::AddComponents();
  void __thiscall CGCorpse_C::AddComponent(/*<regrel ebp+0x8>*/ /*|0x4|*/ int displayID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ int slot, /*<regrel ebp+0x14>*/ /*|0x4|*/ int commit);
  unsigned char __thiscall CGCorpse_C::IsUnderWater();
  void __thiscall CGCorpse_C::OnDeathAnimEnd();
  void __thiscall CGCorpse_C::CommitTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  class CGCorpse_C& __thiscall operator=(class CGCorpse_C&);
  void __thiscall CGCorpse_C::InitComponents();
  void __thiscall CGCorpse_C::InitPreferredGeosets();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::Reenable();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGCorpse_C::GetModelFileName();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGCorpse_C::ShouldRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long worldStatus);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vec);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGCorpse_C::GetPosition();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGCorpse_C::GetFacing();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::GetWorldMatrix(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix* worldMatrix);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGCorpse_C::CanHighlight();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::OnLeftClick();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCorpse_C::OnRightClick();
};
// <size 0x7c>

class ChrClassesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_PlayerClass;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_DamageBonusStat;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_DisplayPower;
  /*<thisrel this+0x10>*/ /*|0x4|*/ char* m_petNameToken;
  /*<thisrel this+0x14>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ChrClassesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ChrClassesRec::ChrClassesRec();
  void __thiscall ChrClassesRec::~ChrClassesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ChrClassesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x38>

class AreaTableRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_AreaNumber;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_ContinentID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_ParentAreaNum;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_AreaBit;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_SoundProviderPref;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_SoundProviderPrefUnderwater;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_MIDIAmbience;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_MIDIAmbienceUnderwater;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_ZoneMusic;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_IntroSound;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_IntroPriority;
  /*<thisrel this+0x34>*/ /*|0x20|*/ char* m_AreaName_lang[8];
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_AreaName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AreaTableRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AreaTableRec::AreaTableRec();
  void __thiscall AreaTableRec::~AreaTableRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AreaTableRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x58>

class GuildStats_C : class GuildStats  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class GuildStats
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall GuildStats_C::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall GuildStats_C();

  // virtual functions ------------------------------
};
// <size 0x30>

class CreatureDisplayInfoRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_modelID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_soundID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_extendedDisplayInfoID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_creatureModelScale;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_creatureModelAlpha;
  /*<thisrel this+0x18>*/ /*|0xc|*/ char* m_textureVariation[3];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_bloodID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureDisplayInfoRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureDisplayInfoRec::CreatureDisplayInfoRec();
  void __thiscall CreatureDisplayInfoRec::~CreatureDisplayInfoRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureDisplayInfoRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CreatureModelDataRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_ModelName;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_sizeClass;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_modelScale;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_bloodID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_footprintTextureID;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_footprintTextureLength;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_footprintTextureWidth;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_footprintParticleScale;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_foleyMaterialID;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_footstepShakeSize;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_deathThudShakeSize;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_soundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureModelDataRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureModelDataRec::CreatureModelDataRec();
  void __thiscall CreatureModelDataRec::~CreatureModelDataRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureModelDataRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x38>

class CCharSelectInfo {

  // static data ------------------------------------
  static /*<rva 0x43c858>*/ /*|0x4|*/ int m_selectionIndex;
  static /*<rva 0x9d6778>*/ /*|0x4|*/ class CSimpleModel* m_modelFrame;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CCharSelectInfo::Initialize();
  static void __fastcall CCharSelectInfo::Shutdown();
  static void __fastcall CCharSelectInfo::SetModelFrame(/*<register ecx>*/ /*|0x4|*/ class CSimpleModel* frame);
  static void __fastcall CCharSelectInfo::SetBackgroundModel(/*<register ecx>*/ /*|0x4|*/ char* filename);
  static void __fastcall CCharSelectInfo::ClearCharacterModel();
  static void __fastcall CCharSelectInfo::ClearPetModel();
  static void __fastcall CCharSelectInfo::UpdateCharacterList();
  static void __fastcall ClearCharacterList();
  static void __fastcall CCharSelectInfo::SelectCharacter(/*<register ecx>*/ /*|0x4|*/ int index);
  static int __fastcall CCharSelectInfo::GetNumCharacters();
  static int __fastcall GetSelectionIndex();
  static struct CHARACTER_INFO* __fastcall CCharSelectInfo::GetSelectedCharacterInfo();
  static void __fastcall CCharSelectInfo::GuildCallback(/*<register ecx>*/ /*|0x4|*/ int guildID, /*<register edx>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebx+0x8>*/ /*|0x4|*/ void* arg, /*<regrel ebx+0xc>*/ /*|0x1|*/ unsigned char granted);
  static void __fastcall CCharSelectInfo::UpdateCharacterInfo();
  static void __fastcall CCharSelectInfo::ChangeSkinTexture();
  static void __fastcall CCharSelectInfo::EnumerateCharactersCallback(/*<register ecx>*/ /*|0x4|*/ struct CHARACTER_INFO& info, /*<register edx>*/ /*|0x4|*/ void* __formal);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CharacterCreateCamerasRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_Race;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_Sex;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_Camera;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_Height;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_Radius;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_Target;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharacterCreateCamerasRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharacterCreateCamerasRec::CharacterCreateCamerasRec();
  void __thiscall CharacterCreateCamerasRec::~CharacterCreateCamerasRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharacterCreateCamerasRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class FactionGroupRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_maskID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_internalName;
  /*<thisrel this+0xc>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall FactionGroupRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall FactionGroupRec::FactionGroupRec();
  void __thiscall FactionGroupRec::~FactionGroupRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall FactionGroupRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class FactionTemplateRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_faction;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_factionGroup;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_friendGroup;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_enemyGroup;
  /*<thisrel this+0x14>*/ /*|0x10|*/ int m_enemies[4];
  /*<thisrel this+0x24>*/ /*|0x10|*/ int m_friend[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall FactionTemplateRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall FactionTemplateRec::FactionTemplateRec();
  void __thiscall FactionTemplateRec::~FactionTemplateRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall FactionTemplateRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x34>

class CharBaseInfoRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1|*/ unsigned char m_raceID;
  /*<thisrel this+0x1>*/ /*|0x1|*/ unsigned char m_classID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_proficiency;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharBaseInfoRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharBaseInfoRec::CharBaseInfoRec();
  void __thiscall CharBaseInfoRec::~CharBaseInfoRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharBaseInfoRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class CharStartOutfitRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x1|*/ unsigned char m_raceID;
  /*<thisrel this+0x5>*/ /*|0x1|*/ unsigned char m_classID;
  /*<thisrel this+0x6>*/ /*|0x1|*/ unsigned char m_sexID;
  /*<thisrel this+0x7>*/ /*|0x1|*/ unsigned char m_outfitID;
  /*<thisrel this+0x8>*/ /*|0x30|*/ int m_ItemID[12];
  /*<thisrel this+0x38>*/ /*|0x30|*/ int m_DisplayItemID[12];
  /*<thisrel this+0x68>*/ /*|0x30|*/ int m_InventoryType[12];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharStartOutfitRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharStartOutfitRec::CharStartOutfitRec();
  void __thiscall CharStartOutfitRec::~CharStartOutfitRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharStartOutfitRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x98>

class CCharCreateInfo {

  // static data ------------------------------------
  static /*<rva 0x9d670c>*/ /*|0x4|*/ class CSimpleModel* m_charCustomizeFrame;
  static /*<rva 0x9d6558>*/ /*|0x10|*/ class TSFixedArray<unsigned int> m_factionIndex;
  static /*<rva 0x9d6598>*/ /*|0x10|*/ class TSFixedArray<unsigned int> m_raceIndex;
  static /*<rva 0x43c340>*/ /*|0x4|*/ int m_selectedRace;
  static /*<rva 0x9d6574>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_classIndex;
  static /*<rva 0x9d6710>*/ /*|0x4|*/ int m_selectedClass;
  static /*<rva 0x9d6714>*/ /*|0x4|*/ unsigned int m_selectedSex;
  static /*<rva 0x9d6718>*/ /*|0x4|*/ float m_charFacing;
  static /*<rva 0x9d65d8>*/ /*|0x134|*/ struct CHARCREATEINFO m_charInfo;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CCharCreateInfo::Initialize();
  static void __fastcall CCharCreateInfo::Shutdown();
  static void __fastcall CCharCreateInfo::SetCharCustomizeFrame(/*<register ecx>*/ /*|0x4|*/ class CSimpleModel* frame);
  static void __fastcall CCharCreateInfo::SetCharCustomizeModel(/*<register ecx>*/ /*|0x4|*/ char* filename);
  static void __fastcall CCharCreateInfo::ResetCharCustomizeInfo();
  static float __fastcall GetCharFacing();
  static void __fastcall CCharCreateInfo::SetCharFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float facing);
  static unsigned int __fastcall GetNumRaces();
  static char* __fastcall CCharCreateInfo::GetRaceNameByIndex(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CCharCreateInfo::UpdateAvailableClasses();
  static unsigned int __fastcall GetNumClasses();
  static char* __fastcall CCharCreateInfo::GetClassNameByIndex(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static unsigned int __fastcall CCharCreateInfo::GetSelectedRaceID();
  static unsigned int __fastcall GetSelectedRaceIndex();
  static unsigned int __fastcall CCharCreateInfo::GetSelectedSexID();
  static unsigned int __fastcall CCharCreateInfo::GetSelectedClassID();
  static unsigned int __fastcall GetSelectedClassIndex();
  static unsigned int __fastcall CCharCreateInfo::GetNumOutfits(/*<register ecx>*/ /*|0x4|*/ unsigned int raceID, /*<register edx>*/ /*|0x4|*/ unsigned int classID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int sexID);
  static class CharStartOutfitRec* __fastcall CCharCreateInfo::GetOutfit(/*<register ecx>*/ /*|0x4|*/ unsigned int raceID, /*<register edx>*/ /*|0x4|*/ unsigned int classID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int sexID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int outfitID);
  static void __fastcall CCharCreateInfo::SetSelectedRace(/*<register ecx>*/ /*|0x4|*/ unsigned int index, /*<register edx>*/ /*|0x4|*/ int updateModel);
  static void __fastcall CCharCreateInfo::SetSelectedSex(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::SetSelectedClass(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static unsigned int __fastcall CCharCreateInfo::GetNumCharCustomizations(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CCharCreateInfo::CycleCharCustomization(/*<register ecx>*/ /*|0x4|*/ unsigned int index, /*<register edx>*/ /*|0x4|*/ int delta);
  static void __fastcall CCharCreateInfo::RandomizeCharCustomization();
  static void __fastcall CCharCreateInfo::CreateCharacter(/*<register ecx>*/ /*|0x4|*/ char* name);
  static void __fastcall CCharCreateInfo::UpdateAllCharacterInfo(/*<register ecx>*/ /*|0x4|*/ int race, /*<register edx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::InitializeCharacterInfo(/*<register ecx>*/ /*|0x4|*/ unsigned int sex, /*<register edx>*/ /*|0x4|*/ int doNotCommitGeosets);
  static void __fastcall CCharCreateInfo::UpdateCharacterInfo(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::UpdateGeosets(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::UpdateEquipment(/*<register ecx>*/ /*|0x4|*/ int doNotUpdateGeosets, /*<register edx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeSkinTexture(/*<register ecx>*/ /*|0x4|*/ int doNotCommitGeosets, /*<register edx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeFaceTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeFacialHairTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeScalpHairTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeHairGeosets(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::ChangeFacialHairGeosets(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);
  static void __fastcall CCharCreateInfo::CommitCurrentGeoset(/*<register ecx>*/ /*|0x4|*/ unsigned int sex);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGlueMgr {

  // static data ------------------------------------
  static /*<rva 0x9d6470>*/ /*|0x4|*/ class CSimpleTop* m_simpleTop;
  static /*<rva 0x9d6474>*/ /*|0x4|*/ struct HMODEL__* m_cursorModel;
  static /*<rva 0x9d63e0>*/ /*|0x40|*/ char m_currentScreen[64];
  static /*<rva 0x9d6478>*/ /*|0x4|*/ int m_reload;
  static /*<rva 0x9d647c>*/ /*|0x4|*/ int m_initialized;
  static /*<rva 0x9d6480>*/ /*|0x4|*/ int m_suspended;
  static /*<rva 0x9d6484>*/ /*|0x4|*/ int m_disconnectPending;
  static /*<rva 0x9d6488>*/ /*|0x4|*/ int m_reconnect;
  static /*<rva 0x9d648c>*/ /*|0x4|*/ enum CGlueMgr::GLUE_IDLE_STATE m_idleState;
  static /*<rva 0x9d6490>*/ /*|0x4|*/ int m_region;
  static /*<rva 0x9d6494>*/ /*|0x4|*/ enum WOW_LOCALE m_locale;
  static /*<rva 0x9d6498>*/ /*|0x40|*/ char m_accountName[64];
  static /*<rva 0x0>*/ /*|0x40|*/ char m_password[64];
  static /*<rva 0x9d643c>*/ /*|0xc|*/ unsigned int m_queuePosition[3];
  static /*<rva 0x9d6430>*/ /*|0xc|*/ unsigned long m_queueTime[3];
  static /*<rva 0x9d64d8>*/ /*|0x4|*/ int m_estimatedWaitTime;
  static /*<rva 0x9d64dc>*/ /*|0x4|*/ struct CHARACTER_INFO* m_characterInfo;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGlueMgr::Initialize();
  static void __fastcall CGlueMgr::Suspend();
  static void __fastcall CGlueMgr::Resume();
  static void __fastcall CGlueMgr::Shutdown();
  static int __fastcall Initialized();
  static int __fastcall Suspended();
  static void __fastcall ClearWaitQueue();
  static void __fastcall CGlueMgr::UpdateWaitQueue(/*<register ecx>*/ /*|0x4|*/ unsigned int wait);
  static void __fastcall ExpectDisconnect(int);
  static void __fastcall CGlueMgr::SetScreen(/*<register ecx>*/ /*|0x4|*/ char* screen);
  static void __fastcall CGlueMgr::UpdateCurrentScreen(/*<register ecx>*/ /*|0x4|*/ char* screen);
  static void __fastcall Reload();
  static void __fastcall CGlueMgr::DefaultServerLogin();
  static void __fastcall CGlueMgr::ChangeRealm(/*<register ecx>*/ /*|0x4|*/ struct REALM_INFO* info);
  static void __fastcall CGlueMgr::CreateCharacter(/*<register ecx>*/ /*|0x4|*/ struct CHARACTER_CREATE_INFO* info);
  static void __fastcall CGlueMgr::DeleteCharacter(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGlueMgr::QuitGame();
  static void __fastcall CGlueMgr::EnterWorld();
  static void __fastcall WorldLoginFailed();
  static void __fastcall CGlueMgr::StatusDialogClick();
  static char* __fastcall GetCurrentAccount();
  static void __fastcall CGlueMgr::GetCharacterList();
  static void __fastcall CGlueMgr::GetRealmList();
  static int __fastcall CGlueMgr::NetDisconnectHandler(/*<register ecx>*/ /*|0x4|*/ void* eventData, /*<register edx>*/ /*|0x4|*/ void* __formal);
  static void __fastcall CGlueMgr::InitCursor();
  static void __fastcall CGlueMgr::DestroyCursor();
  static void __fastcall CGlueMgr::RegisterConsoleCommands();
  static void __fastcall CGlueMgr::UnregisterConsoleCommands();
  static int __fastcall CGlueMgr::Idle(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ void* __formal);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CWOWClientStatus : class CStatus  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct HSLOG__* m_logFile;

  // base classes -----------------------------------
  // baseclass class CStatus
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CWOWClientStatus(class CWOWClientStatus&);
  void __thiscall CWOWClientStatus(char*);
  class CWOWClientStatus& __thiscall operator=(class CWOWClientStatus&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CWOWClientStatus();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x14>

class ItemVisualEffectsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_Model;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemVisualEffectsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemVisualEffectsRec::ItemVisualEffectsRec();
  void __thiscall ItemVisualEffectsRec::~ItemVisualEffectsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemVisualEffectsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class HelmetGeosetVisDataRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x80|*/ int m_DefaultFlags[32];
  /*<thisrel this+0x84>*/ /*|0x80|*/ int m_PreferredFlags[32];
  /*<thisrel this+0x104>*/ /*|0x80|*/ int m_HideFlags[32];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall HelmetGeosetVisDataRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall HelmetGeosetVisDataRec::HelmetGeosetVisDataRec();
  void __thiscall HelmetGeosetVisDataRec::~HelmetGeosetVisDataRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall HelmetGeosetVisDataRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x184>

class ItemVisualsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x14|*/ int m_Slot[5];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemVisualsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemVisualsRec::ItemVisualsRec();
  void __thiscall ItemVisualsRec::~ItemVisualsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemVisualsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CTextureLayer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4b0|*/ class CTexturePiece m_priorities[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class CTextureLayer& __thiscall CTextureLayer::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTextureLayer& rhs);
  int __thiscall CTextureLayer::IsOpaque();
  void __thiscall SetTexture(int, int, struct HTEXTURE__*);
  void __thiscall CTextureLayer::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int priority, /*<regrel ebp+0xc>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CTexturePiece& source);
  int __thiscall CTextureLayer::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum LAYERPRIORITY priority, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0x18>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int expectedWidth, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int expectedHeight);
  void __thiscall CTextureLayer::AllocBlankTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x20>*/ /*|0x4|*/ int opaque);
  void __thiscall PasteOpaque(class CTexturePiece&, class NTempest::C2iVector, class NTempest::C2iVector, unsigned int, unsigned int, enum LAYERPRIORITY);
  void __thiscall SetHold(int, unsigned int);
  void __thiscall ClearHold(int, unsigned int);
  int __thiscall HasHold(int, unsigned int);
  int __thiscall HasHolds(int);
  int __thiscall HasImage(int);
  void __thiscall CTextureLayer(class CTextureLayer&);
  void __thiscall CTextureLayer::CTextureLayer();
  void __thiscall CTextureLayer::~CTextureLayer();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4b0>

class CTexturePiece : class CHandleObject  {

  // static data ------------------------------------
  static /*<rva 0x9d6a30>*/ /*|0x4|*/ struct MipBits* m_destImage;
  static /*<rva 0x9d69d4>*/ /*|0x1c|*/ struct TEXTUREINFO m_destTextureInfo;

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x1c|*/ struct TEXTUREINFO m_textureInfo;
  /*<thisrel this+0x20>*/ /*|0x4|*/ struct HMIPPEDTEXTURE__* m_mippedTexture;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int m_holds;
  /*<thisrel this+0x28>*/ /*|0x104|*/ char m_fileName[260];

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class CTexturePiece& __thiscall CTexturePiece::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& rhs);
  void __thiscall CTexturePiece(class CTexturePiece&);
  void __thiscall CTexturePiece();
  void __thiscall CTexturePiece::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HTEXTURE__* texture);
  void __thiscall CTexturePiece::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CTexturePiece& source);
  int __thiscall CTexturePiece::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum LAYERPRIORITY priority, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0x18>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int expectedWidth, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int expectedHeight);
  int __thiscall CTexturePiece::Paste(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& source, /*<regrel ebp+0xc>*/ /*|0x4|*/ int x, /*<regrel ebp+0x10>*/ /*|0x4|*/ int y, /*<regrel ebp+0x14>*/ /*|0x4|*/ int width, /*<regrel ebp+0x18>*/ /*|0x4|*/ int height);
  int __thiscall CTexturePiece::Paste(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& source, /*<regrel ebp+0xc>*/ /*|0x4|*/ int x, /*<regrel ebp+0x10>*/ /*|0x4|*/ int y);
  int __thiscall IsOpaque();
  int __thiscall HasImage();
  void __thiscall SetOpaque(int);
  void __thiscall CTexturePiece::PasteOpaque(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& source, /*<regrel ebp+0xc>*/ /*|0x8|*/ class NTempest::C2iVector dstPos, /*<regrel ebp+0x14>*/ /*|0x8|*/ class NTempest::C2iVector srcPos, /*<regrel ebp+0x1c>*/ /*|0x8|*/ class NTempest::C2iVector size);
  void __thiscall CTexturePiece::PasteTransparentOneBit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& source, /*<regrel ebp+0xc>*/ /*|0x8|*/ class NTempest::C2iVector dstPos, /*<regrel ebp+0x14>*/ /*|0x8|*/ class NTempest::C2iVector srcPos, /*<regrel ebp+0x1c>*/ /*|0x8|*/ class NTempest::C2iVector size);
  void __thiscall CTexturePiece::PasteTransparentFull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexturePiece& source, /*<regrel ebp+0xc>*/ /*|0x8|*/ class NTempest::C2iVector dstPos, /*<regrel ebp+0x14>*/ /*|0x8|*/ class NTempest::C2iVector srcPos, /*<regrel ebp+0x1c>*/ /*|0x8|*/ class NTempest::C2iVector size);
  void __thiscall CTexturePiece::AllocBlankTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ int opaque);
  void __thiscall SetHold(unsigned int);
  void __thiscall ClearHold(unsigned int);
  int __thiscall HasHold(unsigned int);
  int __thiscall HasHolds();
  int __thiscall CTexturePiece::IsLoaded();
  int __thiscall UpdateInfo(int);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CTexturePiece();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x12c>

class CTexComponent : class CTexturePiece  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x12c>*/ /*|0x4|*/ struct HTEXTURE__* m_texture;
  /*<thisrel this+0x130>*/ /*|0x4|*/ unsigned int m_dirtyFlags;
  /*<thisrel this+0x134>*/ /*|0xbb80|*/ class CSection m_sections[10];
  /*<thisrel this+0xbcb4>*/ /*|0x8|*/ unsigned int m_underwearHideCounts[2];
  /*<thisrel this+0xbcbc>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0xbcc0>*/ /*|0x104|*/ char m_upperFaceTexture[260];
  /*<thisrel this+0xbdc4>*/ /*|0x104|*/ char m_lowerFaceTexture[260];
  /*<thisrel this+0xbec8>*/ /*|0x4|*/ int m_emblemStyle;
  /*<thisrel this+0xbecc>*/ /*|0x4|*/ int m_emblemColor;
  /*<thisrel this+0xbed0>*/ /*|0x4|*/ int m_borderStyle;
  /*<thisrel this+0xbed4>*/ /*|0x4|*/ int m_borderColor;
  /*<thisrel this+0xbed8>*/ /*|0x4|*/ int m_background;

  // base classes -----------------------------------
  // baseclass class CTexturePiece
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned char __thiscall AnySectionsDirty();
  void __thiscall CTexComponent::SetUpperHeadTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* upperHead);
  void __thiscall CTexComponent::SetLowerHeadTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* lowerHead);
  int __thiscall CTexComponent::Paste(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x14>*/ /*|0x4|*/ int x, /*<regrel ebp+0x18>*/ /*|0x4|*/ int y, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int width, /*<regrel ebp+0x20>*/ /*|0x4|*/ int height);
  int __thiscall CTexComponent::CheckPastingRules(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum LAYERPRIORITY priority);
  void __thiscall MarkSectionDirty(enum TEXCOMPONENT_SECTIONS);
  void __thiscall CTexComponent::UpdateSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0x10>*/ /*|0x4|*/ int bUpdate);
  int __thiscall CTexComponent::CheckSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bForce);
  void __thiscall CTexComponent::HideUnderwear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int underwearSection);
  void __thiscall CTexComponent::ShowUnderwear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int underwearSection);
  void __thiscall CTexComponent(class CTexComponent&);
  void __thiscall CTexComponent();
  void __thiscall CTexComponent::UpdateSections(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bUpdate);
  int __thiscall CTexComponent::CheckSections(/*<regrel ebp+0x8>*/ /*|0x4|*/ int bForce);
  void __thiscall CTexComponent::RemoveHolds();
  void __thiscall CTexComponent::BuildSkinPieces(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* layerHoldSectionFlags);
  void __thiscall CTexComponent::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x1c>*/ /*|0x4|*/ enum LAYERPRIORITY priority, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int expectedWidth, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int expectedHeight);
  void __thiscall CTexComponent::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ int checkExistingTexture, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HTEXTURE__* texture);
  void __thiscall CTexComponent::BuildNakedPieces(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int race, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int sex, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int skinID, /*<regrel ebp+0x18>*/ /*|0x4|*/ int isNPC);
  void __thiscall CTexComponent::RemoveSections(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS* sectionPointers, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* startLayerList, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int size);
  void __thiscall CTexComponent::AddHold(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INVENTORY_TYPES inventory, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section);
  void __thiscall CTexComponent::RemoveHold(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INVENTORY_TYPES inventory, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section);
  void __thiscall CTexComponent::UpdateUnderwearVisibility();
  void __thiscall CTexComponent::IncUnderwearHideCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ int itemInventoryType, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS sectionID);
  void __thiscall CTexComponent::DecUnderwearHideCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ int itemInventoryType, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS sectionID);
  void __thiscall MarkDirty();
  void __thiscall SetIgnoreExistingTexture(int);
  unsigned char __thiscall CTexComponent::IsTabardSectionLayerAndPriority(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_LAYERS layer, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum LAYERPRIORITY priority);
  unsigned char __thiscall CTexComponent::HasTabard();
  void __thiscall CTexComponent::PasteTabardTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStatus* status, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum TEXCOMPONENT_SECTIONS section);
  class CTexComponent& __thiscall CTexComponent::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CTexComponent& rhs);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CTexComponent();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xbedc>

class CSection {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x12c0|*/ class CTextureLayer m_layers[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class CSection& __thiscall CSection::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSection& rhs);
  void __thiscall SetHold(int, int, unsigned int);
  void __thiscall ClearHold(int, int, unsigned int);
  int __thiscall HasHold(int, int, unsigned int);
  int __thiscall HasHolds(int, int);
  int __thiscall HasImage(int, int);
  int __thiscall IsLayerOpaque(unsigned int);
  void __thiscall SetTexture(int, int, int, struct HTEXTURE__*);
  void __thiscall SetTexture(int, int, int, class CTexturePiece&);
  int __thiscall SetTexture(class CStatus*, enum TEXCOMPONENT_SECTIONS, enum TEXCOMPONENT_LAYERS, enum LAYERPRIORITY, int, char*, unsigned int, unsigned int);
  void __thiscall AllocBlankTexture(enum TEXCOMPONENT_SECTIONS, class CStatus*, enum TEXCOMPONENT_LAYERS, enum EGxTexFormat, unsigned int, unsigned int, int);
  void __thiscall PasteOpaque(int, class CTexturePiece&, class NTempest::C2iVector, class NTempest::C2iVector, unsigned int, unsigned int, enum LAYERPRIORITY);
  void __thiscall CSection(class CSection&);
  void __thiscall CSection();
  void __thiscall ~CSection();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x12c0>

class CharVariationsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_RaceID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_SexID;
  /*<thisrel this+0x8>*/ /*|0x10|*/ int m_TextureHoldLayer[4];
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharVariationsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharVariationsRec::CharVariationsRec();
  void __thiscall CharVariationsRec::~CharVariationsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharVariationsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CharacterFacialHairStylesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_RaceID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_SexID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_VariationID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_BeardGeoset;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_MoustacheGeoset;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_SideburnGeoset;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharacterFacialHairStylesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharacterFacialHairStylesRec::CharacterFacialHairStylesRec();
  void __thiscall CharacterFacialHairStylesRec::~CharacterFacialHairStylesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharacterFacialHairStylesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CharTextureVariationsV2Rec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_RaceID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_SexID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SectionID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_VariationID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_ColorID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_IsNPC;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ char* m_TextureName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharTextureVariationsV2Rec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharTextureVariationsV2Rec::CharTextureVariationsV2Rec();
  void __thiscall CharTextureVariationsV2Rec::~CharTextureVariationsV2Rec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharTextureVariationsV2Rec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CharHairGeosetsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_RaceID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_SexID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_VariationID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_GeosetID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_Showscalp;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CharHairGeosetsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CharHairGeosetsRec::CharHairGeosetsRec();
  void __thiscall CharHairGeosetsRec::~CharHairGeosetsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CharHairGeosetsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CharGeosetInfo {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x24|*/ int highestPriority[9];
  /*<thisrel this+0x24>*/ /*|0x24|*/ unsigned int currentGeosets[9];
  /*<thisrel this+0x48>*/ /*|0x24|*/ unsigned int geosetCurrentlyUsedBy[9];
  /*<thisrel this+0x6c>*/ /*|0x24|*/ unsigned int disabledByFlags[9];
  /*<thisrel this+0x90>*/ /*|0x24|*/ unsigned int flags[9];
  /*<thisrel this+0xb4>*/ /*|0x3cc|*/ unsigned int inventoryTypeGeosets[9][27];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CharGeosetInfo::CharGeosetInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CharGeosetInfo& rhs);
  void __thiscall CharGeosetInfo::CharGeosetInfo();
  void __thiscall CharGeosetInfo::UpdateGeosetDisplay(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemDisplayInfoRec* displayInfoRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int itemInventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HTEXCOMPONENT__* component, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int playerRace);
  void __thiscall CharGeosetInfo::ShowInventoryTypeTextureHolds(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HTEXCOMPONENT__* component, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ int adding);
  int __thiscall CharGeosetInfo::ShowingSameGeosetsAs(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CharGeosetInfo& rhs);
  void __thiscall CharGeosetInfo::RemoveGeosetInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemDisplayInfoRec* displayInfoRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int inventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HTEXCOMPONENT__* component);
  void __thiscall CharGeosetInfo::Clear();

  // virtual functions ------------------------------
};
// <size 0x480>

class CCharGeoset : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct HMODEL__* m_charModel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HMODEL__* m_paperDollModel;
  /*<thisrel this+0x10>*/ /*|0x480|*/ class CharGeosetInfo m_geosetInfo;
  /*<thisrel this+0x490>*/ /*|0x480|*/ class CharGeosetInfo m_workingGeosetInfo;
  /*<thisrel this+0x910>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x914>*/ /*|0x3c|*/ unsigned int m_currentGeosets[15];

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CCharGeoset(class CCharGeoset&);
  void __thiscall CCharGeoset();
  void __thiscall CCharGeoset::CommitWorkingGeosetInfo();
  void __thiscall CCharGeoset::ClearGeosets();
  void __thiscall CCharGeoset::CommitGeosets(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  void __thiscall CCharGeoset::Commit();
  void __thiscall CCharGeoset::AddItemGeoset(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemDisplayInfoRec* displayInfoRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int itemInventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HTEXCOMPONENT__* component, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int playerRace, /*<regrel ebp+0x18>*/ /*|0x4|*/ int doNotCommit);
  void __thiscall CCharGeoset::RemoveItemGeoset(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemDisplayInfoRec* displayInfoRec, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int itemInventoryType, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HTEXCOMPONENT__* component);
  void __thiscall CCharGeoset::ShowGeosetSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CHARACTER_GEOSET_SECTIONS section, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int geosetNumber, /*<regrel ebp+0x10>*/ /*|0x4|*/ int hideRemainder);
  void __thiscall CCharGeoset::ShowGeosetSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CHARACTER_GEOSET_SECTIONS section, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int geosetNumber, /*<regrel ebp+0x14>*/ /*|0x4|*/ int hideRemainder);
  void __thiscall CCharGeoset::HideGeosetSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CHARACTER_GEOSET_SECTIONS section);
  void __thiscall CCharGeoset::HideGeosetSection(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CHARACTER_GEOSET_SECTIONS section);
  void __thiscall CCharGeoset::EnableHairGeosets(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int race, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int sex, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int hairStyleID);
  class CCharGeoset& __thiscall operator=(class CCharGeoset&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CCharGeoset();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x950>

class CGUnit {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct CGUnitData* m_unit;
  /*<thisrel this+0x10>*/ /*|0xc8|*/ class CMovementData m_move;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned int __thiscall GetUnitFlags();
  unsigned char __thiscall GetUnitNPCFlags();
  unsigned char __thiscall IsAlive();
  unsigned char __thiscall IsDead();
  int __thiscall GetHealth();
  float __thiscall GetHealthPercent();
  int __thiscall GetPower(enum POWER_TYPE);
  int __thiscall GetMaxPower(enum POWER_TYPE);
  float __thiscall GetPowerPercent(enum POWER_TYPE);
  enum POWER_TYPE __thiscall GetDisplayPower();
  int __thiscall GetMaxHealth();
  unsigned int __thiscall GetMoney();
  int __thiscall GetLevel();
  unsigned int __thiscall GetMinDamage();
  unsigned int __thiscall GetMaxDamage();
  int __thiscall IsCombatLoggingActive();
  int __thiscall GetCurrentStat(unsigned int);
  int __thiscall GetEffectiveStat(unsigned int);
  int __thiscall GetBaseStat(unsigned int);
  int __thiscall GetResistance(unsigned int);
  int __thiscall GetEffectiveResistance(unsigned int);
  int __thiscall GetResistanceBuffModPositive(unsigned int);
  int __thiscall GetResistanceBuffModNegative(unsigned int);
  int __thiscall GetResistanceItemMod(unsigned int);
  unsigned int __thiscall GetRace();
  unsigned int __thiscall GetClass();
  enum UNIT_SEX __thiscall GetSex();
  int __thiscall GetModDamageDone(unsigned int);
  int __thiscall GetModDamageTaken(unsigned int);
  int __thiscall GetModCreatureDamageDone(unsigned int);
  unsigned __int64& __thiscall GetCharm();
  unsigned __int64& __thiscall GetSummon();
  unsigned __int64& __thiscall GetControlledGUID();
  unsigned __int64& __thiscall GetCharmedBy();
  unsigned char __thiscall IsCharmedBy(unsigned __int64&);
  unsigned char __thiscall IsCharmed();
  unsigned __int64& __thiscall GetSummonedBy();
  unsigned char __thiscall IsSummonedBy(unsigned __int64&);
  unsigned char __thiscall IsSummoned();
  unsigned __int64& __thiscall GetCreatedBy();
  unsigned char __thiscall IsCreatedBy(unsigned __int64&);
  unsigned char __thiscall IsCreated();
  int __thiscall GetCreatedBySpell();
  unsigned __int64& __thiscall GetControlGUID();
  unsigned __int64& __thiscall GetOwnerGUID();
  unsigned char __thiscall IsPossessedBy(unsigned __int64&);
  unsigned char __thiscall IsPossessed();
  float __thiscall GetBoundingRadius();
  float __thiscall GetCombatReach();
  int __thiscall GetDisplayID();
  unsigned int __thiscall GetMonsterItemDisplay(unsigned int);
  struct VirtualItemInfo* __thiscall GetMonsterItemInfo(unsigned int);
  unsigned int __thiscall GetShapeshiftForm();
  unsigned int __thiscall GetShapeshiftBit();
  unsigned char __thiscall IsChannelling();
  int __thiscall GetChannelSpell();
  unsigned __int64 __thiscall GetChannelObject();
  int __thiscall ModCastSpeed();
  unsigned __int64 __thiscall GetComboTarget();
  unsigned int __thiscall GetComboPoints();
  void __thiscall GetPosition(class NTempest::C3Vector&);
  class NTempest::C3Vector __thiscall GetPosition();
  class NTempest::C3Vector __thiscall GetRawPosition();
  float __thiscall GetFacing();
  float __thiscall GetRawFacing();
  void __thiscall GetAnchorPosition(class NTempest::C3Vector&);
  class NTempest::C3Vector __thiscall GetAnchorPosition();
  float __thiscall GetAnchorFacing();
  float __thiscall GetPitch();
  class NTempest::C3Vector __thiscall GetGroundNormal();
  float __thiscall GetRunSpeed();
  float __thiscall GetWalkSpeed();
  float __thiscall GetSwimSpeed();
  float __thiscall GetTurnRate();
  unsigned int __thiscall GetMoveFlags();
  int __thiscall IsInMotion();
  int __thiscall IsMovingOrTurning();
  int __thiscall IsMovingOrFalling();
  int __thiscall IsMoving();
  int __thiscall IsMovingOrStrafing();
  int __thiscall IsMovingTurningOrStrafing();
  int __thiscall IsMovingStrafingOrFalling();
  int __thiscall IsMovingForward();
  int __thiscall IsMovingBackwards();
  int __thiscall IsWalking();
  int __thiscall IsRunning();
  int __thiscall IsTurning();
  int __thiscall IsTurningLeft();
  int __thiscall IsTurningRight();
  int __thiscall IsStrafingLeft();
  int __thiscall IsStrafingRight();
  int __thiscall IsStrafing();
  int __thiscall IsFalling();
  int __thiscall IsImmobilized();
  int __thiscall Moved();
  unsigned long __thiscall GetMoveStartTime();
  class NTempest::C3Vector __thiscall GetRedirection();
  int __thiscall MoveTimeIsValid();
  int __thiscall IsSwimming();
  int __thiscall IsSwimmingOrFalling();
  int __thiscall IsMovingStrafingOrSwimming();
  int __thiscall IsMovingStrafingFallingOrSwimming();
  float __thiscall GetCollisionBoxHeight();
  int __thiscall IgnoresCollision();
  int __thiscall IsHalted();
  void __thiscall CGUnit::BuildMovementUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  float __thiscall LinearDistanceSquared(class NTempest::C3Vector&);
  int __thiscall GetAura(int);
  unsigned char __thiscall GetAuraFlags(int);
  unsigned int __thiscall GetAuraState();
  unsigned char __thiscall HasAuraState(unsigned int);
  unsigned char __thiscall IsDisconnected();
  unsigned char __thiscall IsSpawning();
  unsigned char __thiscall IsClientLocked();
  unsigned char __thiscall IsOnTaxi();
  unsigned char __thiscall IsPlayerControlled();
  unsigned char __thiscall IsPlusMob();
  unsigned char __thiscall IsBeastmaster();
  unsigned char __thiscall IsImmunePC();
  unsigned char __thiscall IsImmuneNPC();
  unsigned char __thiscall IsLooting();
  unsigned char __thiscall IsInCombat();
  unsigned char __thiscall IsMounted();
  unsigned char __thiscall IsPureMountActive();
  unsigned char __thiscall IsPureMountMounted();
  unsigned char __thiscall IsFeignDeath();
  unsigned char __thiscall IsStealthed();
  unsigned char __thiscall IsInvisible();
  unsigned char __thiscall IsConfused();
  unsigned char __thiscall IsFleeing();
  unsigned char __thiscall IsAffectingCombat();
  unsigned char __thiscall IsMerchant();
  unsigned char __thiscall IsQuestGiver();
  unsigned char __thiscall IsTaxiNode();
  unsigned char __thiscall IsTrainer();
  unsigned char __thiscall IsBinder();
  unsigned char __thiscall IsBanker();
  unsigned char __thiscall IsNpcPetition();
  unsigned char __thiscall IsTabardVendor();
  unsigned char __thiscall IsGuildRegistrar();
  unsigned char __thiscall IsNPC();
  int __thiscall GetMountDisplayID();
  unsigned __int64 __thiscall GetTarget();
  unsigned int __thiscall GetStandState();
  int __thiscall CGUnit::StandStateValid(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum UNITSTANDSTATE newState);
  unsigned char __thiscall IsSitting();
  unsigned char __thiscall IsSleeping();
  unsigned int __thiscall GetEmoteState();
  unsigned int __thiscall GetPetNumber();
  unsigned int __thiscall GetPetNameTimestamp();
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  unsigned int __thiscall GetAttackRoundTime(enum COMBATHAND);
  enum WEAPONMODE __thiscall GetWeaponMode();
  unsigned char __thiscall IsUsingRangedWeapon();
  unsigned char __thiscall GetSheathed();
  void __thiscall SetWaterSurfaceElevation(float);
  void __thiscall CGUnit(class CGUnit&);
  void __thiscall CGUnit(unsigned long*, class NTempest::C3Vector&, float, unsigned __int64&);
  void __thiscall ~CGUnit();
  struct CGUnitData* __thiscall Unit();
  struct CGUnitData* __thiscall Unit();
  class CGUnit& __thiscall operator=(class CGUnit&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ enum UNITAFFILIATION __thiscall CGUnit::GetGUIDAffiliation(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 unit);
};
// <size 0xd8>

class CCombat {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ unsigned __int64 m_victim;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CCombat();
  void __thiscall StopAttack();
  void __thiscall CCombat::GetClientInitData(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate* init);
  void __thiscall CCombat::SetClientInitData(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientObjCreate& init);
  unsigned __int64 __thiscall CCombat::IsAttacking();
  void __thiscall CCombat::SetAttacking(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);

  // virtual functions ------------------------------
};
// <size 0x8>

class CCombatClient : class CCombat  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_attackSent;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_stopSent;

  // base classes -----------------------------------
  // baseclass class CCombat
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CCombatClient();
  void __thiscall StopAttack();
  void __thiscall SetAttacking(unsigned __int64);
  int __thiscall AttackBeenSent();
  void __thiscall CCombatClient::SetAttackSent(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim);
  void __thiscall ClearAttackSent();
  int __thiscall StopBeenSent();
  void __thiscall SetStopSent(int);

  // virtual functions ------------------------------
};
// <size 0x10>

class PageTextCache {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1f4|*/ char m_text[500];
  /*<thisrel this+0x1f4>*/ /*|0x4|*/ int m_nextPage;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall PageTextCache();
  void __thiscall PageTextCache::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);

  // virtual functions ------------------------------
};
// <size 0x1f8>

class PageTextCache_C : class PageTextCache  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class PageTextCache
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall PageTextCache_C::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall PageTextCache_C();

  // virtual functions ------------------------------
};
// <size 0x1f8>

class GuildStats {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_guildID;
  /*<thisrel this+0x4>*/ /*|0x18|*/ char m_guildName[24];
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_emblemStyle;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_emblemColor;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_borderStyle;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_borderColor;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_backgroundColor;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall GuildStats();
  void __thiscall GuildStats::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);

  // virtual functions ------------------------------
};
// <size 0x30>

class NPCText {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* m_text;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_soundID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall NPCText();
  void __thiscall ~NPCText();
  void __thiscall NPCText::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall NPCText::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class ItemStats {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_class;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_subclass;
  /*<thisrel this+0x8>*/ /*|0x10|*/ char* m_displayName[4];
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_displayInfoID;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_overallQualityID;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_buyPrice;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_sellPrice;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_inventoryType;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_allowableClass;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_allowableRace;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_itemLevel;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_requiredLevel;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int m_requiredSkill;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_requiredSkillRank;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_maxCount;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ int m_stackable;
  /*<thisrel this+0x50>*/ /*|0x4|*/ int m_containerSlots;
  /*<thisrel this+0x54>*/ /*|0x28|*/ int m_bonusStat[10];
  /*<thisrel this+0x7c>*/ /*|0x28|*/ int m_bonusAmount[10];
  /*<thisrel this+0xa4>*/ /*|0x14|*/ int m_minDamage[5];
  /*<thisrel this+0xb8>*/ /*|0x14|*/ int m_maxDamage[5];
  /*<thisrel this+0xcc>*/ /*|0x14|*/ int m_damageType[5];
  /*<thisrel this+0xe0>*/ /*|0x18|*/ int m_resistances[6];
  /*<thisrel this+0xf8>*/ /*|0x4|*/ int m_delay;
  /*<thisrel this+0xfc>*/ /*|0x4|*/ int m_ammunitionType;
  /*<thisrel this+0x100>*/ /*|0x4|*/ int m_maxDurability;
  /*<thisrel this+0x104>*/ /*|0x14|*/ int m_spellID[5];
  /*<thisrel this+0x118>*/ /*|0x14|*/ int m_spellTrigger[5];
  /*<thisrel this+0x12c>*/ /*|0x14|*/ int m_spellCharges[5];
  /*<thisrel this+0x140>*/ /*|0x14|*/ int m_spellCooldown[5];
  /*<thisrel this+0x154>*/ /*|0x14|*/ int m_spellCategory[5];
  /*<thisrel this+0x168>*/ /*|0x14|*/ int m_spellCategoryCooldown[5];
  /*<thisrel this+0x17c>*/ /*|0x4|*/ int m_bonding;
  /*<thisrel this+0x180>*/ /*|0x4|*/ char* m_description;
  /*<thisrel this+0x184>*/ /*|0x4|*/ int m_pageText;
  /*<thisrel this+0x188>*/ /*|0x4|*/ int m_languageID;
  /*<thisrel this+0x18c>*/ /*|0x4|*/ int m_pageMaterial;
  /*<thisrel this+0x190>*/ /*|0x4|*/ int m_startQuestID;
  /*<thisrel this+0x194>*/ /*|0x4|*/ int m_lockID;
  /*<thisrel this+0x198>*/ /*|0x4|*/ int m_material;
  /*<thisrel this+0x19c>*/ /*|0x4|*/ int m_sheatheType;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall ItemStats();
  void __thiscall ItemStats::~ItemStats();
  void __thiscall ItemStats::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1a0>

class ItemStats_C : class ItemStats  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class ItemStats
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ItemStats_C::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall ItemStats_C();
  void __thiscall ~ItemStats_C();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1a0>

class GameObjectStats {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_typeID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_displayID;
  /*<thisrel this+0x8>*/ /*|0x10|*/ char* m_name[4];
  /*<thisrel this+0x18>*/ /*|0x28|*/ int m_propValue[10];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall GameObjectStats();
  void __thiscall GameObjectStats::~GameObjectStats();
  void __thiscall GameObjectStats::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class GameObjectStats_C : class GameObjectStats  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class GameObjectStats
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall GameObjectStats_C::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall GameObjectStats_C();
  void __thiscall ~GameObjectStats_C();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class CreatureStats {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x10|*/ char* m_name[4];
  /*<thisrel this+0x10>*/ /*|0x4|*/ char* m_title;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_creatureType;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_creatureFamily;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall CreatureStats();
  void __thiscall CreatureStats::~CreatureStats();
  void __thiscall CreatureStats::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CreatureStats_C : class CreatureStats  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CreatureStats
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CreatureStats_C::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CreatureStats_C();
  void __thiscall ~CreatureStats_C();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CGPetition {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_petitionID;
  /*<thisrel this+0x8>*/ /*|0x8|*/ unsigned __int64 m_petitioner;
  /*<thisrel this+0x10>*/ /*|0x100|*/ char m_title[256];
  /*<thisrel this+0x110>*/ /*|0x1000|*/ char m_bodyText[4096];
  /*<thisrel this+0x1110>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x1114>*/ /*|0x4|*/ int m_minSignatures;
  /*<thisrel this+0x1118>*/ /*|0x4|*/ int m_maxSignatures;
  /*<thisrel this+0x111c>*/ /*|0x4|*/ int m_deadLine;
  /*<thisrel this+0x1120>*/ /*|0x4|*/ int m_issueDate;
  /*<thisrel this+0x1124>*/ /*|0x4|*/ int m_allowedGuildID;
  /*<thisrel this+0x1128>*/ /*|0x4|*/ int m_allowedClasses;
  /*<thisrel this+0x112c>*/ /*|0x4|*/ int m_allowedRaces;
  /*<thisrel this+0x1130>*/ /*|0x2|*/ short m_allowedGender;
  /*<thisrel this+0x1134>*/ /*|0x4|*/ int m_allowedMinLevel;
  /*<thisrel this+0x1138>*/ /*|0x4|*/ int m_allowedMaxLevel;
  /*<thisrel this+0x113c>*/ /*|0x280|*/ char m_choicetext[10][64];
  /*<thisrel this+0x13bc>*/ /*|0x4|*/ int m_numChoices;
  /*<thisrel this+0x13c0>*/ /*|0x4|*/ unsigned int m_muid;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall CGPetition();
  void __thiscall CGPetition::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CGPetition::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  class CGPetition& __thiscall operator=(class CGPetition&);

  // virtual functions ------------------------------
};
// <size 0x13c8>

class CClippedTriangle {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x6c|*/ class NTempest::C3Vector verts[9];
  /*<thisrel this+0x6c>*/ /*|0x4|*/ unsigned int numVerts;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CClippedTriangle(class CClippedTriangle&);
  void __thiscall CClippedTriangle();
  class NTempest::C3Vector* __thiscall Ptr();
  class NTempest::C3Vector& __thiscall operator[](unsigned int);
  class NTempest::C3Vector& __thiscall CClippedTriangle::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  class NTempest::C3Vector& __thiscall CClippedTriangle::Last();
  void __thiscall CClippedTriangle::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int __thiscall Count();
  void __thiscall Init(class NTempest::C3Vector*);
  void __thiscall CClippedTriangle::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& vertex);
  class CClippedTriangle& __thiscall operator=(class CClippedTriangle&);
  void __thiscall ~CClippedTriangle();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x70>

class CMovement : class CMovementData  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CMovementData
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CMovement::StartLogging();
  static void __fastcall CMovement::StopLogging();
  static int __fastcall CMovement::ToggleLogging();
  static int __fastcall CMovement::IsLoggingOn();
  static void __cdecl CMovement::LogWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* format, ...);
  static void __fastcall CMovement::StartFallLogging();
  static void __fastcall CMovement::StopFallLogging();
  static int __fastcall CMovement::ToggleFallLogging();
  static int __fastcall CMovement::IsFallLoggingOn();
  static void __cdecl CMovement::FallLogWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* format, ...);
  static void __cdecl CMovement::BothLogWrite(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* format, ...);
  static void __fastcall CMovement::StopAllLogging();
  static void __fastcall CMovement::MoveUnits(/*<register ecx>*/ /*|0x4|*/ unsigned long timeNow, /*<register edx>*/ /*|0x4|*/ unsigned long lastUpdate);
  static int __fastcall CMovement::MoversOnList();
  static int __fastcall CMovement::SkipFullZoneUpdate(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static void __fastcall CMovement::SkipHandoffData(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);

  // non-virtual functions --------------------------
  void __thiscall CMovement(class CMovement&);
  void __thiscall CMovement(unsigned __int64&);
  int __thiscall CMovement::SetCollisionBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0xc>*/ /*|0x4|*/ float scale);
  void __thiscall CMovement::MoveUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeNow, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long lastUpdate, /*<regrel ebp+0x10>*/ /*|0x4|*/ void* obj);
  void __thiscall CMovement::MoveLocalPlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeNow, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long lastUpdate);
  void __thiscall CMovement::UpdateStatusLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CMovement::UpdateTransportStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CMovement::OnMoveStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forward);
  void __thiscall CMovement::OnMoveStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnStrafeStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CMovement::OnStrafeStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnJumpLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnFallLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnTurnStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CMovement::OnTurnStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnPitchStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int up);
  void __thiscall CMovement::OnPitchStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnSetRunModeLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int run);
  void __thiscall CMovement::OnSetFacingLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::OnSetRawFacingLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::OnSetPitchLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float pitch);
  void __thiscall CMovement::OnSwimStartLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnSwimStopLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnTeleportLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::UpdateStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  void __thiscall CMovement::OnMoveStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forward);
  int __thiscall CMovement::OnMoveStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnStrafeStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  int __thiscall CMovement::OnStrafeStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnTurnStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CMovement::OnTurnStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnPitchStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int up);
  void __thiscall CMovement::OnPitchStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnJump(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnFall(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnSetRunMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int run);
  void __thiscall CMovement::OnSwimStart(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnSwimStop(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnTeleport(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  int __thiscall CMovement::OnRunSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float speed);
  int __thiscall CMovement::OnWalkSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float speed);
  int __thiscall CMovement::OnSwimSpeedChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float speed);
  int __thiscall CMovement::OnTurnRateChange(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float rate);
  void __thiscall CMovement::OnSetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::OnSetPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float pitch);
  void __thiscall CMovement::OnCollideRedirServer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& redirection);
  void __thiscall CMovement::OnStuckServer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  float __thiscall CMovement::GetCurrentSpeed();
  float __thiscall CMovement::GetCurrentTurnRate();
  float __thiscall CMovement::GetCurrentPitchRate();
  unsigned int __thiscall GetExportMoveFlags();
  unsigned int __thiscall GetLocalMoveFlags();
  int __thiscall IsSplineFlyer();
  float __thiscall FallDistance();
  unsigned int __thiscall CMovement::FallTime();
  float __thiscall GetFallStartElevation();
  void __thiscall BuildMovementUpdate(class CDataStore*);
  void __thiscall SetRawPosition(class NTempest::C3Vector&);
  void __thiscall SetRawFacing(float);
  void __thiscall Mobilize();
  void __thiscall Immobilize();
  void __thiscall Root();
  void __thiscall UnRoot();
  void __thiscall CMovement::ToggleCollision(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::EnableCollision(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int enable);
  int __thiscall IsSpline();
  void __thiscall CMovement::OnSpline(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebx+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* points, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int count, /*<regrel ebx+0x14>*/ /*|0x4|*/ unsigned long duration, /*<regrel ebx+0x18>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall CMovement::OnSplineDoneFace(/*<regrel ebp+0x8>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::OnSplineDoneFace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned __int64& guid);
  void __thiscall CMovement::OnSplineDoneFace(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& spot);
  void __thiscall CMovement::SetServerInitData(/*<regrel ebp+0x8>*/ /*|0x4|*/ float runSpeed, /*<regrel ebp+0xc>*/ /*|0x4|*/ float walkSpeed, /*<regrel ebp+0x10>*/ /*|0x4|*/ float swimSpeed, /*<regrel ebp+0x14>*/ /*|0x4|*/ float turnRate);
  void __thiscall CMovement::GetUpdateInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientMoveUpdate* init);
  void __thiscall CMovement::GetMoveStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMovementStatus* status);
  void __thiscall CMovement::SetUpdateInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CClientMoveUpdate& init, /*<regrel ebp+0x10>*/ /*|0x4|*/ int localPlayer);
  void __thiscall CMovement::BuildFullZoneUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CMovement::UnpackFullZoneUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CMovement::PutHandoffData(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CMovement::GetHandoffData(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall CMovement::SetIdleUpdates();
  int __thiscall CMovement::CollideRequestMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long lastUpdateTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeElapsed, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector);
  int __thiscall CMovement::GetMoveEventMsgId(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int oldMoveFlags, /*<regrel ebp+0xc>*/ /*|0x4|*/ int wasJumping);
  void __thiscall UpdateLastSentRedirection();
  class CMovement& __thiscall operator=(class CMovement&);
  void __thiscall CMovement::AddToMoversList();
  void __thiscall CMovement::AddPlayerMoveEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int eventType, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::UpdateCurrentSpeed();
  void __thiscall CMovement::UpdateStatusInternal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CMovementStatus& update);
  int __thiscall CMovement::StartMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forward);
  int __thiscall CMovement::StartStrafe(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  int __thiscall CMovement::StopMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::ForceStopMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  int __thiscall CMovement::StopStrafe(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::ForceStopStrafe(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  int __thiscall CMovement::Jump(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  int __thiscall CMovement::ForceJump(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StartTurn(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int left);
  void __thiscall CMovement::StopTurn(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StartPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int up);
  void __thiscall CMovement::StopPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::SetRunMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ int run);
  void __thiscall CMovement::SetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::SetPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float pitch);
  void __thiscall CMovement::Teleport(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing);
  void __thiscall CMovement::StartSwim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StopSwim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StartSwimLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StopSwimLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::Halt(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::AddSpline();
  void __thiscall CMovement::ApplyMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int fallTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int moveTime, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int elapsed);
  int __thiscall CMovement::PlotUnitMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int moveTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* move);
  int __thiscall CMovement::PlotUnitSplineMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* move);
  void __thiscall CMovement::UpdateAnchors(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::GetMovingDirection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* direction);
  void __thiscall CMovement::GetStrafingDirection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* direction);
  void __thiscall CMovement::GetDiagonalDirection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* direction);
  void __thiscall CMovement::GetMovingDirection2d(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* direction);
  void __thiscall CMovement::GetStrafingDirection2d(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* direction);
  void __thiscall CMovement::GetDiagonalDirection2d(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* direction);
  void __thiscall CMovement::PlotLinearPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& direction, /*<regrel ebp+0xc>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotHorzCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& direction2d, /*<regrel ebp+0xc>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotVertCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& direction2d, /*<regrel ebp+0xc>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotSpiralPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& direction2d, /*<regrel ebp+0xc>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotUnitRotation(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  void __thiscall CMovement::PlotUnitPitch(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  void __thiscall CMovement::PlotNormalLinearPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotStrafeLinearPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotDiagonalLinearPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotNormalCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotStrafeCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotDiagonalCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotNormalPitchingCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotDiagonalPitchingCircularPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotNormalSpiralPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  void __thiscall CMovement::PlotDiagonalSpiralPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ float secsElapsed, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* totalMove);
  float __thiscall CMovement::RelDistanceFallen(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long currentTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float updateFallTimeSecs);
  float __thiscall CMovement::RelDistanceFallen(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fallTimeMS);
  unsigned int __thiscall CMovement::ProjectileFall(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeToMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& moveWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted);
  unsigned int __thiscall CMovement::Fall(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fallenSoFar, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeIncrement);
  unsigned int __thiscall CMovement::Slide(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fallenSoFar, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeIncrement);
  unsigned int __thiscall CMovement::Swim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeToMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& moveWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted);
  float __thiscall CMovement::ExtrudeSlideBoxDownHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  float __thiscall CMovement::ExtrudeProjectileBoxUpHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned __int64* gameObjHit);
  float __thiscall CMovement::ExtrudeProjectileBoxDownHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned __int64* gameObjHit);
  float __thiscall CMovement::ExtrudeFlyBoxUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted);
  float __thiscall CMovement::ExtrudeFlyBoxDown(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted);
  float __thiscall CMovement::CollideWithWaterSurface(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted);
  void __thiscall CMovement::CallMoveEventHandlers(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebx+0xc>*/ /*|0x4|*/ int moveAdjusted, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int oldMoveFlags, /*<regrel ebx+0x14>*/ /*|0x4|*/ int wasJumping);
  void __thiscall CMovement::CollisionStateChanged();
  void __thiscall CMovement::CollisionStateChangedLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnEnableGravity(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::OnDisableGravity(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  unsigned int __thiscall CMovement::TraceSurface(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeToMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMove, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted);
  void __thiscall CMovement::ClipFacetsWithOneAnother(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& startPlane, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<CWalkableSurface>* surfacePool);
  void __thiscall CMovement::CheckSurfaceObstacles(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CWalkableSurface* surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ float* distanceLeft, /*<regrel ebp+0x14>*/ /*|0x4|*/ float distanceMoved, /*<regrel ebp+0x18>*/ /*|0x4|*/ float currSpeedInv, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class TSGrowableArray<CWalkableSurface>* surfacePool, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  struct CWalkableSurface* __thiscall CMovement::GetNextSurface(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int surfaceId, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x14>*/ /*|0x4|*/ float distanceMoved, /*<regrel ebp+0x18>*/ /*|0x4|*/ float currSpeedInv, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::C4Plane& currentCeiling, /*<regrel ebp+0x20>*/ /*|0x4|*/ class TSGrowableArray<CWalkableSurface>* surfacePool);
  void __thiscall CMovement::GetMoveFacets(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int timeToFall, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove);
  void __thiscall CMovement::FindObstacles(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* box, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numSides, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Plane& startPlane, /*<regrel ebp+0x18>*/ /*|0x4|*/ int hitType, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float* closestDist, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  int __thiscall CMovement::DetermineHitType(/*<regrel ebp+0x8>*/ /*|0x4|*/ int hitType, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int facetId, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  int __thiscall CMovement::DetermineBoxHitType(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int facetId, /*<regrel ebp+0x14>*/ /*|0x4|*/ float baseHeight, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  void __thiscall CMovement::DeterminePyramidHitType(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int facetId, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CRedirect* hitInfo);
  float __thiscall CMovement::ExtrudeAlignedDownHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm);
  float __thiscall CMovement::ExtrudeAlignedUpHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm);
  float __thiscall CMovement::ExtrudeUnalignedDownHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm);
  float __thiscall CMovement::ExtrudeUnalignedUpHill(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm);
  float __thiscall CMovement::ExtrudeCollisionShape(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceWanted, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm);
  void __thiscall CMovement::ExtrudeBoxSideX(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ float bottom, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* boxSides);
  void __thiscall CMovement::ExtrudeBoxSideY(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ float bottom, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* boxSides);
  void __thiscall CMovement::ExtrudeBoxSideZ(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector, /*<regrel ebp+0xc>*/ /*|0x4|*/ float bottom, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* boxSides);
  int __thiscall CMovement::ExtrudePyramidSideX(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* boxSides);
  int __thiscall CMovement::ExtrudePyramidSideY(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ float distance, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* boxSides);
  int __thiscall CMovement::TestStepUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& destination);
  void __thiscall CMovement::ExtrudeDownNegXFacet(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* sides, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* startPlane);
  void __thiscall CMovement::ExtrudeDownPosXFacet(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* sides, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* startPlane);
  void __thiscall CMovement::ExtrudeDownNegYFacet(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* sides, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* startPlane);
  void __thiscall CMovement::ExtrudeDownPosYFacet(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* sides, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Plane* startPlane);
  float __thiscall CMovement::FindGroundDistanceBelow(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distanceToFall, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64* gameObjHit);
  float __thiscall CMovement::FindCeilingDistanceAbove(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distanceToJump);
  int __thiscall CMovement::IsTooLow(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long moveStartTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CWalkableSurface* surface, /*<regrel ebp+0x14>*/ /*|0x4|*/ float distanceMoved, /*<regrel ebp+0x18>*/ /*|0x4|*/ float currSpeedInv);
  float __thiscall CMovement::CalcFallSurfaceProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long moveStartTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int timeLeft, /*<regrel ebp+0x14>*/ /*|0xc|*/ class NTempest::C3Vector hitPoint, /*<regrel ebp+0x20>*/ /*|0x4|*/ float distanceAway, /*<regrel ebp+0x24>*/ /*|0x4|*/ class NTempest::C3Vector& moveNormal, /*<regrel ebp+0x28>*/ /*|0x4|*/ class NTempest::C4Plane* platform);
  float __thiscall CMovement::AttemptMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& move, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distance2d, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C2Vector& unitMove, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C2Vector& unitMoveWanted, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::C4Plane& ground);
  void __thiscall CMovement::Redirect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CRedirect& hitInfo);
  void __thiscall CMovement::Redirect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveVector, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CRedirect& hitInfoX, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct CRedirect& hitInfoY);
  void __thiscall CMovement::AttemptRedirect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& newDirection);
  void __thiscall CMovement::Obstruct(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& platformNorm, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& facetNormHit);
  void __thiscall CMovement::FlyRedirect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CRedirect& hitInfoX, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CRedirect& hitInfoY, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CRedirect& hitInfoZ);
  void __thiscall CMovement::FlyRedirect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMoveWanted, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CRedirect& hitInfoX, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CRedirect& hitInfoY);
  void __thiscall CMovement::ProcessFalling(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::CheckFallenFar(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::ProcessFallReset(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  void __thiscall CMovement::StartFalling(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  int __thiscall CMovement::FallFromTransport();
  void __thiscall CMovement::StopFalling();
  int __thiscall CMovement::NextSurfaceIsWalkable(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CWalkableSurface* surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ float distanceMoved, /*<regrel ebp+0x14>*/ /*|0x4|*/ float currSpeedInv, /*<regrel ebp+0x18>*/ /*|0x4|*/ class TSGrowableArray<CWalkableSurface>* surfacePool);
  int __thiscall CMovement::HandlePendingActions(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  float __thiscall CMovement::CalcFallStartElevation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int timeFallen);
  int __thiscall CMovement::UpdatePlayerMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeNow);
  void __thiscall CMovement::ShowCollisionBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& unitMove, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int oldMoveFlags);
  void __thiscall CMovement::SaveMoveState(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMoveState* state);
  void __thiscall CMovement::RestoreMoveState(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMoveState& state);
  int __thiscall IsRedirected();
  int __thiscall IsSliding();
  int __thiscall CMovement::IsJumpingUp(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime);
  int __thiscall CMovement::CheckInvalidPositionOrMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& move, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int moveTime);
  void __thiscall CMovement::ApplyAdjustedMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStemp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveWanted, /*<regrel ebp+0x10>*/ /*|0x4|*/ int wasAdjusted, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int oldMoveFlags);
  void __thiscall CMovement::LogUpdateInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CClientMoveUpdate& init);
  void __thiscall CMovement::SimpleRequestMove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fallTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& moveVector);
  void __thiscall CMovement::GetDirection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* direction);
  class NTempest::C3Vector __thiscall CMovement::CalcAverageSurfaceNormal(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* __$ReturnUdt, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* box);
  void __thiscall CMovement::SetOrientation();
  void __thiscall ~CMovement();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc8>

class CMovementData {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CMovementData> moveLink;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class TSLink<CMovementData> transportLink;
  /*<thisrel this+0x10>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_facing;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_pitch;
  /*<thisrel this+0x24>*/ /*|0xc|*/ class NTempest::C3Vector m_groundNormal;
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned __int64& m_guid;
  /*<thisrel this+0x38>*/ /*|0x8|*/ unsigned __int64 m_transportGUID;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned int m_moveFlags;
  /*<thisrel this+0x44>*/ /*|0xc|*/ class NTempest::C3Vector m_anchorPosition;
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_anchorFacing;
  /*<thisrel this+0x54>*/ /*|0x4|*/ float m_anchorPitch;
  /*<thisrel this+0x58>*/ /*|0x4|*/ unsigned long m_moveStartTime;
  /*<thisrel this+0x5c>*/ /*|0xc|*/ class NTempest::C3Vector m_direction;
  /*<thisrel this+0x68>*/ /*|0x8|*/ class NTempest::C2Vector m_direction2d;
  /*<thisrel this+0x70>*/ /*|0x4|*/ float m_cosAnchorPitch;
  /*<thisrel this+0x74>*/ /*|0x4|*/ float m_sinAnchorPitch;
  /*<thisrel this+0x78>*/ /*|0xc|*/ class NTempest::C3Vector m_reDirection;
  /*<thisrel this+0x84>*/ /*|0xc|*/ class NTempest::C3Vector m_lastReDirectionSent;
  /*<thisrel this+0x90>*/ /*|0x4|*/ unsigned long m_fallStartTime;
  /*<thisrel this+0x94>*/ /*|0x4|*/ float m_fallStartElevation;
  /*<thisrel this+0x98>*/ /*|0x4|*/ float m_currentSpeed;
  /*<thisrel this+0x9c>*/ /*|0x4|*/ float m_walkSpeed;
  /*<thisrel this+0xa0>*/ /*|0x4|*/ float m_runSpeed;
  /*<thisrel this+0xa4>*/ /*|0x4|*/ float m_swimSpeed;
  /*<thisrel this+0xa8>*/ /*|0x4|*/ float m_turnRate;
  /*<thisrel this+0xac>*/ /*|0x4|*/ float m_collisionBoxHalfDepth;
  /*<thisrel this+0xb0>*/ /*|0x4|*/ float m_collisionBoxHeight;
  /*<thisrel this+0xb4>*/ /*|0x4|*/ float m_stepUpHeight;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ float m_jumpVelocity;
  /*<thisrel this+0xbc>*/ /*|0x4|*/ struct CMoveSpline* m_spline;
  /*<thisrel this+0xc0>*/ /*|0x4|*/ float m_waterSurfaceElev;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMovementData(class CMovementData&);
  void __thiscall CMovementData(unsigned __int64&);
  void __thiscall CMovementData::CMovementData(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ float facing, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned __int64& guid);
  void __thiscall CMovementData::~CMovementData();
  class NTempest::C3Vector __thiscall CMovementData::GetPosition();
  class NTempest::C3Vector __thiscall CMovementData::GetPosition(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* __$ReturnUdt);
  class NTempest::C3Vector __thiscall GetRawPosition();
  float __thiscall GetFacing();
  float __thiscall CMovementData::GetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float facing);
  float __thiscall GetRawFacing();
  float __thiscall GetPitch();
  class NTempest::C3Vector __thiscall GetAnchorPosition();
  float __thiscall GetAnchorFacing();
  float __thiscall GetAnchorPitch();
  class NTempest::C3Vector __thiscall GetGroundNormal();
  class NTempest::C3Vector __thiscall GetRedirection();
  class NTempest::C3Vector __thiscall GetLastSentRedirection();
  unsigned long __thiscall GetMoveStartTime();
  float __thiscall GetRunSpeed();
  float __thiscall GetWalkSpeed();
  float __thiscall GetSwimSpeed();
  float __thiscall GetTurnRate();
  unsigned int __thiscall GetMoveFlags();
  unsigned __int64 __thiscall GetGUID();
  int __thiscall IsInMotion();
  int __thiscall IsMovingOrTurning();
  int __thiscall IsMovingAndTurning();
  int __thiscall IsMovingOrFalling();
  int __thiscall IsMovingOrStrafing();
  int __thiscall IsMovingStrafingOrFalling();
  int __thiscall IsMovingAndStrafing();
  int __thiscall IsMovingTurningOrStrafing();
  int __thiscall IsMoving();
  int __thiscall IsMovingForward();
  int __thiscall IsMovingBackwards();
  int __thiscall IsTurning();
  int __thiscall IsTurningOrFalling();
  int __thiscall IsTurningLeft();
  int __thiscall IsTurningRight();
  int __thiscall IsTurningOrPitching();
  int __thiscall IsTurningAndPitching();
  int __thiscall IsStrafingLeft();
  int __thiscall IsStrafingRight();
  int __thiscall IsStrafing();
  int __thiscall IsFalling();
  int __thiscall IsJumping();
  int __thiscall HasFallenFar();
  int __thiscall IsWalking();
  int __thiscall Moved();
  int __thiscall TimeIsValid();
  int __thiscall IsImmobilized();
  int __thiscall IsRooted();
  int __thiscall IsSwimming();
  int __thiscall IsSwimmingOrFalling();
  int __thiscall IsPitching();
  int __thiscall IsPitchingUp();
  int __thiscall IsPitchingDown();
  int __thiscall IsMovingStrafingOrSwimming();
  int __thiscall IsMovingStrafingFallingOrSwimming();
  int __thiscall IsSplineMover();
  int __thiscall IgnoresCollision();
  int __thiscall IsHalted();
  int __thiscall WasNudged();
  float __thiscall GetCollisionBoxHeight();
  void __thiscall CMovementData::RemoveFromMoversList();
  void __thiscall SetWaterSurfaceElevation(float);
  int __thiscall CMovementData::SetTransport(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  int __thiscall CMovementData::ForceSetTransport(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  int __thiscall CMovementData::IsLocalPlayer();
  void __thiscall CMovementData::CalcDirection();
  void __thiscall CMovementData::RemoveSpline();
  class CMovementData& __thiscall operator=(class CMovementData&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc8>

class CGNamePlateFrame : class CSimpleButton  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2f8>*/ /*|0x8|*/ unsigned __int64 m_unit;
  /*<thisrel this+0x300>*/ /*|0x4|*/ class CSimpleTexture* m_highlight;
  /*<thisrel this+0x304>*/ /*|0x4|*/ class CSimpleFontString* m_nameFrame;
  /*<thisrel this+0x308>*/ /*|0x4|*/ class CGSimpleHealthBar* m_healthBar;

  // base classes -----------------------------------
  // baseclass class CSimpleButton
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGNamePlateFrame(class CGNamePlateFrame&);
  void __thiscall CGNamePlateFrame::CGNamePlateFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGNamePlateFrame::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  class CGNamePlateFrame& __thiscall operator=(class CGNamePlateFrame&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGNamePlateFrame::OnLayerCursorEnter();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGNamePlateFrame::OnLayerCursorExit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGNamePlateFrame::OnClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum MOUSEBUTTON button);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGNamePlateFrame();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x310>

class NameCache {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x30|*/ char m_name[48];
  /*<thisrel this+0x30>*/ /*|0x8|*/ unsigned __int64 m_guid;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned int m_race;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_sex;
  /*<thisrel this+0x40>*/ /*|0x1|*/ unsigned char m_temp;
  /*<thisrel this+0x44>*/ /*|0x4|*/ unsigned int m_class;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall NameCache();
  void __thiscall NameCache::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall NameCache::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  class NameCache& __thiscall operator=(class NameCache&);

  // virtual functions ------------------------------
};
// <size 0x48>

class SpellRadiusRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_radius;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_radiusPerLevel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_radiusMax;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellRadiusRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellRadiusRec::SpellRadiusRec();
  void __thiscall SpellRadiusRec::~SpellRadiusRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellRadiusRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class SpellDurationRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_duration;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_durationPerLevel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxDuration;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellDurationRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellDurationRec::SpellDurationRec();
  void __thiscall SpellDurationRec::~SpellDurationRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellDurationRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class SpellRangeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_rangeMin;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_rangeMax;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x10>*/ /*|0x20|*/ char* m_displayName_lang[8];
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_displayName_flag;
  /*<thisrel this+0x34>*/ /*|0x20|*/ char* m_displayNameShort_lang[8];
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_displayNameShort_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellRangeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellRangeRec::SpellRangeRec();
  void __thiscall SpellRangeRec::~SpellRangeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellRangeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x58>

class CGMinimapFrame : class CSimpleFrame  {

  // static data ------------------------------------
  static /*<rva 0x9e7f68>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;
  static /*<rva 0x9e7d08>*/ /*|0x8|*/ class NTempest::C2Vector m_pingPosition;
  static /*<rva 0x9e80e0>*/ /*|0xac|*/ struct MinimapTexParams s_minimapTexParams;

  // non-static data --------------------------------
  /*<thisrel this+0x2ac>*/ /*|0x4|*/ class CSimpleFrame* m_tooltip;
  /*<thisrel this+0x2b0>*/ /*|0x4|*/ class CSimpleFontString* m_tooltipText;
  /*<thisrel this+0x2b4>*/ /*|0xc|*/ class CSimpleModel* m_rotatingArrowFrame[3];
  /*<thisrel this+0x2c0>*/ /*|0x14|*/ class CSimpleModel* m_rotatingPartyFrame[5];
  /*<thisrel this+0x2d4>*/ /*|0x4|*/ class CSimpleModel* m_playerArrowFrame;
  /*<thisrel this+0x2d8>*/ /*|0x4|*/ float m_lastFacing;
  /*<thisrel this+0x2dc>*/ /*|0x4|*/ unsigned int m_lastBlipUpdate;

  // base classes -----------------------------------
  // baseclass class CSimpleFrame
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGMinimapFrame::Initialize(/*<register ecx>*/ /*|0x4|*/ int continentID);
  static void __fastcall CGMinimapFrame::Shutdown();
  static class CSimpleFrame* __fastcall CGMinimapFrame::Create(/*<register ecx>*/ /*|0x4|*/ class CSimpleFrame* parent);
  static void __fastcall CGMinimapFrame::RenderCallback(/*<register ecx>*/ /*|0x4|*/ void* param);
  static void __fastcall CGMinimapFrame::SetPingPosition(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& sender, /*<register edx>*/ /*|0x4|*/ class NTempest::C2Vector& pos);
  static class NTempest::C2Vector& __fastcall GetPingPosition();
  static void __fastcall CGMinimapFrame::RegisterScriptMethods();
  static void __fastcall CGMinimapFrame::UnregisterScriptMethods();
  static int __fastcall CGMinimapFrame::ObjectEnumProc(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 object, /*<register ecx>*/ /*|0x4|*/ void* param);
  static class NTempest::C2Vector __fastcall CGMinimapFrame::WorldPosToMinimapFrameCoords(/*<register ecx>*/ /*|0x4|*/ class NTempest::C2Vector* __$ReturnUdt, /*<regrel ebp+0x8>*/ /*|0xc|*/ class NTempest::C3Vector centerPoint, /*<regrel ebp+0x14>*/ /*|0x4|*/ float radius, /*<regrel ebp+0x18>*/ /*|0x4|*/ float x, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float y);
  static void __fastcall CGMinimapFrame::MinimapTextureCallback(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CGMinimapFrame::RenderInsideTexture();
  static void __fastcall CGMinimapFrame::RenderInsideSortQuads(/*<register ecx>*/ /*|0x4|*/ struct QUADDATA*& rHead);
  static void __fastcall CGMinimapFrame::RenderInsideQuad(/*<register ecx>*/ /*|0x4|*/ struct QUADDATA* q);

  // non-virtual functions --------------------------
  void __thiscall ForceUpdateGeometry();
  int __thiscall OnEvent(class CEvent&);
  void __thiscall Init();
  void __thiscall CGMinimapFrame::Render();
  void __thiscall CGMinimapFrame(class CGMinimapFrame&);
  void __thiscall CGMinimapFrame::CGMinimapFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGMinimapFrame::SetPlayerArrowPosition();
  void __thiscall CGMinimapFrame::UpdateArrowRotation(/*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  void __thiscall CGMinimapFrame::UpdateGeometry(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& centerPoint, /*<regrel ebp+0xc>*/ /*|0x4|*/ float radius);
  void __thiscall CGMinimapFrame::RenderObjectBlips(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DNInfo* dnInfo);
  void __thiscall CGMinimapFrame::RenderInside(/*<regrel ebp+0x8>*/ /*|0x4|*/ float minimapSize, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector& localOffset);
  class CGMinimapFrame& __thiscall operator=(class CGMinimapFrame&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGMinimapFrame::PostLoadXML(/*<regrel ebp+0x8>*/ /*|0x4|*/ class XMLNode* node, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGMinimapFrame::OnLayerUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGMinimapFrame::OnFrameRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* batch, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int layer);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGMinimapFrame::OnLayerTrackUpdate(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGMinimapFrame::OnLayerCursorExit();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGMinimapFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGMinimapFrame();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2e0>

class CGCharacterModelBase : class CSimpleModel  {

  // static data ------------------------------------
  static /*<rva 0x9e7a68>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x338>*/ /*|0x8|*/ unsigned __int64 m_unit;
  /*<thisrel this+0x340>*/ /*|0x4|*/ float m_rotationScale;

  // base classes -----------------------------------
  // baseclass class CSimpleModel
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CSimpleFrame* __fastcall CGCharacterModelBase::Create(/*<register ecx>*/ /*|0x4|*/ class CSimpleFrame* parent);
  static void __fastcall CGCharacterModelBase::RegisterScriptMethods();
  static void __fastcall CGCharacterModelBase::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CGCharacterModelBase::SetUnit(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 unitGUID);
  void __thiscall SetRotationScale(float);
  void __thiscall CGCharacterModelBase(class CGCharacterModelBase&);
  void __thiscall CGCharacterModelBase::CGCharacterModelBase(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGCharacterModelBase::ConfigureCamera();
  class CGCharacterModelBase& __thiscall operator=(class CGCharacterModelBase&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x90>*/ void __thiscall CGCharacterModelBase::InitializeModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCharacterModelBase::UpdateModel();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGCharacterModelBase::~CGCharacterModelBase();
  virtual /*<vtableoff 0x94>*/ unsigned char __thiscall CGCharacterModelBase::GetUniquePaperDollModel();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGCharacterModelBase::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x348>

class CGTabardModelFrame : class CGCharacterModelBase  {

  // static data ------------------------------------
  static /*<rva 0x9e79b8>*/ /*|0x2c|*/ class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> s_scriptMethods;

  // non-static data --------------------------------
  /*<thisrel this+0x348>*/ /*|0x14|*/ int m_variations[5];
  /*<thisrel this+0x35c>*/ /*|0x4|*/ struct HTEXCOMPONENT__* m_charComponent;

  // base classes -----------------------------------
  // baseclass class CGCharacterModelBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CSimpleFrame* __fastcall CGTabardModelFrame::Create(/*<register ecx>*/ /*|0x4|*/ class CSimpleFrame* parent);
  static void __fastcall CGTabardModelFrame::RegisterScriptMethods();
  static void __fastcall CGTabardModelFrame::UnregisterScriptMethods();

  // non-virtual functions --------------------------
  void __thiscall CGTabardModelFrame::SaveTabard();
  int __thiscall CGTabardModelFrame::CanSaveTabard();
  void __thiscall CGTabardModelFrame::CycleVariation(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int delta);
  int __thiscall GetVariation(unsigned int);
  void __thiscall CGTabardModelFrame(class CGTabardModelFrame&);
  void __thiscall CGTabardModelFrame::CGTabardModelFrame(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGTabardModelFrame::InitializeTabardColors(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CGPlayer_C* playerPtr);
  void __thiscall CGTabardModelFrame::UpdateTabard();
  class CGTabardModelFrame& __thiscall operator=(class CGTabardModelFrame&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGTabardModelFrame::GetUniquePaperDollModel();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGTabardModelFrame::InitializeModel(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGTabardModelFrame();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGTabardModelFrame::LookupScriptMethod(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct lua_State* L, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x360>

class QuestInfo {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int id;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int level;
  /*<thisrel this+0x8>*/ /*|0x40|*/ char name[64];
  /*<thisrel this+0x48>*/ /*|0x4|*/ int turnIn;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Clear();

  // virtual functions ------------------------------
};
// <size 0x4c>

class QuestItemInfo {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int rewardItemID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int rewardDisplayID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int rewardAmount;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int choiceItemID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int choiceDisplayID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int choiceAmount;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int requiredItemID;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int requiredDisplayID;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int requiredAmount;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Clear();

  // virtual functions ------------------------------
};
// <size 0x24>

class PageTextMaterialRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_name;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall PageTextMaterialRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall PageTextMaterialRec::PageTextMaterialRec();
  void __thiscall PageTextMaterialRec::~PageTextMaterialRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall PageTextMaterialRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CGQuestInfo {

  // static data ------------------------------------
  static /*<rva 0x9e7960>*/ /*|0x8|*/ unsigned __int64 m_npc;
  static /*<rva 0x9e7968>*/ /*|0x4|*/ enum QUEST_STATE m_state;
  static /*<rva 0x9e796c>*/ /*|0x4|*/ int m_currentQuest;
  static /*<rva 0x9e7970>*/ /*|0x4|*/ int m_completable;
  static /*<rva 0x9e7974>*/ /*|0x4|*/ int m_autoLaunched;
  static /*<rva 0x9e7978>*/ /*|0x4|*/ int m_lastChosenItem;
  static /*<rva 0x9e797c>*/ /*|0x4|*/ int m_rewardMoney;
  static /*<rva 0x9e7980>*/ /*|0x4|*/ unsigned int m_numQuests;
  static /*<rva 0x9e7984>*/ /*|0x4|*/ unsigned int m_numInProgress;
  static /*<rva 0x9e76d8>*/ /*|0x260|*/ class QuestInfo m_quests[8];
  static /*<rva 0x9e6630>*/ /*|0x260|*/ class QuestInfo m_inProgress[8];
  static /*<rva 0x9e6898>*/ /*|0xd8|*/ class QuestItemInfo m_questItems[6];
  static /*<rva 0x9e6118>*/ /*|0x100|*/ char m_greetingText[256];
  static /*<rva 0x9e7178>*/ /*|0x40|*/ char m_questTitle[64];
  static /*<rva 0x9e6228>*/ /*|0x400|*/ char m_questText[1024];
  static /*<rva 0x9e6d78>*/ /*|0x400|*/ char m_questLogText[1024];
  static /*<rva 0x9e6970>*/ /*|0x400|*/ char m_progressText[1024];
  static /*<rva 0x9e71d0>*/ /*|0x400|*/ char m_rewardText[1024];
  static /*<rva 0x9e7988>*/ /*|0x4|*/ int m_pendingQuest;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGQuestInfo::EnterWorld();
  static void __fastcall CGQuestInfo::LeaveWorld();
  static void __fastcall CGQuestInfo::SetState(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ enum QUEST_STATE state, /*<register edx>*/ /*|0x4|*/ char* text, /*<regrel ebx+0x10>*/ /*|0x4|*/ int quest);
  static void __fastcall CGQuestInfo::SetLogDescription(/*<register ecx>*/ /*|0x4|*/ char* desc);
  static void __fastcall CGQuestInfo::AddQuest(/*<register ecx>*/ /*|0x4|*/ int quest, /*<register edx>*/ /*|0x4|*/ char* desc, /*<regrel ebp+0x8>*/ /*|0x4|*/ int questLevel, /*<regrel ebp+0xc>*/ /*|0x4|*/ int turnIn);
  static void __fastcall CGQuestInfo::AddQuestInProgress(/*<register ecx>*/ /*|0x4|*/ int quest, /*<register edx>*/ /*|0x4|*/ char* desc, /*<regrel ebp+0x8>*/ /*|0x4|*/ int questLevel);
  static void __fastcall CGQuestInfo::EndQuestList();
  static void __fastcall CGQuestInfo::AddReward(/*<register ecx>*/ /*|0x4|*/ char* title, /*<register edx>*/ /*|0x4|*/ int* itemChoice, /*<regrel ebp+0x8>*/ /*|0x4|*/ int* choiceDisplay, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* choiceAmount, /*<regrel ebp+0x10>*/ /*|0x4|*/ int numChoice, /*<regrel ebp+0x14>*/ /*|0x4|*/ int* itemReward, /*<regrel ebp+0x18>*/ /*|0x4|*/ int* itemDisplay, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int* itemAmount, /*<regrel ebp+0x20>*/ /*|0x4|*/ int numReward, /*<regrel ebp+0x24>*/ /*|0x4|*/ int money, /*<regrel ebp+0x28>*/ /*|0x4|*/ int autoLaunched);
  static void __fastcall CGQuestInfo::AddItemRequest(/*<register ecx>*/ /*|0x4|*/ char* title, /*<register edx>*/ /*|0x4|*/ int* items, /*<regrel ebp+0x8>*/ /*|0x4|*/ int* itemAmount, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* itemDisplay, /*<regrel ebp+0x10>*/ /*|0x4|*/ int numItems, /*<regrel ebp+0x14>*/ /*|0x4|*/ int completed, /*<regrel ebp+0x18>*/ /*|0x4|*/ int autoLaunched);
  static void __fastcall CGQuestInfo::QuestGiverFinished();
  static unsigned __int64& __fastcall GetQuestGiver();
  static int __fastcall GetCurrentQuest();
  static int __fastcall CGQuestInfo::IsCompletable();
  static int __fastcall GetLastChosenItem();
  static void __fastcall ClearLastChosenItem();
  static char* __fastcall GetTitleText();
  static char* __fastcall GetGreetingText();
  static char* __fastcall GetQuestText();
  static char* __fastcall GetQuestLogText();
  static char* __fastcall GetProgressText();
  static char* __fastcall GetRewardText();
  static void __fastcall CGQuestInfo::QueryQuest(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGQuestInfo::CompleteQuest(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGQuestInfo::AcceptQuest();
  static void __fastcall CGQuestInfo::DeclineQuest();
  static void __fastcall CGQuestInfo::GiveQuestItems();
  static int __fastcall CGQuestInfo::GetReward(/*<register ecx>*/ /*|0x4|*/ int choice);
  static int __fastcall GetRewardMoney();
  static unsigned int __fastcall CGQuestInfo::GetNumQuestRewards();
  static unsigned int __fastcall CGQuestInfo::GetNumQuestChoices();
  static unsigned int __fastcall CGQuestInfo::GetNumQuestItems();
  static int __fastcall CGQuestInfo::GetQuestItemInfo(/*<register ecx>*/ /*|0x4|*/ char* type, /*<register edx>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* name, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int nameSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* texture, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int textureSize, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& amount, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int& quality, /*<regrel ebp+0x20>*/ /*|0x4|*/ int& usable);
  static int __fastcall CGQuestInfo::GetQuestItemID(/*<register ecx>*/ /*|0x4|*/ char* type, /*<register edx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetNumQuests();
  static int __fastcall GetNumInProgress();
  static char* __fastcall GetQuestName(unsigned int);
  static char* __fastcall GetInProgressName(unsigned int);
  static int __fastcall GetQuestLevel(unsigned int);
  static int __fastcall GetInProgressLevel(unsigned int);
  static void __fastcall CGQuestInfo::ConfirmAcceptQuest(/*<register ecx>*/ /*|0x4|*/ int questID, /*<register edx>*/ /*|0x4|*/ char* questTitle, /*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& initiatedBy);
  static int __fastcall GetPendingConfirmQuest();
  static void __fastcall ClearQuests();
  static void __fastcall ClearItems();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SkillLineRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_raceMask;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_classMask;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_excludeRace;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_excludeClass;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_categoryID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_skillType;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_minCharLevel;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_maxRank;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_abandonable;
  /*<thisrel this+0x28>*/ /*|0x20|*/ char* m_displayName_lang[8];
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_displayName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SkillLineRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SkillLineRec::SkillLineRec();
  void __thiscall SkillLineRec::~SkillLineRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SkillLineRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class ItemClassRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_classID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_subclassMapID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0xc>*/ /*|0x20|*/ char* m_className_lang[8];
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_className_flag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemClassRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemClassRec::ItemClassRec();
  void __thiscall ItemClassRec::~ItemClassRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemClassRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x34>

class ItemSubClassRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_classID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_subClassID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_prerequisiteProficiency;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_postrequisiteProficiency;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_displayFlags;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_weaponParrySeq;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_weaponReadySeq;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_weaponAttackSeq;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_WeaponSwingSize;
  /*<thisrel this+0x28>*/ /*|0x20|*/ char* m_displayName_lang[8];
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_displayName_flag;
  /*<thisrel this+0x4c>*/ /*|0x20|*/ char* m_verboseName_lang[8];
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int m_verboseName_flag;
  /*<thisrel this+0x70>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ItemSubClassRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ItemSubClassRec::ItemSubClassRec();
  void __thiscall ItemSubClassRec::~ItemSubClassRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ItemSubClassRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x74>

class SpellFocusObjectRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellFocusObjectRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellFocusObjectRec::SpellFocusObjectRec();
  void __thiscall SpellFocusObjectRec::~SpellFocusObjectRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellFocusObjectRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CGTradeSkillInfo {

  // static data ------------------------------------
  static /*<rva 0x9e60fc>*/ /*|0x4|*/ int m_skillLine;
  static /*<rva 0x9e6100>*/ /*|0x4|*/ int m_currentSelection;
  static /*<rva 0x9e6104>*/ /*|0x4|*/ unsigned int m_itemsPending;
  static /*<rva 0x9e6108>*/ /*|0x4|*/ unsigned int m_numSkills;
  static /*<rva 0x9e610c>*/ /*|0x4|*/ unsigned int m_numSubClasses;
  static /*<rva 0x9e6110>*/ /*|0x4|*/ unsigned int m_filteredSkills;
  static /*<rva 0x44b9e8>*/ /*|0x4|*/ int m_subClassFilter;
  static /*<rva 0x44b9ec>*/ /*|0x4|*/ int m_invTypeFilter;
  static /*<rva 0x44b9f0>*/ /*|0x4|*/ int m_collapseFilter;
  static /*<rva 0x9e6078>*/ /*|0x14|*/ class TSGrowableArray<TradeSkillInfo *> m_skills;
  static /*<rva 0x9e60ac>*/ /*|0x14|*/ class TSGrowableArray<TradeSkillSubClassInfo *> m_subClasses;
  static /*<rva 0x9e6114>*/ /*|0x4|*/ int m_availableSlots;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGTradeSkillInfo::EnterWorld();
  static void __fastcall CGTradeSkillInfo::LeaveWorld();
  static void __fastcall CGTradeSkillInfo::ShutdownGame();
  static void __fastcall CGTradeSkillInfo::Close();
  static void __fastcall CGTradeSkillInfo::ClearItemCallbacks();
  static void __fastcall DecrementPendingItem();
  static void __fastcall CGTradeSkillInfo::SetSelection(/*<register ecx>*/ /*|0x4|*/ int index);
  static int __fastcall CGTradeSkillInfo::GetSelectionIndex();
  static int __fastcall GetSkillLine();
  static int __fastcall GetNumTradeSkills();
  static struct TradeSkillInfo* __fastcall GetTradeSkillInfo(unsigned int);
  static void __fastcall CGTradeSkillInfo::SetSkillLine(/*<register ecx>*/ /*|0x4|*/ int id);
  static void __fastcall CGTradeSkillInfo::RefreshList(/*<register ecx>*/ /*|0x4|*/ int resetFilters);
  static unsigned int __fastcall GetNumSubClasses();
  static struct TradeSkillSubClassInfo* __fastcall GetSubClass(unsigned int);
  static int __fastcall CGTradeSkillInfo::GetSubClassIndexFromSkill(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall CGTradeSkillInfo::IsCollpasedHeader(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetSubClassFilter();
  static int __fastcall GetInvTypeFilter();
  static int __fastcall GetCollapseFilter();
  static int __fastcall GetAvailableSlots();
  static void __fastcall CGTradeSkillInfo::SetSubClassFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGTradeSkillInfo::SetInvTypeFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGTradeSkillInfo::SetCollapseFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGTradeSkillInfo::FilterAndSortSkills();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SkillLineAbilityRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_skillLine;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_spell;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_raceMask;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_classMask;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_excludeRace;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_excludeClass;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_minSkillLineRank;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_supercededBySpell;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_trivialSkillLineRankHigh;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_trivialSkillLineRankLow;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_abandonable;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SkillLineAbilityRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SkillLineAbilityRec::SkillLineAbilityRec();
  void __thiscall SkillLineAbilityRec::~SkillLineAbilityRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SkillLineAbilityRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class CGMerchantInfo {

  // static data ------------------------------------
  static /*<rva 0x9e6060>*/ /*|0x8|*/ unsigned __int64 m_merchant;
  static /*<rva 0x9e5210>*/ /*|0xe00|*/ struct VendorItem m_items[128];
  static /*<rva 0x9e6068>*/ /*|0x4|*/ int m_itemCount;
  static /*<rva 0x9e606c>*/ /*|0x4|*/ unsigned int m_callbackCount;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGMerchantInfo::EnterWorld();
  static void __fastcall CGMerchantInfo::LeaveWorld();
  static void __fastcall CGMerchantInfo::SetMerchant(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 merchantGUID, /*<register ecx>*/ /*|0x4|*/ struct VendorItem* items, /*<register edx>*/ /*|0x4|*/ int count);
  static unsigned __int64 __fastcall GetMerchant();
  static void __fastcall CGMerchantInfo::CloseMerchant();
  static void __fastcall CGMerchantInfo::UpdateItemQuantity(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 vendor, /*<register ecx>*/ /*|0x4|*/ unsigned long muid, /*<register edx>*/ /*|0x4|*/ int newQuantity);
  static int __fastcall GetNumItems();
  static struct VendorItem* __fastcall GetItem(int);
  static class ItemStats* __fastcall CGMerchantInfo::GetItemStats(/*<register ecx>*/ /*|0x4|*/ unsigned int itemID);
  static void __fastcall CGMerchantInfo::DecrementCallbackCount();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class FriendList {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x640|*/ class FriendList::Friend m_friends[50];
  /*<thisrel this+0x640>*/ /*|0x4|*/ unsigned int m_friendNamesPending;
  /*<thisrel this+0x648>*/ /*|0x8|*/ unsigned __int64 m_selectedFriend;
  /*<thisrel this+0x650>*/ /*|0xc8|*/ unsigned __int64 m_ignore[25];
  /*<thisrel this+0x718>*/ /*|0x4|*/ unsigned int m_ignoreNamesPending;
  /*<thisrel this+0x720>*/ /*|0x8|*/ unsigned __int64 m_selectedIgnore;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall FriendList::RegisterScriptFunctions();
  static void __fastcall FriendList::UnregisterScriptFunctions();
  static void __fastcall FriendList::Initialize();
  static void __fastcall FriendList::Destroy();

  // non-virtual functions --------------------------
  void __thiscall FriendList::FriendList();
  void __thiscall FriendList::~FriendList();
  void __thiscall FriendList::AddFriends(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall FriendList::SetConnected(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char connected);
  void __thiscall FriendList::ShowFriends();
  void __thiscall FriendList::AddFriend(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::RemoveFriend(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall FriendList::RemoveFriend(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall FriendList::RemoveFriend(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::SortFriends();
  unsigned int __thiscall FriendList::GetNumFriends();
  class FriendList::Friend* __thiscall FriendList::GetFriend(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall FriendList::SetFriendSelectionIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  int __thiscall FriendList::GetFriendSelectionIndex();
  void __thiscall FriendList::SortIgnore();
  unsigned int __thiscall FriendList::GetNumIgnores();
  unsigned __int64 __thiscall FriendList::GetIgnore(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall FriendList::IsIgnored(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall FriendList::SetIgnoreSelectionIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  int __thiscall FriendList::GetIgnoreSelectionIndex();
  void __thiscall FriendList::HandleStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum FRIEND_RESULT res, /*<regrel ebp+0xc>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CDataStore* msg);
  int __thiscall FriendList::Added(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall FriendList::Removed(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall FriendList::SetName(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::DecrementPendingFriendName();
  void __thiscall FriendList::DecrementPendingIgnoreName();
  void __thiscall FriendList::SendWho(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  void __thiscall FriendList::AddOrDelIgnore(/*<regrel ebx+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::AddIgnore(/*<regrel ebx+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::DelIgnore(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void __thiscall FriendList::DelIgnore(/*<regrel ebx+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall FriendList::IgnoreList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall FriendList::IgnoreAdded(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ int sort);
  void __thiscall FriendList::IgnoreRemoved(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x728>

class CGTradeInfo {

  // static data ------------------------------------
  static /*<rva 0x9e51e8>*/ /*|0x8|*/ unsigned __int64 m_tradingPlayer;
  static /*<rva 0x9e51f0>*/ /*|0x4|*/ int m_playerAccepted;
  static /*<rva 0x9e51f4>*/ /*|0x4|*/ int m_targetAccepted;
  static /*<rva 0x9e5188>*/ /*|0x40|*/ unsigned __int64 m_playerItems[8];
  static /*<rva 0x9e50c0>*/ /*|0x40|*/ unsigned __int64 m_playerItemBag[8];
  static /*<rva 0x9e5084>*/ /*|0x8|*/ unsigned char m_playerItemSlot[8];
  static /*<rva 0x9e505c>*/ /*|0x20|*/ int m_targetItems[8];
  static /*<rva 0x9e51c8>*/ /*|0x20|*/ int m_targetItemCount[8];
  static /*<rva 0x9e5094>*/ /*|0x20|*/ int m_targetItemEnchantment[8];
  static /*<rva 0x9e5130>*/ /*|0x40|*/ unsigned __int64 m_targetItemCreator[8];
  static /*<rva 0x44b568>*/ /*|0x4|*/ int m_playerEnchantSlot;
  static /*<rva 0x44b56c>*/ /*|0x4|*/ int m_targetEnchantSlot;
  static /*<rva 0x9e51f8>*/ /*|0x4|*/ unsigned int m_playerMoney;
  static /*<rva 0x9e51fc>*/ /*|0x4|*/ unsigned int m_targetMoney;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGTradeInfo::EnterWorld();
  static void __fastcall CGTradeInfo::LeaveWorld();
  static void __fastcall CGTradeInfo::HandleTradeMessage(/*<register ecx>*/ /*|0x4|*/ enum TRADE_STATUS status, /*<register edx>*/ /*|0x4|*/ enum BAG_RESULT bagResult, /*<regrel ebp+0x8>*/ /*|0x4|*/ int myFailure, /*<regrel ebp+0xc>*/ /*|0x4|*/ int itemID);
  static void __fastcall CGTradeInfo::PlayerAccept(/*<register ecx>*/ /*|0x4|*/ int accept);
  static void __fastcall CGTradeInfo::TargetAccept(/*<register ecx>*/ /*|0x4|*/ int accept);
  static void __fastcall ClearAccept();
  static void __fastcall CGTradeInfo::Update(/*<register ecx>*/ /*|0x4|*/ struct TradeItemData* items);
  static void __fastcall CGTradeInfo::SetTradePartner(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 partner);
  static unsigned __int64 __fastcall GetTradePartner();
  static int __fastcall CGTradeInfo::SetPlayerItem(/*<register ecx>*/ /*|0x4|*/ int index, /*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 bag, /*<register dl>*/ /*|0x1|*/ unsigned char slot);
  static unsigned __int64 __fastcall GetPlayerTradeSlot(int);
  static void __fastcall GetPlayerItemInfo(int, unsigned __int64&, unsigned __int64&, unsigned char&);
  static int __fastcall GetTargetTradeItem(int);
  static int __fastcall GetTargetTradeItemCount(int);
  static int __fastcall GetTargetTradeItemEnachantment(int);
  static unsigned __int64 __fastcall GetTargetTradeItemCreator(int);
  static void __fastcall CGTradeInfo::RemovePlayerItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGTradeInfo::UpdatePlayerItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static int __fastcall GetPlayerEnchantSlot();
  static int __fastcall GetTargetEnchantSlot();
  static void __fastcall CGTradeInfo::UnlockTradeItems();
  static enum GAME_ERROR_TYPE __fastcall CGTradeInfo::GetGameError(/*<register ecx>*/ /*|0x4|*/ enum BAG_RESULT bagResult, /*<register edx>*/ /*|0x4|*/ int myFailure);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGContainerInfo {

  // static data ------------------------------------
  static /*<rva 0x9e4fc0>*/ /*|0x50|*/ unsigned __int64 m_containers[10];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGContainerInfo::EnterWorld();
  static void __fastcall CGContainerInfo::LeaveWorld();
  static void __fastcall CGContainerInfo::UpdateContainers();
  static void __fastcall CGContainerInfo::UpdateContents(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGContainerInfo::UpdateCooldowns();
  static unsigned __int64 __fastcall GetContainer(int);
  static void __fastcall CGContainerInfo::OpenContainer(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 container);
  static void __fastcall CGContainerInfo::UpdateItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class BankBagSlotPricesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_Cost;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall BankBagSlotPricesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall BankBagSlotPricesRec::BankBagSlotPricesRec();
  void __thiscall BankBagSlotPricesRec::~BankBagSlotPricesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall BankBagSlotPricesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CGBankInfo {

  // static data ------------------------------------
  static /*<rva 0x9e4fa0>*/ /*|0x8|*/ unsigned __int64 m_unit;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGBankInfo::EnterWorld();
  static void __fastcall CGBankInfo::LeaveWorld();
  static void __fastcall CGBankInfo::OpenBank(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static void __fastcall CGBankInfo::CloseBank();
  static void __fastcall CGBankInfo::OnCloseBank();
  static void __fastcall CGBankInfo::PickupItem(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ int isBag, /*<regrel ebp+0x8>*/ /*|0x4|*/ int slotIsButtonID);
  static void __fastcall CGBankInfo::SplitItem(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ int split);
  static unsigned __int64 __fastcall GetBanker();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SpellIconRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_textureFilename;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellIconRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellIconRec::SpellIconRec();
  void __thiscall SpellIconRec::~SpellIconRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellIconRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CGCraftInfo {

  // static data ------------------------------------
  static /*<rva 0x9e4f2c>*/ /*|0x4|*/ enum SPELL_CAST_UI_TYPE m_craftType;
  static /*<rva 0x9e4f30>*/ /*|0x4|*/ int m_currentSelection;
  static /*<rva 0x9e4f34>*/ /*|0x4|*/ unsigned int m_numSkills;
  static /*<rva 0x9e4f38>*/ /*|0x4|*/ unsigned int m_numSkillLines;
  static /*<rva 0x9e4f3c>*/ /*|0x4|*/ unsigned int m_filteredSkills;
  static /*<rva 0x44ac38>*/ /*|0x4|*/ int m_collapseFilter;
  static /*<rva 0x9e4ee0>*/ /*|0x14|*/ class TSGrowableArray<CraftInfo *> m_skills;
  static /*<rva 0x9e4ef4>*/ /*|0x14|*/ class TSGrowableArray<CraftSkillLineInfo *> m_skillLines;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGCraftInfo::EnterWorld();
  static void __fastcall CGCraftInfo::ShutdownGame();
  static void __fastcall CGCraftInfo::Close();
  static void __fastcall CGCraftInfo::SetSelection(/*<register ecx>*/ /*|0x4|*/ int index);
  static int __fastcall CGCraftInfo::GetSelectionIndex();
  static enum SPELL_CAST_UI_TYPE __fastcall GetCraftType();
  static int __fastcall GetNumCrafts();
  static struct CraftInfo* __fastcall GetCraftInfo(unsigned int);
  static unsigned int __fastcall GetNumSkillLines();
  static struct CraftSkillLineInfo* __fastcall GetSkillLine(unsigned int);
  static int __fastcall CGCraftInfo::GetSkillLineIndexFromCraft(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGCraftInfo::SetCraftType(/*<register ecx>*/ /*|0x4|*/ enum SPELL_CAST_UI_TYPE type);
  static void __fastcall CGCraftInfo::RefreshList();
  static int __fastcall CGCraftInfo::IsCollpasedHeader(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetCollapseFilter();
  static void __fastcall CGCraftInfo::SetCollapseFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGCraftInfo::FilterAndSortSkills();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class FactionRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_reputationIndex;
  /*<thisrel this+0x8>*/ /*|0x10|*/ int m_reputationRaceMask[4];
  /*<thisrel this+0x18>*/ /*|0x10|*/ int m_reputationClassMask[4];
  /*<thisrel this+0x28>*/ /*|0x10|*/ int m_reputationBase[4];
  /*<thisrel this+0x38>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall FactionRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall FactionRec::FactionRec();
  void __thiscall FactionRec::~FactionRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall FactionRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x5c>

class CGReputationInfo {

  // static data ------------------------------------
  static /*<rva 0x9e4ea0>*/ /*|0x4|*/ unsigned int m_numFactions;
  static /*<rva 0x9e4b00>*/ /*|0x40|*/ unsigned char m_factionFlags[64];
  static /*<rva 0x9e4c60>*/ /*|0x100|*/ int m_factionBase[64];
  static /*<rva 0x9e49f8>*/ /*|0x100|*/ int m_factionStandings[64];
  static /*<rva 0x9e4da0>*/ /*|0x100|*/ int m_factionMap[64];
  static /*<rva 0x9e4b50>*/ /*|0x100|*/ int m_factionSorting[64];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGReputationInfo::EnterWorld();
  static void __fastcall CGReputationInfo::LeaveWorld();
  static void __fastcall CGReputationInfo::ShutdownGame();
  static int __fastcall CGReputationInfo::FactionToIndex(/*<register ecx>*/ /*|0x4|*/ int faction);
  static int __fastcall CGReputationInfo::IndexToFaction(/*<register ecx>*/ /*|0x4|*/ int index);
  static void __fastcall CGReputationInfo::OnInitializeFactions(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static void __fastcall CGReputationInfo::OnSetFactionVisible(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static void __fastcall CGReputationInfo::OnSetFactionStanding(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static unsigned int __fastcall GetNumFactions();
  static int __fastcall CGReputationInfo::GetFactionFromSortIndex(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGReputationInfo::SetFactionFlags(/*<register ecx>*/ /*|0x4|*/ int factionIndex, /*<register dl>*/ /*|0x1|*/ unsigned char flags);
  static void __fastcall CGReputationInfo::SetAtWar(/*<register ecx>*/ /*|0x4|*/ int faction, /*<register dl>*/ /*|0x1|*/ unsigned char state);
  static unsigned char __fastcall CGReputationInfo::IsAtWar(/*<register ecx>*/ /*|0x4|*/ int faction);
  static unsigned char __fastcall IsVisible(int);
  static void __fastcall CGReputationInfo::SetFactionStanding(/*<register ecx>*/ /*|0x4|*/ int factionIndex, /*<register edx>*/ /*|0x4|*/ int standing);
  static int __fastcall CGReputationInfo::GetFactionStanding(/*<register ecx>*/ /*|0x4|*/ int faction);
  static enum UNIT_REACTION __fastcall CGReputationInfo::GetFactionStandingReaction(/*<register ecx>*/ /*|0x4|*/ int faction);
  static void __fastcall CGReputationInfo::SortFactions();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGTabardCreationFrame {

  // static data ------------------------------------
  static /*<rva 0x9e49b0>*/ /*|0x8|*/ unsigned __int64 m_vendor;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGTabardCreationFrame::EnterWorld();
  static void __fastcall CGTabardCreationFrame::LeaveWorld();
  static void __fastcall CGTabardCreationFrame::Open(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& vendor);
  static void __fastcall CGTabardCreationFrame::Close();
  static void __fastcall ClearVendor();
  static unsigned __int64 __fastcall GetVendor();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGGuildRegistrar {

  // static data ------------------------------------
  static /*<rva 0x9e4980>*/ /*|0x8|*/ unsigned __int64 m_registrar;
  static /*<rva 0x9e491c>*/ /*|0x14|*/ struct PetitionVendorItem m_petition;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGGuildRegistrar::EnterWorld();
  static void __fastcall CGGuildRegistrar::LeaveWorld();
  static void __fastcall CGGuildRegistrar::SetRegistrar(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 registrar, /*<register ecx>*/ /*|0x4|*/ struct PetitionVendorItem* petition);
  static unsigned __int64 __fastcall GetRegistrar();
  static void __fastcall CGGuildRegistrar::CloseRegistrar();
  static unsigned int __fastcall CGGuildRegistrar::GetGuildCharterCost();
  static void __fastcall CGGuildRegistrar::BuyGuildCharter(/*<register ecx>*/ /*|0x4|*/ char* guildName);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGPetitionInfo {

  // static data ------------------------------------
  static /*<rva 0x9e48f8>*/ /*|0x8|*/ unsigned __int64 m_petitionGUID;
  static /*<rva 0x9e4900>*/ /*|0x4|*/ int m_petitionID;
  static /*<rva 0x9e48a4>*/ /*|0x14|*/ class TSGrowableArray<PetitionSignerInfo> m_signatures;
  static /*<rva 0x9e4904>*/ /*|0x4|*/ unsigned int m_numSignatures;
  static /*<rva 0x9e4908>*/ /*|0x4|*/ unsigned int m_pendingNames;
  static /*<rva 0x9e490c>*/ /*|0x4|*/ class CGPetition* m_petition;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGPetitionInfo::EnterWorld();
  static void __fastcall CGPetitionInfo::LeaveWorld();
  static void __fastcall CGPetitionInfo::SetPetition(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 petition, /*<register ecx>*/ /*|0x4|*/ int petitionID);
  static unsigned __int64 __fastcall GetPetition();
  static void __fastcall CGPetitionInfo::SetSignatures(/*<register cl>*/ /*|0x1|*/ unsigned char count, /*<register edx>*/ /*|0x4|*/ unsigned __int64* signers, /*<regrel ebp+0x8>*/ /*|0x4|*/ int* choices);
  static unsigned int __fastcall GetNumSignatures();
  static struct PetitionSignerInfo* __fastcall GetSignature(unsigned int);
  static void __fastcall CGPetitionInfo::DecrementPendingName();
  static void __fastcall CGPetitionInfo::SetPetitionStats(/*<register ecx>*/ /*|0x4|*/ int id);
  static class CGPetition* __fastcall GetPetitionStats();
  static void __fastcall CGPetitionInfo::ClearSignatures();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGUIBindings {

  // static data ------------------------------------
  static /*<rva 0x9e487c>*/ /*|0x4|*/ class CGUIBindings* s_bindings;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_numCommands;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numHiddenCommands;
  /*<thisrel this+0x8>*/ /*|0x2c|*/ class TSHashTable<KEYBINDING,HASHKEY_STRI> m_bindings;
  /*<thisrel this+0x34>*/ /*|0x2c|*/ class TSHashTable<KEYCOMMAND,HASHKEY_STRI> m_commands;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CGUIBindings* __fastcall CGUIBindings::Initialize(/*<register ecx>*/ /*|0x4|*/ char* commandsFile, /*<register edx>*/ /*|0x4|*/ class CStatus* status);
  static void __fastcall CGUIBindings::Shutdown();
  static void __fastcall CGUIBindings::LoadBindings(/*<register ecx>*/ /*|0x4|*/ int useDefault);
  static void __fastcall CGUIBindings::SaveBindings();
  static class CGUIBindings* __fastcall GetActive();
  static char* __fastcall CGUIBindings::KeyEventToString(/*<register ecx>*/ /*|0x4|*/ class CKeyEvent& evt, /*<register edx>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x8>*/ /*|0x4|*/ int maxLen);
  static char* __fastcall CGUIBindings::MouseEventToString(/*<register ecx>*/ /*|0x4|*/ class CMouseEvent& evt, /*<register edx>*/ /*|0x4|*/ char* string, /*<regrel ebp+0x8>*/ /*|0x4|*/ int maxLen);
  static int __fastcall CGUIBindings::AddMetaPrefix(/*<register ecx>*/ /*|0x4|*/ unsigned int metaKeyState, /*<register edx>*/ /*|0x4|*/ char*& string, /*<regrel ebp+0x8>*/ /*|0x4|*/ int& maxLen);

  // non-virtual functions --------------------------
  void __thiscall CGUIBindings(class CGUIBindings&);
  void __thiscall CGUIBindings::CGUIBindings();
  void __thiscall CGUIBindings::~CGUIBindings();
  int __thiscall CGUIBindings::Load(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* commandsFile, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CStatus* status);
  int __thiscall CGUIBindings::Bind(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* keystring, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* command);
  int __thiscall CGUIBindings::ExecKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* keystring, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ int down);
  int __thiscall CGUIBindings::ExecCommand(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* command, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ int down);
  int __thiscall GetNumCommands();
  int __thiscall GetNumHiddenCommands();
  void __thiscall CGUIBindings::GetCommand(/*<regrel ebp+0x8>*/ /*|0x4|*/ int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ char*& command);
  void __thiscall CGUIBindings::GetHiddenCommand(/*<regrel ebp+0x8>*/ /*|0x4|*/ int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ char*& command);
  char* __thiscall CGUIBindings::GetCommandKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* command, /*<regrel ebp+0xc>*/ /*|0x4|*/ int keyindex);
  unsigned int __thiscall CGUIBindings::GetNumCommandKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* command);
  char* __thiscall CGUIBindings::GetCommandAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* keystring);
  void __thiscall CGUIBindings::AdjustCommandKeyIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* command, /*<regrel ebp+0xc>*/ /*|0x4|*/ int index);
  void __thiscall ClearBindings();
  class CGUIBindings& __thiscall operator=(class CGUIBindings&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x60>

class CGUIBindingsStatus : class CStatus  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CStatus
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGUIBindingsStatus(class CGUIBindingsStatus&);
  void __thiscall CGUIBindingsStatus();
  class CGUIBindingsStatus& __thiscall operator=(class CGUIBindingsStatus&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x14>*/ void __cdecl CGUIBindingsStatus::Add(/*<regrel ebp+0xc>*/ /*|0x4|*/ int __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* format, /*<regrel ebp-0x200>*/ /*|0x200|*/ char buffer[512]);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGUIBindingsStatus();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class ChrProficiencyRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x40|*/ int m_proficiency_minLevel[16];
  /*<thisrel this+0x44>*/ /*|0x40|*/ int m_proficiency_acquireMethod[16];
  /*<thisrel this+0x84>*/ /*|0x40|*/ int m_proficiency_itemClass[16];
  /*<thisrel this+0xc4>*/ /*|0x40|*/ int m_proficiency_itemSubClassMask[16];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall ChrProficiencyRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall ChrProficiencyRec::ChrProficiencyRec();
  void __thiscall ChrProficiencyRec::~ChrProficiencyRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall ChrProficiencyRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x104>

class PaperDollItemFrameRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* m_ItemButtonName;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_SlotIcon;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_SlotNumber;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall PaperDollItemFrameRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall PaperDollItemFrameRec::PaperDollItemFrameRec();
  void __thiscall PaperDollItemFrameRec::~PaperDollItemFrameRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall PaperDollItemFrameRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class CGCharacterInfo {

  // static data ------------------------------------
  static /*<rva 0x9e2c20>*/ /*|0x1b9c|*/ struct SkillInfo m_skillInfoList[93];
  static /*<rva 0x9e47f8>*/ /*|0x4|*/ unsigned int m_profOffset;
  static /*<rva 0x9e47fc>*/ /*|0x4|*/ unsigned int m_specialOffset;
  static /*<rva 0x9e4800>*/ /*|0x4|*/ unsigned int m_racialOffset;
  static /*<rva 0x9e4804>*/ /*|0x4|*/ unsigned int m_secondaryOffset;
  static /*<rva 0x9e4808>*/ /*|0x4|*/ unsigned int m_numSkills;
  static /*<rva 0x0>*/ /*|0x4|*/ class CGCharacterModelBase* m_paperDoll;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGCharacterInfo::InitializeGame();
  static void __fastcall CGCharacterInfo::ShutdownGame();
  static void __fastcall CGCharacterInfo::EnterWorld();
  static void __fastcall CGCharacterInfo::LeaveWorld();
  static void __fastcall CGCharacterInfo::PickupItem(/*<register ecx>*/ /*|0x4|*/ int slot);
  static void __fastcall CGCharacterInfo::UseItem(/*<register ecx>*/ /*|0x4|*/ int slot);
  static void __fastcall CGCharacterInfo::PickupBag(/*<register ecx>*/ /*|0x4|*/ int slot);
  static int __fastcall CGCharacterInfo::PutItemInBag(/*<register ecx>*/ /*|0x4|*/ int slot);
  static int __fastcall CGCharacterInfo::PutItemInBackpack();
  static void __fastcall CGCharacterInfo::UpdateAllSkillLines();
  static void __fastcall CGCharacterInfo::UpdateItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 item);
  static int __fastcall GetNumClassSkills();
  static int __fastcall GetNumSpecSkills();
  static int __fastcall GetNumRacialSkills();
  static int __fastcall GetNumSecondarySkills();
  static int __fastcall GetNumProficiencies();
  static int __fastcall CGCharacterInfo::GetSkillOffsetFromString(/*<register ecx>*/ /*|0x4|*/ char* string, /*<register edx>*/ /*|0x4|*/ int& offset);
  static struct SkillInfo* __fastcall CGCharacterInfo::GetSkillInfoByIndex(/*<register ecx>*/ /*|0x4|*/ int index);
  static void __fastcall CGCharacterInfo::InstallMirrorHandlers(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 player);
  static void __fastcall CGCharacterInfo::RemoveMirrorHandlers(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 player);
  static void __fastcall CGCharacterInfo::OrderSkillLines();
  static unsigned int __fastcall CGCharacterInfo::OrderProficiencies(/*<register ecx>*/ /*|0x4|*/ unsigned int offset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SpellShapeshiftFormRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_bonusActionBar;
  /*<thisrel this+0x8>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellShapeshiftFormRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellShapeshiftFormRec::SpellShapeshiftFormRec();
  void __thiscall SpellShapeshiftFormRec::~SpellShapeshiftFormRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellShapeshiftFormRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class CGActionBar {

  // static data ------------------------------------
  static /*<rva 0x9e27d0>*/ /*|0x1e0|*/ int m_slotActions[120];
  static /*<rva 0x9e2bf8>*/ /*|0x4|*/ unsigned int m_bonusPage;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGActionBar::InitializeGame();
  static void __fastcall CGActionBar::EnterWorld();
  static void __fastcall CGActionBar::ShutdownGame();
  static void __fastcall CGActionBar::ShowGrid();
  static void __fastcall CGActionBar::HideGrid();
  static void __fastcall CGActionBar::SlotChanged(/*<register ecx>*/ /*|0x4|*/ int id);
  static int __fastcall IsSpell(int);
  static int __fastcall IsItem(int);
  static int __fastcall CGActionBar::IsAttackAction(/*<register ecx>*/ /*|0x4|*/ int id);
  static int __fastcall GetSpell(int);
  static int __fastcall GetItem(int);
  static void __fastcall CGActionBar::UpdateBonusBar();
  static unsigned int __fastcall GetBonusBarOffset();
  static void __fastcall CGActionBar::UpdateSelection();
  static void __fastcall CGActionBar::UpdateItem(/*<register ecx>*/ /*|0x4|*/ int entryID);
  static void __fastcall CGActionBar::UpdateUsable();
  static void __fastcall CGActionBar::UpdateCooldowns();
  static void __fastcall CGActionBar::SetAction(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ int action);
  static void __fastcall CGActionBar::AddAction(/*<register ecx>*/ /*|0x4|*/ int action);
  static void __fastcall CGActionBar::RemoveAction(/*<register ecx>*/ /*|0x4|*/ int id);
  static void __fastcall CGActionBar::RemoveSpell(/*<register ecx>*/ /*|0x4|*/ int spellID);
  static void __fastcall CGActionBar::ReplaceSpell(/*<register ecx>*/ /*|0x4|*/ int oldSpell, /*<register edx>*/ /*|0x4|*/ int newSpell);
  static void __fastcall CGActionBar::UseAction(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ int checkCursor);
  static void __fastcall CGActionBar::PickupAction(/*<register ecx>*/ /*|0x4|*/ int id);
  static void __fastcall CGActionBar::PutActionInSlot(/*<register ecx>*/ /*|0x4|*/ int id);
  static int __fastcall HasAction(int);
  static int __fastcall CGActionBar::IsUsableAction(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ int& noMana);
  static int __fastcall CGActionBar::IsCurrentAction(/*<register ecx>*/ /*|0x4|*/ int id);
  static int __fastcall CGActionBar::IsToggledAction(/*<register ecx>*/ /*|0x4|*/ int id);
  static char* __fastcall CGActionBar::GetAttackTexture();
  static char* __fastcall CGActionBar::GetTexture(/*<register ecx>*/ /*|0x4|*/ int id);
  static int __fastcall CGActionBar::GetCount(/*<register ecx>*/ /*|0x4|*/ int id);
  static void __fastcall CGActionBar::GetCooldown(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ unsigned long& startTime, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& duration, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& enable);
  static void __fastcall CGActionBar::PrecacheButtonArt(/*<register ecx>*/ /*|0x4|*/ int id);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGBuffDesc {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_auraIndex;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_auraSpell;
  /*<thisrel this+0x8>*/ /*|0x1|*/ unsigned char m_auraFlags;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_untilCancelled;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGBuffDesc::CGBuffDesc();
  void __thiscall ~CGBuffDesc();
  void __thiscall CGBuffDesc::SetAuraIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGPlayer_C* player);
  int __thiscall GetAuraIndex();
  int __thiscall GetAuraSpell();
  unsigned char __thiscall GetAuraFlags();
  int __thiscall GetUntilCancelled();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class CGBuffBar {

  // static data ------------------------------------
  static /*<rva 0x9e23f8>*/ /*|0x380|*/ class CGBuffDesc m_buffs[56];
  static /*<rva 0x9e2300>*/ /*|0xe0|*/ unsigned int m_durations[56];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGBuffBar::InitializeGame();
  static void __fastcall CGBuffBar::ShutdownGame();
  static void __fastcall CGBuffBar::EnterWorld();
  static void __fastcall CGBuffBar::LeaveWorld();
  static void __fastcall CGBuffBar::UpdateBuffs();
  static void __fastcall CGBuffBar::UpdateDuration(/*<register cl>*/ /*|0x1|*/ unsigned char slot, /*<register edx>*/ /*|0x4|*/ unsigned int duration);
  static class CGBuffDesc* __fastcall CGBuffBar::GetBuffByFilter(/*<register ecx>*/ /*|0x4|*/ int index, /*<register edx>*/ /*|0x4|*/ unsigned int filter, /*<regrel ebp+0x8>*/ /*|0x4|*/ int& buffIndex);
  static class CGBuffDesc* __fastcall CGBuffBar::GetBuffByIndex(/*<register ecx>*/ /*|0x4|*/ int buffIndex);
  static unsigned int __fastcall CGBuffBar::GetBuffTimeLeftByIndex(/*<register ecx>*/ /*|0x4|*/ int buffIndex);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGItemText {

  // static data ------------------------------------
  static /*<rva 0x9e2090>*/ /*|0x8|*/ unsigned __int64 m_itemGUID;
  static /*<rva 0x9e20b0>*/ /*|0x4|*/ unsigned int m_currentPage;
  static /*<rva 0x9e20b4>*/ /*|0x14|*/ class TSGrowableArray<int> m_pages;
  static /*<rva 0x9e20d8>*/ /*|0x200|*/ char m_text[512];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGItemText::InitializeGame();
  static void __fastcall CGItemText::ShutdownGame();
  static void __fastcall CGItemText::EnterWorld();
  static void __fastcall CGItemText::LeaveWorld();
  static void __fastcall CGItemText::SetItem(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& item, /*<register edx>*/ /*|0x4|*/ int callback);
  static unsigned __int64& __fastcall GetItem();
  static void __fastcall CGItemText::DisplayText(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& item, /*<register edx>*/ /*|0x4|*/ int useSkill);
  static unsigned int __fastcall GetCurrentPage();
  static char* __fastcall GetText();
  static int __fastcall HasNextPage();
  static void __fastcall CGItemText::PrevPage();
  static void __fastcall CGItemText::NextPage();
  static void __fastcall CGItemText::ItemTextCallback(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x8>*/ /*|0x4|*/ void* arg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char granted);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TaxiNodesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_ContinentID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_X;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_Y;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_Z;
  /*<thisrel this+0x14>*/ /*|0x20|*/ char* m_Name_lang[8];
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_Name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TaxiNodesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TaxiNodesRec::TaxiNodesRec();
  void __thiscall TaxiNodesRec::~TaxiNodesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TaxiNodesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x38>

class CGTaxiMap {

  // static data ------------------------------------
  static /*<rva 0x9e1d28>*/ /*|0x8|*/ unsigned __int64 m_unit;
  static /*<rva 0x9e2060>*/ /*|0x4|*/ unsigned int m_startNode;
  static /*<rva 0x9e1d30>*/ /*|0x304|*/ class TSCArray<TaxiNode,64> m_nodes;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGTaxiMap::InitializeGame();
  static void __fastcall CGTaxiMap::ShutdownGame();
  static void __fastcall CGTaxiMap::EnterWorld();
  static void __fastcall CGTaxiMap::LeaveWorld();
  static void __fastcall CGTaxiMap::SetupMap(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& unit, /*<register edx>*/ /*|0x4|*/ unsigned int node, /*<regrel ebp+0x8>*/ /*|0x8|*/ __int64 destNodes, /*<regrel ebp+0x10>*/ /*|0x8|*/ __int64 knownNodes, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::CRect& visibleArea);
  static void __fastcall CGTaxiMap::CloseMap();
  static unsigned __int64 __fastcall GetTaxiVendor();
  static unsigned int __fastcall NumTaxiNodes();
  static char* __fastcall CGTaxiMap::TaxiNodeName(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static char* __fastcall CGTaxiMap::TaxiNodeType(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static void __fastcall CGTaxiMap::TaxiNodePosition(/*<register ecx>*/ /*|0x4|*/ unsigned int slot, /*<register edx>*/ /*|0x4|*/ float& x, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& y);
  static unsigned int __fastcall CGTaxiMap::TaxiNodeCost(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static void __fastcall CGTaxiMap::TakeTaxiNode(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static void __fastcall BuildTaxiNodeLines(__int64, class NTempest::CRect&);
  static void __fastcall CGTaxiMap::RegisterScriptFunctions();
  static void __fastcall CGTaxiMap::UnregisterScriptFunctions();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class QuestCache {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_questId;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_questType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_questLevel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_questSortID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_questInfoID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_rewardNextQuest;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_rewardMoney;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_startItem;
  /*<thisrel this+0x20>*/ /*|0x10|*/ int m_rewardItems[4];
  /*<thisrel this+0x30>*/ /*|0x10|*/ int m_rewardAmount[4];
  /*<thisrel this+0x40>*/ /*|0x18|*/ int m_rewardChoiceItems[6];
  /*<thisrel this+0x58>*/ /*|0x18|*/ int m_rewardChoiceAmount[6];
  /*<thisrel this+0x70>*/ /*|0x4|*/ int m_POIContinent;
  /*<thisrel this+0x74>*/ /*|0x4|*/ float m_POIx;
  /*<thisrel this+0x78>*/ /*|0x4|*/ float m_POIy;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ int m_POIPriority;
  /*<thisrel this+0x80>*/ /*|0x80|*/ char m_logTitle[128];
  /*<thisrel this+0x100>*/ /*|0x400|*/ char m_logDescription[1024];
  /*<thisrel this+0x500>*/ /*|0x400|*/ char m_questDescription[1024];
  /*<thisrel this+0x900>*/ /*|0x80|*/ char m_areaDescription[128];
  /*<thisrel this+0x980>*/ /*|0x10|*/ int m_monsterToKill[4];
  /*<thisrel this+0x990>*/ /*|0x10|*/ int m_monsterToKillQuantity[4];
  /*<thisrel this+0x9a0>*/ /*|0x10|*/ int m_itemToGet[4];
  /*<thisrel this+0x9b0>*/ /*|0x10|*/ int m_itemToGetQuantity[4];
  /*<thisrel this+0x9c0>*/ /*|0x100|*/ char m_getDescription[4][64];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall QuestCache::QuestCache();
  void __thiscall QuestCache::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall QuestCache::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  class QuestCache& __thiscall operator=(class QuestCache&);

  // virtual functions ------------------------------
};
// <size 0xac0>

class QuestSortRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_SortName_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_SortName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall QuestSortRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall QuestSortRec::QuestSortRec();
  void __thiscall QuestSortRec::~QuestSortRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall QuestSortRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class QuestInfoRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_InfoName_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_InfoName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall QuestInfoRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall QuestInfoRec::QuestInfoRec();
  void __thiscall QuestInfoRec::~QuestInfoRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall QuestInfoRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CGQuestLog {

  // static data ------------------------------------
  static /*<rva 0x9e1ccc>*/ /*|0x4|*/ unsigned int m_numQuests;
  static /*<rva 0x9e1cd0>*/ /*|0x4|*/ unsigned int m_numSortTypes;
  static /*<rva 0x9e1cd4>*/ /*|0x4|*/ int m_selectedQuest;
  static /*<rva 0x9e1cd8>*/ /*|0x4|*/ int m_abandonQuest;
  static /*<rva 0x9e1b10>*/ /*|0x180|*/ struct QuestLogInfo m_quests[32];
  static /*<rva 0x9e19b8>*/ /*|0x40|*/ int m_sortTypes[16];
  static /*<rva 0x9e1cdc>*/ /*|0x4|*/ int m_collapseFilter;
  static /*<rva 0x9e1ce0>*/ /*|0x4|*/ int m_numShownQuests;
  static /*<rva 0x9e1ce4>*/ /*|0x4|*/ int m_expiredQuests;
  static /*<rva 0x9e1ce8>*/ /*|0x4|*/ int m_serverTimeOffset;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGQuestLog::InitializeGame();
  static void __fastcall CGQuestLog::ShutdownGame();
  static void __fastcall CGQuestLog::EnterWorld();
  static void __fastcall CGQuestLog::LeaveWorld();
  static void __fastcall CGQuestLog::Update(/*<register ecx>*/ /*|0x4|*/ int resetFilters);
  static void __fastcall CGQuestLog::FilterAndSortQuests();
  static void __fastcall CGQuestLog::UpdateServerTime(/*<register ecx>*/ /*|0x4|*/ int serverTime);
  static int __fastcall GetServerTimeOffset();
  static void __fastcall CGQuestLog::SetSelectedQuest(/*<register ecx>*/ /*|0x4|*/ int index);
  static void __fastcall CGQuestLog::UpdateSelection();
  static int __fastcall CGQuestLog::GetSelectionIndex();
  static int __fastcall GetSelectedQuestID();
  static int __fastcall CGQuestLog::GetSelectedLogEntry();
  static void __fastcall SetAbandonQuest();
  static int __fastcall GetAbandonQuest();
  static char* __fastcall CGQuestLog::GetAbandonQuestName();
  static void __fastcall CGQuestLog::AbandonSelectedQuest();
  static void __fastcall CGQuestLog::ClearQuest(/*<register ecx>*/ /*|0x4|*/ int id);
  static void __fastcall CGQuestLog::AbandonQuest(/*<register ecx>*/ /*|0x4|*/ int index);
  static unsigned int __fastcall GetNumEntries();
  static unsigned int __fastcall GetNumShownEntries();
  static char* __fastcall CGQuestLog::GetQuestName(/*<register ecx>*/ /*|0x4|*/ int index);
  static char* __fastcall CGQuestLog::GetQuestTag(/*<register ecx>*/ /*|0x4|*/ int index);
  static int __fastcall CGQuestLog::GetQuestLevel(/*<register ecx>*/ /*|0x4|*/ int index);
  static int __fastcall IsQuestHeader(int);
  static int __fastcall CGQuestLog::GetQuestItemID(/*<register ecx>*/ /*|0x4|*/ char* type, /*<register edx>*/ /*|0x4|*/ int index);
  static int __fastcall GetQuestLogEntry(int);
  static int __fastcall CGQuestLog::GetQuestSortIndex(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetQuestSortID(unsigned int);
  static int __fastcall IsSortHeaderCollapsed(unsigned int);
  static void __fastcall CGQuestLog::CollapseHeader(/*<register ecx>*/ /*|0x4|*/ unsigned int index, /*<register edx>*/ /*|0x4|*/ int collapse);
  static int __fastcall CGQuestLog::IsSelectedQuestExpired();
  static int __fastcall CGQuestLog::IsQuestExpired(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGQuestLog::SetQuestExpired(/*<register ecx>*/ /*|0x4|*/ unsigned int index);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SpellCastTimesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_base;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_perLevel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_minimum;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellCastTimesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellCastTimesRec::SpellCastTimesRec();
  void __thiscall SpellCastTimesRec::~SpellCastTimesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellCastTimesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class SpellItemEnchantmentRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0xc|*/ int m_effect[3];
  /*<thisrel this+0x10>*/ /*|0xc|*/ int m_effectPointsMin[3];
  /*<thisrel this+0x1c>*/ /*|0xc|*/ int m_effectPointsMax[3];
  /*<thisrel this+0x28>*/ /*|0xc|*/ int m_effectArg[3];
  /*<thisrel this+0x34>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x54>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_itemVisual;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellItemEnchantmentRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellItemEnchantmentRec::SpellItemEnchantmentRec();
  void __thiscall SpellItemEnchantmentRec::~SpellItemEnchantmentRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellItemEnchantmentRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x5c>

class CGClassTrainer {

  // static data ------------------------------------
  static /*<rva 0x9e1870>*/ /*|0x8|*/ unsigned __int64 m_trainer;
  static /*<rva 0x9e1878>*/ /*|0x4|*/ enum TRAINER_TYPE m_trainerType;
  static /*<rva 0x9e187c>*/ /*|0x4|*/ int m_currentSelection;
  static /*<rva 0x9e1880>*/ /*|0x4|*/ unsigned int m_numServices;
  static /*<rva 0x9e1884>*/ /*|0x4|*/ unsigned int m_numSkillLines;
  static /*<rva 0x9e1888>*/ /*|0x4|*/ unsigned int m_filteredServices;
  static /*<rva 0x9e188c>*/ /*|0x4|*/ int m_serviceTypeFilter;
  static /*<rva 0x9e1890>*/ /*|0x4|*/ int m_skillLineFilter;
  static /*<rva 0x9e1894>*/ /*|0x4|*/ int m_collapseFilter;
  static /*<rva 0x9e1608>*/ /*|0x14|*/ class TSGrowableArray<TrainerServiceInfo *> m_services;
  static /*<rva 0x9e1820>*/ /*|0x14|*/ class TSGrowableArray<TrainerSkillLineInfo *> m_skillLines;
  static /*<rva 0x9e1620>*/ /*|0x200|*/ char m_greetingText[512];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGClassTrainer::InitializeGame();
  static void __fastcall CGClassTrainer::ShutdownGame();
  static void __fastcall CGClassTrainer::EnterWorld();
  static void __fastcall CGClassTrainer::LeaveWorld();
  static void __fastcall CGClassTrainer::SetSelection(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall CGClassTrainer::GetSelectionIndex();
  static void __fastcall CGClassTrainer::SetTrainer(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 trainerGUID, /*<register ecx>*/ /*|0x4|*/ enum TRAINER_TYPE type);
  static unsigned __int64 __fastcall GetTrainer();
  static enum TRAINER_TYPE __fastcall GetTrainerType();
  static void __fastcall CGClassTrainer::AddServices(/*<register ecx>*/ /*|0x4|*/ unsigned int count, /*<register edx>*/ /*|0x4|*/ int* spellID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* moneyCost, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char** pointCost, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* reqLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int* reqSkillLine, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int* reqSkillRank, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned int* reqSkillStep, /*<regrel ebp+0x20>*/ /*|0x4|*/ int** reqAbility, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned char* usable, /*<regrel ebp+0x28>*/ /*|0x4|*/ char* greeting);
  static void __fastcall CGClassTrainer::RefreshList();
  static struct TrainerServiceInfo* __fastcall CGClassTrainer::GetService(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetNumServices();
  static char* __fastcall CGClassTrainer::GetServiceName(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static char* __fastcall CGClassTrainer::GetServiceSubtext(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static char* __fastcall CGClassTrainer::GetServiceType(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static unsigned int __fastcall GetNumSkillLines();
  static int __fastcall GetSkillLine(unsigned int);
  static int __fastcall CGClassTrainer::GetSkillLineIndexFromService(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall CGClassTrainer::IsCollpasedHeader(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static int __fastcall GetServiceTypeFilter();
  static int __fastcall GetSkillLineFilter();
  static int __fastcall GetCollapseFilter();
  static void __fastcall CGClassTrainer::SetServiceTypeFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGClassTrainer::SetSkillLineFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGClassTrainer::SetCollapseFilter(/*<register ecx>*/ /*|0x4|*/ int filter);
  static void __fastcall CGClassTrainer::FilterAndSortServices();
  static char* __fastcall GetGreetingText();

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class PetAction {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_action;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall PetAction(unsigned int);
  void __thiscall SetAction(unsigned int);
  unsigned int __thiscall GetAction();
  void __thiscall SetActionTypeAndID(unsigned int, unsigned int);
  unsigned int __thiscall GetActionTypeAndID();
  void __thiscall SetActionType(unsigned int);
  int __thiscall GetActionType();
  void __thiscall SetActionID(unsigned int);
  int __thiscall GetActionID();
  void __thiscall SetAutocastAllowed(unsigned char);
  unsigned char __thiscall GetAutocastAllowed();
  void __thiscall SetAutocastEnabled(unsigned char);
  unsigned char __thiscall GetAutocastEnabled();
  unsigned char __thiscall operator==(class PetAction&);
  unsigned int& __thiscall operator unsigned int &();
  unsigned int& __thiscall operator const unsigned int &();
  void __thiscall __dflt_ctor_closure();

  // virtual functions ------------------------------
};
// <size 0x4>

class CGPetInfo {

  // static data ------------------------------------
  static /*<rva 0x9e15d0>*/ /*|0x8|*/ unsigned __int64 m_pet;
  static /*<rva 0x9e1598>*/ /*|0x4|*/ unsigned int m_petMode;
  static /*<rva 0x9e1568>*/ /*|0x28|*/ class PetAction m_actions[10];
  static /*<rva 0x9e15d8>*/ /*|0x4|*/ unsigned long m_expirationTime;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGPetInfo::InitializeGame();
  static void __fastcall CGPetInfo::EnterWorld();
  static void __fastcall CGPetInfo::LeaveWorld();
  static void __fastcall CGPetInfo::ShutdownGame();
  static void __fastcall CGPetInfo::SetPet(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 pet, /*<register ecx>*/ /*|0x4|*/ unsigned long expirationTime);
  static unsigned __int64 __fastcall GetPet();
  static unsigned long __fastcall GetExpirationTime();
  static void __fastcall CGPetInfo::SetPetModeAndOrders(/*<register ecx>*/ /*|0x4|*/ unsigned int petMode);
  static void __fastcall CGPetInfo::SetPetMode(/*<register ecx>*/ /*|0x4|*/ unsigned int mode);
  static unsigned int __fastcall GetPetMode();
  static void __fastcall CGPetInfo::SetPetOrders(/*<register ecx>*/ /*|0x4|*/ unsigned int orders);
  static unsigned int __fastcall GetPetOrders();
  static void __fastcall CGPetInfo::ClearActions();
  static void __fastcall CGPetInfo::SetAction(/*<register ecx>*/ /*|0x4|*/ unsigned int index, /*<register edx>*/ /*|0x4|*/ class PetAction& action, /*<regrel ebp+0x8>*/ /*|0x4|*/ int save);
  static class PetAction* __fastcall GetAction(unsigned int);
  static void __fastcall CGPetInfo::ToggleAutocast(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall PutSpellInSlot(int, unsigned int);
  static void __fastcall CGPetInfo::PutActionInSlot(/*<register ecx>*/ /*|0x4|*/ class PetAction& action, /*<register edx>*/ /*|0x4|*/ unsigned int slot);
  static void __fastcall PutActionInSlot(unsigned int, unsigned int);
  static char* __fastcall CGPetInfo::GetModeToken(/*<register ecx>*/ /*|0x4|*/ unsigned int id);
  static char* __fastcall CGPetInfo::GetOrdersToken(/*<register ecx>*/ /*|0x4|*/ unsigned int id);
  static void __fastcall CGPetInfo::ShowGrid();
  static void __fastcall CGPetInfo::HideGrid();
  static void __fastcall CGPetInfo::UpdateCooldowns();
  static void __fastcall CGPetInfo::SendPetAction(/*<register ecx>*/ /*|0x4|*/ class PetAction& action, /*<register edx>*/ /*|0x4|*/ unsigned __int64& target);
  static void __fastcall CGPetInfo::PetPassiveMode();
  static void __fastcall CGPetInfo::PetDefensiveMode();
  static void __fastcall CGPetInfo::PetAggressiveMode();
  static void __fastcall CGPetInfo::PetWait();
  static void __fastcall CGPetInfo::PetFollow();
  static void __fastcall CGPetInfo::PetAttackTarget(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& targetGUID);
  static void __fastcall CGPetInfo::PetDismiss();
  static void __fastcall CGPetInfo::PetAbandon();
  static void __fastcall CGPetInfo::PetRename(/*<register ecx>*/ /*|0x4|*/ char* newName);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class AreaPOIRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_importance;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_icon;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_factionID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_x;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_y;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_z;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_continentID;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x24>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AreaPOIRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AreaPOIRec::AreaPOIRec();
  void __thiscall AreaPOIRec::~AreaPOIRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AreaPOIRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x48>

class WorldMapAreaRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_mapID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_areaID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_leftBoundary;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_rightBoundary;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_topBoundary;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_bottomBoundary;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ char* m_areaName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WorldMapAreaRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WorldMapAreaRec::WorldMapAreaRec();
  void __thiscall WorldMapAreaRec::~WorldMapAreaRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WorldMapAreaRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class WorldMapContinentRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_mapID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_leftBoundary;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_rightBoundary;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_topBoundary;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_bottomBoundary;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_continentOffsetX;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_continentOffsetY;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WorldMapContinentRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WorldMapContinentRec::WorldMapContinentRec();
  void __thiscall WorldMapContinentRec::~WorldMapContinentRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WorldMapContinentRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class WorldSafeLocsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_continent;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_locX;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_locY;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_locZ;
  /*<thisrel this+0x14>*/ /*|0x20|*/ char* m_AreaName_lang[8];
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_AreaName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WorldSafeLocsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WorldSafeLocsRec::WorldSafeLocsRec();
  void __thiscall WorldSafeLocsRec::~WorldSafeLocsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WorldSafeLocsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x38>

class CGWorldMap {

  // static data ------------------------------------
  static /*<rva 0x4477e0>*/ /*|0x4|*/ int m_currentContinent;
  static /*<rva 0x4477e4>*/ /*|0x4|*/ int m_currentZone;
  static /*<rva 0x9e1540>*/ /*|0x4|*/ unsigned int m_numLandmarks;
  static /*<rva 0x9e14f4>*/ /*|0x10|*/ class TSFixedArray<WorldMapContinentInfo> m_continents;
  static /*<rva 0x9e14cc>*/ /*|0x10|*/ class TSFixedArray<WorldMapLandmarkInfo> m_landmarks;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGWorldMap::InitializeGame();
  static void __fastcall CGWorldMap::EnterWorld();
  static void __fastcall CGWorldMap::LeaveWorld();
  static void __fastcall CGWorldMap::ShutdownGame();
  static int __fastcall GetCurrentContinent();
  static int __fastcall GetCurrentZone();
  static unsigned int __fastcall GetNumContinents();
  static char* __fastcall CGWorldMap::GetContinentName(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static unsigned int __fastcall GetNumZones(unsigned int);
  static char* __fastcall CGWorldMap::GetZoneName(/*<register ecx>*/ /*|0x4|*/ unsigned int continent, /*<register edx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGWorldMap::SetMapToCurrentZone();
  static void __fastcall CGWorldMap::SetMap(/*<register ecx>*/ /*|0x4|*/ int continent, /*<register edx>*/ /*|0x4|*/ int zone);
  static char* __fastcall CGWorldMap::GetMapFilename();
  static unsigned int __fastcall CGWorldMap::GetMapHeight();
  static void __fastcall CGWorldMap::ProcessClick(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static int __fastcall CGWorldMap::GetMapHighlight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static void __fastcall CGWorldMap::RunNearestPortLoc(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static void __fastcall CGWorldMap::GetPOIPosition(/*<register ecx>*/ /*|0x4|*/ class AreaPOIRec* rec, /*<register edx>*/ /*|0x4|*/ float& x, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& y);
  static void __fastcall CGWorldMap::GetPortLocPosition(/*<register ecx>*/ /*|0x4|*/ class WorldSafeLocsRec* rec, /*<register edx>*/ /*|0x4|*/ float& x, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& y);
  static void __fastcall CGWorldMap::GetPlayerPosition(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ float& x, /*<register edx>*/ /*|0x4|*/ float& y);
  static void __fastcall CGWorldMap::GetBindPosition(/*<register ecx>*/ /*|0x4|*/ float& x, /*<register edx>*/ /*|0x4|*/ float& y);
  static unsigned int __fastcall GetNumLandmarks();
  static struct WorldMapLandmarkInfo* __fastcall GetLandmarkInfo(unsigned int);
  static int __fastcall CGWorldMap::GetMapAreaFromPos(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static int __fastcall CGWorldMap::GetWorldLocFromPos(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y, /*<register ecx>*/ /*|0x4|*/ class NTempest::C2Vector& loc, /*<register edx>*/ /*|0x4|*/ int& mapID);
  static void __fastcall CGWorldMap::GetWorldPosition(/*<register ecx>*/ /*|0x4|*/ class NTempest::C2Vector& pos, /*<register edx>*/ /*|0x4|*/ int mapID, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& y);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGDuelInfo {

  // static data ------------------------------------
  static /*<rva 0x9e14b8>*/ /*|0x8|*/ unsigned __int64 m_arbiter;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGDuelInfo::InitializeGame();
  static void __fastcall CGDuelInfo::ShutdownGame();
  static void __fastcall CGDuelInfo::StartDuel();
  static void __fastcall CGDuelInfo::AcceptDuel();
  static void __fastcall CGDuelInfo::CancelDuel();
  static int __fastcall CGDuelInfo::OnDuelRequested(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  static int __fastcall CGDuelInfo::OnDuelOutOfBounds(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  static int __fastcall CGDuelInfo::OnDuelInBounds(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  static int __fastcall CGDuelInfo::OnDuelComplete(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  static int __fastcall CGDuelInfo::OnDuelWinner(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class FBitField : class TSBitField<TSFixedArray<unsigned int> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBitField<TSFixedArray<unsigned int> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall FBitField(class FBitField&);
  void __thiscall FBitField(unsigned int);
  class FBitField& __thiscall operator=(class FBitField&);
  void __thiscall ~FBitField();
  void __thiscall __dflt_ctor_closure();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CGTutorial {

  // static data ------------------------------------
  static /*<rva 0x9e1428>*/ /*|0x14|*/ class FBitField m_tutorialFlags;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGTutorial::InitializeGame();
  static void __fastcall CGTutorial::ShutdownGame();
  static void __fastcall CGTutorial::TriggerTutorial(/*<register ecx>*/ /*|0x4|*/ enum TUTORIAL tutorial);
  static void __fastcall CGTutorial::ClearTutorials();
  static void __fastcall CGTutorial::ResetTutorials();
  static int __fastcall CGTutorial::OnTutorialFlags(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGLootInfo {

  // static data ------------------------------------
  static /*<rva 0x9e1318>*/ /*|0x8|*/ unsigned __int64 m_object;
  static /*<rva 0x9e13c8>*/ /*|0x4|*/ int m_coins;
  static /*<rva 0x9e11c0>*/ /*|0x140|*/ struct CGLootSlot m_loot[16];
  static /*<rva 0x9e13e0>*/ /*|0x4|*/ enum LOOT_ACQUIRE m_lootType;
  static /*<rva 0x9e1314>*/ /*|0x4|*/ unsigned int m_itemsPending;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGLootInfo::InitializeGame();
  static void __fastcall CGLootInfo::ShutdownGame();
  static void __fastcall CGLootInfo::EnterWorld();
  static void __fastcall CGLootInfo::LeaveWorld();
  static void __fastcall CGLootInfo::SetObject(/*<register ecx>*/ /*|0x4|*/ class CGObject_C* object, /*<register edx>*/ /*|0x4|*/ int coins, /*<regrel ebp+0x8>*/ /*|0x4|*/ enum LOOT_ACQUIRE lootType);
  static unsigned __int64& __fastcall GetObject();
  static void __fastcall CGLootInfo::ClearSlot(/*<register cl>*/ /*|0x1|*/ unsigned char _slot);
  static int __fastcall CGLootInfo::GetNumItems();
  static int __fastcall CGLootInfo::GetLootItem(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static int __fastcall CGLootInfo::GetLootQuantity(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static int __fastcall CGLootInfo::GetLootQuality(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static int __fastcall CGLootInfo::GetLootCoin(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static char* __fastcall CGLootInfo::GetLootSlotTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static char* __fastcall CGLootInfo::GetLootSlotText(/*<register ecx>*/ /*|0x4|*/ unsigned int slot);
  static char* __fastcall CGLootInfo::GetLootSlotLink(/*<register ecx>*/ /*|0x4|*/ unsigned int slot, /*<register edx>*/ /*|0x4|*/ char* link, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int size);
  static enum LOOT_ACQUIRE __fastcall CGLootInfo::GetLootType();
  static int __fastcall CGLootInfo::LootSlot(/*<register ecx>*/ /*|0x4|*/ unsigned int slot, /*<register edx>*/ /*|0x4|*/ int force);
  static void __fastcall CGLootInfo::CoinsCleared();
  static int __fastcall CGLootInfo::HasLoot();
  static void __fastcall CGLootInfo::LootButtonItemStatsCallback(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x8>*/ /*|0x4|*/ void* arg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char granted);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class LanguagesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall LanguagesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall LanguagesRec::LanguagesRec();
  void __thiscall LanguagesRec::~LanguagesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall LanguagesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CGSpellBook {

  // static data ------------------------------------
  static /*<rva 0x9dff68>*/ /*|0x14|*/ class FBitField m_knownSpellBits;
  static /*<rva 0x9def68>*/ /*|0x1000|*/ int m_knownSpells[1024];
  static /*<rva 0x9dff90>*/ /*|0x1000|*/ int m_knownAbilities[1024];
  static /*<rva 0x9ddf10>*/ /*|0x1000|*/ int m_petSpells[1024];
  static /*<rva 0x9e0fa0>*/ /*|0x4|*/ int m_duelSpell;
  static /*<rva 0x9def10>*/ /*|0x4|*/ int m_stuckSpell;
  static /*<rva 0x9def18>*/ /*|0x10|*/ class TSFixedArray<int> m_languageSpells;
  static /*<rva 0x9def28>*/ /*|0x14|*/ class TSGrowableArray<int> m_unlockSpells;
  static /*<rva 0x9dff7c>*/ /*|0x14|*/ class TSGrowableArray<int> m_shapeshiftForms;
  static /*<rva 0x446e08>*/ /*|0x4|*/ int m_selectedSlot;
  static /*<rva 0x9e0fb8>*/ /*|0x4|*/ enum UI_SPELL_TYPE m_selectedType;
  static /*<rva 0x9e0fbc>*/ /*|0x4|*/ int m_knowsSpells;
  static /*<rva 0x9e0fc0>*/ /*|0x4|*/ int m_knowsPetSpells;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGSpellBook::InitializeGame();
  static void __fastcall CGSpellBook::ShutdownGame();
  static void __fastcall CGSpellBook::ClearSpells();
  static unsigned char __fastcall IsSpellKnown(int);
  static unsigned char __fastcall IsPetSpellKnown(int);
  static void __fastcall CGSpellBook::AddKnownSpell(/*<register ecx>*/ /*|0x4|*/ int spellID, /*<register edx>*/ /*|0x4|*/ int slot, /*<regrel ebp+0x8>*/ /*|0x4|*/ int learned);
  static void __fastcall CGSpellBook::DelKnownSpell(/*<register ecx>*/ /*|0x4|*/ int spellID);
  static void __fastcall CGSpellBook::ReplaceSpell(/*<register ecx>*/ /*|0x4|*/ int oldSpell, /*<register edx>*/ /*|0x4|*/ int newSpell);
  static void __fastcall CGSpellBook::ClearPetSpells();
  static void __fastcall CGSpellBook::AddPetSpell(/*<register ecx>*/ /*|0x4|*/ int spellID);
  static void __fastcall SetKnowsPetSpells();
  static void __fastcall CGSpellBook::UpdateSpells();
  static void __fastcall CGSpellBook::UpdateSelection();
  static void __fastcall CGSpellBook::UpdateCooldowns();
  static void __fastcall CGSpellBook::PickupSpell(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);
  static void __fastcall CGSpellBook::CastSpell(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);
  static int __fastcall GetSpell(unsigned int, enum UI_SPELL_TYPE);
  static int __fastcall GetDuelSpell();
  static int __fastcall GetStuckSpell();
  static int __fastcall GetLanguageSpell(unsigned int);
  static int __fastcall CGSpellBook::IsSelectedSlot(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);
  static int __fastcall CGSpellBook::IsToggledSpell(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);
  static class TSGrowableArray<int>& __fastcall GetUnlockSpells();
  static class TSGrowableArray<int>& __fastcall GetShapeshiftForms();
  static int __fastcall KnowsSpells();
  static int __fastcall KnowsPetSpells();
  static void __fastcall CGSpellBook::SetSpell(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0x8>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);
  static void __fastcall CGSpellBook::SendSpellSlot(/*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ enum UI_SPELL_TYPE type);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGPartyInfo {

  // static data ------------------------------------
  static /*<rva 0x9ddee0>*/ /*|0x8|*/ unsigned __int64 m_leader;
  static /*<rva 0x446c68>*/ /*|0x4|*/ int m_leaderIndex;
  static /*<rva 0x9ddda0>*/ /*|0x20|*/ unsigned __int64 m_members[4];
  static /*<rva 0x9ddde8>*/ /*|0xd0|*/ struct CGPartyInfo::RemoteStats m_remoteStats[4];
  static /*<rva 0x9ddee8>*/ /*|0x4|*/ enum LOOT_METHOD m_lootMethod;
  static /*<rva 0x9ddef0>*/ /*|0x8|*/ unsigned __int64 m_lootMaster;
  static /*<rva 0x9ddef8>*/ /*|0x4|*/ int m_lookingForGroup;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGPartyInfo::InitializeGame();
  static void __fastcall CGPartyInfo::EnterWorld();
  static void __fastcall CGPartyInfo::LeaveWorld();
  static void __fastcall CGPartyInfo::ShutdownGame();
  static int __fastcall InParty();
  static int __fastcall CGPartyInfo::IsMember(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static unsigned __int64 __fastcall CGPartyInfo::GetMemberByName(/*<register ecx>*/ /*|0x4|*/ char* name);
  static unsigned __int64 __fastcall GetLeader();
  static int __fastcall GetLeaderIndex();
  static unsigned __int64 __fastcall GetMember(unsigned int);
  static void __fastcall CGPartyInfo::SetLeader(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGPartyInfo::AddMember(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ int connected);
  static void __fastcall CGPartyInfo::EnableMember(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ int enable);
  static void __fastcall CGPartyInfo::RemoveAll();
  static void __fastcall CGPartyInfo::RemoveActivePlayer(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static unsigned int __fastcall CGPartyInfo::NumMembers();
  static void __fastcall OnNameCacheCallback();
  static void __fastcall CGPartyInfo::SetLootMethod(/*<register ecx>*/ /*|0x4|*/ enum LOOT_METHOD method, /*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 master);
  static enum LOOT_METHOD __fastcall GetLootMethod();
  static unsigned __int64 __fastcall GetMasterLooter();
  static struct CGPartyInfo::RemoteStats* __fastcall CGPartyInfo::GetRemoteStats(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static struct CGPartyInfo::RemoteStats* __fastcall GetRemoteStatsByIndex(int);
  static int __fastcall IsLookingForGroup();
  static void __fastcall CGPartyInfo::SetLookingForGroup(/*<register ecx>*/ /*|0x4|*/ int looking);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGCamera : class CSimpleCamera  {

  // static data ------------------------------------
  static /*<rva 0x44ed60>*/ /*|0x4|*/ int s_clipCamera;

  // non-static data --------------------------------
  /*<thisrel this+0x44>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x48>*/ /*|0x4|*/ struct HCAMERA__* m_modelCamera;
  /*<thisrel this+0x4c>*/ /*|0x30|*/ class NTempest::C34Matrix m_modelMatrix;
  /*<thisrel this+0x80>*/ /*|0x8|*/ unsigned __int64 m_target;
  /*<thisrel this+0x88>*/ /*|0x4|*/ float m_targetOffsetZ;
  /*<thisrel this+0x8c>*/ /*|0x4|*/ int m_flags;
  /*<thisrel this+0x90>*/ /*|0x8|*/ unsigned __int64 m_relativeTo;
  /*<thisrel this+0x98>*/ /*|0x3c|*/ struct CGCamera::__unnamed_107_ m_views[5];
  /*<thisrel this+0xd4>*/ /*|0x4|*/ float m_distance;
  /*<thisrel this+0xd8>*/ /*|0x4|*/ float m_yaw;
  /*<thisrel this+0xdc>*/ /*|0x4|*/ float m_pitch;
  /*<thisrel this+0xe0>*/ /*|0x4|*/ float m_roll;
  /*<thisrel this+0xe4>*/ /*|0x4|*/ float m_yawOffset;
  /*<thisrel this+0xe8>*/ /*|0x4|*/ float m_yawFreelookStart;
  /*<thisrel this+0xec>*/ /*|0x4|*/ unsigned long m_motionMask;
  /*<thisrel this+0xf0>*/ /*|0x18|*/ unsigned long m_motionStart[6];
  /*<thisrel this+0x108>*/ /*|0x18|*/ unsigned long m_motionStop[6];
  /*<thisrel this+0x120>*/ /*|0x18|*/ unsigned long m_motionTimeout[6];
  /*<thisrel this+0x138>*/ /*|0xc|*/ class NTempest::C3Vector m_lastTarget;
  /*<thisrel this+0x144>*/ /*|0x4|*/ float m_savedTargetZ;
  /*<thisrel this+0x148>*/ /*|0x4|*/ float m_lastFacing;
  /*<thisrel this+0x14c>*/ /*|0x4|*/ unsigned long m_lastDeltaZ;
  /*<thisrel this+0x150>*/ /*|0x4|*/ float m_smoothingAngle;
  /*<thisrel this+0x154>*/ /*|0x4|*/ unsigned long m_zoomSmoothingTimestamp;
  /*<thisrel this+0x158>*/ /*|0x4|*/ float m_zoomTime;
  /*<thisrel this+0x15c>*/ /*|0x4|*/ float m_desiredDistance;
  /*<thisrel this+0x160>*/ /*|0x4|*/ float m_previousDistance;
  /*<thisrel this+0x164>*/ /*|0x4|*/ unsigned long m_pitchSmoothingTimestamp;
  /*<thisrel this+0x168>*/ /*|0x4|*/ float m_pitchTime;
  /*<thisrel this+0x16c>*/ /*|0x4|*/ float m_desiredPitch;
  /*<thisrel this+0x170>*/ /*|0x4|*/ float m_previousPitch;
  /*<thisrel this+0x174>*/ /*|0x4|*/ unsigned long m_yawSmoothingTimestamp;
  /*<thisrel this+0x178>*/ /*|0x4|*/ float m_yawTime;
  /*<thisrel this+0x17c>*/ /*|0x4|*/ float m_desiredYaw;
  /*<thisrel this+0x180>*/ /*|0x4|*/ float m_previousYaw;
  /*<thisrel this+0x184>*/ /*|0x4|*/ int m_cycleDirection;
  /*<thisrel this+0x188>*/ /*|0x4|*/ unsigned int m_savedLiquid;
  /*<thisrel this+0x18c>*/ /*|0xc|*/ class TSList<CameraShake,TSGetLink<CameraShake> > m_shakes;

  // base classes -----------------------------------
  // baseclass class CSimpleCamera
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall CGCamera::CCommand_CameraClip(/*<register ecx>*/ /*|0x4|*/ char* command, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CGCamera::UpdateCallback(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ void* param);

  // non-virtual functions --------------------------
  void __thiscall CGCamera::SetSmoothingAngle(/*<regrel ebp+0x8>*/ /*|0x4|*/ float smoothingAngle, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ int quickly);
  void __thiscall CGCamera::ClampAngles();
  float __thiscall CGCamera::GetSmoothedHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ float z, /*<regrel ebp+0xc>*/ /*|0x4|*/ int moving);
  float __thiscall CGCamera::GetSmoothedYawAngle(/*<regrel ebp+0x8>*/ /*|0x4|*/ float yaw, /*<regrel ebp+0xc>*/ /*|0x4|*/ int moving);
  void __thiscall CGCamera::PerformTerrainTilt(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0xc>*/ /*|0xc|*/ class NTempest::C3Vector position, /*<regrel ebp+0x18>*/ /*|0x4|*/ float facing, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int moving, /*<regrel ebp+0x20>*/ /*|0x4|*/ int turning, /*<regrel ebp+0x24>*/ /*|0x4|*/ int updateOnly);
  float __thiscall CGCamera::GetCameraDistance(/*<regrel ebp+0x8>*/ /*|0x4|*/ float cameraDist, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& targetPosition);
  void __thiscall CGCamera::CalcThirdPerson(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::CalcFirstPerson(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::CalcModelCamera(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetTargetFadeValue(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char value);
  float __thiscall CGCamera::CollideCameraWithWorld(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& targetPosition);
  void __thiscall CGCamera::SetModeNormal();
  void __thiscall CGCamera::SetModeFreeLook();
  void __thiscall CGCamera::UpdateMotion(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredDistance(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredDistance, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredDistanceOverTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredDistance, /*<regrel ebp+0xc>*/ /*|0x4|*/ float motionTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredPitchAngle(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredAngle, /*<regrel ebp+0xc>*/ /*|0x4|*/ float delay, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredPitchAngleOverTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredAngle, /*<regrel ebp+0xc>*/ /*|0x4|*/ float motionTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredYawAngle(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredAngle, /*<regrel ebp+0xc>*/ /*|0x4|*/ float delay, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::SetDesiredYawAngleOverTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ float desiredAngle, /*<regrel ebp+0xc>*/ /*|0x4|*/ float motionTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::RunShakes();
  void __thiscall CGCamera::CheckUnderwater();
  int __thiscall CompletedAngle();
  void __thiscall SetViewFlags(int);
  int __thiscall CGCamera::FinishLoadingModel();
  int __thiscall CGCamera::FinishLoadingTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* target);
  class NTempest::C33Matrix __thiscall CGCamera::ParentToWorld();
  void __thiscall CGCamera(class CGCamera&);
  void __thiscall CGCamera::CGCamera();
  void __thiscall CGCamera::~CGCamera();
  int __thiscall CGCamera::SetModelCamera(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* modelFile, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& origin, /*<regrel ebp+0x10>*/ /*|0x4|*/ float facing, /*<regrel ebp+0x14>*/ /*|0x4|*/ int  (ModelCameraFinished*)(void*), /*<regrel ebp+0x18>*/ /*|0x4|*/ void* param);
  void __thiscall CGCamera::ResetModelCamera();
  void __thiscall CGCamera::ClearModelCamera();
  void __thiscall CGCamera::SetTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGObject_C* target);
  unsigned __int64& __thiscall GetTarget();
  void __thiscall CGCamera::SetPositionAndTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& target);
  void __thiscall CGCamera::SetPositionAndFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& facing);
  void __thiscall CGCamera::SetPositionAndTargetWithRoll(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& target, /*<regrel ebp+0x10>*/ /*|0x4|*/ float roll);
  class NTempest::C3Vector __thiscall Target();
  class NTempest::C3Vector __thiscall Facing();
  void __thiscall CGCamera::SetupWorldProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& projectionRect);
  void __thiscall CGCamera::AddShake(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shake, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGCamera::AddShake(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGCameraShakeType shakeType, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CGCameraDir direction, /*<regrel ebp+0x10>*/ /*|0x4|*/ float amplitude, /*<regrel ebp+0x14>*/ /*|0x4|*/ float frequency, /*<regrel ebp+0x18>*/ /*|0x4|*/ float duration, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float phase, /*<regrel ebp+0x20>*/ /*|0x4|*/ float coefficient);
  void __thiscall CGCamera::ToggleFreeLook();
  void __thiscall CGCamera::EnableFreeLook();
  void __thiscall CGCamera::DisableFreeLook(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sticky);
  void __thiscall CGCamera::UpdateFreeLookFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float dx, /*<regrel ebp+0xc>*/ /*|0x4|*/ float dy);
  void __thiscall CGCamera::SyncFreeLookFacing();
  void __thiscall CGCamera::CreateViewFromParams(/*<regrel ebp+0x8>*/ /*|0x4|*/ int view, /*<regrel ebp+0xc>*/ /*|0x4|*/ float dist, /*<regrel ebp+0x10>*/ /*|0x4|*/ float pitch, /*<regrel ebp+0x14>*/ /*|0x4|*/ float yaw);
  void __thiscall CGCamera::CreateViewFromCamera(/*<regrel ebp+0x8>*/ /*|0x4|*/ int view);
  void __thiscall CGCamera::SetView(/*<regrel ebp+0x8>*/ /*|0x4|*/ int newView);
  void __thiscall CGCamera::CycleView();
  void __thiscall CGCamera::NextView();
  void __thiscall CGCamera::PreviousView();
  void __thiscall CGCamera::ResetView(/*<regrel ebp+0x8>*/ /*|0x4|*/ int view);
  void __thiscall CGCamera::ZoomIn(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::ZoomOut(/*<regrel ebp+0x8>*/ /*|0x4|*/ float distance, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall CGCamera::StartMotion(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGCameraMotion move, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timeout);
  void __thiscall CGCamera::StopMotion(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGCameraMotion move, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timestamp);
  int __thiscall InFreeLookMode();
  int __thiscall GetView();
  void __thiscall CGCamera::MakeRelativeTo(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  class CGCamera& __thiscall operator=(class CGCamera&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGCamera::Forward();
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGCamera::Right();
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGCamera::Up();
};
// <size 0x198>

class LanguageWordsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_languageID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_word;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall LanguageWordsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall LanguageWordsRec::LanguageWordsRec();
  void __thiscall LanguageWordsRec::~LanguageWordsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall LanguageWordsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class EmotesTextRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_emoteID;
  /*<thisrel this+0xc>*/ /*|0x40|*/ int m_emoteText[16];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall EmotesTextRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall EmotesTextRec::EmotesTextRec();
  void __thiscall EmotesTextRec::~EmotesTextRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall EmotesTextRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class EmotesTextDataRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_text_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_text_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall EmotesTextDataRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall EmotesTextDataRec::EmotesTextDataRec();
  void __thiscall EmotesTextDataRec::~EmotesTextDataRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall EmotesTextDataRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class HASHKEY_LANGUAGE { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_languageID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_length;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_LANGUAGE(class HASHKEY_LANGUAGE&);
  void __thiscall HASHKEY_LANGUAGE(unsigned int, unsigned int);
  unsigned char __thiscall operator==(class HASHKEY_LANGUAGE&);
  class HASHKEY_LANGUAGE& __thiscall operator=(class HASHKEY_LANGUAGE&);
  void __thiscall __dflt_ctor_closure();

  // virtual functions ------------------------------
};
// <size 0x8>

class CGChat {

  // static data ------------------------------------
  static /*<rva 0x445f60>*/ /*|0x4|*/ int m_paused;
  static /*<rva 0x445f64>*/ /*|0x4|*/ int m_filterChat;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGChat::InitializeGame();
  static void __fastcall CGChat::ShutdownGame();
  static void __fastcall CGChat::EnterWorld();
  static void __fastcall CGChat::LeaveWorld();
  static void __fastcall CGChat::TranslateMessage(/*<register ecx>*/ /*|0x4|*/ unsigned int language, /*<register edx>*/ /*|0x4|*/ unsigned int skill, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* text, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* buffer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int size, /*<regrel ebp+0x14>*/ /*|0x4|*/ int passXML);
  static void __fastcall CGChat::AddChatMessage(/*<register ecx>*/ /*|0x4|*/ char* text, /*<register edx>*/ /*|0x4|*/ enum SLASH_COMMAND_ID type, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int language, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* channel, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* player2, /*<regrel ebp+0x18>*/ /*|0x4|*/ char* specialFlag);
  static void __fastcall CGChat::AddTextEmoteMessage(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& senderGUID, /*<register edx>*/ /*|0x4|*/ int textEmoteID, /*<regrel ebx+0x8>*/ /*|0x4|*/ char* target);
  static int __fastcall IsPaused();
  static void __fastcall CGChat::UpdateLanguages();
  static void __fastcall CGChat::AddChannel(/*<register ecx>*/ /*|0x4|*/ char* name);
  static void __fastcall CGChat::RemoveChannel(/*<register ecx>*/ /*|0x4|*/ char* name);
  static int __fastcall CGChat::GetChannelID(/*<register ecx>*/ /*|0x4|*/ char* name);
  static struct ChatChannel* __fastcall CGChat::GetChannel(/*<register ecx>*/ /*|0x4|*/ char* name);
  static char* __fastcall CGChat::GetChannelName(/*<register ecx>*/ /*|0x4|*/ int localID);
  static void __fastcall CGChat::ChannelNotify(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static char* __fastcall CGChat::GetChannelString(/*<register ecx>*/ /*|0x4|*/ char* commandString);
  static void __fastcall CGChat::QueueChatText(/*<register ecx>*/ /*|0x4|*/ int slashCmd, /*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register edx>*/ /*|0x4|*/ char* text, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int language, /*<regrel ebp+0x14>*/ /*|0x4|*/ int waitingForUI, /*<regrel ebp+0x18>*/ /*|0x4|*/ int parse, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* channel, /*<regrel ebp+0x20>*/ /*|0x8|*/ unsigned __int64 guid2, /*<regrel ebp+0x28>*/ /*|0x4|*/ char* specialFlag);
  static void __fastcall CGChat::QueueTextEmote(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& sender, /*<register edx>*/ /*|0x4|*/ int textEmoteID, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* target, /*<regrel ebp+0xc>*/ /*|0x4|*/ int waitingForUI);
  static void __fastcall CGChat::NameQueryCallback(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebx+0x8>*/ /*|0x4|*/ void* arg, /*<regrel ebx+0xc>*/ /*|0x1|*/ unsigned char granted);
  static void __fastcall CGChat::TextEmoteNameQueryCallback(/*<register ecx>*/ /*|0x4|*/ int id, /*<register edx>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebx+0x8>*/ /*|0x4|*/ void* arg, /*<regrel ebx+0xc>*/ /*|0x1|*/ unsigned char granted);
  static void __fastcall CGChat::GetPendingChatMessages();
  static int __fastcall CGChat::ChatHandler(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static int __fastcall CGChat::HandleTextEmote(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static void __fastcall CGChat::ChannelList(/*<register ecx>*/ /*|0x4|*/ class CDataStore* msg);
  static void __fastcall CGChat::DisplayPendingUserList(/*<register ecx>*/ /*|0x4|*/ struct ChatChannel* channel);
  static void __fastcall CGChat::CheckFlagChanged(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ class NameCache* nc, /*<register dl>*/ /*|0x1|*/ unsigned char oldFlags, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char newFlags, /*<regrel ebp+0x14>*/ /*|0x4|*/ char* channel, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char flagToCheck, /*<regrel ebp+0x1c>*/ /*|0x4|*/ char* setText, /*<regrel ebp+0x20>*/ /*|0x4|*/ char* unsetText);
  static void __fastcall CGChat::HandleFlagsChanged(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register cl>*/ /*|0x1|*/ unsigned char oldFlags, /*<register dl>*/ /*|0x1|*/ unsigned char newFlags, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* channel);
  static void __fastcall FilterChat(int);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGCursor {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x4>*/ /*|0x4|*/ enum CURSORITEMTYPE m_heldItem;
  /*<thisrel this+0x8>*/ /*|0x4|*/ enum CURSORANIMATIONS m_cursorMode;
  /*<thisrel this+0xc>*/ /*|0x4|*/ enum CURSORANIMATIONS m_mouseOver;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGCursor(class CGCursor&);
  void __thiscall CGCursor();
  void __thiscall CGCursor::~CGCursor();
  void __thiscall CGCursor::SetArt(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* art);
  void __thiscall CGCursor::Drop();
  void __thiscall CGCursor::Grab(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HMODEL__* model);
  struct HMODEL__* __thiscall GetModel();
  enum CURSORITEMTYPE __thiscall GetItemType();
  void __thiscall CGCursor::SetItemType(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CURSORITEMTYPE type);
  void __thiscall CGCursor::SetCursorAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CURSORANIMATIONS sequence);
  void __thiscall CGCursor::SetCursorMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CURSORANIMATIONS sequence);
  void __thiscall CGCursor::ResetCursor();
  class CGCursor& __thiscall operator=(class CGCursor&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class CinematicCameraRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_model;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_soundID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_originX;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_originY;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_originZ;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_originFacing;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CinematicCameraRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CinematicCameraRec::CinematicCameraRec();
  void __thiscall CinematicCameraRec::~CinematicCameraRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CinematicCameraRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CinematicSequencesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_soundID;
  /*<thisrel this+0x8>*/ /*|0x20|*/ int m_camera[8];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CinematicSequencesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CinematicSequencesRec::CinematicSequencesRec();
  void __thiscall CinematicSequencesRec::~CinematicSequencesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CinematicSequencesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CGGameUI {

  // static data ------------------------------------
  static /*<rva 0x9dbcc9>*/ /*|0x1|*/ unsigned char m_reloadUI;
  static /*<rva 0x9ddb28>*/ /*|0x4|*/ class CSimpleTop* m_simpleTop;
  static /*<rva 0x9dbccc>*/ /*|0x4|*/ char* m_zoneText;
  static /*<rva 0x9ddb60>*/ /*|0x4|*/ char* m_subZoneText;
  static /*<rva 0x9dd91c>*/ /*|0x4|*/ char* m_minimapZoneText;
  static /*<rva 0x9dbd04>*/ /*|0x4|*/ class CSimpleFrame* m_UISimpleParent;
  static /*<rva 0x9dbcb4>*/ /*|0x4|*/ class CGTooltip* m_gameTooltip;
  static /*<rva 0x9ddb78>*/ /*|0x4|*/ float m_interactMaxDist;
  static /*<rva 0x9ddb88>*/ /*|0x8|*/ unsigned __int64 m_interactTarget;
  static /*<rva 0x9ddb90>*/ /*|0x8|*/ unsigned __int64 m_lockedTarget;
  static /*<rva 0x9ddb98>*/ /*|0x8|*/ unsigned __int64 m_lastEnemyTarget;
  static /*<rva 0x9ddb80>*/ /*|0x8|*/ unsigned __int64 m_currentObjectTrack;
  static /*<rva 0x9dbcd8>*/ /*|0x4|*/ unsigned int m_stackSplit;
  static /*<rva 0x9ddb30>*/ /*|0x8|*/ unsigned __int64 m_cursorItem;
  static /*<rva 0x9dbcb8>*/ /*|0x8|*/ unsigned __int64 m_cursorItemContainer;
  static /*<rva 0x9dbcd4>*/ /*|0x4|*/ unsigned int m_cursorItemSlot;
  static /*<rva 0x9ddba0>*/ /*|0x4|*/ unsigned int m_cursorMoney;
  static /*<rva 0x9ddba4>*/ /*|0x4|*/ int m_cursorSpell;
  static /*<rva 0x9ddba8>*/ /*|0x4|*/ unsigned int m_cursorPetAction;
  static /*<rva 0x9dbce4>*/ /*|0x4|*/ unsigned int m_cursorVirtualID;
  static /*<rva 0x9dd8f0>*/ /*|0x4|*/ unsigned int m_cursorVirtualDisplay;
  static /*<rva 0x9dbce8>*/ /*|0x4|*/ unsigned int m_cursorVirtualSlot;
  static /*<rva 0x9dd918>*/ /*|0x4|*/ int m_cursorHasAction;
  static /*<rva 0x9dd8f8>*/ /*|0x4|*/ enum UICURSORTYPE m_cursorItemType;
  static /*<rva 0x9dbcc0>*/ /*|0x4|*/ int m_hasControl;
  static /*<rva 0x9dd928>*/ /*|0x200|*/ char s_lastErrorString[512];
  static /*<rva 0x9ddbac>*/ /*|0x4|*/ int m_screenWidth;
  static /*<rva 0x9ddb48>*/ /*|0x18|*/ struct CinematicData m_cinematic;
  static /*<rva 0x9ddbb0>*/ /*|0x4|*/ int m_areaID;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CGGameUI::InitializeGame();
  static void __fastcall CGGameUI::Initialize();
  static void __fastcall CGGameUI::EnterWorld();
  static void __fastcall CGGameUI::LeaveWorld();
  static void __fastcall CGGameUI::Shutdown();
  static void __fastcall CGGameUI::ShutdownGame();
  static void __fastcall CGGameUI::Reload();
  static void __fastcall CGGameUI::SysMsgDisplay(/*<register ecx>*/ /*|0x4|*/ char* msg, /*<register edx>*/ /*|0x4|*/ enum SYSMSG_TYPE severity);
  static int __fastcall CGGameUI::FilterMouseDown(/*<register ecx>*/ /*|0x4|*/ class CMouseEvent& evt);
  static int __fastcall CGGameUI::HandleMouseDown(/*<register ecx>*/ /*|0x4|*/ class CMouseEvent& evt);
  static int __fastcall CGGameUI::HandleMouseUp(/*<register ecx>*/ /*|0x4|*/ class CMouseEvent& evt);
  static int __fastcall CGGameUI::HandleTerrainClick(/*<register ecx>*/ /*|0x4|*/ struct CTerrainClickEvent& evt);
  static int __fastcall CGGameUI::HandleSpriteClick(/*<register ecx>*/ /*|0x4|*/ struct CSpriteClickEvent& evt);
  static int __fastcall CGGameUI::HandleWorldClick(/*<register ecx>*/ /*|0x4|*/ struct CWorldClickEvent& evt);
  static void __fastcall CGGameUI::HandleSpriteTrack(/*<register ecx>*/ /*|0x4|*/ struct CObjectTrackEvent& evt);
  static int __fastcall CGGameUI::HandleDisplaySizeChanged(/*<register ecx>*/ /*|0x4|*/ class CSizeEvent& evt);
  static void __fastcall CGGameUI::HandleScreenshot(/*<register ecx>*/ /*|0x4|*/ int success);
  static void __fastcall CGGameUI::CloseLoot(/*<register cl>*/ /*|0x1|*/ unsigned char send, /*<register dl>*/ /*|0x1|*/ unsigned char moving);
  static void __fastcall CGGameUI::OpenLoot(/*<register ecx>*/ /*|0x4|*/ class CGObject_C* object, /*<register edx>*/ /*|0x4|*/ int coins, /*<regrel ebx+0x8>*/ /*|0x4|*/ enum LOOT_ACQUIRE lootType);
  static void __fastcall CGGameUI::ClearLootSlot(/*<register cl>*/ /*|0x1|*/ unsigned char slot);
  static void __fastcall CGGameUI::OpenResurrectRequest(/*<register ecx>*/ /*|0x4|*/ char* inviter);
  static void __fastcall CGGameUI::OpenPartyInvite(/*<register ecx>*/ /*|0x4|*/ char* inviter);
  static void __fastcall CGGameUI::CancelPartyInvite();
  static void __fastcall CGGameUI::OpenGuildInvite(/*<register ecx>*/ /*|0x4|*/ char* inviter, /*<register edx>*/ /*|0x4|*/ char* guildName);
  static void __fastcall CGGameUI::CancelGuildInvite();
  static void __fastcall CGGameUI::ShowCursor();
  static void __fastcall CGGameUI::HideCursor();
  static void __fastcall CGGameUI::AddErrorMessage(/*<register ecx>*/ /*|0x4|*/ char* string, /*<register edx>*/ /*|0x4|*/ int error);
  static void __fastcall CGGameUI::SetInteractTarget(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& target, /*<regrel ebp+0x8>*/ /*|0x4|*/ float maxDist);
  static void __fastcall ClearInteractTarget();
  static void __fastcall CGGameUI::ClearInteractTarget(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& target);
  static void __fastcall CGGameUI::UpdateInteractTarget();
  static void __fastcall CGGameUI::CloseInteraction();
  static void __fastcall CGGameUI::Target(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& target, /*<register edx>*/ /*|0x4|*/ int usingNearest);
  static void __fastcall TargetIfNone(unsigned __int64&);
  static unsigned __int64 __fastcall CGGameUI::ClosestObjectMatch(/*<register ecx>*/ /*|0x4|*/ char* match, /*<register edx>*/ /*|0x4|*/ enum OBJECT_TYPE type);
  static void __fastcall CGGameUI::AssistByName(/*<register ecx>*/ /*|0x4|*/ char* name);
  static void __fastcall CGGameUI::FollowByName(/*<register ecx>*/ /*|0x4|*/ char* name);
  static void __fastcall CGGameUI::TargetNearestEnemy(/*<register ecx>*/ /*|0x4|*/ int reverse);
  static void __fastcall CGGameUI::ClearTarget(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ int sendTarget);
  static void __fastcall CGGameUI::ScaleUI(/*<regrel ebp+0x8>*/ /*|0x4|*/ float scale, /*<register ecx>*/ /*|0x4|*/ int force);
  static class CSimpleFrame* __fastcall GetUISimpleParent();
  static class CGTooltip* __fastcall GetGameTooltip();
  static char* __fastcall GetZoneText();
  static char* __fastcall GetSubZoneText();
  static char* __fastcall GetMinimapZoneText();
  static void __fastcall CGGameUI::ShowCombatFeedback(/*<register ecx>*/ /*|0x4|*/ struct MIRRORTIMERDAMAGE& log);
  static void __fastcall CGGameUI::ShowCombatFeedback(/*<register ecx>*/ /*|0x4|*/ struct SPELLLOG& log);
  static void __fastcall CGGameUI::ShowCombatFeedback(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid, /*<register edx>*/ /*|0x4|*/ int amount, /*<regrel ebp+0x8>*/ /*|0x4|*/ int damageClass, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  static void __fastcall CGGameUI::ShowCombatFeedback(/*<register ecx>*/ /*|0x4|*/ struct ATTACKROUNDINFO* info);
  static void __fastcall CGGameUI::ShowSpellMissFeedback(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 victim, /*<register ecx>*/ /*|0x4|*/ int reason);
  static void __fastcall CGGameUI::ShowHealingFeedback(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid, /*<register edx>*/ /*|0x4|*/ int amount);
  static void __fastcall CGGameUI::ShowAutoFollowChange(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 newTarget, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 oldTarget, /*<register ecx>*/ /*|0x4|*/ int type);
  static unsigned __int64& __fastcall GetCurrentObjectTrack();
  static unsigned __int64& __fastcall GetInteractTarget();
  static unsigned __int64& __fastcall GetLockedTarget();
  static unsigned __int64& __fastcall GetLastEnemyTarget();
  static void __fastcall CGGameUI::NewZoneFeedback(/*<register ecx>*/ /*|0x4|*/ int areaID, /*<register edx>*/ /*|0x4|*/ char* zoneString, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* subZoneString);
  static void __fastcall CGGameUI::SetMinimapZoneText(/*<register ecx>*/ /*|0x4|*/ char* areaName);
  static int __fastcall GetCurrentAreaID();
  static void __fastcall CGGameUI::NamePlateClicked(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 unit, /*<register ecx>*/ /*|0x4|*/ enum MOUSEBUTTON button);
  static void __fastcall CGGameUI::SetPartyLeader(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid);
  static void __fastcall CGGameUI::AddPartyMember(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ int connected);
  static void __fastcall CGGameUI::RemoveAllPartyMembers();
  static void __fastcall CGGameUI::EnablePartyMember(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 guid, /*<register ecx>*/ /*|0x4|*/ int enable);
  static int __fastcall CGGameUI::IsPartyMember(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static unsigned __int64 __fastcall CGGameUI::GetPartyMember(/*<register ecx>*/ /*|0x4|*/ unsigned int index);
  static void __fastcall CGGameUI::SetLootMethod(/*<register ecx>*/ /*|0x4|*/ enum LOOT_METHOD method, /*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 master);
  static void __fastcall CGGameUI::UnitNameUpdate(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static void __fastcall CGGameUI::UnitPortraitUpdate(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& guid);
  static void __fastcall CGGameUI::UpdateActivePlayer();
  static int __fastcall HasPlayerControl();
  static void __fastcall CGGameUI::OnClientControlChanged(/*<register ecx>*/ /*|0x4|*/ int hasControl);
  static void __fastcall CGGameUI::ClearClientControls();
  static void __fastcall CGGameUI::RegisterFrameFactories();
  static void __fastcall CGGameUI::StartCinematic(/*<register ecx>*/ /*|0x4|*/ int cinematicID);
  static void __fastcall CGGameUI::BeginCinematic();
  static void __fastcall CGGameUI::BeginCinematicInternal(/*<register ecx>*/ /*|0x4|*/ void* __formal);
  static int __fastcall CGGameUI::StartCinematicCamera();
  static int __fastcall CGGameUI::NextCinematic(/*<register ecx>*/ /*|0x4|*/ void* __formal);
  static void __fastcall CGGameUI::NextCinematicInternal(/*<register ecx>*/ /*|0x4|*/ void* __formal);
  static int __fastcall CGGameUI::StopCinematic(/*<register ecx>*/ /*|0x4|*/ void* __formal);
  static void __fastcall CGGameUI::StopCinematicInternal(/*<register ecx>*/ /*|0x4|*/ void* __formal);
  static void __fastcall CGGameUI::ResetCamera();
  static void __fastcall CGGameUI::PlayerCombatModeChanged(/*<register ecx>*/ /*|0x4|*/ int newState);
  static void __fastcall CGGameUI::HandleObjectTrackChange(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 object, /*<regrel ebx+0x10>*/ /*|0x8|*/ unsigned __int64 oldGUID, /*<regrel ebx+0x18>*/ /*|0x4|*/ float x, /*<regrel ebx+0x1c>*/ /*|0x4|*/ float y);
  static void __fastcall CGGameUI::SetCursorItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 itemGUID, /*<regrel ebp+0x10>*/ /*|0x8|*/ unsigned __int64 containerGUID, /*<register ecx>*/ /*|0x4|*/ unsigned int slot, /*<register edx>*/ /*|0x4|*/ int unlock, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int stackSplit);
  static void __fastcall CGGameUI::GetCursorItem(/*<register ecx>*/ /*|0x4|*/ unsigned __int64& cursorItem, /*<register edx>*/ /*|0x4|*/ unsigned __int64& containerGUID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& slot);
  static unsigned __int64 __fastcall CGGameUI::GetCursorItem();
  static void __fastcall CGGameUI::SetCursorMoney(/*<register ecx>*/ /*|0x4|*/ unsigned int money);
  static unsigned int __fastcall GetCursorMoney();
  static void __fastcall CGGameUI::SetCursorSpell(/*<register ecx>*/ /*|0x4|*/ int spellId, /*<register edx>*/ /*|0x4|*/ int pet);
  static void __fastcall CGGameUI::DropCursorSpell();
  static int __fastcall CGGameUI::GetCursorSpell();
  static int __fastcall IsCursorPetSpell();
  static void __fastcall CGGameUI::SetCursorPetAction(/*<register ecx>*/ /*|0x4|*/ class PetAction& action);
  static unsigned int __fastcall GetCursorPetAction();
  static void __fastcall CGGameUI::DropCursorPetAction();
  static void __fastcall CGGameUI::SetCursorVirtualItem(/*<register ecx>*/ /*|0x4|*/ unsigned int itemID, /*<register edx>*/ /*|0x4|*/ unsigned int displayID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum UICURSORTYPE type);
  static unsigned int __fastcall GetCursorVirtualItem(enum UICURSORTYPE);
  static void __fastcall CGGameUI::GetCursorVirtualItem(/*<register ecx>*/ /*|0x4|*/ unsigned int& cursorItem, /*<register edx>*/ /*|0x4|*/ unsigned int& slot);
  static unsigned int __fastcall CGGameUI::GetCursorVirtualItem();
  static unsigned int __fastcall GetCursorStackSplit();
  static int __fastcall IsCursorEmpty();
  static void __fastcall CGGameUI::ClearCursor(/*<register ecx>*/ /*|0x4|*/ int unlock);
  static void __fastcall CGGameUI::DeleteCursorItem();
  static enum UICURSORTYPE __fastcall GetCursorType();
  static void __fastcall CGGameUI::LockItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 itemGUID);
  static void __fastcall CGGameUI::UnlockItem(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 itemGUID);
  static void __fastcall CGGameUI::UnlockAllItems();
  static void __fastcall CGGameUI::OnTargetContextAction();
  static void __fastcall CGGameUI::OnItemPush(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 player, /*<register ecx>*/ /*|0x4|*/ int slot, /*<register edx>*/ /*|0x4|*/ int itemID, /*<regrel ebx+0x10>*/ /*|0x4|*/ int pushed, /*<regrel ebx+0x14>*/ /*|0x4|*/ int display);
  static void __cdecl CGGameUI::DisplayError(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE errorType, /*<regrel ebp-0x100>*/ /*|0x100|*/ char buffer[256]);
  static char* __fastcall CGGameUI::GetLastErrorString();
  static int __fastcall CGGameUI::OnTerrainClick(/*<register ecx>*/ /*|0x4|*/ struct CTerrainClickEvent& evt);
  static int __fastcall CGGameUI::OnSpriteLeftClick(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 object, /*<regrel ebp+0x10>*/ /*|0x4|*/ float x, /*<regrel ebp+0x14>*/ /*|0x4|*/ float y);
  static int __fastcall CGGameUI::OnSpriteRightClick(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 object, /*<regrel ebp+0x10>*/ /*|0x4|*/ float x, /*<regrel ebp+0x14>*/ /*|0x4|*/ float y);
  static void __fastcall UpdatePlayerAlpha(float);
  static void __fastcall CGGameUI::UpdateObjectHighlightColor(/*<register ecx>*/ /*|0x4|*/ struct HMODEL__* model, /*<register edx>*/ /*|0x4|*/ class CGObject_C* object);
  static void __fastcall ResetStaticVars();
  static int __fastcall CGGameUI::Idle(/*<register ecx>*/ /*|0x4|*/ void* __formal, /*<register edx>*/ /*|0x4|*/ void* __formal);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CGBag_C : class CGBag  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGBag
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static enum GAME_ERROR_TYPE __fastcall CGBag_C::GetGameError(/*<register ecx>*/ /*|0x4|*/ enum BAG_RESULT result);

  // non-virtual functions --------------------------
  void __thiscall CGBag_C(unsigned __int64, unsigned int*, unsigned __int64*, unsigned char);
  void __thiscall ~CGBag_C();
  int __thiscall CGBag_C::GetWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int offset);
  int __thiscall CGBag_C::GetHeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int offset);
  int __thiscall CGBag_C::GetItemTypeCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ int entryID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItemOfType(/*<regrel ebp+0x8>*/ /*|0x4|*/ int entryID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& bagGUID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& slot, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItemOfType(/*<regrel ebp+0x8>*/ /*|0x4|*/ int entryID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItemOfClass(/*<regrel ebp+0x8>*/ /*|0x4|*/ int classID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int subclassMask, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned __int64& bagGUID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& slot, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItemOfClass(/*<regrel ebp+0x8>*/ /*|0x4|*/ int classID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int subclassMask, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int  (func*)(class CGItem_C*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned __int64& bagGUID, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& slot, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int flags);
  class CGItem_C* __thiscall CGBag_C::FindItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int  (func*)(class CGItem_C*, void*), /*<regrel ebp+0xc>*/ /*|0x4|*/ void* param, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flags);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CGSimpleHealthBar : class CSimpleStatusBar  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c8>*/ /*|0x8|*/ unsigned __int64 m_unitGUID;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ int m_scaleColor;

  // base classes -----------------------------------
  // baseclass class CSimpleStatusBar
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGSimpleHealthBar(class CGSimpleHealthBar&);
  void __thiscall CGSimpleHealthBar::CGSimpleHealthBar(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* parent);
  void __thiscall CGSimpleHealthBar::SetUnit(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGUnit_C* unit);
  void __thiscall CGSimpleHealthBar::InstallMirrorHandlers();
  void __thiscall CGSimpleHealthBar::RemoveMirrorHandlers();
  class CGSimpleHealthBar& __thiscall operator=(class CGSimpleHealthBar&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGSimpleHealthBar::~CGSimpleHealthBar();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGSimpleHealthBar::SetValue(/*<regrel ebp+0x8>*/ /*|0x4|*/ float value);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGSimpleHealthBar::SetStatusBarColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2d8>

class CACHEOBJECT : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0xc|*/ class TSExplicitList<CACHEENTRY,32> m_LRUList;
  /*<thisrel this+0x14>*/ /*|0x2c|*/ class TSHashTable<CACHEENTRY,HASHKEY_STRI> m_cacheTable;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned int m_cacheSize;
  /*<thisrel this+0x44>*/ /*|0x4|*/ unsigned int m_currentCacheSize;
  /*<thisrel this+0x48>*/ /*|0x4|*/ enum CACHEMODE m_cacheMode;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ unsigned int m_cacheEntries;
  /*<thisrel this+0x50>*/ /*|0x4|*/ unsigned int m_cacheTime;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CACHEOBJECT::PurgeTextureCache();
  struct HMIPPEDTEXTURE__* __thiscall CACHEOBJECT::GetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct TEXTUREINFO* info);
  void __thiscall CACHEOBJECT(class CACHEOBJECT&);
  void __thiscall CACHEOBJECT::CACHEOBJECT();
  class CACHEOBJECT& __thiscall operator=(class CACHEOBJECT&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CACHEOBJECT::~CACHEOBJECT();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x54>

class CGInputControl {

  // static data ------------------------------------
  static /*<rva 0xa114f4>*/ /*|0x4|*/ class CGInputControl* s_inputControl;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long m_initializeTime;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_controlFlags;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_mouseChangeX;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_mouseChangeY;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_lastFrameMouseMoved;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned long m_mouseDownTime;
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum CGInputReleaseAction m_releaseAction;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall Initialize();
  static void __fastcall Destroy();
  static class CGInputControl* __fastcall CGInputControl::GetActive();

  // non-virtual functions --------------------------
  void __thiscall CGInputControl::CGInputControl();
  void __thiscall CGInputControl::OnUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  void __thiscall OnMouseMove(class CMouseEvent&);
  void __thiscall CGInputControl::OnMouseMoveRel(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMouseEvent& evt);
  void __thiscall Reset();
  void __thiscall CGInputControl::UpdatePlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now);
  void __thiscall CGInputControl::SetReleaseAction(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGInputReleaseAction action);
  int __thiscall CGInputControl::SetControlBit(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INPUT_CONTROL bit);
  void __thiscall CGInputControl::SetControlBit(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INPUT_CONTROL bit, /*<regrel ebp+0xc>*/ /*|0x4|*/ int set, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0x14>*/ /*|0x4|*/ int sticky);
  int __thiscall CGInputControl::CameraCanTurnPlayer();
  void __thiscall CGInputControl::CameraTurnPlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timestamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ float yaw, /*<regrel ebp+0x10>*/ /*|0x4|*/ float pitch, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char setSmoothFacing);
  int __thiscall IsMovingForward();
  int __thiscall IsAutoRunning();
  int __thiscall IsFreeLooking();
  int __thiscall CGInputControl::IsMouseDragMoving();
  int __thiscall HasPlayerMoved();
  int __thiscall HasCameraMoved();
  unsigned long __thiscall GetInitializeTime();
  int __thiscall CGInputControl::UnsetControlBit(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum INPUT_CONTROL bit, /*<regrel ebp+0xc>*/ /*|0x4|*/ int sticky);
  void __thiscall CGInputControl::MovePlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGUnit_C* player);
  void __thiscall CGInputControl::StrafePlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGUnit_C* player);
  void __thiscall CGInputControl::TurnPlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGUnit_C* player);
  void __thiscall CGInputControl::PitchPlayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long now, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGUnit_C* player);
  int __thiscall CGInputControl::IsMouseDragging();

  // virtual functions ------------------------------
};
// <size 0x1c>

class CameraShakesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_shakeType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_direction;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_amplitude;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_frequency;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_duration;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_phase;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_coefficient;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CameraShakesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CameraShakesRec::CameraShakesRec();
  void __thiscall CameraShakesRec::~CameraShakesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CameraShakesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class RangeList {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_numranges;
  /*<thisrel this+0x4>*/ /*|0x20|*/ struct RangeList::range m_ranges[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall RangeList(float, float);
  void __thiscall RangeList::RemoveRange(/*<regrel ebp+0x8>*/ /*|0x4|*/ float iMin, /*<regrel ebp+0xc>*/ /*|0x4|*/ float iMax);
  int __thiscall GetNumRanges();
  int __thiscall GetRange(int, float&, float&);

  // virtual functions ------------------------------
};
// <size 0x24>

class CWFrustum {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x60|*/ class NTempest::C4Plane planes[6];
  /*<thisrel this+0x60>*/ /*|0x60|*/ class NTempest::C3Vector corners[8];
  /*<thisrel this+0xc0>*/ /*|0xc|*/ class NTempest::C3Vector lookPos;
  /*<thisrel this+0xcc>*/ /*|0xc|*/ class NTempest::C3Vector lookAt;
  /*<thisrel this+0xd8>*/ /*|0xc|*/ class NTempest::C3Vector lookUp;
  /*<thisrel this+0xe4>*/ /*|0x4|*/ float fovy;
  /*<thisrel this+0xe8>*/ /*|0x4|*/ float aspect;
  /*<thisrel this+0xec>*/ /*|0x4|*/ float minz;
  /*<thisrel this+0xf0>*/ /*|0x4|*/ float maxz;
  /*<thisrel this+0xf4>*/ /*|0x8|*/ class TSLink<CWFrustum> sceneLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CWFrustum(class CWFrustum&);
  void __thiscall CWFrustum::CWFrustum(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* c);
  void __thiscall CWFrustum::CWFrustum(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& lPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& lAt, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& lUp, /*<regrel ebp+0x14>*/ /*|0x4|*/ float p_fovy, /*<regrel ebp+0x18>*/ /*|0x4|*/ float p_aspect, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float p_minz, /*<regrel ebp+0x20>*/ /*|0x4|*/ float p_maxz);
  void __thiscall CWFrustum();
  class CWFrustum& __thiscall operator=(class CWFrustum&);
  void __thiscall CWFrustum::CalcPlanesFromCorners(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* c);
  void __thiscall CWFrustum::CalcPlanesFromCorners();
  class NTempest::C3Vector& __thiscall Corner(unsigned int);
  class NTempest::C3Vector* __thiscall Corners();
  class NTempest::C4Plane& __thiscall Plane(unsigned int);
  void __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& cullFlags);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& plane);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaSphere& sphere);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& center, /*<regrel ebp+0xc>*/ /*|0x4|*/ float radius);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C33Matrix& basis, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  enum WorldCullStatus __thiscall CWFrustum::Cull(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aabox);
  void __thiscall CWFrustum::Translate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& t);
  void __thiscall CWFrustum::Transform(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& mat);
  void __thiscall Render();
  void __thiscall ~CWFrustum();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xfc>

class CSimpleCamera {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x10>*/ /*|0x24|*/ class NTempest::C33Matrix m_facing;
  /*<thisrel this+0x34>*/ /*|0x4|*/ float m_nearZ;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float m_farZ;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float m_fov;
  /*<thisrel this+0x40>*/ /*|0x4|*/ float m_aspect;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleCamera(class CSimpleCamera&);
  void __thiscall CSimpleCamera::CSimpleCamera(/*<regrel ebp+0x8>*/ /*|0x4|*/ float nearZ, /*<regrel ebp+0xc>*/ /*|0x4|*/ float farZ, /*<regrel ebp+0x10>*/ /*|0x4|*/ float fov);
  void __thiscall CSimpleCamera::CSimpleCamera();
  void __thiscall ~CSimpleCamera();
  class NTempest::C3Vector& __thiscall Position();
  class NTempest::C33Matrix& __thiscall Facing();
  float __thiscall NearZ();
  float __thiscall FarZ();
  float __thiscall FOV();
  float __thiscall Aspect();
  void __thiscall SetPosition(class NTempest::C3Vector&);
  void __thiscall SetPosition(float, float, float);
  void __thiscall CSimpleCamera::SetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ float yaw, /*<regrel ebp+0xc>*/ /*|0x4|*/ float pitch, /*<regrel ebp+0x10>*/ /*|0x4|*/ float roll);
  void __thiscall CSimpleCamera::SetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& forward, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& up);
  void __thiscall CSimpleCamera::SetFacing(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& forward);
  void __thiscall SetFieldOfView(float);
  void __thiscall SetNearZ(float);
  void __thiscall SetFarZ(float);
  void __thiscall CSimpleCamera::SetGxProjectionAndView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& projectionRect);
  class CSimpleCamera& __thiscall operator=(class CSimpleCamera&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CSimpleCamera::Forward();
  virtual /*<vtableoff 0x4>*/ class NTempest::C3Vector __thiscall CSimpleCamera::Right();
  virtual /*<vtableoff 0x8>*/ class NTempest::C3Vector __thiscall CSimpleCamera::Up();
};
// <size 0x44>

class SpellEffectNamesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_EnumID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellEffectNamesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellEffectNamesRec::SpellEffectNamesRec();
  void __thiscall SpellEffectNamesRec::~SpellEffectNamesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellEffectNamesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x2c>

class SpellAuraNamesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_EnumID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_specialMiscValue;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_globalstrings_tag;
  /*<thisrel this+0xc>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellAuraNamesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellAuraNamesRec::SpellAuraNamesRec();
  void __thiscall SpellAuraNamesRec::~SpellAuraNamesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellAuraNamesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x34>

class SpellDispelTypeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellDispelTypeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellDispelTypeRec::SpellDispelTypeRec();
  void __thiscall SpellDispelTypeRec::~SpellDispelTypeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellDispelTypeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class CreatureTypeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureTypeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureTypeRec::CreatureTypeRec();
  void __thiscall CreatureTypeRec::~CreatureTypeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureTypeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class LockRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x10|*/ int m_Type[4];
  /*<thisrel this+0x14>*/ /*|0x10|*/ int m_Index[4];
  /*<thisrel this+0x24>*/ /*|0x10|*/ int m_Skill[4];
  /*<thisrel this+0x34>*/ /*|0x10|*/ int m_Action[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall LockRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall LockRec::LockRec();
  void __thiscall LockRec::~LockRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall LockRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x44>

class LockTypeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x20|*/ char* m_name_lang[8];
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_name_flag;
  /*<thisrel this+0x28>*/ /*|0x20|*/ char* m_resourceName_lang[8];
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_resourceName_flag;
  /*<thisrel this+0x4c>*/ /*|0x20|*/ char* m_verb_lang[8];
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int m_verb_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall LockTypeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall LockTypeRec::LockTypeRec();
  void __thiscall LockTypeRec::~LockTypeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall LockTypeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x70>

class NETEVENTQUEUE {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class NetClient* m_client;
  /*<thisrel this+0x4>*/ /*|0x18|*/ class SCritSect m_critsect;
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> > m_eventQueue;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall NETEVENTQUEUE::NETEVENTQUEUE(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NetClient* client);
  void __thiscall NETEVENTQUEUE(class NETEVENTQUEUE&);
  class NETEVENTQUEUE& __thiscall operator=(class NETEVENTQUEUE&);
  void __thiscall NETEVENTQUEUE::~NETEVENTQUEUE();
  void __thiscall NETEVENTQUEUE::AddEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EVENTID eventId, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* conn, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NetClient* client, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* data, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned long bytes);
  void __thiscall NETEVENTQUEUE::Poll();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class NetClient : class WowConnectionResponse  {

  // static data ------------------------------------
  static /*<rva 0xa12018>*/ /*|0x4|*/ int s_clientCount;

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NetClient** m_redirectHandle;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_redirectBytesRead;
  /*<thisrel this+0xc>*/ /*|0x401|*/ char m_redirectHostPort[1025];
  /*<thisrel this+0x410>*/ /*|0x4|*/ enum NETSTATE m_netState;
  /*<thisrel this+0x414>*/ /*|0x7c8|*/ int  (*)(void*, enum NETMESSAGE, unsigned long, class CDataStore*) m_handlers[498];
  /*<thisrel this+0xbdc>*/ /*|0x7c8|*/ void* m_handlerParams[498];
  /*<thisrel this+0x13a4>*/ /*|0x4|*/ class NETEVENTQUEUE* m_netEventQueue;
  /*<thisrel this+0x13a8>*/ /*|0x4|*/ class WowConnection* m_serverConnection;
  /*<thisrel this+0x13ac>*/ /*|0x4|*/ int m_refCount;
  /*<thisrel this+0x13b0>*/ /*|0x1|*/ unsigned char m_deleteMe;
  /*<thisrel this+0x13b4>*/ /*|0x4|*/ unsigned long m_pingSent;
  /*<thisrel this+0x13b8>*/ /*|0x4|*/ unsigned long m_pingSequence;
  /*<thisrel this+0x13bc>*/ /*|0x40|*/ unsigned long m_latency[16];
  /*<thisrel this+0x13fc>*/ /*|0x4|*/ unsigned long m_latencyStart;
  /*<thisrel this+0x1400>*/ /*|0x4|*/ unsigned long m_latencyEnd;
  /*<thisrel this+0x1404>*/ /*|0x4|*/ unsigned long m_bytesSent;
  /*<thisrel this+0x1408>*/ /*|0x4|*/ unsigned long m_bytesReceived;
  /*<thisrel this+0x140c>*/ /*|0x4|*/ unsigned long m_connectedTimestamp;
  /*<thisrel this+0x1410>*/ /*|0x18|*/ class SCritSect m_pingLock;
  /*<thisrel this+0x1428>*/ /*|0x4|*/ class ClntObjMgr* m_objMgr;
  /*<thisrel this+0x142c>*/ /*|0x4|*/ class ClntObjMgr* m_saveObjMgr;
  /*<thisrel this+0x1430>*/ /*|0x4|*/ class NetClientRedirect* m_redirect;

  // base classes -----------------------------------
  // baseclass class WowConnectionResponse
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __stdcall ClientRedirectEventHandler(struct HNETCONN__*, struct NETCONNADDR*, enum NETNOTE, void*, void*, unsigned long, unsigned long*);

  // non-virtual functions --------------------------
  void __thiscall NetClient(class NetClient&);
  void __thiscall NetClient::NetClient();
  class NetClient& __thiscall operator=(class NetClient&);
  int __thiscall NetClient::Connect(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* hostName, /*<regrel ebp+0xc>*/ /*|0x2|*/ unsigned short port);
  void __thiscall NetClient::Connect(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* hostName);
  void __thiscall NetClient::Disconnect();
  void __thiscall NetClient::Send(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall NetClient::SetMessageHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId, /*<regrel ebp+0xc>*/ /*|0x4|*/ int  (handler*)(void*, enum NETMESSAGE, unsigned long, class CDataStore*), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* param);
  void __thiscall NetClient::ClearMessageHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum NETMESSAGE msgId);
  enum NETSTATE __thiscall GetState();
  void __thiscall NetClient::HandleIdle();
  void __thiscall AddRef();
  void __thiscall DelRef();
  void __thiscall SetDelete();
  unsigned char __thiscall GetDelete();
  void __thiscall NetClient::GetNetStats(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& bandwidthIn, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& bandwidthOut, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long& latency);
  void __thiscall SetObjMgr(class ClntObjMgr*);
  void __thiscall NetClient::PollEventQueue();
  unsigned int __thiscall NetClient::GetAddr();
  void __thiscall NetClient::PushObjMgr();
  void __thiscall NetClient::PopObjMgr();
  void __thiscall NetClient::CancelRedirect();
  void __thiscall NetClient::ProcessMessage(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall NetClient::PongHandler(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall NetClient::DisplayNetworkStats();
  void __thiscall NetClient::Ping();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClient::~NetClient();
  virtual /*<vtableoff 0x24>*/ int __thiscall NetClient::Initialize();
  virtual /*<vtableoff 0x28>*/ void __thiscall NetClient::Destroy();
  virtual /*<vtableoff 0x2c>*/ int __thiscall NetClient::DelayedDelete();
  virtual /*<vtableoff 0x30>*/ int __thiscall NetClient::HandleData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timeReceived, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* data, /*<regrel ebp+0x10>*/ /*|0x4|*/ int size);
  virtual /*<vtableoff 0x34>*/ int __thiscall NetClient::HandleConnect();
  virtual /*<vtableoff 0x38>*/ int __thiscall NetClient::HandleDisconnect();
  virtual /*<vtableoff 0x3c>*/ int __thiscall NetClient::HandleCantConnect();
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClient::WCMessageReady(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* msg);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClient::WCConnected(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ class WowConnection* inbound, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct NETCONNADDR* addr);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClient::WCDisconnected(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct NETCONNADDR* addr);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClient::WCCantConnect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct NETCONNADDR* addr);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x1434>

class WowConnectionResponse {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WowConnectionResponse(class WowConnectionResponse&);
  void __thiscall WowConnectionResponse();
  class WowConnectionResponse& __thiscall operator=(class WowConnectionResponse&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~WowConnectionResponse();
  virtual /*<vtableoff 0x4>*/ void __thiscall WCMessageReady(class WowConnection*, unsigned long, class CDataStore*) = 0;
  virtual /*<vtableoff 0x8>*/ void __thiscall WCConnected(class WowConnection*, class WowConnection*, unsigned long, struct NETCONNADDR*) = 0;
  virtual /*<vtableoff 0xc>*/ void __thiscall WCCantConnect(class WowConnection*, unsigned long, struct NETCONNADDR*) = 0;
  virtual /*<vtableoff 0x10>*/ void __thiscall WCDisconnected(class WowConnection*, unsigned long, struct NETCONNADDR*) = 0;
  virtual /*<vtableoff 0x14>*/ void __thiscall WowConnectionResponse::WCGlobalLock();
  virtual /*<vtableoff 0x18>*/ void __thiscall WowConnectionResponse::WCGlobalUnlock();
  virtual /*<vtableoff 0x1c>*/ void __thiscall WowConnectionResponse::WCDataReady(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long timeStamp, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0x14>*/ /*|0x4|*/ int len);
  virtual /*<vtableoff 0x20>*/ void __thiscall WowConnectionResponse::WCWriteReady(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x4>

class WowConnection {

  // static data ------------------------------------
  static /*<rva 0xa15e64>*/ /*|0x4|*/ unsigned char  (m_verifyAddr*)(union NETADDR*);

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_refCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_sock;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_oldsock;
  /*<thisrel this+0xc>*/ /*|0x1|*/ unsigned char m_connectionFreed;
  /*<thisrel this+0x10>*/ /*|0x4|*/ enum WOW_CONN_STATE m_connState;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class WowConnectionResponse* m_response;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned long m_needBytes;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned char* m_readBuffer;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_readBytes;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_readBufferSize;
  /*<thisrel this+0x28>*/ /*|0x18|*/ class SCritSect m_outLock;
  /*<thisrel this+0x40>*/ /*|0x18|*/ struct WowConnectionStats m_stats;
  /*<thisrel this+0x58>*/ /*|0x4|*/ unsigned long m_haveSizeBytes;
  /*<thisrel this+0x5c>*/ /*|0x2|*/ unsigned short m_listenPort;
  /*<thisrel this+0x60>*/ /*|0x4|*/ void  (m_threadInit*)();
  /*<thisrel this+0x64>*/ /*|0x4|*/ unsigned long m_connectAddress;
  /*<thisrel this+0x68>*/ /*|0x2|*/ unsigned short m_connectPort;
  /*<thisrel this+0x6c>*/ /*|0x4|*/ int m_connectRetryInterval;
  /*<thisrel this+0x70>*/ /*|0x4|*/ unsigned long m_retryConnection;
  /*<thisrel this+0x78>*/ /*|0x20|*/ struct NETCONNADDR m_peer;
  /*<thisrel this+0x98>*/ /*|0x4|*/ unsigned long m_bufferAutoSendSize;
  /*<thisrel this+0x9c>*/ /*|0x18|*/ class SCritSect m_responseLock;
  /*<thisrel this+0xb4>*/ /*|0x4|*/ int m_responseRef;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ unsigned long m_responseRefThread;
  /*<thisrel this+0xbc>*/ /*|0x8|*/ class TSLink<WowConnection> netlink;
  /*<thisrel this+0xc4>*/ /*|0xc|*/ class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> > m_sendList;
  /*<thisrel this+0xd0>*/ /*|0x4|*/ int m_sendDepth;
  /*<thisrel this+0xd4>*/ /*|0x4|*/ int m_sendDepthBytes;
  /*<thisrel this+0xd8>*/ /*|0x4|*/ unsigned int m_serviceFlags;
  /*<thisrel this+0xdc>*/ /*|0x18|*/ class SCritSect m_lock;
  /*<thisrel this+0xf4>*/ /*|0x4|*/ long m_serviceCount;
  /*<thisrel this+0xf8>*/ /*|0x4|*/ void* m_event;
  /*<thisrel this+0xfc>*/ /*|0x4|*/ enum WOWC_TYPE m_type;
  /*<thisrel this+0x100>*/ /*|0x1|*/ unsigned char m_wantWriteNotification;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned long __fastcall WowConnection::GetAddr(/*<register ecx>*/ /*|0x4|*/ union NETADDR& addr);
  static unsigned short __fastcall WowConnection::GetPort(/*<register ecx>*/ /*|0x4|*/ union NETADDR& addr);
  static void __fastcall WowConnection::SetPort(/*<register ecx>*/ /*|0x4|*/ union NETADDR& addr, /*<register dx>*/ /*|0x2|*/ unsigned short port);
  static int __fastcall WowConnection::InitOsNet(/*<register ecx>*/ /*|0x4|*/ unsigned char  (fcn*)(union NETADDR*), /*<register edx>*/ /*|0x4|*/ void  (threadinit*)(), /*<regrel ebp+0x8>*/ /*|0x4|*/ int numThreads, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char useEngine);
  static void __fastcall WowConnection::DestroyOsNet();
  static unsigned char __fastcall WowConnection::IsDestroyed();

  // non-virtual functions --------------------------
  void __thiscall WowConnection::~WowConnection();
  struct WowConnection::SENDNODE* __thiscall WowConnection::NewSendNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ int size, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char raw);
  void __thiscall WowConnection::FreeSendNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WowConnection::SENDNODE* sn);
  int __thiscall WowConnection::AddRef();
  int __thiscall WowConnection::Release();
  void __thiscall WowConnection(int, struct NETCONNADDR*, class WowConnectionResponse*, void  (*)());
  void __thiscall WowConnection(class WowConnection&);
  void __thiscall WowConnection::WowConnection(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sock, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct sockaddr_in* addr, /*<regrel ebp+0x10>*/ /*|0x4|*/ class WowConnectionResponse* response);
  void __thiscall WowConnection::WowConnection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnectionResponse* response, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (func*)());
  class WowConnection& __thiscall operator=(class WowConnection&);
  unsigned char __thiscall WowConnection::Listen(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short port);
  void __thiscall WowConnection::StopListening();
  unsigned char __thiscall WowConnection::Connect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long addr, /*<regrel ebp+0xc>*/ /*|0x2|*/ unsigned short port, /*<regrel ebp+0x10>*/ /*|0x4|*/ int retryms);
  unsigned char __thiscall WowConnection::Connect(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* address, /*<regrel ebp+0xc>*/ /*|0x2|*/ unsigned short port, /*<regrel ebp+0x10>*/ /*|0x4|*/ int retryms);
  unsigned char __thiscall WowConnection::Connect(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* address, /*<regrel ebp+0xc>*/ /*|0x4|*/ int retryms);
  unsigned char __thiscall WowConnection::Reconnect();
  void __thiscall WowConnection::SetResponse(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnectionResponse* response);
  class WowConnectionResponse* __thiscall GetResponse();
  unsigned long __thiscall Connection();
  void __thiscall AddIncomingData(void*, unsigned long, unsigned long, unsigned long*);
  void __thiscall WowConnection::Disconnect();
  void __thiscall WowConnection::DoDisconnect();
  enum WC_SEND_RESULT __thiscall Send(class CDataStore*, class CDataStore*);
  enum WC_SEND_RESULT __thiscall WowConnection::Send(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  enum WC_SEND_RESULT __thiscall WowConnection::SendRaw(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ int len);
  void __thiscall WowConnection::RequestWriteNotification();
  void __thiscall Idle();
  void __thiscall GetPeer(union NETADDR&);
  void __thiscall GetPeer(struct NETCONNADDR&);
  unsigned char __thiscall WowConnection::GetLocal(/*<regrel ebp+0x8>*/ /*|0x4|*/ union NETADDR& addr);
  char* __thiscall WowConnection::GetStringAddress(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* buf, /*<regrel ebp+0xc>*/ /*|0x4|*/ int size);
  unsigned long __thiscall GetConnectAddress();
  unsigned short __thiscall GetConnectPort();
  enum WOW_CONN_STATE __thiscall GetState();
  void __thiscall SetAutoSendSize(unsigned long);
  unsigned short __thiscall GetListenPort();
  void __thiscall WowConnection::AcquireResponseRef();
  void __thiscall WowConnection::ReleaseResponseRef();
  void __thiscall WowConnection::StartConnect();
  void __thiscall WowConnection::CheckConnect();
  void __thiscall WowConnection::CheckAccept();
  void __thiscall WowConnection::DoWrites();
  void __thiscall WowConnection::DoMessageReads();
  void __thiscall WowConnection::DoStreamReads();
  void __thiscall WowConnection::DoReads();
  void __thiscall WowConnection::DoExceptions();
  enum WOWC_TYPE __thiscall GetType();
  void __thiscall WowConnection::SetType(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WOWC_TYPE type);
  unsigned char __thiscall WantsWriteNotification();
  void __thiscall DoSends();
  void __thiscall WowConnection::Init(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnectionResponse* response, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (func*)());
  void __thiscall WowConnection::SetState(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WOW_CONN_STATE state);
  int __thiscall WowConnection::CreateSocket();
  void __thiscall WowConnection::CloseSocket(/*<regrel ebp+0x8>*/ /*|0x4|*/ int sock);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x108>

class NetClientRedirect : class WowConnectionResponse  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NetClient* m_owner;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WowConnection* m_conn;

  // base classes -----------------------------------
  // baseclass class WowConnectionResponse
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall NetClientRedirect(class NetClientRedirect&);
  void __thiscall NetClientRedirect(class NetClient*);
  void __thiscall Connect(char*, unsigned short);
  class NetClientRedirect& __thiscall operator=(class NetClientRedirect&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~NetClientRedirect();
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClientRedirect::WCMessageReady(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CDataStore* __formal);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClientRedirect::WCConnected(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ class WowConnection* __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct NETCONNADDR* __formal);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClientRedirect::WCDisconnected(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct NETCONNADDR* addr);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClientRedirect::WCCantConnect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct NETCONNADDR* __formal);
  virtual /*<vtableoff 0x0>*/ void __thiscall NetClientRedirect::WCDataReady(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0x14>*/ /*|0x4|*/ int bytes);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class WMOAreaTableRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_WMOID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_NameSetID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_WMOGroupID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_DayAmbienceSoundID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_NightAmbienceSoundID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_SoundProviderPref;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_SoundProviderPrefUnderwater;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_MIDIAmbience;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_MIDIAmbienceUnderwater;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_ZoneMusic;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_IntroSound;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_IntroPriority;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_Flags;
  /*<thisrel this+0x38>*/ /*|0x20|*/ char* m_AreaName_lang[8];
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_AreaName_flag;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall WMOAreaTableRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall WMOAreaTableRec::WMOAreaTableRec();
  void __thiscall WMOAreaTableRec::~WMOAreaTableRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall WMOAreaTableRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x5c>

class NamesReservedRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_Name;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall NamesReservedRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall NamesReservedRec::NamesReservedRec();
  void __thiscall NamesReservedRec::~NamesReservedRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall NamesReservedRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class NamesProfanityRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_Name;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall NamesProfanityRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall NamesProfanityRec::NamesProfanityRec();
  void __thiscall NamesProfanityRec::~NamesProfanityRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall NamesProfanityRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class SpellChainEffectsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_AvgSegLen;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_Width;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_NoiseScale;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_TexCoordScale;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_SegDuration;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_SegDelay;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ char* m_Texture;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellChainEffectsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellChainEffectsRec::SpellChainEffectsRec();
  void __thiscall SpellChainEffectsRec::~SpellChainEffectsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellChainEffectsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TransportAnimationRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_TransportID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_TimeIndex;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_PosX;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_PosY;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_PosZ;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TransportAnimationRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TransportAnimationRec::TransportAnimationRec();
  void __thiscall TransportAnimationRec::~TransportAnimationRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TransportAnimationRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class SpellVisualPrecastTransitionsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_PrecastLoadAnimName;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_PrecastHoldAnimName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellVisualPrecastTransitionsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellVisualPrecastTransitionsRec::SpellVisualPrecastTransitionsRec();
  void __thiscall SpellVisualPrecastTransitionsRec::~SpellVisualPrecastTransitionsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellVisualPrecastTransitionsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class EmotesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_EmoteAnimID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_EmoteFlags;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_EmoteSpecProc;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_EmoteSpecProcParam;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall EmotesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall EmotesRec::EmotesRec();
  void __thiscall EmotesRec::~EmotesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall EmotesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class EmoteAnimsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_ProcessedAnimIndex;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_AnimName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall EmoteAnimsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall EmoteAnimsRec::EmoteAnimsRec();
  void __thiscall EmoteAnimsRec::~EmoteAnimsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall EmoteAnimsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class UnitBloodLevelsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0xc|*/ int m_Violencelevel[3];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall UnitBloodLevelsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall UnitBloodLevelsRec::UnitBloodLevelsRec();
  void __thiscall UnitBloodLevelsRec::~UnitBloodLevelsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall UnitBloodLevelsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class UnitBloodRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x8|*/ int m_CombatBloodSpurtFront[2];
  /*<thisrel this+0xc>*/ /*|0x8|*/ int m_CombatBloodSpurtBack[2];
  /*<thisrel this+0x14>*/ /*|0x14|*/ char* m_GroundBlood[5];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall UnitBloodRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall UnitBloodRec::UnitBloodRec();
  void __thiscall UnitBloodRec::~UnitBloodRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall UnitBloodRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>

class NPCSoundsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x10|*/ int m_SoundID[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall NPCSoundsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall NPCSoundsRec::NPCSoundsRec();
  void __thiscall NPCSoundsRec::~NPCSoundsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall NPCSoundsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class DeathThudLookupsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_SizeClass;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_TerrainTypeSoundID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SoundEntryID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_SoundEntryIDWater;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall DeathThudLookupsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall DeathThudLookupsRec::DeathThudLookupsRec();
  void __thiscall DeathThudLookupsRec::~DeathThudLookupsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall DeathThudLookupsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TaxiPathNodeRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_PathID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_NodeIndex;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_ContinentID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_LocX;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_LocY;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_LocZ;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TaxiPathNodeRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TaxiPathNodeRec::TaxiPathNodeRec();
  void __thiscall TaxiPathNodeRec::~TaxiPathNodeRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TaxiPathNodeRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TaxiPathRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_FromTaxiNode;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_ToTaxiNode;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_Cost;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TaxiPathRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TaxiPathRec::TaxiPathRec();
  void __thiscall TaxiPathRec::~TaxiPathRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TaxiPathRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class GameObjectDisplayInfoRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_modelName;
  /*<thisrel this+0x8>*/ /*|0x28|*/ int m_Sound[10];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall GameObjectDisplayInfoRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall GameObjectDisplayInfoRec::GameObjectDisplayInfoRec();
  void __thiscall GameObjectDisplayInfoRec::~GameObjectDisplayInfoRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall GameObjectDisplayInfoRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class StringLookupsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_String;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall StringLookupsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall StringLookupsRec::StringLookupsRec();
  void __thiscall StringLookupsRec::~StringLookupsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall StringLookupsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class SpellEffectCameraShakesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0xc|*/ int m_CameraShake[3];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellEffectCameraShakesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellEffectCameraShakesRec::SpellEffectCameraShakesRec();
  void __thiscall SpellEffectCameraShakesRec::~SpellEffectCameraShakesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellEffectCameraShakesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class FootprintTexturesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_FootstepFilename;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall FootprintTexturesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall FootprintTexturesRec::FootprintTexturesRec();
  void __thiscall FootprintTexturesRec::~FootprintTexturesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall FootprintTexturesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class UISoundLookupsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_SoundID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_SoundName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall UISoundLookupsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall UISoundLookupsRec::UISoundLookupsRec();
  void __thiscall UISoundLookupsRec::~UISoundLookupsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall UISoundLookupsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class AttackAnimTypesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_AnimID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_AnimName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AttackAnimTypesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AttackAnimTypesRec::AttackAnimTypesRec();
  void __thiscall AttackAnimTypesRec::~AttackAnimTypesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AttackAnimTypesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class AttackAnimKitsRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_ItemSubclassID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_AnimTypeID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_AnimFrequency;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_WhichHand;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AttackAnimKitsRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AttackAnimKitsRec::AttackAnimKitsRec();
  void __thiscall AttackAnimKitsRec::~AttackAnimKitsRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AttackAnimKitsRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class SpellVisualAnimNameRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_AnimID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellVisualAnimNameRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellVisualAnimNameRec::SpellVisualAnimNameRec();
  void __thiscall SpellVisualAnimNameRec::~SpellVisualAnimNameRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellVisualAnimNameRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class AreaTriggerRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_ContinentID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_x;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_y;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_z;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_radius;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall AreaTriggerRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall AreaTriggerRec::AreaTriggerRec();
  void __thiscall AreaTriggerRec::~AreaTriggerRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall AreaTriggerRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class SpellVisualKitRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_kitType;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_anim;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_headEffect;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_chestEffect;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_baseEffect;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_leftHandEffect;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_rightHandEffect;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_breathEffect;
  /*<thisrel this+0x24>*/ /*|0xc|*/ int m_specialEffect[3];
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_characterProcedure;
  /*<thisrel this+0x34>*/ /*|0x10|*/ float m_characterParam[4];
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_soundID;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_shakeID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellVisualKitRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellVisualKitRec::SpellVisualKitRec();
  void __thiscall SpellVisualKitRec::~SpellVisualKitRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellVisualKitRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class SpellVisualEffectNameRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_specialID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_specialAttachPoint;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float m_areaEffectSize;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_VisualEffectNameFlags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellVisualEffectNameRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellVisualEffectNameRec::SpellVisualEffectNameRec();
  void __thiscall SpellVisualEffectNameRec::~SpellVisualEffectNameRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellVisualEffectNameRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class SpellVisualRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_precastKit;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_castKit;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_impactKit;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_stateKit;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_channelKit;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_hasMissile;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_missileModel;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_missilePathType;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_missileDestinationAttachment;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_missileSound;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_hasAreaEffect;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_areaModel;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_areaKit;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_animEventSoundID;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_weaponTrailRed;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_weaponTrailGreen;
  /*<thisrel this+0x3e>*/ /*|0x1|*/ unsigned char m_weaponTrailBlue;
  /*<thisrel this+0x3f>*/ /*|0x1|*/ unsigned char m_weaponTrailAlpha;
  /*<thisrel this+0x40>*/ /*|0x1|*/ unsigned char m_weaponTrailFadeoutRate;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_weaponTrailDuration;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall SpellVisualRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall SpellVisualRec::SpellVisualRec();
  void __thiscall SpellVisualRec::~SpellVisualRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall SpellVisualRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x48>

class TabardEmblemTexturesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x8|*/ char* m_TorsoTexture[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TabardEmblemTexturesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TabardEmblemTexturesRec::TabardEmblemTexturesRec();
  void __thiscall TabardEmblemTexturesRec::~TabardEmblemTexturesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TabardEmblemTexturesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TabardBackgroundTexturesRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x8|*/ char* m_TorsoTexture[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall TabardBackgroundTexturesRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall TabardBackgroundTexturesRec::TabardBackgroundTexturesRec();
  void __thiscall TabardBackgroundTexturesRec::~TabardBackgroundTexturesRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall TabardBackgroundTexturesRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class CreatureSoundDataRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_soundExertionID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_soundExertionCriticalID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_soundInjuryID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_soundInjuryCriticalID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_soundInjuryCrushingBlowID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_soundDeathID;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_soundStunID;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_soundStandID;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_soundFootstepID;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_soundAggroID;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_soundWingFlapID;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_soundWingGlideID;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_soundAlertID;
  /*<thisrel this+0x38>*/ /*|0x10|*/ int m_soundFidget[4];
  /*<thisrel this+0x48>*/ /*|0x10|*/ int m_customAttack[4];
  /*<thisrel this+0x58>*/ /*|0x4|*/ int m_NPCSoundID;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ int m_loopSoundID;
  /*<thisrel this+0x60>*/ /*|0x4|*/ int m_creatureImpactType;
  /*<thisrel this+0x64>*/ /*|0x4|*/ int m_soundJumpStartID;
  /*<thisrel this+0x68>*/ /*|0x4|*/ int m_soundJumpEndID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureSoundDataRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureSoundDataRec::CreatureSoundDataRec();
  void __thiscall CreatureSoundDataRec::~CreatureSoundDataRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureSoundDataRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x6c>

class CreatureFamilyRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_minScale;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_minScaleLevel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_maxScale;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_maxScaleLevel;
  /*<thisrel this+0x14>*/ /*|0x8|*/ int m_skillLine[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureFamilyRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureFamilyRec::CreatureFamilyRec();
  void __thiscall CreatureFamilyRec::~CreatureFamilyRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureFamilyRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CreatureDisplayInfoExtraRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_DisplayRaceID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_DisplaySexID;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_SkinID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_FaceID;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_HairStyleID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_HairColorID;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_FacialHairID;
  /*<thisrel this+0x20>*/ /*|0x28|*/ int m_NPCItemDisplay[10];
  /*<thisrel this+0x48>*/ /*|0x4|*/ char* m_BakeName;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CreatureDisplayInfoExtraRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall CreatureDisplayInfoExtraRec::CreatureDisplayInfoExtraRec();
  void __thiscall CreatureDisplayInfoExtraRec::~CreatureDisplayInfoExtraRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall CreatureDisplayInfoExtraRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class GroundEffectDoodadRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_doodadIdTag;
  /*<thisrel this+0x8>*/ /*|0x4|*/ char* m_doodadpath;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall GroundEffectDoodadRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall GroundEffectDoodadRec::GroundEffectDoodadRec();
  void __thiscall GroundEffectDoodadRec::~GroundEffectDoodadRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall GroundEffectDoodadRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class GroundEffectTextureRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_ID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_datestamp;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_continentId;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_zoneId;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_textureId;
  /*<thisrel this+0x14>*/ /*|0x4|*/ char* m_textureName;
  /*<thisrel this+0x18>*/ /*|0x10|*/ int m_doodadId[4];
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_density;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_sound;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall GroundEffectTextureRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall GroundEffectTextureRec::GroundEffectTextureRec();
  void __thiscall GroundEffectTextureRec::~GroundEffectTextureRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall GroundEffectTextureRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x30>

class PetNameCache {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x30|*/ char m_name[48];
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned int m_ID;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned int m_timestamp;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Version();

  // non-virtual functions --------------------------
  void __thiscall PetNameCache();
  void __thiscall PetNameCache::Pack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  void __thiscall PetNameCache::Unpack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg);
  class PetNameCache& __thiscall operator=(class PetNameCache&);

  // virtual functions ------------------------------
};
// <size 0x38>

class CGxDeviceD3d : class CGxDevice  {

  // static data ------------------------------------
  static /*<rva 0x40b4b8>*/ /*|0x20|*/ enum EGxTexFormat s_tolerableTexFmtMapping[8];
  static /*<rva 0x40b4d8>*/ /*|0x20|*/ enum _D3DFORMAT s_GxTexFmtToD3dFmt[8];
  static /*<rva 0x459e30>*/ /*|0x20|*/ enum EGxTexFormat s_GxTexFmtToUse[8];
  static /*<rva 0x40b4f8>*/ /*|0x18|*/ enum _D3DCUBEMAP_FACES s_d3dCubeMapFaces[6];
  static /*<rva 0x40b398>*/ /*|0x20|*/ enum _D3DFORMAT s_GxFormatToD3dFormat[8];
  static /*<rva 0xa13254>*/ /*|0x4|*/ class CGxDeviceD3d* m_thisDevice;

  // non-static data --------------------------------
  /*<thisrel this+0x2144>*/ /*|0x4|*/ struct HWND__* m_hwnd;
  /*<thisrel this+0x2148>*/ /*|0x2|*/ unsigned short m_hwndClass;
  /*<thisrel this+0x214c>*/ /*|0x4|*/ int m_ownhwnd;
  /*<thisrel this+0x2150>*/ /*|0x4|*/ struct HINSTANCE__* m_d3dLib;
  /*<thisrel this+0x2154>*/ /*|0x4|*/ struct IDirect3D9* m_d3d;
  /*<thisrel this+0x2158>*/ /*|0x4|*/ struct IDirect3DDevice9* m_d3dDevice;
  /*<thisrel this+0x215c>*/ /*|0x130|*/ struct _D3DCAPS9 m_d3dCaps;
  /*<thisrel this+0x228c>*/ /*|0x4|*/ int m_d3dIsHwDevice;
  /*<thisrel this+0x2290>*/ /*|0x4|*/ int m_d3dNeedsReset;
  /*<thisrel this+0x2294>*/ /*|0x480|*/ class CVertexBufferList m_VBL[4][9];
  /*<thisrel this+0x2714>*/ /*|0x90|*/ class CGxIndexBuffer_D3d* m_IB[4][9];
  /*<thisrel this+0x27a4>*/ /*|0x4|*/ class CGxVertexBuffer_D3d* m_vertexBuffer;
  /*<thisrel this+0x27a8>*/ /*|0x4|*/ enum EGxPrim m_primType;
  /*<thisrel this+0x27ac>*/ /*|0x4|*/ unsigned int m_primIndexCount;
  /*<thisrel this+0x27b0>*/ /*|0x4|*/ int m_processedVertexPtrs;
  /*<thisrel this+0x27b4>*/ /*|0x4|*/ int m_processedIndexPtrs;
  /*<thisrel this+0x27b8>*/ /*|0x4|*/ int m_windowVisible;
  /*<thisrel this+0x27bc>*/ /*|0x10|*/ struct _D3DDISPLAYMODE m_desktopDisplayMode;
  /*<thisrel this+0x27cc>*/ /*|0x4|*/ int m_deviceSupports32BitTextures;
  /*<thisrel this+0x27d0>*/ /*|0x4|*/ int m_inScene;
  /*<thisrel this+0x27d4>*/ /*|0x4|*/ enum _D3DFORMAT m_devDepthFormat;
  /*<thisrel this+0x27d8>*/ /*|0x4|*/ enum _D3DFORMAT m_devAdapterFormat;
  /*<thisrel this+0x27dc>*/ /*|0x4|*/ struct IDirect3DSurface9* m_rttColorSurface;
  /*<thisrel this+0x27e0>*/ /*|0x4|*/ struct IDirect3DSurface9* m_rttDepthSurface;
  /*<thisrel this+0x27e4>*/ /*|0x4|*/ struct IDirect3DSurface9* m_defColorSurface;
  /*<thisrel this+0x27e8>*/ /*|0x4|*/ struct IDirect3DSurface9* m_defDepthSurface;
  /*<thisrel this+0x27ec>*/ /*|0x3a0|*/ struct CGxDeviceD3d::StateD3dLight m_d3dStatesLight[8];
  /*<thisrel this+0x2b8c>*/ /*|0x88|*/ unsigned long m_deviceState[34];
  /*<thisrel this+0x2c14>*/ /*|0x4|*/ unsigned char m_texEnable[4];

  // base classes -----------------------------------
  // baseclass class CGxDevice
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class CGxDeviceD3d* __fastcall GetDevice();
  static int __fastcall CGxDeviceD3d::ILoadD3dLib(/*<register ecx>*/ /*|0x4|*/ struct HINSTANCE__*& d3dLib, /*<register edx>*/ /*|0x4|*/ struct IDirect3D9*& d3d);
  static void __fastcall CGxDeviceD3d::IUnloadD3dLib(/*<register ecx>*/ /*|0x4|*/ struct HINSTANCE__*& d3dLib, /*<register edx>*/ /*|0x4|*/ struct IDirect3D9*& d3d);
  static long __stdcall CGxDeviceD3d::WindowProcD3d(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HWND__* hWnd, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int uMsg, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int wParam, /*<regrel ebp+0x14>*/ /*|0x4|*/ long lParam);

  // non-virtual functions --------------------------
  void __thiscall CGxDeviceD3d::CGxDeviceD3d();
  void __thiscall CGxDeviceD3d(class CGxDeviceD3d&);
  class CGxDeviceD3d& __thiscall operator=(class CGxDeviceD3d&);
  enum _D3DFORMAT __thiscall IDepthStencilBitsToFormat(unsigned int, unsigned int);
  enum _D3DFORMAT __thiscall IColorAlphaBitsToFormat(unsigned int, unsigned int);
  int __thiscall CGxDeviceD3d::ICreateD3d();
  void __thiscall CGxDeviceD3d::IDestroyD3d();
  int __thiscall CGxDeviceD3d::ICreateD3dDevice(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  void __thiscall CGxDeviceD3d::IDestroyD3dDevice();
  void __thiscall CGxDeviceD3d::ISetPresentParms(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct _D3DPRESENT_PARAMETERS_& d3dpp, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  void __thiscall CGxDeviceD3d::IReleaseD3dResources(/*<regrel ebp+0x8>*/ /*|0x4|*/ int freeTextures);
  void __thiscall CGxDeviceD3d::IPrimSetupPos(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* dstBuf);
  int __thiscall CGxDeviceD3d::IAllocBuffers();
  void __thiscall CGxDeviceD3d::ICreateBuffers(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat vbFormat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CVertexBufferList& vbl, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices, /*<regrel ebp+0x18>*/ /*|0x4|*/ class CGxIndexBuffer_D3d*& ib);
  void __thiscall CGxDeviceD3d::ICreateD3dVB(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& numVertices, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct IDirect3DVertexBuffer9*& vb);
  void __thiscall CGxDeviceD3d::ICreateD3dIB(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& numIndices, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirect3DIndexBuffer9*& ib);
  void __thiscall CGxDeviceD3d::IReleaseD3dVB(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct IDirect3DVertexBuffer9*& vb);
  void __thiscall CGxDeviceD3d::IReleaseD3dIB(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct IDirect3DIndexBuffer9*& ib);
  void __thiscall CGxDeviceD3d::IStateSync();
  void __thiscall CGxDeviceD3d::IStateSyncLights();
  void __thiscall CGxDeviceD3d::IStateSyncEnables();
  void __thiscall CGxDeviceD3d::IStateSyncMaterial();
  void __thiscall CGxDeviceD3d::IStateSyncTransforms();
  void __thiscall CGxDeviceD3d::IStateSetD3DDefaults();
  void __thiscall CGxDeviceD3d::ISetLight(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long which, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct _D3DLIGHT9& value, /*<regrel ebp+0x10>*/ /*|0x4|*/ int enabled);
  void __thiscall CGxDeviceD3d::IForceLights();
  void __thiscall CGxDeviceD3d::ITexForceRecreation(/*<regrel ebp+0x8>*/ /*|0x4|*/ int freeTextures);
  void __thiscall CGxDeviceD3d::IShaderForceRecreation(/*<regrel ebp+0x8>*/ /*|0x4|*/ int freeShaders);
  void __thiscall CGxDeviceD3d::ISceneBegin(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  void __thiscall CGxDeviceD3d::ISceneEnd();
  void __thiscall CGxDeviceD3d::IBufSetBuffers(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxBufD3d* buf);
  int __thiscall CGxDeviceD3d::ICheckTextureFormat(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long usage, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum _D3DFORMAT textureFormat);
  void __thiscall CGxDeviceD3d::ISetCaps();
  void __thiscall CGxDeviceD3d::ISetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxTex* tex);
  void __thiscall CGxDeviceD3d::ISetTexGen(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxTexGen texGen);
  void __thiscall CGxDeviceD3d::ISetTexLodBias(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ float bias);
  void __thiscall CGxDeviceD3d::ISetTexBlend(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxTexBlend blend);
  void __thiscall CGxDeviceD3d::ITexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* gxTex, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int startLevel, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int endLevel);
  void __thiscall CGxDeviceD3d::ITexUpload(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int startLevel, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int endLevel);
  void __thiscall CGxDeviceD3d::IXformSetWorld();
  void __thiscall CGxDeviceD3d::IXformSetTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu);
  void __thiscall CGxDeviceD3d::IPrimProcessVertexPtrs();
  void __thiscall CGxDeviceD3d::IPrimProcessIndexPtrs();
  void __thiscall CGxDeviceD3d::IBindPixelShader(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ps);
  void __thiscall CGxDeviceD3d::IBindVertexShader(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader* vs);
  void __thiscall CGxDeviceD3d::IPixelShaderCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ps);
  void __thiscall CGxDeviceD3d::DsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGxDeviceD3d::EDeviceState state, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long val);
  unsigned long __thiscall DsGet(enum CGxDeviceD3d::EDeviceState);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::ITexMarkAsUpdated(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::ISetShaderParamList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxShaderParam,108>& params, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forceForBind);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::~CGxDeviceD3d();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hwnd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ long  (windowProc*)(void*, unsigned int, unsigned int, long), /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceDestroy();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::DeviceSetFormat(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceSetBaseMipLevel(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int baseMipLevel);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxGammaRamp& ramp);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ float gamma);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceSetTextureQuality(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force32);
  virtual /*<vtableoff 0x0>*/ unsigned long __thiscall CGxDeviceD3d::DeviceWindow();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceReadPixels(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& rect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<NTempest::CImVector>& pixels);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceReadDepths(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& rect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<float>& depths);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceWM(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxWM wm, /*<regrel ebp+0xc>*/ /*|0x4|*/ long param1, /*<regrel ebp+0x10>*/ /*|0x4|*/ long param2);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceSetRenderTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBuffer buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxTex* gxTex, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int plane);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::DeviceOverride(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxOverride override, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long value);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::CapsWindowSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& dst);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::CapsWindowSizeInScreenCoords(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& dst);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::CapsIsWindowVisible();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::ScenePresent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::SceneClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::XformSetViewport(/*<regrel ebp+0x8>*/ /*|0x4|*/ float minX, /*<regrel ebp+0xc>*/ /*|0x4|*/ float maxX, /*<regrel ebp+0x10>*/ /*|0x4|*/ float minY, /*<regrel ebp+0x14>*/ /*|0x4|*/ float maxY, /*<regrel ebp+0x18>*/ /*|0x4|*/ float minZ, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float maxZ);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::XformSetProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::XformSetView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PrimLockAndProcessVertexPtrs(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int vertexCount, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int posStride, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* normal, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int normalStride, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::CImVector* color, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int colorStride, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned char* bone, /*<regrel ebp+0x28>*/ /*|0x4|*/ unsigned int boneStride, /*<regrel ebp+0x2c>*/ /*|0x4|*/ class NTempest::C2Vector* tex0, /*<regrel ebp+0x30>*/ /*|0x4|*/ unsigned int tex0Stride, /*<regrel ebp+0x34>*/ /*|0x4|*/ class NTempest::C2Vector* tex1, /*<regrel ebp+0x38>*/ /*|0x4|*/ unsigned int tex1Stride);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PrimLockIndexPtr(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPrim primType, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int indexCount, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* indices);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PrimDrawElements();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PrimUnlockIndexPtr();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PrimUnlockVertexPtrs();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::IRsSendToHw(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which);
  virtual /*<vtableoff 0x0>*/ struct CGxBuf* __thiscall CGxDeviceD3d::BufCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq writeFreq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices, /*<regrel ebp+0x18>*/ /*|0x4|*/ void  (userCallback*)(struct CGxBufCommand&, struct CGxBuf*), /*<regrel ebp+0x1c>*/ /*|0x4|*/ void* userArg);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::BufLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* b);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::BufRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBatch* batches, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::BufUnlock();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::BufDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf*& b);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::BufReserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::TexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxTexTarget target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int depth, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x1c>*/ /*|0x4|*/ enum EGxTexFormat dataFormat, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x24>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x28>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x2c>*/ /*|0x4|*/ class CGxTex*& texId);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceD3d::TexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x18>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x20>*/ /*|0x4|*/ class CGxTex*& texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::TexDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PixelShaderCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceD3d::PixelShaderDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps);
  virtual /*<vtableoff 0xc>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2c18>

class CGxBufD3d : struct CGxBuf  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x48>*/ /*|0x4|*/ class CVertexBufferList* m_vbl;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ class CGxVertexBuffer_D3d* m_vb;
  /*<thisrel this+0x50>*/ /*|0x4|*/ class CGxIndexBuffer_D3d* m_ib;

  // base classes -----------------------------------
  // baseclass struct CGxBuf
  // <base data offset+0x4>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxBufD3d::CGxBufD3d();
  void __thiscall CGxBufD3d(class CGxBufD3d&);
  class CGxBufD3d& __thiscall operator=(class CGxBufD3d&);
  void __thiscall CGxBufD3d::SetVBL(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CVertexBufferList* vbl);
  void __thiscall CGxBufD3d::SetVB(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexBuffer_D3d* vb);
  void __thiscall CGxBufD3d::SetIB(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxIndexBuffer_D3d* ib);
  void __thiscall CGxBufD3d::UnsetVB();
  void __thiscall CGxBufD3d::UnsetIB();
  int __thiscall CGxBufD3d::VBLValid();
  int __thiscall CGxBufD3d::IBValid();
  class CGxVertexBuffer_D3d* __thiscall GetVB();
  class CGxIndexBuffer_D3d* __thiscall GetIB();
  void __thiscall CGxBufD3d::LockVB(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem);
  void __thiscall CGxBufD3d::LockIB(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem);
  void __thiscall UnlockVB();
  void __thiscall UnlockIB();
  void __thiscall CGxBufD3d::Release();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxBufD3d::~CGxBufD3d();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x54>

class CVertexBufferList {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxContiguousVertices;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_numVerts;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_currentVB;
  /*<thisrel this+0xc>*/ /*|0x14|*/ class TSGrowableArray<CGxVertexBuffer_D3d *> m_vbList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CVertexBufferList(class CVertexBufferList&);
  void __thiscall CVertexBufferList::CVertexBufferList();
  void __thiscall CVertexBufferList::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numVerts);
  void __thiscall CVertexBufferList::Release();
  class CGxVertexBuffer_D3d* __thiscall CVertexBufferList::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int base);
  unsigned int __thiscall CVertexBufferList::GetBase();
  int __thiscall Valid();
  unsigned int __thiscall MaxContiguousVertices();
  class CVertexBufferList& __thiscall operator=(class CVertexBufferList&);
  void __thiscall ~CVertexBufferList();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class CGxVertexBuffer_D3d : class CGxVertexBuffer  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x20>*/ /*|0x4|*/ struct IDirect3DVertexBuffer9* m_d3dvb;
  /*<thisrel this+0x24>*/ /*|0x4|*/ enum EGxVertexBufferFormat m_vbFormat;

  // base classes -----------------------------------
  // baseclass class CGxVertexBuffer
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxVertexBuffer_D3d(class CGxVertexBuffer_D3d&);
  void __thiscall CGxVertexBuffer_D3d::CGxVertexBuffer_D3d(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct IDirect3DVertexBuffer9* vb, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices);
  void __thiscall CGxVertexBuffer_D3d::Discard();
  struct IDirect3DVertexBuffer9* __thiscall GetD3dBuffer();
  class CGxVertexBuffer_D3d& __thiscall operator=(class CGxVertexBuffer_D3d&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxVertexBuffer_D3d::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int base);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxVertexBuffer_D3d::Unlock();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxVertexBuffer_D3d::~CGxVertexBuffer_D3d();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x28>

class CGxIndexBuffer_D3d : class CGxIndexBuffer  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x20>*/ /*|0x4|*/ struct IDirect3DIndexBuffer9* m_d3dib;

  // base classes -----------------------------------
  // baseclass class CGxIndexBuffer
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxIndexBuffer_D3d(class CGxIndexBuffer_D3d&);
  void __thiscall CGxIndexBuffer_D3d::CGxIndexBuffer_D3d(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct IDirect3DIndexBuffer9* ib, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numIndices);
  struct IDirect3DIndexBuffer9* __thiscall GetD3dBuffer();
  class CGxIndexBuffer_D3d& __thiscall operator=(class CGxIndexBuffer_D3d&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxIndexBuffer_D3d::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numIndices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int base);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxIndexBuffer_D3d::Unlock();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxIndexBuffer_D3d::~CGxIndexBuffer_D3d();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGxVertexBuffer : class CGxMemBuffer  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGxMemBuffer
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxVertexBuffer(class CGxVertexBuffer&);
  void __thiscall CGxVertexBuffer(unsigned int);
  class CGxVertexBuffer& __thiscall operator=(class CGxVertexBuffer&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGxVertexBuffer();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CGxIndexBuffer : class CGxMemBuffer  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGxMemBuffer
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxIndexBuffer(class CGxIndexBuffer&);
  void __thiscall CGxIndexBuffer(unsigned int);
  class CGxIndexBuffer& __thiscall operator=(class CGxIndexBuffer&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGxIndexBuffer();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CGxPixelShader : class CGxShader,  class TSHashObject<CGxPixelShader,HASHKEY_STRI>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGxShader
  // <base data offset+0x0>

  // baseclass class TSHashObject<CGxPixelShader,HASHKEY_STRI>
  // <base data offset+0x3c>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxPixelShader(class CGxPixelShader&);
  void __thiscall CGxPixelShader::CGxPixelShader();
  class CGxPixelShader& __thiscall operator=(class CGxPixelShader&);
  void __thiscall CGxPixelShader::~CGxPixelShader();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>

class CGxVertexShader : class CGxShader,  class TSHashObject<CGxVertexShader,HASHKEY_STRI>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGxShader
  // <base data offset+0x0>

  // baseclass class TSHashObject<CGxVertexShader,HASHKEY_STRI>
  // <base data offset+0x3c>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxVertexShader(class CGxVertexShader&);
  void __thiscall CGxVertexShader::CGxVertexShader();
  class CGxVertexShader& __thiscall operator=(class CGxVertexShader&);
  void __thiscall CGxVertexShader::~CGxVertexShader();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>

class CGxDeviceOpenGl : class CGxDevice  {

  // static data ------------------------------------
  static /*<rva 0x40b284>*/ /*|0x4|*/ unsigned int kNullTmu;
  static /*<rva 0x459c2c>*/ /*|0x14|*/ unsigned int s_convertMinFilterToOgl[5];
  static /*<rva 0x459c40>*/ /*|0x14|*/ unsigned int s_convertMagFilterToOgl[5];
  static /*<rva 0x459c54>*/ /*|0x20|*/ int s_convertTexFmt[8];
  static /*<rva 0x459c74>*/ /*|0x20|*/ unsigned int s_dataFormatSize[8];
  static /*<rva 0x459c94>*/ /*|0x20|*/ int s_convertDataFmt[8];
  static /*<rva 0x459cb4>*/ /*|0x20|*/ int s_convertDataType[8];

  // non-static data --------------------------------
  /*<thisrel this+0x2144>*/ /*|0xac|*/ unsigned int m_deviceState[43];
  /*<thisrel this+0x21f0>*/ /*|0x4|*/ unsigned int m_lockedArrays;
  /*<thisrel this+0x21f4>*/ /*|0x4|*/ enum CGxDeviceOpenGl::EColorSource m_colorSource;
  /*<thisrel this+0x21f8>*/ /*|0x4|*/ int m_colorSourceDirty;
  /*<thisrel this+0x21fc>*/ /*|0x18|*/ struct CGxDeviceOpenGl::ColorSourceColor m_colorSourceColor[3];
  /*<thisrel this+0x2214>*/ /*|0x4|*/ void* m_nvvarMem;
  /*<thisrel this+0x2218>*/ /*|0x4|*/ unsigned int m_nvvarBytes;
  /*<thisrel this+0x221c>*/ /*|0x4|*/ unsigned int m_nvvarNext;
  /*<thisrel this+0x2220>*/ /*|0x4|*/ int m_bufRealloc;
  /*<thisrel this+0x2224>*/ /*|0x4|*/ struct HWND__* m_hwnd;
  /*<thisrel this+0x2228>*/ /*|0x4|*/ int m_ownhwnd;
  /*<thisrel this+0x222c>*/ /*|0x2|*/ unsigned short m_hwndClass;
  /*<thisrel this+0x2230>*/ /*|0x4|*/ struct HDC__* m_hdc;
  /*<thisrel this+0x2234>*/ /*|0x4|*/ struct HGLRC__* m_hglrc;
  /*<thisrel this+0x2238>*/ /*|0x4|*/ struct HPBUFFERARB__* m_hPbuffer;
  /*<thisrel this+0x223c>*/ /*|0x4|*/ struct HDC__* m_hPbufferDC;
  /*<thisrel this+0x2240>*/ /*|0x4|*/ struct HGLRC__* m_hPbufferRC;
  /*<thisrel this+0x2244>*/ /*|0x10|*/ class TSFixedArray<NTempest::C3Vector> m_primPos;
  /*<thisrel this+0x2254>*/ /*|0x10|*/ class TSFixedArray<NTempest::C3Vector> m_primNormal;
  /*<thisrel this+0x2264>*/ /*|0x10|*/ class TSFixedArray<NTempest::CImVector> m_primColor;
  /*<thisrel this+0x2274>*/ /*|0x10|*/ class TSFixedArray<NTempest::C2Vector> m_primT0;
  /*<thisrel this+0x2284>*/ /*|0x10|*/ class TSFixedArray<NTempest::C2Vector> m_primT1;
  /*<thisrel this+0x2294>*/ /*|0x10|*/ class CGxMemBuffer* m_vertexBuffer[4];
  /*<thisrel this+0x22a4>*/ /*|0x10|*/ class CGxMemBuffer* m_indexBuffer[4];
  /*<thisrel this+0x22b4>*/ /*|0x4|*/ enum EGxPrim m_primType;
  /*<thisrel this+0x22b8>*/ /*|0x4|*/ unsigned int m_primIndexCount;
  /*<thisrel this+0x22bc>*/ /*|0x4|*/ unsigned short* m_primIndices;
  /*<thisrel this+0x22c0>*/ /*|0x4|*/ int m_worldViewChange;

  // base classes -----------------------------------
  // baseclass class CGxDevice
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static long __stdcall CGxDeviceOpenGl::WindowProcGl(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HWND__* hWnd, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int uMsg, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int wParam, /*<regrel ebp+0x14>*/ /*|0x4|*/ long lParam);

  // non-virtual functions --------------------------
  void __thiscall CGxDeviceOpenGl::DsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGxDeviceOpenGl::EDeviceState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int newVal, /*<regrel ebp+0x10>*/ /*|0x4|*/ int force);
  unsigned int __thiscall DsGet(enum CGxDeviceOpenGl::EDeviceState);
  void __thiscall CGxDeviceOpenGl::DsInit();
  void __thiscall CGxDeviceOpenGl::LockArrays(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CGxDeviceOpenGl::UnlockArrays();
  void __thiscall CGxDeviceOpenGl::BindTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int tmu);
  void __thiscall CGxDeviceOpenGl::GetError();
  void __thiscall CGxDeviceOpenGl::CGxDeviceOpenGl();
  void __thiscall CGxDeviceOpenGl(class CGxDeviceOpenGl&);
  class CGxDeviceOpenGl& __thiscall operator=(class CGxDeviceOpenGl&);
  void __thiscall CGxDeviceOpenGl::IDevSetFocus(/*<regrel ebp+0x8>*/ /*|0x4|*/ int focus, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  int __thiscall CGxDeviceOpenGl::SetFormatMode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  int __thiscall CGxDeviceOpenGl::IDevAttachGlContext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  void __thiscall CGxDeviceOpenGl::IDevRemoveGlContext();
  void __thiscall CGxDeviceOpenGl::IPrimSetupPos();
  void __thiscall CGxDeviceOpenGl::IPrimSetupNormal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int stride, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* normals);
  void __thiscall CGxDeviceOpenGl::IPrimSetupColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int stride, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* colors, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0x14>*/ /*|0x4|*/ int convert);
  void __thiscall CGxDeviceOpenGl::IPrimSetupTexCoord(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int coord, /*<regrel ebp+0xc>*/ /*|0x4|*/ int enable);
  void __thiscall CGxDeviceOpenGl::IPrimSetupTexCoord(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int stride, /*<regrel ebp+0x10>*/ /*|0x4|*/ void* texCoord);
  void __thiscall CGxDeviceOpenGl::IStateSync();
  void __thiscall CGxDeviceOpenGl::IStateSyncLights();
  void __thiscall CGxDeviceOpenGl::IStateSyncEnables();
  void __thiscall CGxDeviceOpenGl::IStateSyncTexTransforms();
  void __thiscall CGxDeviceOpenGl::IStateSyncTexTransform(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu);
  void __thiscall CGxDeviceOpenGl::IStateSetContextDefaults();
  void __thiscall CGxDeviceOpenGl::IStateSetColorSource(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGxDeviceOpenGl::EColorSource source);
  void __thiscall CGxDeviceOpenGl::IStateSetColorSourceColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGxDeviceOpenGl::EColorSource source, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color);
  void __thiscall CGxDeviceOpenGl::IStateSyncColorSource();
  void __thiscall CGxDeviceOpenGl::ISetGlCaps();
  void __thiscall IXformSet(enum EGxXform);
  void __thiscall CGxDeviceOpenGl::IXformSetProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& m);
  void __thiscall CGxDeviceOpenGl::IXformGLModelView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& gxm, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& oglm);
  void __thiscall CGxDeviceOpenGl::IXformSetModelView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& m);
  void __thiscall CGxDeviceOpenGl::ITexForceRecreation();
  void __thiscall CGxDeviceOpenGl::IShaderForceRecreation();
  void __thiscall CGxDeviceOpenGl::ISetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxTex* tex);
  void __thiscall CGxDeviceOpenGl::ISetTexLodBias(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ float bias);
  void __thiscall CGxDeviceOpenGl::ISetTexBlend(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxTexBlend blend);
  void __thiscall CGxDeviceOpenGl::ISetTexGen(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxTexGen texGen);
  void __thiscall CGxDeviceOpenGl::ISceneBegin(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  void __thiscall CGxDeviceOpenGl::AllocBuffers();
  void __thiscall CGxDeviceOpenGl::IAllocBuffers();
  void __thiscall CGxDeviceOpenGl::FreeBuffers();
  void __thiscall CGxDeviceOpenGl::AllocVertexBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  void __thiscall CGxDeviceOpenGl::IAllocVertexBufferVAR(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  void __thiscall CGxDeviceOpenGl::FreeVertexBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxMemBuffer*& b);
  void __thiscall CGxDeviceOpenGl::AllocIndexBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  void __thiscall CGxDeviceOpenGl::FreeIndexBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxMemBuffer*& b);
  void __thiscall CGxDeviceOpenGl::IAllocVAR();
  void __thiscall CGxDeviceOpenGl::IFreeVAR();
  void __thiscall CGxDeviceOpenGl::ITexSetFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  void __thiscall CGxDeviceOpenGl::ITexDownload(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int startLevel, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int oglBase, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned int texelStrideInBytes, /*<regrel ebp+0x20>*/ /*|0x4|*/ void* texels);
  void __thiscall CGxDeviceOpenGl::IBufSetBuffers(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxBufOgl* buf);
  void __thiscall CGxDeviceOpenGl::IPixelShaderBind(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ps);
  void __thiscall CGxDeviceOpenGl::DeviceCreatePbuffer();
  void __thiscall CGxDeviceOpenGl::DeviceQueryPbuffer();
  void __thiscall CGxDeviceOpenGl::DeviceDestroyPbuffer();
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::ISetShaderParamList(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxShaderParam,108>& params, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forceForBind);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::ITexMarkAsUpdated(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int tmu);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::ITexMarkAsUpdated(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::~CGxDeviceOpenGl();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceOpenGl::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int clienthwnd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceOpenGl::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ long  (windowProc*)(void*, unsigned int, unsigned int, long), /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceDestroy();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceOpenGl::DeviceSetFormat(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceSetBaseMipLevel(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int baseMipLevel);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxGammaRamp& ramp);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ float gamma);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceSetTextureQuality(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force32);
  virtual /*<vtableoff 0x0>*/ unsigned long __thiscall CGxDeviceOpenGl::DeviceWindow();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceReadPixels(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& rect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<NTempest::CImVector>& pixels);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceReadDepths(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& rect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<float>& depths);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceWM(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxWM wm, /*<regrel ebp+0xc>*/ /*|0x4|*/ long param1, /*<regrel ebp+0x10>*/ /*|0x4|*/ long param2);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceSetRenderTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBuffer buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxTex* gxTex, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int plane);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::DeviceOverride(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxOverride override, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long value);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::CapsWindowSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& dst);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::CapsWindowSizeInScreenCoords(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& dst);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceOpenGl::CapsIsWindowVisible();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::ScenePresent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::SceneClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::XformSetViewport(/*<regrel ebp+0x8>*/ /*|0x4|*/ float minX, /*<regrel ebp+0xc>*/ /*|0x4|*/ float maxX, /*<regrel ebp+0x10>*/ /*|0x4|*/ float minY, /*<regrel ebp+0x14>*/ /*|0x4|*/ float maxY, /*<regrel ebp+0x18>*/ /*|0x4|*/ float minZ, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float maxZ);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::XformSetProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::XformSetView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimLockAndProcessVertexPtrs(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int vertexCount, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int posStride, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* normal, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int normalStride, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::CImVector* color, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int colorStride, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned char* bone, /*<regrel ebp+0x28>*/ /*|0x4|*/ unsigned int boneStride, /*<regrel ebp+0x2c>*/ /*|0x4|*/ class NTempest::C2Vector* tex0, /*<regrel ebp+0x30>*/ /*|0x4|*/ unsigned int tex0Stride, /*<regrel ebp+0x34>*/ /*|0x4|*/ class NTempest::C2Vector* tex1, /*<regrel ebp+0x38>*/ /*|0x4|*/ unsigned int tex1Stride);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimLockIndexPtr(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPrim primType, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int indexCount, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* indices);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimDrawElements();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimUnlockIndexPtr();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimUnlockVertexPtrs();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimPointSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ float s);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PrimLineWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float w);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::IRsSendToHw(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which);
  virtual /*<vtableoff 0x0>*/ struct CGxBuf* __thiscall CGxDeviceOpenGl::BufCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq writeFreq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices, /*<regrel ebp+0x18>*/ /*|0x4|*/ void  (userCallback*)(struct CGxBufCommand&, struct CGxBuf*), /*<regrel ebp+0x1c>*/ /*|0x4|*/ void* userArg);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::BufLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* b);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::BufRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBatch* batches, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::BufUnlock();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::BufDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf*& b);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::BufReserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGxDeviceOpenGl::TexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x18>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x20>*/ /*|0x4|*/ class CGxTex*& texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::TexDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PixelShaderCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDeviceOpenGl::PixelShaderDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps);
  virtual /*<vtableoff 0xc>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x22c4>

class CGxBufOgl : struct CGxBuf  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x44>*/ /*|0x4|*/ class CGxMemBuffer* m_vb;
  /*<thisrel this+0x48>*/ /*|0x4|*/ class CGxMemBuffer* m_ib;
  /*<thisrel this+0x4c>*/ /*|0x1c|*/ void* vertexPtr[7];
  /*<thisrel this+0x68>*/ /*|0x4|*/ unsigned short* indexPtr;

  // base classes -----------------------------------
  // baseclass struct CGxBuf
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxBufOgl(class CGxBufOgl&);
  void __thiscall CGxBufOgl::CGxBufOgl();
  int __thiscall CGxBufOgl::LockVB();
  int __thiscall CGxBufOgl::LockIB();
  void __thiscall CGxBufOgl::UnlockVB();
  void __thiscall CGxBufOgl::UnlockIB();
  void __thiscall SetVB(class CGxMemBuffer*);
  void __thiscall SetIB(class CGxMemBuffer*);
  class CGxMemBuffer* __thiscall GetVB();
  class CGxMemBuffer* __thiscall GetIB();
  class CGxBufOgl& __thiscall operator=(class CGxBufOgl&);
  void __thiscall ~CGxBufOgl();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x6c>

class CGxDevice {

  // static data ------------------------------------
  static /*<rva 0x40b06c>*/ /*|0x0|*/ unsigned int s_texFormatBitDepth[0];
  static /*<rva 0xa13248>*/ /*|0x4|*/ struct HSLOG__* m_log;

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x14|*/ class TSGrowableArray<CGxPushedRenderState> mPushedStates;
  /*<thisrel this+0x18>*/ /*|0x14|*/ class TSGrowableArray<unsigned long> mStackOffsets;
  /*<thisrel this+0x2c>*/ /*|0x14|*/ class TSGrowableArray<enum EGxRenderState> mDirtyStates;
  /*<thisrel this+0x40>*/ /*|0x34|*/ unsigned int m_perfCountersLatched[13];
  /*<thisrel this+0x74>*/ /*|0x34|*/ unsigned int m_perfCountersAcc[13];
  /*<thisrel this+0xa8>*/ /*|0x4|*/ enum EGxPrim m_primType;
  /*<thisrel this+0xac>*/ /*|0x4|*/ unsigned int m_primIndexCount;
  /*<thisrel this+0xb0>*/ /*|0x4|*/ int m_indexLocked;
  /*<thisrel this+0xb4>*/ /*|0x4|*/ int m_vertexLocked;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ int m_inBeginEnd;
  /*<thisrel this+0xbc>*/ /*|0xc|*/ class NTempest::C3Vector m_primVertex;
  /*<thisrel this+0xc8>*/ /*|0x20|*/ class NTempest::C2Vector m_primTexCoord[4];
  /*<thisrel this+0xe8>*/ /*|0xc|*/ class NTempest::C3Vector m_primNormal;
  /*<thisrel this+0xf4>*/ /*|0x4|*/ class NTempest::CImVector m_primColor;
  /*<thisrel this+0xf8>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> m_primVertexArray;
  /*<thisrel this+0x10c>*/ /*|0x50|*/ class TSGrowableArray<NTempest::C2Vector> m_primTexCoordArray[4];
  /*<thisrel this+0x15c>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> m_primNormalArray;
  /*<thisrel this+0x170>*/ /*|0x14|*/ class TSGrowableArray<NTempest::CImVector> m_primColorArray;
  /*<thisrel this+0x184>*/ /*|0x14|*/ class TSGrowableArray<unsigned short> m_primIndexArray;
  /*<thisrel this+0x198>*/ /*|0x4|*/ unsigned int m_primMask;
  /*<thisrel this+0x19c>*/ /*|0x10|*/ class NTempest::CRect m_defWindowRect;
  /*<thisrel this+0x1ac>*/ /*|0x10|*/ class NTempest::CRect m_curWindowRect;
  /*<thisrel this+0x1bc>*/ /*|0x4|*/ int m_context;
  /*<thisrel this+0x1c0>*/ /*|0x4|*/ enum EGxApi m_api;
  /*<thisrel this+0x1c4>*/ /*|0x4|*/ unsigned long m_cpuFeatures;
  /*<thisrel this+0x1c8>*/ /*|0x28|*/ struct CGxFormat m_format;
  /*<thisrel this+0x1f0>*/ /*|0x68|*/ class CGxCaps m_caps;
  /*<thisrel this+0x258>*/ /*|0x4|*/ unsigned int m_baseMipLevel;
  /*<thisrel this+0x25c>*/ /*|0x4|*/ int m_force32BitTextures;
  /*<thisrel this+0x260>*/ /*|0x4|*/ class NTempest::CImVector m_clearColor;
  /*<thisrel this+0x264>*/ /*|0x600|*/ struct CGxGammaRamp m_gammaRamp;
  /*<thisrel this+0x864>*/ /*|0x600|*/ struct CGxGammaRamp m_systemGammaRamp;
  /*<thisrel this+0xe64>*/ /*|0x4|*/ long  (m_windowProc*)(void*, unsigned int, unsigned int, long);
  /*<thisrel this+0xe68>*/ /*|0x18|*/ class CBoundingBox m_viewport;
  /*<thisrel this+0xe80>*/ /*|0x40|*/ class NTempest::C44Matrix m_projection;
  /*<thisrel this+0xec0>*/ /*|0x4|*/ class NTempest::C34Matrix* m_bones;
  /*<thisrel this+0xec4>*/ /*|0x4|*/ unsigned int m_boneCount;
  /*<thisrel this+0xec8>*/ /*|0x7a8|*/ class CGxMatrixStack m_xforms[7];
  /*<thisrel this+0x1670>*/ /*|0x460|*/ class CGxMatrixStack m_texGen[4];
  /*<thisrel this+0x1ad0>*/ /*|0x4|*/ enum EGxVertexShader m_vertexShader;
  /*<thisrel this+0x1ad4>*/ /*|0x4|*/ enum EGxVertexBufferFormat m_vertexBufferFormat;
  /*<thisrel this+0x1ad8>*/ /*|0x4|*/ enum CGxPixelShader::Target m_pixelShaderPlatform;
  /*<thisrel this+0x1adc>*/ /*|0x48|*/ class TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1> m_pixelShaderList;
  /*<thisrel this+0x1b24>*/ /*|0x48|*/ class TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1> m_vertexShaderList;
  /*<thisrel this+0x1b6c>*/ /*|0x20c|*/ class CGxStateRegister m_appState;
  /*<thisrel this+0x1d78>*/ /*|0x20c|*/ class CGxStateRegister m_hwState;
  /*<thisrel this+0x1f84>*/ /*|0xc|*/ class TSExplicitList<CGxBuf,0> m_bufList;
  /*<thisrel this+0x1f90>*/ /*|0x4|*/ struct CGxBuf* m_bufLocked;
  /*<thisrel this+0x1f94>*/ /*|0x90|*/ unsigned int m_VBReserve[4][9];
  /*<thisrel this+0x2024>*/ /*|0x90|*/ unsigned int m_IBReserve[4][9];
  /*<thisrel this+0x20b4>*/ /*|0x24|*/ struct CGxBuf* m_dynBuf[9];
  /*<thisrel this+0x20d8>*/ /*|0x10|*/ class TSFixedArray<CGxAppRenderState> mAppRenderStates;
  /*<thisrel this+0x20e8>*/ /*|0x10|*/ class TSFixedArray<CGxStateBom> mHwRenderStates;
  /*<thisrel this+0x20f8>*/ /*|0x14|*/ class TSGrowableArray<CGxTex *> m_textures;
  /*<thisrel this+0x210c>*/ /*|0x18|*/ struct CGxDevice::TextureTarget m_textureTarget[2];
  /*<thisrel this+0x2124>*/ /*|0x4|*/ int m_scrShotClick;
  /*<thisrel this+0x2128>*/ /*|0x4|*/ unsigned int m_scrShotWidth;
  /*<thisrel this+0x212c>*/ /*|0x4|*/ unsigned int m_scrShotHeight;
  /*<thisrel this+0x2130>*/ /*|0x14|*/ class TSGrowableArray<NTempest::CImVector> m_scrShotPixels;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __cdecl CGxDevice::Log(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* format, /*<regrel ebp-0x800>*/ /*|0x800|*/ char buffer[2048]);
  static int __fastcall CGxDevice::OpenGlEnumFormats(/*<register ecx>*/ /*|0x4|*/ class TSGrowableArray<CGxFormat>& formats);
  static int __fastcall CGxDevice::D3dEnumFormats(/*<register ecx>*/ /*|0x4|*/ class TSGrowableArray<CGxFormat>& formats);
  static class CGxDevice* __fastcall CGxDevice::NewOpenGl();
  static class CGxDevice* __fastcall CGxDevice::NewD3d();
  static void __fastcall CGxDevice::LogOpen();
  static void __fastcall CGxDevice::LogClose();
  static int __fastcall CGxDevice::AdapterID(/*<register ecx>*/ /*|0x4|*/ unsigned short& vendorID, /*<register edx>*/ /*|0x4|*/ unsigned short& deviceID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long& driverVersionHi, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long& driverVersionLow);
  static int __fastcall CGxDevice::AdapterInfer(/*<register ecx>*/ /*|0x4|*/ unsigned short& deviceID);
  static int __fastcall CGxDevice::AdapterMonitorModes(/*<register ecx>*/ /*|0x4|*/ class TSGrowableArray<CGxMonitorMode>& modes);
  static int __fastcall CGxDevice::AdapterDesktopMode(/*<register ecx>*/ /*|0x4|*/ struct CGxMonitorMode& mode);
  static float __fastcall CGxDevice::CpuFrequency();
  static __int64 __fastcall CGxDevice::CpuTicks();
  static void __cdecl CGxDevice::DbgPrintf(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* format, /*<regrel ebp-0x100>*/ /*|0x100|*/ char buffer[256]);

  // non-virtual functions --------------------------
  void __thiscall CGxDevice::CGxDevice();
  void __thiscall CGxDevice(class CGxDevice&);
  class CGxDevice& __thiscall operator=(class CGxDevice&);
  void __thiscall CGxDevice::IRsInit();
  void __thiscall CGxDevice::IRsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxStateBom& value);
  void __thiscall CGxDevice::PerfCountersLatch();
  int __thiscall CGxDevice::EnableState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long app, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long appDisables, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int flagPos);
  int __thiscall CGxDevice::NeedsUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long app, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long hw, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long appDisables, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long hwDisables, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int flagPos, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int& enable);
  unsigned int __thiscall CGxDevice::ITexComputeByteSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height);
  void __thiscall CGxDevice::ITexBind(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  unsigned int __thiscall CGxDevice::IMatAlphaRef(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBlend op);
  int __thiscall CGxDevice::IDevIsWindowed();
  int __thiscall CGxDevice::IVbHasColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format);
  enum EGxVertexBufferFormat __thiscall CGxDevice::IGiveVbColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format);
  void __thiscall CGxDevice::IRsForceUpdate();
  void __thiscall CGxDevice::IRsForceUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState ndx_);
  void __thiscall CGxDevice::IRsSync(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force);
  void __thiscall CGxDevice::DeviceScreenShot();
  void __thiscall CGxDevice::ClampRectToWindow(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& rect);
  void __thiscall CGxDevice::ISetShaderParameters(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShader* sh, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forceForBind);
  void __thiscall CGxDevice::Log(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  void __thiscall CGxDevice::Log(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxCaps& caps);
  void __thiscall PerfAcc(enum EGxPerfCounter, unsigned int);
  class NTempest::CRect& __thiscall CGxDevice::DeviceCurWindow();
  class NTempest::CRect& __thiscall CGxDevice::DeviceDefWindow();
  void __thiscall CGxDevice::DeviceSetDefWindow(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CGxDevice::DeviceSetCurWindow(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CGxDevice::CreateDynamicBufs();
  void __thiscall CGxDevice::DestroyDynamicBufs();
  struct CGxFormat& __thiscall CGxDevice::DeviceFormat();
  unsigned int __thiscall CGxDevice::DeviceBaseMipLevel();
  void __thiscall CGxDevice::DeviceGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxGammaRamp& ramp);
  void __thiscall CGxDevice::DeviceSystemGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxGammaRamp& ramp);
  int __thiscall CGxDevice::DeviceTextureQuality();
  enum EGxApi __thiscall CGxDevice::DeviceApi();
  void __thiscall CGxDevice::DeviceClearScreenShot();
  class CGxCaps& __thiscall CGxDevice::Caps();
  class NTempest::CImVector __thiscall CGxDevice::SceneClearColor();
  void __thiscall CGxDevice::XformViewport(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& minX, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& maxX, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& minY, /*<regrel ebp+0x14>*/ /*|0x4|*/ float& maxY, /*<regrel ebp+0x18>*/ /*|0x4|*/ float& minZ, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float& maxZ);
  void __thiscall CGxDevice::XformProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  void __thiscall CGxDevice::XformView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  void __thiscall CGxDevice::XformBone(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int ndx, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix& matrix);
  void __thiscall CGxDevice::XformPush(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  void __thiscall CGxDevice::XformPush(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf);
  void __thiscall CGxDevice::XformPop(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf);
  void __thiscall CGxDevice::XformIdentity(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf);
  void __thiscall CGxDevice::XformSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  void __thiscall CGxDevice::XformTranslate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& t);
  void __thiscall CGxDevice::XformScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& s);
  void __thiscall CGxDevice::XformMult(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& m);
  void __thiscall CGxDevice::Xform(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxXform xf, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  unsigned int __thiscall CGxDevice::PrimCalcCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPrim primType, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int indexCount);
  void __thiscall CGxDevice::Light(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int whichLight, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxLight& lightInfo);
  int __thiscall CGxDevice::MasterEnable(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxMasterEnables state);
  void __thiscall CGxDevice::RsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* value);
  void __thiscall CGxDevice::RsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& value);
  void __thiscall CGxDevice::RsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector value);
  void __thiscall CGxDevice::RsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ float value);
  void __thiscall CGxDevice::RsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ int value);
  void __thiscall CGxDevice::RsGet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ void*& value);
  void __thiscall CGxDevice::RsGet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& value);
  void __thiscall CGxDevice::RsGet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& value);
  void __thiscall CGxDevice::RsGet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& value);
  void __thiscall CGxDevice::RsGet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxRenderState which, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& value);
  void __thiscall CGxDevice::RsPush();
  void __thiscall CGxDevice::RsPop();
  void __thiscall CGxDevice::RsInit();
  unsigned int __thiscall CGxDevice::RsStackOffset();
  struct CGxBuf* __thiscall CGxDevice::BufGetDynamic(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexBufferFormat format);
  void __thiscall CGxDevice::TexMarkForUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CiRect& updateRect, /*<regrel ebp+0x10>*/ /*|0x4|*/ int immediate);
  int __thiscall CGxDevice::TexNeedsUpdate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  void __thiscall CGxDevice::TexSetUserData(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* userArg);
  void __thiscall CGxDevice::TexSetFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxTexFlags flags);
  void* __thiscall CGxDevice::TexUserArg(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  void __thiscall CGxDevice::TexGetDimensions(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* height);
  void __thiscall CGxDevice::TexParameters(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxTexParmsEx& parms);
  void __thiscall CGxDevice::TexParameters(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxTexParms& parms);
  void __thiscall CGxDevice::TexFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxTexFlags& flags);
  void __thiscall CGxDevice::TexSetDataFormat(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxTexFormat dataFormat);
  unsigned int __thiscall CGxDevice::PerfCounter(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPerfCounter counter);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxDevice::ITexMarkAsUpdated(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0x4>*/ void __thiscall IRsSendToHw(enum EGxRenderState) = 0;
  virtual /*<vtableoff 0x8>*/ void __thiscall ISetShaderParamList(class TSExplicitList<CGxShaderParam,108>&, int) = 0;
  virtual /*<vtableoff 0xc>*/ void __thiscall CGxDevice::~CGxDevice();
  virtual /*<vtableoff 0x14>*/ int __thiscall CGxDevice::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hwnd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x14>*/ int __thiscall CGxDevice::DeviceCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ long  (windowProc*)(void*, unsigned int, unsigned int, long), /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x18>*/ void __thiscall CGxDevice::DeviceDestroy();
  virtual /*<vtableoff 0x1c>*/ int __thiscall CGxDevice::DeviceSetFormat(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxFormat& format);
  virtual /*<vtableoff 0x20>*/ void __thiscall CGxDevice::DeviceSetBaseMipLevel(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int baseMipLevel);
  virtual /*<vtableoff 0x28>*/ void __thiscall CGxDevice::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxGammaRamp& ramp);
  virtual /*<vtableoff 0x28>*/ void __thiscall CGxDevice::DeviceSetGamma(/*<regrel ebp+0x8>*/ /*|0x4|*/ float gamma);
  virtual /*<vtableoff 0x2c>*/ void __thiscall CGxDevice::DeviceSetTextureQuality(/*<regrel ebp+0x8>*/ /*|0x4|*/ int force32);
  virtual /*<vtableoff 0x30>*/ unsigned long __thiscall DeviceWindow() = 0;
  virtual /*<vtableoff 0x34>*/ void __thiscall CGxDevice::DeviceTakeScreenShot();
  virtual /*<vtableoff 0x38>*/ void __thiscall CGxDevice::DeviceReadScreenShot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& w, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& h, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector*& pixels);
  virtual /*<vtableoff 0x3c>*/ void __thiscall DeviceReadPixels(class NTempest::CiRect&, class TSGrowableArray<NTempest::CImVector>&) = 0;
  virtual /*<vtableoff 0x40>*/ void __thiscall DeviceReadDepths(class NTempest::CiRect&, class TSGrowableArray<float>&) = 0;
  virtual /*<vtableoff 0x44>*/ void __thiscall DeviceWM(enum EGxWM, long, long) = 0;
  virtual /*<vtableoff 0x48>*/ void __thiscall CGxDevice::DeviceSetRenderTarget(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBuffer buffer, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxTex* texture, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int plane);
  virtual /*<vtableoff 0x4c>*/ void __thiscall CGxDevice::DeviceOverride(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxOverride override, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long value);
  virtual /*<vtableoff 0x50>*/ void __thiscall CapsWindowSize(class NTempest::CRect&) = 0;
  virtual /*<vtableoff 0x54>*/ void __thiscall CapsWindowSizeInScreenCoords(class NTempest::CRect&) = 0;
  virtual /*<vtableoff 0x58>*/ int __thiscall CapsIsWindowVisible() = 0;
  virtual /*<vtableoff 0x5c>*/ void __thiscall CGxDevice::SceneSetClearColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector clearColor);
  virtual /*<vtableoff 0x60>*/ void __thiscall CGxDevice::ScenePresent(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x64>*/ void __thiscall CGxDevice::SceneClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int mask);
  virtual /*<vtableoff 0x68>*/ void __thiscall CGxDevice::XformSetViewport(/*<regrel ebp+0x8>*/ /*|0x4|*/ float minX, /*<regrel ebp+0xc>*/ /*|0x4|*/ float maxX, /*<regrel ebp+0x10>*/ /*|0x4|*/ float minY, /*<regrel ebp+0x14>*/ /*|0x4|*/ float maxY, /*<regrel ebp+0x18>*/ /*|0x4|*/ float minZ, /*<regrel ebp+0x1c>*/ /*|0x4|*/ float maxZ);
  virtual /*<vtableoff 0x6c>*/ void __thiscall CGxDevice::XformSetProjection(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x70>*/ void __thiscall CGxDevice::XformSetView(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& matrix);
  virtual /*<vtableoff 0x74>*/ void __thiscall CGxDevice::XformSetBones(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int numBones, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix* matrices);
  virtual /*<vtableoff 0x78>*/ void __thiscall CGxDevice::VertexShaderSelect(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxVertexShader shader);
  virtual /*<vtableoff 0x7c>*/ void __thiscall CGxDevice::PrimLockAndProcessVertexPtrs(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int vertexCount, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int posStride, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* normal, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int normalStride, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class NTempest::CImVector* color, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int colorStride, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned char* bone, /*<regrel ebp+0x28>*/ /*|0x4|*/ unsigned int boneStride, /*<regrel ebp+0x2c>*/ /*|0x4|*/ class NTempest::C2Vector* tex0, /*<regrel ebp+0x30>*/ /*|0x4|*/ unsigned int tex0Stride, /*<regrel ebp+0x34>*/ /*|0x4|*/ class NTempest::C2Vector* tex1, /*<regrel ebp+0x38>*/ /*|0x4|*/ unsigned int tex1Stride);
  virtual /*<vtableoff 0x80>*/ void __thiscall CGxDevice::PrimLockIndexPtr(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPrim primType, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int indexCount, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* indices);
  virtual /*<vtableoff 0x84>*/ void __thiscall CGxDevice::PrimDrawElements();
  virtual /*<vtableoff 0x88>*/ void __thiscall CGxDevice::PrimUnlockIndexPtr();
  virtual /*<vtableoff 0x8c>*/ void __thiscall CGxDevice::PrimUnlockVertexPtrs();
  virtual /*<vtableoff 0x90>*/ void __thiscall CGxDevice::PrimBegin(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxPrim primType);
  virtual /*<vtableoff 0x94>*/ void __thiscall CGxDevice::PrimEnd();
  virtual /*<vtableoff 0x98>*/ void __thiscall CGxDevice::PrimVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v);
  virtual /*<vtableoff 0x9c>*/ void __thiscall CGxDevice::PrimTexCoord(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int tmu, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector& t);
  virtual /*<vtableoff 0xa0>*/ void __thiscall CGxDevice::PrimNormal(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& n);
  virtual /*<vtableoff 0xa4>*/ void __thiscall CGxDevice::PrimColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& c);
  virtual /*<vtableoff 0xa8>*/ void __thiscall CGxDevice::PrimPointSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ float s);
  virtual /*<vtableoff 0xac>*/ void __thiscall CGxDevice::PrimLineWidth(/*<regrel ebp+0x8>*/ /*|0x4|*/ float w);
  virtual /*<vtableoff 0xb0>*/ void __thiscall CGxDevice::LightSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int whichLight, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CGxLight& lightInfo, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos);
  virtual /*<vtableoff 0xb4>*/ void __thiscall CGxDevice::LightEnable(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int whichLight, /*<regrel ebp+0xc>*/ /*|0x4|*/ int enable);
  virtual /*<vtableoff 0xb8>*/ void __thiscall CGxDevice::MasterEnableSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxMasterEnables state, /*<regrel ebp+0xc>*/ /*|0x4|*/ int enable);
  virtual /*<vtableoff 0xbc>*/ struct CGxBuf* __thiscall CGxDevice::BufCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq writeFreq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices, /*<regrel ebp+0x18>*/ /*|0x4|*/ void  (userCallback*)(struct CGxBufCommand&, struct CGxBuf*), /*<regrel ebp+0x1c>*/ /*|0x4|*/ void* userArg);
  virtual /*<vtableoff 0xc0>*/ void __thiscall CGxDevice::BufLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* buf);
  virtual /*<vtableoff 0xc4>*/ void __thiscall CGxDevice::BufRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBatch* batches, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  virtual /*<vtableoff 0xc8>*/ void __thiscall CGxDevice::BufUnlock();
  virtual /*<vtableoff 0xcc>*/ void __thiscall CGxDevice::BufDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf*& buf);
  virtual /*<vtableoff 0xd0>*/ void __thiscall CGxDevice::BufReserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxBufWriteFreq freq, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum EGxVertexBufferFormat format, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int numVertices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int numIndices);
  virtual /*<vtableoff 0xd8>*/ int __thiscall CGxDevice::TexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum EGxTexTarget target, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int depth, /*<regrel ebp+0x18>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x1c>*/ /*|0x4|*/ enum EGxTexFormat dataFormat, /*<regrel ebp+0x20>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x24>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x28>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x2c>*/ /*|0x4|*/ class CGxTex*& texId);
  virtual /*<vtableoff 0xd8>*/ int __thiscall CGxDevice::TexCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int width, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int height, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum EGxTexFormat format, /*<regrel ebp+0x14>*/ /*|0x4|*/ struct CGxTexFlags flags, /*<regrel ebp+0x18>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&), /*<regrel ebp+0x20>*/ /*|0x4|*/ class CGxTex*& texId);
  virtual /*<vtableoff 0xdc>*/ void __thiscall CGxDevice::TexDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTex* texId);
  virtual /*<vtableoff 0xe0>*/ void __thiscall CGxDevice::PixelShaderCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename);
  virtual /*<vtableoff 0xe4>*/ void __thiscall CGxDevice::PixelShaderDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader*& ps);
  virtual /*<vtableoff 0xe8>*/ void __thiscall CGxDevice::VertexShaderCreate(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader*& vs, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* filename);
  virtual /*<vtableoff 0xec>*/ void __thiscall CGxDevice::VertexShaderDestroy(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader*& vs);
  virtual /*<vtableoff 0xc>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x2144>

class CGxMemBuffer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_base;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_next;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_discard;
  /*<thisrel this+0x14>*/ /*|0xc|*/ class TSExplicitList<CGxBuf,-572662307> m_bufList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxMemBuffer::InvalidateBufs(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum CGxBuf::Status vertexStatus, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum CGxBuf::Status indexStatus);
  void __thiscall CGxMemBuffer(class CGxMemBuffer&);
  void __thiscall CGxMemBuffer::CGxMemBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CGxMemBuffer::AddBuf(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CGxMemBuffer::RemoveBuf(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CGxMemBuffer::Discard();
  unsigned int __thiscall GetBase();
  unsigned int __thiscall GetCount();
  unsigned int __thiscall GetNext();
  int __thiscall GetDiscard();
  class CGxMemBuffer& __thiscall operator=(class CGxMemBuffer&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxMemBuffer::~CGxMemBuffer();
  virtual /*<vtableoff 0x4>*/ void __thiscall Lock(void*&, unsigned int, unsigned int) = 0;
  virtual /*<vtableoff 0x8>*/ void __thiscall Unlock() = 0;
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x20>

class CGxMemBuffer_VAR : class CGxMemBuffer  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x20>*/ /*|0x4|*/ void* m_mem;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int m_fence;

  // base classes -----------------------------------
  // baseclass class CGxMemBuffer
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxMemBuffer_VAR::Fence();
  void __thiscall CGxMemBuffer_VAR(class CGxMemBuffer_VAR&);
  void __thiscall CGxMemBuffer_VAR::CGxMemBuffer_VAR(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* mem);
  class CGxMemBuffer_VAR& __thiscall operator=(class CGxMemBuffer_VAR&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxMemBuffer_VAR::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ void*& mem, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int base);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxMemBuffer_VAR::Unlock();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGxMemBuffer_VAR::~CGxMemBuffer_VAR();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x28>

class CGxStateRegister {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1e0|*/ class CGxLight m_lights[8];
  /*<thisrel this+0x1e0>*/ /*|0x20|*/ int m_lightsDirty[8];
  /*<thisrel this+0x200>*/ /*|0x4|*/ float m_lightLinearFalloff;
  /*<thisrel this+0x204>*/ /*|0x4|*/ float m_lightQuadraticFalloff;
  /*<thisrel this+0x208>*/ /*|0x4|*/ unsigned long m_masterEnables;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxStateRegister(class CGxStateRegister&);
  void __thiscall CGxStateRegister::CGxStateRegister();
  class CGxStateRegister& __thiscall operator=(class CGxStateRegister&);
  void __thiscall ~CGxStateRegister();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20c>

class CGxMatrixStack {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_level;
  /*<thisrel this+0x4>*/ /*|0x1|*/ unsigned char m_dirty;
  /*<thisrel this+0x8>*/ /*|0x100|*/ class NTempest::C44Matrix m_mtx[4];
  /*<thisrel this+0x108>*/ /*|0x10|*/ unsigned int m_flags[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int __thiscall Flags();
  void __thiscall CGxMatrixStack::CGxMatrixStack();
  void __thiscall CGxMatrixStack::Push();
  void __thiscall CGxMatrixStack::Pop();
  void __thiscall CGxMatrixStack::Identity();
  class NTempest::C44Matrix& __thiscall CGxMatrixStack::Top();
  class NTempest::C44Matrix& __thiscall TopConst();
  void __thiscall CGxMatrixStack::~CGxMatrixStack();
  class CGxMatrixStack& __thiscall operator=(class CGxMatrixStack&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x118>

class CGxStateBom {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ int mData[3];
  /*<thisrel this+0xc>*/ /*|0x4|*/ int filler;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall operator!=(class CGxStateBom&);
  class CGxStateBom __thiscall operator~();
  int __thiscall GetAsInt();
  float __thiscall GetAsFloat();
  class NTempest::CImVector __thiscall GetAsCArgb();
  class NTempest::C3Vector __thiscall GetAsC3Vector();
  void* __thiscall GetAsPointer();

  // virtual functions ------------------------------
};
// <size 0x10>

class CGxShaderParam {

  // static data ------------------------------------
  static /*<rva 0x40b044>*/ /*|0x0|*/ unsigned int TypeCountTable[0];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x20|*/ char name[32];
  /*<thisrel this+0x20>*/ /*|0x4|*/ enum CGxShaderParam::Type type;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int index;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int dirty;
  /*<thisrel this+0x2c>*/ /*|0x40|*/ float f[16];
  /*<thisrel this+0x6c>*/ /*|0x8|*/ class TSLink<CGxShaderParam> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxShaderParam::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& m);
  void __thiscall CGxShaderParam::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C34Matrix& m);
  void __thiscall CGxShaderParam::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Vector& v);
  void __thiscall CGxShaderParam::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file);
  void __thiscall CGxShaderParam(class CGxShaderParam&);
  void __thiscall CGxShaderParam();
  char* __thiscall GetName();
  enum CGxShaderParam::Type __thiscall GetType();
  class CGxShaderParam& __thiscall operator=(class CGxShaderParam&);
  void __thiscall ~CGxShaderParam();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x74>

class CGxShader {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int refCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int apiSpecific;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int valid;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int paramsDirty;
  /*<thisrel this+0x10>*/ /*|0xc|*/ class TSExplicitList<CGxShaderParam,108> consts;
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class TSExplicitList<CGxShaderParam,108> params;
  /*<thisrel this+0x28>*/ /*|0x14|*/ class TSGrowableArray<unsigned char> code;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxShader::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* file);
  void __thiscall CGxShader(class CGxShader&);
  void __thiscall CGxShader();
  void __thiscall CGxShader::~CGxShader();
  int __thiscall Valid();
  class CGxShaderParam* __thiscall CGxShader::GetFirstParam();
  class CGxShaderParam* __thiscall CGxShader::GetNextParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShaderParam* p);
  class CGxShaderParam* __thiscall CGxShader::GetParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall CGxShader::SetParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShaderParam* p, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix& m);
  void __thiscall CGxShader::SetParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShaderParam* p, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix& m);
  void __thiscall CGxShader::SetParam(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShaderParam* p, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Vector& v);
  class CGxShader& __thiscall operator=(class CGxShader&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class FriendList::Friend {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x1|*/ unsigned char m_connected;
  /*<thisrel this+0x4>*/ /*|0x4|*/ char* m_name;
  /*<thisrel this+0x8>*/ /*|0x8|*/ unsigned __int64 guid;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_level;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_class;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_area;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Friend();
  void __thiscall ~Friend();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class SRP6_Random {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ unsigned char m_randkey1[20];
  /*<thisrel this+0x14>*/ /*|0x14|*/ unsigned char m_randkey2[20];
  /*<thisrel this+0x28>*/ /*|0x14|*/ unsigned char m_randpool[20];
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_inpool;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SRP6_Random::SRP6_Random(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int seed);
  void __thiscall SRP6_Random::GenerateRandomBytes(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int size);

  // virtual functions ------------------------------
};
// <size 0x40>

class WowConnectionNet {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SThread m_thread;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class SEvent m_stopEvent;
  /*<thisrel this+0x8>*/ /*|0x1|*/ unsigned char m_stop;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_numWorkers;
  /*<thisrel this+0x10>*/ /*|0x180|*/ struct WowConnectionNet::Worker m_workers[8];
  /*<thisrel this+0x190>*/ /*|0xc|*/ class TSExplicitList<WowConnection,188> m_connections;
  /*<thisrel this+0x19c>*/ /*|0x18|*/ class SCritSect m_connectionsLock;
  /*<thisrel this+0x1b4>*/ /*|0x4|*/ class SSemaphore m_workerSem;
  /*<thisrel this+0x1b8>*/ /*|0x4|*/ void  (m_threadinit*)();
  /*<thisrel this+0x1bc>*/ /*|0x4|*/ void* m_connectionsChangedEvent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WowConnectionNet::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet::Remove(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet(class WowConnectionNet&);
  void __thiscall WowConnectionNet::WowConnectionNet(/*<regrel ebp+0x8>*/ /*|0x4|*/ int numThreads, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (threadinit*)());
  void __thiscall WowConnectionNet::~WowConnectionNet();
  void __thiscall WowConnectionNet::Start();
  void __thiscall WowConnectionNet::Stop();
  void __thiscall WowConnectionNet::RunWorker(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void __thiscall WowConnectionNet::Run();
  void __thiscall WowConnectionNet::Service(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet::SignalWorker(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int flags);
  void __thiscall ChangeState(class WowConnection*, enum WOW_CONN_STATE);
  class WowConnectionNet& __thiscall operator=(class WowConnectionNet&);
  void __thiscall WowConnectionNet::PlatformInit(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char useEngine);
  void __thiscall WowConnectionNet::PlatformDestroy();
  void __thiscall WowConnectionNet::PlatformRun();
  void __thiscall WowConnectionNet::PlatformAdd(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet::PlatformRemove(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet::PlatformChangeState(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn, /*<regrel ebp+0xc>*/ /*|0x4|*/ enum WOW_CONN_STATE oldState);
  void __thiscall WowConnectionNet::PlatformDestruct(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void __thiscall WowConnectionNet::PlatformWorkerReady();
  void __thiscall WowConnectionNet::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowConnection* conn);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c0>

class WowConnectionInitializer {

  // static data ------------------------------------
  static /*<rva 0xa15e6c>*/ /*|0x4|*/ unsigned int count;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall WowConnectionInitializer::Initialize();
  static void __fastcall WowConnectionInitializer::Destroy();

  // non-virtual functions --------------------------
  void __thiscall WowConnectionInitializer();
  void __thiscall ~WowConnectionInitializer();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1>

class HASHKEY_PTR { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ void* m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_PTR(class HASHKEY_PTR&);
  void __thiscall HASHKEY_PTR(void*);
  void __thiscall HASHKEY_PTR();
  class HASHKEY_PTR& __thiscall operator=(class HASHKEY_PTR&);
  int __thiscall operator==(class HASHKEY_PTR&);
  void* __thiscall GetPtr();

  // virtual functions ------------------------------
};
// <size 0x4>

class KERNINGHASHKEY {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int code;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall KERNINGHASHKEY(unsigned int, unsigned int);
  void __thiscall KERNINGHASHKEY(class KERNINGHASHKEY&);
  void __thiscall KERNINGHASHKEY();
  class KERNINGHASHKEY& __thiscall KERNINGHASHKEY::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class KERNINGHASHKEY& rhs);
  int __thiscall operator==(class KERNINGHASHKEY&);

  // virtual functions ------------------------------
};
// <size 0x4>

class HASHKEY_DWORD { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_DWORD(class HASHKEY_DWORD&);
  void __thiscall HASHKEY_DWORD(unsigned long);
  int __thiscall operator==(class HASHKEY_DWORD&);
  unsigned long __thiscall GetDword();
  void __thiscall __dflt_ctor_closure();

  // virtual functions ------------------------------
};
// <size 0x4>

class CGxuLightLink {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGxuLight* m_light;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CLightList* m_list;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_fitness;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CGxuLightLink> m_lightLink;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<CGxuLightLink> m_listLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGxuLightLink(class CGxuLightLink&);
  void __thiscall CGxuLightLink();
  class CGxuLightLink& __thiscall operator=(class CGxuLightLink&);
  void __thiscall ~CGxuLightLink();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CGameObjectDef {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall CGameObjectDef::NameFromTypeId(/*<register ecx>*/ /*|0x4|*/ int typeId);
  static int __fastcall CGameObjectDef::TypeIdFromName(/*<register ecx>*/ /*|0x4|*/ char* string);
  static int __fastcall CGameObjectDef::GetNumProps(/*<register ecx>*/ /*|0x4|*/ int typeId);
  static int __fastcall CGameObjectDef::GetPropId(/*<register ecx>*/ /*|0x4|*/ int typeId, /*<register edx>*/ /*|0x4|*/ int propNum);
  static int __fastcall CGameObjectDef::GetPropNum(/*<register ecx>*/ /*|0x4|*/ int typeId, /*<register edx>*/ /*|0x4|*/ int propId);
  static union CGameObjectDef::ValueInfo* __fastcall CGameObjectDef::GetPropValueInfo(/*<register ecx>*/ /*|0x4|*/ int typeId, /*<register edx>*/ /*|0x4|*/ int propNum);
  static char* __fastcall CGameObjectDef::NameFromPropId(/*<register ecx>*/ /*|0x4|*/ int propId);
  static int __fastcall CGameObjectDef::PropIdFromName(/*<register ecx>*/ /*|0x4|*/ char* string);
  static int __fastcall CGameObjectDef::GetPropValueType(/*<register ecx>*/ /*|0x4|*/ int propId);
  static int __fastcall CGameObjectDef::GetPropValueBaseType(/*<register ecx>*/ /*|0x4|*/ int propId);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CWTriData {

  // static data ------------------------------------
  static /*<rva 0xa39b90>*/ /*|0x800|*/ class NTempest::C44Matrix matrices[32];
  static /*<rva 0xa3a468>*/ /*|0x6000|*/ unsigned short vertexIndices[12288];
  static /*<rva 0xa37740>*/ /*|0x2000|*/ unsigned short triIndices[4096];
  static /*<rva 0xa39760>*/ /*|0x400|*/ struct CWTriData::Batch batches[32];
  static /*<rva 0xa3a394>*/ /*|0x4|*/ unsigned int nMatrices;
  static /*<rva 0xa4051c>*/ /*|0x4|*/ unsigned int nVertexIndices;
  static /*<rva 0xa3a434>*/ /*|0x4|*/ unsigned int nTriIndices;
  static /*<rva 0xa376bc>*/ /*|0x4|*/ unsigned int nBatches;
  static /*<rva 0x0>*/ /*|0x40|*/ class NTempest::C44Matrix idMatrix;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct CWTriData::Batch* __thiscall AllocBatch();
  unsigned short* __thiscall AllocVertexIndices(unsigned int);
  unsigned short* __thiscall AllocTriIndices(unsigned int);
  class NTempest::C44Matrix* __thiscall AllocMatrix();
  void __thiscall CWTriData();
  void __thiscall Clear();
  unsigned int __thiscall GetNumBatches();
  struct CWTriData::Batch& __thiscall CWTriData::GetBatch(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int b);

  // virtual functions ------------------------------
};
// <size 0x1>

class ONESHOTSTANDALONEEFFECTNODE : class NODEBASE  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0xc|*/ class NTempest::C3Vector position;
  /*<thisrel this+0x24>*/ /*|0x10|*/ class TSFixedArray<unsigned __int64> objects;
  /*<thisrel this+0x34>*/ /*|0x4|*/ float facing;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float scale;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned long worldObject;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int expireTime;

  // base classes -----------------------------------
  // baseclass class NODEBASE
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ONESHOTSTANDALONEEFFECTNODE(class ONESHOTSTANDALONEEFFECTNODE&);
  void __thiscall ONESHOTSTANDALONEEFFECTNODE::ONESHOTSTANDALONEEFFECTNODE();
  void __thiscall ONESHOTSTANDALONEEFFECTNODE::~ONESHOTSTANDALONEEFFECTNODE();
  void __thiscall ONESHOTSTANDALONEEFFECTNODE::CheckModelLoadStatus();
  class ONESHOTSTANDALONEEFFECTNODE& __thiscall operator=(class ONESHOTSTANDALONEEFFECTNODE&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ONESHOTSTANDALONEEFFECTNODE::ReleaseDeathHolds();
};
// <size 0x44>

class ONESHOTEFFECTNODE : class NODEBASE  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ struct HMODEL__* objectModel;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int objectModelAttachmentPoint;
  /*<thisrel this+0x20>*/ /*|0x8|*/ unsigned __int64 objectGUID;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int spellID;
  /*<thisrel this+0x2c>*/ /*|0x1|*/ unsigned char isCastEffect;

  // base classes -----------------------------------
  // baseclass class NODEBASE
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ONESHOTEFFECTNODE(class ONESHOTEFFECTNODE&);
  void __thiscall ONESHOTEFFECTNODE();
  void __thiscall ONESHOTEFFECTNODE::~ONESHOTEFFECTNODE();
  void __thiscall ONESHOTEFFECTNODE::CheckModelLoadStatus();
  class ONESHOTEFFECTNODE& __thiscall operator=(class ONESHOTEFFECTNODE&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ONESHOTEFFECTNODE::ReleaseDeathHolds();
};
// <size 0x30>

class NODEBASE {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<NODEBASE> node;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HMODEL__* model;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int flags;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int deathHoldTimer;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall NODEBASE(class NODEBASE&);
  void __thiscall NODEBASE();
  void __thiscall NODEBASE::~NODEBASE();
  void __thiscall NODEBASE::ClearDeathHoldTimer();
  void __thiscall NODEBASE::SetDeathHoldTimer(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int duration);
  unsigned char __thiscall NODEBASE::CheckModelLoadStatus();
  class NODEBASE& __thiscall operator=(class NODEBASE&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ReleaseDeathHolds() = 0;
};
// <size 0x18>

class PERSISTENTUNITEFFECT : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct HMODEL__* effectModel;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HMODEL__* objectModel;
  /*<thisrel this+0x10>*/ /*|0x4|*/ enum GEOCOMPONENTLINKS linkPoint;
  /*<thisrel this+0x14>*/ /*|0xc|*/ class NTempest::C3Vector position;
  /*<thisrel this+0x20>*/ /*|0x8|*/ class TSLink<PERSISTENTUNITEFFECT> m_listLink;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall PERSISTENTUNITEFFECT(class PERSISTENTUNITEFFECT&);
  void __thiscall PERSISTENTUNITEFFECT();
  void __thiscall PERSISTENTUNITEFFECT::Clear();
  class PERSISTENTUNITEFFECT& __thiscall operator=(class PERSISTENTUNITEFFECT&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~PERSISTENTUNITEFFECT();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x28>

class CGGameObject_C_TypeBase {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGGameObject_C* m_owner;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float m_interactDistance;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_TypeBase(class CGGameObject_C_TypeBase&);
  void __thiscall CGGameObject_C_TypeBase::CGGameObject_C_TypeBase(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  void __thiscall CGGameObject_C_TypeBase();
  class CGGameObject_C_TypeBase& __thiscall operator=(class CGGameObject_C_TypeBase&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_TypeBase();
  virtual /*<vtableoff 0x4>*/ unsigned char __thiscall CGGameObject_C_TypeBase::CanHighlight();
  virtual /*<vtableoff 0x8>*/ unsigned char __thiscall CGGameObject_C_TypeBase::CanChangeCursor();
  virtual /*<vtableoff 0xc>*/ unsigned char __thiscall CGGameObject_C_TypeBase::CanUse();
  virtual /*<vtableoff 0x10>*/ unsigned char __thiscall CGGameObject_C_TypeBase::CanUseNow(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE* reason);
  virtual /*<vtableoff 0x14>*/ unsigned char __thiscall CGGameObject_C_TypeBase::Use(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& activator);
  virtual /*<vtableoff 0x18>*/ void __thiscall CGGameObject_C_TypeBase::UpdateState(/*<regrel ebp+0x8>*/ /*|0x4|*/ int oldState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int newState);
  virtual /*<vtableoff 0x1c>*/ void __thiscall CGGameObject_C_TypeBase::HandleAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  virtual /*<vtableoff 0x20>*/ void __thiscall CGGameObject_C_TypeBase::HandleAnimFinished();
  virtual /*<vtableoff 0x24>*/ char* __thiscall CGGameObject_C_TypeBase::DebugStatus();
  virtual /*<vtableoff 0x28>*/ void __thiscall CGGameObject_C_TypeBase::ActivateCustomAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int anim);
  virtual /*<vtableoff 0x2c>*/ class NTempest::C3Vector __thiscall CGGameObject_C_TypeBase::GetPosition();
  virtual /*<vtableoff 0x30>*/ float __thiscall CGGameObject_C_TypeBase::GetFacing();
  virtual /*<vtableoff 0x34>*/ void __thiscall CGGameObject_C_TypeBase::AddPassenger(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMovementData* passenger);
  virtual /*<vtableoff 0x38>*/ class NTempest::C3Vector __thiscall CGGameObject_C_TypeBase::GetCurrentMoveVector();
  virtual /*<vtableoff 0x3c>*/ int __thiscall CGGameObject_C_TypeBase::IsPointInside(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  virtual /*<vtableoff 0x40>*/ void __thiscall CGGameObject_C_TypeBase::PostInit();
  virtual /*<vtableoff 0x44>*/ void __thiscall CGGameObject_C_TypeBase::Reenable();
  virtual /*<vtableoff 0x48>*/ void __thiscall CGGameObject_C_TypeBase::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x4c>*/ void __thiscall CGGameObject_C_TypeBase::PostReenable();
  virtual /*<vtableoff 0x50>*/ void __thiscall CGGameObject_C_TypeBase::UpdateMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  virtual /*<vtableoff 0x54>*/ void __thiscall CGGameObject_C_TypeBase::ModelJustLoaded();
  virtual /*<vtableoff 0x58>*/ void __thiscall CGGameObject_C_TypeBase::StartInteraction();
  virtual /*<vtableoff 0x5c>*/ void __thiscall CGGameObject_C_TypeBase::CloseInteraction();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_Type_Null : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Null(class CGGameObject_C_Type_Null&);
  void __thiscall CGGameObject_C_Type_Null();
  class CGGameObject_C_Type_Null& __thiscall operator=(class CGGameObject_C_Type_Null&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Null::CanUse();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Null::CanUseNow(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE* reason);
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGGameObject_C_Type_Null::DebugStatus();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Null();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_TypeAnimated : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_animState;
  /*<thisrel this+0x10>*/ /*|0xb|*/ unsigned char m_useFallbackAnim[11];
  /*<thisrel this+0x1c>*/ /*|0x4|*/ struct Sound* m_loopingSound;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int m_animPresent;

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_TypeAnimated(class CGGameObject_C_TypeAnimated&);
  void __thiscall CGGameObject_C_TypeAnimated(class CGGameObject_C*);
  void __thiscall CGGameObject_C_TypeAnimated::PlayAnimatedSound(/*<regrel ebp+0x8>*/ /*|0x4|*/ int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  void __thiscall CGGameObject_C_TypeAnimated::CloseLoopingSound();
  void __thiscall CGGameObject_C_TypeAnimated::SetSequence();
  class CGGameObject_C_TypeAnimated& __thiscall operator=(class CGGameObject_C_TypeAnimated&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::~CGGameObject_C_TypeAnimated();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::UpdateState(/*<regrel ebp+0x8>*/ /*|0x4|*/ int oldState, /*<regrel ebp+0xc>*/ /*|0x4|*/ int newState);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::HandleAnimEvent(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* eventName, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::HandleAnimFinished();
  virtual /*<vtableoff 0x0>*/ char* __thiscall CGGameObject_C_TypeAnimated::DebugStatus();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::ActivateCustomAnim(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int anim);
  virtual /*<vtableoff 0x60>*/ void __thiscall CGGameObject_C_TypeAnimated::UpdateAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::PostInit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_TypeAnimated::ModelJustLoaded();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Door : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Door(class CGGameObject_C_Type_Door&);
  void __thiscall CGGameObject_C_Type_Door::CGGameObject_C_Type_Door(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  unsigned char __thiscall CGGameObject_C_Type_Door::IsAtRest();
  unsigned int __thiscall GetStartOpen();
  unsigned int __thiscall GetAutoClose();
  class CGGameObject_C_Type_Door& __thiscall operator=(class CGGameObject_C_Type_Door&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Door::CanUseNow(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE* reason);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Door::UpdateAnimState(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newState);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Door();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Button : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Button(class CGGameObject_C_Type_Button&);
  void __thiscall CGGameObject_C_Type_Button::CGGameObject_C_Type_Button(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Button& __thiscall operator=(class CGGameObject_C_Type_Button&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Button();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Chest : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Chest(class CGGameObject_C_Type_Chest&);
  void __thiscall CGGameObject_C_Type_Chest::CGGameObject_C_Type_Chest(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Chest& __thiscall operator=(class CGGameObject_C_Type_Chest&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Chest();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Trap : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Trap(class CGGameObject_C_Type_Trap&);
  void __thiscall CGGameObject_C_Type_Trap::CGGameObject_C_Type_Trap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Trap& __thiscall operator=(class CGGameObject_C_Type_Trap&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Trap();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_AreaDamage : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_AreaDamage(class CGGameObject_C_Type_AreaDamage&);
  void __thiscall CGGameObject_C_Type_AreaDamage::CGGameObject_C_Type_AreaDamage(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_AreaDamage& __thiscall operator=(class CGGameObject_C_Type_AreaDamage&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_AreaDamage::ModelJustLoaded();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_AreaDamage();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_QuestGiver : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_QuestGiver(class CGGameObject_C_Type_QuestGiver&);
  void __thiscall CGGameObject_C_Type_QuestGiver::CGGameObject_C_Type_QuestGiver(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_QuestGiver& __thiscall operator=(class CGGameObject_C_Type_QuestGiver&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_QuestGiver::StartInteraction();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_QuestGiver::CloseInteraction();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_QuestGiver();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Binder : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Binder(class CGGameObject_C_Type_Binder&);
  void __thiscall CGGameObject_C_Type_Binder::CGGameObject_C_Type_Binder(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Binder& __thiscall operator=(class CGGameObject_C_Type_Binder&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Binder();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_Type_Generic : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Generic(class CGGameObject_C_Type_Generic&);
  void __thiscall CGGameObject_C_Type_Generic::CGGameObject_C_Type_Generic(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Generic& __thiscall operator=(class CGGameObject_C_Type_Generic&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Generic::CanHighlight();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Generic::CanUse();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Generic();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_Type_MapObj : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int m_objectId;

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_MapObj(class CGGameObject_C_Type_MapObj&);
  void __thiscall CGGameObject_C_Type_MapObj::CGGameObject_C_Type_MapObj(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_MapObj& __thiscall operator=(class CGGameObject_C_Type_MapObj&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObj::PostInit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObj::~CGGameObject_C_Type_MapObj();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_MapObj::CanHighlight();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_MapObj::CanUse();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x10>

class CGGameObject_C_Type_MapObjTransport : class CGGameObject_C_Type_MapObj  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0xc|*/ class TSExplicitList<CMovementData,8> m_passengers;
  /*<thisrel this+0x1c>*/ /*|0x68|*/ class NTempest::C3Spline_CatmullRom m_path[2];
  /*<thisrel this+0x84>*/ /*|0x8|*/ unsigned int m_tripTime[2];
  /*<thisrel this+0x8c>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x98>*/ /*|0x4|*/ float m_facing;

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_Type_MapObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_MapObjTransport(class CGGameObject_C_Type_MapObjTransport&);
  void __thiscall CGGameObject_C_Type_MapObjTransport::CGGameObject_C_Type_MapObjTransport(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_MapObjTransport& __thiscall operator=(class CGGameObject_C_Type_MapObjTransport&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_MapObjTransport();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObjTransport::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObjTransport::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObjTransport::UpdateMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGGameObject_C_Type_MapObjTransport::GetPosition();
  virtual /*<vtableoff 0x0>*/ float __thiscall CGGameObject_C_Type_MapObjTransport::GetFacing();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_MapObjTransport::AddPassenger(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMovementData* passenger);
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C_Type_MapObjTransport::IsPointInside(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x9c>

class CGGameObject_C_Type_Chair : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x3c|*/ class NTempest::C3Vector m_slotPositions[5];

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Chair(class CGGameObject_C_Type_Chair&);
  void __thiscall CGGameObject_C_Type_Chair::CGGameObject_C_Type_Chair(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  unsigned int __thiscall GetNumSlots();
  unsigned int __thiscall GetHeight();
  class CGGameObject_C_Type_Chair& __thiscall operator=(class CGGameObject_C_Type_Chair&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Chair::CanUseNow(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE* reason);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Chair::PostInit();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Chair();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x48>

class CGGameObject_C_Type_SpellFocus : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_SpellFocus(class CGGameObject_C_Type_SpellFocus&);
  void __thiscall CGGameObject_C_Type_SpellFocus::CGGameObject_C_Type_SpellFocus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_SpellFocus& __thiscall operator=(class CGGameObject_C_Type_SpellFocus&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_SpellFocus::CanHighlight();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_SpellFocus::CanUse();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_SpellFocus();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Text : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Text(class CGGameObject_C_Type_Text&);
  void __thiscall CGGameObject_C_Type_Text::CGGameObject_C_Type_Text(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Text& __thiscall operator=(class CGGameObject_C_Type_Text&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Text::Use(/*<regrel ebx+0x8>*/ /*|0x4|*/ unsigned __int64& activator);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Text::PostInit();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Text::StartInteraction();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Text::CloseInteraction();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Text();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Goober : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Goober(class CGGameObject_C_Type_Goober&);
  void __thiscall CGGameObject_C_Type_Goober::CGGameObject_C_Type_Goober(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Goober& __thiscall operator=(class CGGameObject_C_Type_Goober&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Goober();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Transport : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x24>*/ /*|0xc|*/ class TSExplicitList<CMovementData,8> m_passengers;
  /*<thisrel this+0x30>*/ /*|0x4|*/ class TransportAnimationRec* m_keys;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned int m_numKeys;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned int m_currKey;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class NTempest::C3Vector m_position;
  /*<thisrel this+0x48>*/ /*|0x4|*/ float m_currSpeed;
  /*<thisrel this+0x4c>*/ /*|0xc|*/ class NTempest::C3Vector m_currDirection;
  /*<thisrel this+0x58>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C4Plane> m_interior;

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Transport(class CGGameObject_C_Type_Transport&);
  void __thiscall CGGameObject_C_Type_Transport::CGGameObject_C_Type_Transport(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class NTempest::C3Vector __thiscall CGGameObject_C_Type_Transport::GetMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* __$ReturnUdt);
  int __thiscall CGGameObject_C_Type_Transport::FindAnimData(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  unsigned int __thiscall CGGameObject_C_Type_Transport::NextKeyID();
  class CGGameObject_C_Type_Transport& __thiscall operator=(class CGGameObject_C_Type_Transport&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Transport::Reenable();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Transport::Disable(/*<regrel ebp+0x8>*/ /*|0x4|*/ int shutdown);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Transport::UpdateMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long eventTime, /*<regrel ebp+0xc>*/ /*|0x4|*/ float elapsed);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGGameObject_C_Type_Transport::GetPosition();
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Transport::AddPassenger(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMovementData* passenger);
  virtual /*<vtableoff 0x0>*/ class NTempest::C3Vector __thiscall CGGameObject_C_Type_Transport::GetCurrentMoveVector();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Transport::CanUse();
  virtual /*<vtableoff 0x0>*/ int __thiscall CGGameObject_C_Type_Transport::IsPointInside(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  virtual /*<vtableoff 0x0>*/ void __thiscall CGGameObject_C_Type_Transport::ModelJustLoaded();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Transport();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x6c>

class CGGameObject_C_Type_Camera : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Camera(class CGGameObject_C_Type_Camera&);
  void __thiscall CGGameObject_C_Type_Camera::CGGameObject_C_Type_Camera(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Camera& __thiscall operator=(class CGGameObject_C_Type_Camera&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Camera();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_Type_DuelArbiter : class CGGameObject_C_TypeBase  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_DuelArbiter(class CGGameObject_C_Type_DuelArbiter&);
  void __thiscall CGGameObject_C_Type_DuelArbiter::CGGameObject_C_Type_DuelArbiter(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_DuelArbiter& __thiscall operator=(class CGGameObject_C_Type_DuelArbiter&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_DuelArbiter::CanHighlight();
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_DuelArbiter::CanUse();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_DuelArbiter();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0xc>

class CGGameObject_C_Type_FishingNode : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_FishingNode(class CGGameObject_C_Type_FishingNode&);
  void __thiscall CGGameObject_C_Type_FishingNode::CGGameObject_C_Type_FishingNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_FishingNode& __thiscall operator=(class CGGameObject_C_Type_FishingNode&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_FishingNode::CanUse();
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_FishingNode();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class CGGameObject_C_Type_Ritual : class CGGameObject_C_TypeAnimated  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CGGameObject_C_TypeAnimated
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGGameObject_C_Type_Ritual(class CGGameObject_C_Type_Ritual&);
  void __thiscall CGGameObject_C_Type_Ritual::CGGameObject_C_Type_Ritual(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGGameObject_C* owner);
  class CGGameObject_C_Type_Ritual& __thiscall operator=(class CGGameObject_C_Type_Ritual&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall CGGameObject_C_Type_Ritual::CanUseNow(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum GAME_ERROR_TYPE* reason);
  virtual /*<vtableoff 0x0>*/ void __thiscall ~CGGameObject_C_Type_Ritual();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x24>

class VideoHardwareRec {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_vendorID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_deviceID;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int m_farclipIdx;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_terrainLODDistIdx;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_terrainShadowLOD;
  /*<thisrel this+0x14>*/ /*|0x4|*/ int m_detailDoodadDensityIdx;
  /*<thisrel this+0x18>*/ /*|0x4|*/ int m_detailDoodadAlpha;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_animatingDoodadIdx;
  /*<thisrel this+0x20>*/ /*|0x4|*/ int m_trilinear;
  /*<thisrel this+0x24>*/ /*|0x4|*/ int m_numLights;
  /*<thisrel this+0x28>*/ /*|0x4|*/ int m_specularity;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ int m_waterLODIdx;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_particleDensityIdx;
  /*<thisrel this+0x34>*/ /*|0x4|*/ int m_unitDrawDistIdx;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_smallCullDistIdx;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ int m_resolutionIdx;
  /*<thisrel this+0x40>*/ /*|0x4|*/ int m_baseMipLevel;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_oglPixelShader;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int m_d3dPixelShader;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ int m_generatedID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static char* __fastcall VideoHardwareRec::GetFilename();
  static unsigned int __fastcall GetNumColumns();
  static unsigned int __fastcall GetRowSize();

  // non-virtual functions --------------------------
  void __thiscall VideoHardwareRec::VideoHardwareRec();
  void __thiscall VideoHardwareRec::~VideoHardwareRec();
  int __thiscall GetID();
  unsigned char __thiscall NeedIDAssigned();
  void __thiscall SetID(int);
  unsigned char __thiscall VideoHardwareRec::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SFile* f, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* stringBuffer);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x50>

class SpellCast {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ unsigned __int64 caster;
  /*<thisrel this+0x8>*/ /*|0x8|*/ unsigned __int64 casterUnit;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int spellID;
  /*<thisrel this+0x14>*/ /*|0x2|*/ unsigned short targets;
  /*<thisrel this+0x18>*/ /*|0x8|*/ unsigned __int64 unitTarget;
  /*<thisrel this+0x20>*/ /*|0x8|*/ unsigned __int64 itemTarget;
  /*<thisrel this+0x28>*/ /*|0x8|*/ unsigned __int64 selectedTarget;
  /*<thisrel this+0x30>*/ /*|0xc|*/ class NTempest::C3Vector sourceLocation;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class NTempest::C3Vector destLocation;
  /*<thisrel this+0x48>*/ /*|0x4|*/ float destFacing;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ unsigned int destZoneID;
  /*<thisrel this+0x50>*/ /*|0x4|*/ unsigned int castTime;
  /*<thisrel this+0x54>*/ /*|0x4|*/ unsigned int castEndTime;
  /*<thisrel this+0x58>*/ /*|0x4|*/ int spellIndex;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ unsigned int spellLevel;
  /*<thisrel this+0x60>*/ /*|0x8|*/ unsigned __int64 ammoItem;
  /*<thisrel this+0x68>*/ /*|0x8|*/ unsigned __int64 reflector;
  /*<thisrel this+0x70>*/ /*|0x80|*/ char targetString[128];
  /*<thisrel this+0xf0>*/ /*|0x4|*/ int overrideRank;
  /*<thisrel this+0xf4>*/ /*|0x2|*/ unsigned short flags;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SpellCast();
  void __thiscall ~SpellCast();
  void __thiscall BuildFullZoneUpdate(class CDataStore*);
  void __thiscall UnpackFullZoneUpdate(class CDataStore*);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xf8>

class BigData {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ class BigBuffer m_primary;
  /*<thisrel this+0x18>*/ /*|0x184|*/ class BigStack m_stack;
  /*<thisrel this+0x19c>*/ /*|0x14|*/ class TSGrowableArray_<unsigned char,1396853063,102> m_output;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class BigBuffer& __thiscall BigData::Primary();
  class BigBuffer& __thiscall BigData::Primary();
  class BigStack& __thiscall BigData::Stack();
  class TSGrowableArray_<unsigned char,1396853063,102>& __thiscall BigData::Output();
  void __thiscall BigData(class BigData&);
  void __thiscall BigData::BigData();
  class BigData& __thiscall operator=(class BigData&);
  void __thiscall BigData::~BigData();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1b0>

class BigBuffer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_data;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_offset;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall BigBuffer::GrowToFit(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall BigBuffer(class BigBuffer&);
  void __thiscall BigBuffer::BigBuffer();
  unsigned int __thiscall BigBuffer::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int& __thiscall BigBuffer::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall BigBuffer::Clear();
  unsigned int __thiscall BigBuffer::Count();
  int __thiscall BigBuffer::IsUsed(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall BigBuffer::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall BigBuffer::SetOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int offset);
  void __thiscall BigBuffer::Trim();
  class BigBuffer& __thiscall BigBuffer::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class BigBuffer& __that);
  void __thiscall BigBuffer::~BigBuffer();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class BigStack {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x180|*/ class BigBuffer m_buffer[16];
  /*<thisrel this+0x180>*/ /*|0x4|*/ unsigned int m_used;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall BigStack(class BigStack&);
  void __thiscall BigStack::BigStack();
  class BigBuffer& __thiscall BigStack::Alloc(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int* count);
  void __thiscall BigStack::Free(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  class BigBuffer& __thiscall BigStack::MakeDistinct(/*<regrel ebp+0x8>*/ /*|0x4|*/ class BigBuffer& orig, /*<regrel ebp+0xc>*/ /*|0x4|*/ int required);
  void __thiscall BigStack::UnmakeDistinct(/*<regrel ebp+0x8>*/ /*|0x4|*/ class BigBuffer& orig, /*<regrel ebp+0xc>*/ /*|0x4|*/ class BigBuffer& distinct);
  class BigStack& __thiscall operator=(class BigStack&);
  void __thiscall BigStack::~BigStack();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x184>

class Crypt::RSA {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class BigNum m_modulus;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class BigNum m_exponent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Crypt::RSA::Prepare(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* modulus, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long mLength, /*<regrel ebp+0x10>*/ /*|0x4|*/ void* exponent, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long eLength);
  void __thiscall Crypt::RSA::Process(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long length);
  void __thiscall RSA(class Crypt::RSA&);
  void __thiscall Crypt::RSA::RSA();
  class Crypt::RSA& __thiscall operator=(class Crypt::RSA&);
  void __thiscall Crypt::RSA::~RSA();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class BigNum {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class BigData* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall BigNum(char*);
  void __thiscall BigNum(unsigned int);
  void __thiscall BigNum(class BigNum&);
  void __thiscall BigNum::BigNum();
  void __thiscall BigNum::~BigNum();
  class BigNum& __thiscall operator=(char*);
  class BigNum& __thiscall operator=(unsigned int);
  class BigNum& __thiscall operator=(class BigNum&);
  class BigNum& __thiscall Add(class BigNum&, class BigNum&);
  class BigNum& __thiscall Sub(class BigNum&, class BigNum&);
  class BigNum& __thiscall Mul(class BigNum&, class BigNum&);
  class BigNum& __thiscall Div(class BigNum&, class BigNum&);
  class BigNum& __thiscall Mod(class BigNum&, class BigNum&);
  class BigNum& __thiscall And(class BigNum&, class BigNum&);
  class BigNum& __thiscall Or(class BigNum&, class BigNum&);
  class BigNum& __thiscall Xor(class BigNum&, class BigNum&);
  class BigNum& __thiscall Not(class BigNum&);
  class BigNum& __thiscall Dec(class BigNum&);
  class BigNum& __thiscall Inc(class BigNum&);
  class BigNum& __thiscall Shl(class BigNum&, unsigned int);
  class BigNum& __thiscall Shr(class BigNum&, unsigned int);
  class BigNum __thiscall operator+(class BigNum&);
  class BigNum __thiscall operator-(class BigNum&);
  class BigNum __thiscall operator*(class BigNum&);
  class BigNum __thiscall operator/(class BigNum&);
  class BigNum __thiscall operator(class BigNum&);
  class BigNum __thiscall operator&(class BigNum&);
  class BigNum __thiscall operator|(class BigNum&);
  class BigNum __thiscall operator^(class BigNum&);
  class BigNum __thiscall operator<<(unsigned int);
  class BigNum __thiscall operator>>(unsigned int);
  class BigNum __thiscall operator~();
  class BigNum& __thiscall operator--();
  class BigNum __thiscall operator--(int);
  class BigNum& __thiscall operator++();
  class BigNum __thiscall operator++(int);
  class BigNum& __thiscall operator+=(class BigNum&);
  class BigNum& __thiscall operator-=(class BigNum&);
  class BigNum& __thiscall operator*=(class BigNum&);
  class BigNum& __thiscall operator/=(class BigNum&);
  class BigNum& __thiscall operator=(class BigNum&);
  class BigNum& __thiscall operator&=(class BigNum&);
  class BigNum& __thiscall operator|=(class BigNum&);
  class BigNum& __thiscall operator^=(class BigNum&);
  class BigNum& __thiscall operator<<=(unsigned int);
  class BigNum& __thiscall operator>>=(unsigned int);
  int __thiscall Compare(class BigNum&);
  int __thiscall operator==(class BigNum&);
  int __thiscall operator!=(class BigNum&);
  int __thiscall operator<=(class BigNum&);
  int __thiscall operator>=(class BigNum&);
  int __thiscall operator<(class BigNum&);
  int __thiscall operator>(class BigNum&);
  class BigNum& __thiscall FindPrime(unsigned int, class BigNum&);
  class BigNum& __thiscall FindPrime(unsigned int, class BigNum&, class BigNum&);
  class BigNum& __thiscall Gcd(class BigNum&);
  class BigNum& __thiscall Gcd(class BigNum&, class BigNum&);
  class BigNum& __thiscall InvMod(class BigNum&);
  class BigNum& __thiscall InvMod(class BigNum&, class BigNum&);
  class BigNum& __thiscall MulMod(class BigNum&, class BigNum&);
  class BigNum& __thiscall MulMod(class BigNum&, class BigNum&, class BigNum&);
  class BigNum& __thiscall Pow(unsigned int);
  class BigNum& __thiscall Pow(class BigNum&, unsigned int);
  class BigNum& __thiscall PowMod(class BigNum&, class BigNum&);
  class BigNum& __thiscall BigNum::PowMod(/*<regrel ebp+0x8>*/ /*|0x4|*/ class BigNum& b, /*<regrel ebp+0xc>*/ /*|0x4|*/ class BigNum& c, /*<regrel ebp+0x10>*/ /*|0x4|*/ class BigNum& d);
  class BigNum& __thiscall Rand(class BigNum&, class BigNum*);
  class BigNum& __thiscall Square();
  class BigNum& __thiscall Square(class BigNum&);
  char* __thiscall ToStr(char*, unsigned int);
  void* __thiscall BigNum::ToBinaryBuffer(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  unsigned int __thiscall operator unsigned int();
  void __thiscall BigNum::FromBinary(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int bytes);
  int __thiscall IsEven();
  int __thiscall IsOdd();
  int __thiscall IsOne();
  int __thiscall IsPrime();
  int __thiscall IsZero();
  class BigNum& __thiscall Set2Exp(unsigned int);
  class BigNum& __thiscall SetOne();
  class BigNum& __thiscall SetZero();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class Sha1 {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ unsigned __int64 m_size;
  /*<thisrel this+0x8>*/ /*|0x14|*/ unsigned long m_hash[5];
  /*<thisrel this+0x1c>*/ /*|0x40|*/ unsigned char m_data[64];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall Sha1::Pump(/*<register ecx>*/ /*|0x4|*/ unsigned long* hash, /*<register edx>*/ /*|0x4|*/ unsigned char* data);
  static void __fastcall Hash(unsigned char*, char*);
  static void __fastcall Hash(unsigned char*, void*, unsigned long);

  // non-virtual functions --------------------------
  void __thiscall Sha1::Initialize();
  void __thiscall Append(char*);
  void __thiscall Sha1::Append(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* _data, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long size);
  void __thiscall Sha1::Finalize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* hash);

  // virtual functions ------------------------------
};
// <size 0x60>

class SSignatureData {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long modulusSize;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long pubExponentSize;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned long magicBufferUsed;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long magicBufferSize;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned char* magicBuffer;
  /*<thisrel this+0x18>*/ /*|0x60|*/ class Sha1 sha;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x78>

class WowFileSystem {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WowFileSystemProvider* m_providerList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WowFileSystem::WowFileSystem();
  void __thiscall WowFileSystem::~WowFileSystem();
  void __thiscall WowFileSystem::RegisterProvider(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowFileSystemProvider& provider);
  void __thiscall WowFileSystem::UnregisterProvider(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowFileSystemProvider& provider);
  class WowFile* __thiscall WowFileSystem::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class WowFileSystemProvider {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WowFileSystemProvider(class WowFileSystemProvider&);
  void __thiscall WowFileSystemProvider::WowFileSystemProvider();
  void __thiscall WowFileSystemProvider::~WowFileSystemProvider();
  class WowFileSystemProvider& __thiscall operator=(class WowFileSystemProvider&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ class WowFile* __thiscall Open(char*) = 0;
  virtual /*<vtableoff 0x4>*/ unsigned char __thiscall Close(class WowFile*) = 0;
};
// <size 0x4>

class WowFile {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WowFileSystemProvider* m_provider;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WowFile::WowFile(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowFileSystemProvider* provider);
  void __thiscall WowFile::~WowFile();
  unsigned char __thiscall WowFile::Close();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class TestFileSystemProvider : class WowFileSystemProvider  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class WowFileSystemProvider
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall TestFileSystemProvider(class TestFileSystemProvider&);
  void __thiscall TestFileSystemProvider::TestFileSystemProvider();
  void __thiscall TestFileSystemProvider::~TestFileSystemProvider();
  class TestFileSystemProvider& __thiscall operator=(class TestFileSystemProvider&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ class WowFile* __thiscall TestFileSystemProvider::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  virtual /*<vtableoff 0x0>*/ unsigned char __thiscall TestFileSystemProvider::Close(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowFile* f);
};
// <size 0x4>

class Flags {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_value;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Flags::Flags();
  void __thiscall Flags::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int bit);
  void __thiscall Flags::Clear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int bit);
  int __thiscall Flags::IsSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int bit);
  int __thiscall Flags::IsClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int bit);

  // virtual functions ------------------------------
};
// <size 0x4>

class TestFile : class WowFile  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct _iobuf* m_f;

  // base classes -----------------------------------
  // baseclass class WowFile
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall TestFile::TestFile(/*<regrel ebp+0x8>*/ /*|0x4|*/ class WowFileSystemProvider* provider, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct _iobuf* f);
  void __thiscall ~TestFile();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class HASHKEY_CONSTSTR { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* m_str;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_CONSTSTR::HASHKEY_CONSTSTR(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  void __thiscall HASHKEY_CONSTSTR::HASHKEY_CONSTSTR();
  unsigned char __thiscall operator==(char*);
  unsigned char __thiscall operator==(class HASHKEY_CONSTSTR&);
  char* __thiscall GetString();

  // virtual functions ------------------------------
};
// <size 0x4>

class CDbgHelpDll {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct HINSTANCE__* hInstance;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long loadCount;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int  (StackWalk*)(unsigned long, void*, void*, struct _tagSTACKFRAME*, void*, int  (*)(void*, unsigned long, void*, unsigned long, unsigned long*), void*  (*)(void*, unsigned long), unsigned long  (*)(void*, unsigned long), unsigned long  (*)(void*, void*, struct _tagADDRESS*));
  /*<thisrel this+0xc>*/ /*|0x4|*/ void*  (SymFunctionTableAccess*)(void*, unsigned long);
  /*<thisrel this+0x10>*/ /*|0x4|*/ int  (SymGetLineFromAddr*)(void*, unsigned long, unsigned long*, struct _IMAGEHLP_LINE*);
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned long  (SymGetModuleBase*)(void*, unsigned long);
  /*<thisrel this+0x18>*/ /*|0x4|*/ int  (SymGetModuleInfo*)(void*, unsigned long, struct _IMAGEHLP_MODULE*);
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned long  (SymGetOptions*)();
  /*<thisrel this+0x20>*/ /*|0x4|*/ int  (SymGetSymFromAddr*)(void*, unsigned long, unsigned long*, struct _IMAGEHLP_SYMBOL*);
  /*<thisrel this+0x24>*/ /*|0x4|*/ int  (SymInitialize*)(void*, char*, int);
  /*<thisrel this+0x28>*/ /*|0x4|*/ int  (SymCleanup*)(void*);
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long  (SymSetOptions*)(unsigned long);
  /*<thisrel this+0x30>*/ /*|0x4|*/ int  (SymEnumerateModules*)(void*, int  (*)(char*, unsigned long, void*), void*);
  /*<thisrel this+0x34>*/ /*|0x4|*/ int  (SymEnumerateSymbols*)(void*, unsigned long, int  (*)(char*, unsigned long, unsigned long, void*), void*);
  /*<thisrel this+0x38>*/ /*|0x4|*/ int  (MiniDumpWriteDump*)(void*, unsigned long, void*, enum _MINIDUMP_TYPE, struct _MINIDUMP_EXCEPTION_INFORMATION*, struct _MINIDUMP_USER_STREAM_INFORMATION*, struct _MINIDUMP_CALLBACK_INFORMATION*);

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall CDbgHelpDll::Load();
  void __thiscall CDbgHelpDll::Unload();
  int __thiscall IsLoaded();
  void __thiscall CDbgHelpDll::CDbgHelpDll();
  void __thiscall CDbgHelpDll::~CDbgHelpDll();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class anonymous_namespace::CBitInput {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long* m_currsource;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long m_rack;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned long m_rackbits;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBitInput(void*);
  unsigned long __thiscall InputBit();
  unsigned long __thiscall InputBits(unsigned long, unsigned long);
  unsigned long __thiscall PeekBits(unsigned long, unsigned long);
  void __thiscall RemoveBits(unsigned long);

  // virtual functions ------------------------------
};
// <size 0xc>

class anonymous_namespace::CBitOutput {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned char* m_basedest;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long m_bytesleft;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned char* m_currdest;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long m_rack;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned long m_rackbits;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBitOutput(void*, unsigned long);
  unsigned long __thiscall GetTotalBytes();
  void __thiscall OutputBits(unsigned long, unsigned long);
  void __thiscall Pad();

  // virtual functions ------------------------------
};
// <size 0x14>

class CHuffman {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_adaptive;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long m_changesequence;
  /*<thisrel this+0x8>*/ /*|0x3048|*/ struct HUFFNODE m_nodebuffer[515];
  /*<thisrel this+0x3050>*/ /*|0xc|*/ class TSList<HUFFNODE,TSGetLink<HUFFNODE> > m_nodefreelist;
  /*<thisrel this+0x305c>*/ /*|0xc|*/ class TSList<HUFFNODE,TSGetLink<HUFFNODE> > m_nodelist;
  /*<thisrel this+0x3068>*/ /*|0x4|*/ unsigned long m_nodesused;
  /*<thisrel this+0x306c>*/ /*|0x408|*/ struct HUFFNODE* m_symbol[258];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CHuffman::AddSymbol(/*<regrel ebp+0x8>*/ /*|0x4|*/ int symbol);
  struct HUFFNODE* __thiscall CHuffman::AllocNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long linktype);
  void __thiscall CHuffman::BuildTree(/*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char hint);
  void __thiscall CHuffman::IncrementWeight(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HUFFNODE* node);
  void __thiscall CHuffman(class CHuffman&);
  void __thiscall CHuffman::CHuffman();
  class CHuffman& __thiscall operator=(class CHuffman&);
  void __thiscall CHuffman::~CHuffman();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3474>

class CHuffmanDecoder : class CHuffman {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x3474>*/ /*|0x600|*/ struct _CACHEREC m_cache[128];

  // base classes -----------------------------------
  // baseclass class CHuffman
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall CHuffmanDecoder::DecodeSymbol(/*<regrel ebp+0x8>*/ /*|0x4|*/ class anonymous_namespace::CBitInput* input);
  void __thiscall CHuffmanDecoder(class CHuffmanDecoder&);
  void __thiscall CHuffmanDecoder::CHuffmanDecoder();
  unsigned long __thiscall CHuffmanDecoder::Decompress(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* dest, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long destsize, /*<regrel ebp+0x10>*/ /*|0x4|*/ class anonymous_namespace::CBitInput* input);
  class CHuffmanDecoder& __thiscall operator=(class CHuffmanDecoder&);
  void __thiscall CHuffmanDecoder::~CHuffmanDecoder();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3a74>

class CHuffmanEncoder : class CHuffman  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CHuffman
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CHuffmanEncoder::EncodeSymbol(/*<regrel ebp+0x8>*/ /*|0x4|*/ class anonymous_namespace::CBitOutput* output, /*<regrel ebp+0xc>*/ /*|0x4|*/ int symbol);
  unsigned long __thiscall CHuffmanEncoder::Compress(/*<regrel ebp+0x8>*/ /*|0x4|*/ class anonymous_namespace::CBitOutput* output, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* source, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long sourcesize, /*<regrel ebp+0x14>*/ /*|0x1|*/ unsigned char hint);
  void __thiscall CHuffmanEncoder(class CHuffmanEncoder&);
  void __thiscall CHuffmanEncoder::CHuffmanEncoder();
  class CHuffmanEncoder& __thiscall operator=(class CHuffmanEncoder&);
  void __thiscall CHuffmanEncoder::~CHuffmanEncoder();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3474>

class CHuffmanDecoder : class CHuffman  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x3474>*/ /*|0x600|*/ struct _CACHEREC m_cache[128];

  // base classes -----------------------------------
  // baseclass class CHuffman
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall CHuffmanDecoder::DecodeSymbol(/*<regrel ebp+0x8>*/ /*|0x4|*/ class anonymous_namespace::CBitInput* input);
  void __thiscall CHuffmanDecoder(class CHuffmanDecoder&);
  void __thiscall CHuffmanDecoder::CHuffmanDecoder();
  unsigned long __thiscall CHuffmanDecoder::Decompress(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* dest, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long destsize, /*<regrel ebp+0x10>*/ /*|0x4|*/ class anonymous_namespace::CBitInput* input);
  class CHuffmanDecoder& __thiscall operator=(class CHuffmanDecoder&);
  void __thiscall CHuffmanDecoder::~CHuffmanDecoder();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3a74>

class CDebugSCritSect : class SCritSect  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0xc|*/ unsigned char m_debugData[12];

  // base classes -----------------------------------
  // baseclass class SCritSect
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDebugSCritSect::DumpAllEntries();

  // non-virtual functions --------------------------
  class CDebugSCritSect& __thiscall operator=(class CDebugSCritSect&);
  void __thiscall CDebugSCritSect::CDebugSCritSect();
  void __thiscall CDebugSCritSect(class CDebugSCritSect&);
  void __thiscall CDebugSCritSect::~CDebugSCritSect();
  void __thiscall CDebugSCritSect::Enter(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long line);
  void __thiscall CDebugSCritSect::Leave(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long line);
  int __thiscall CDebugSCritSect::TryEnter(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long line);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x24>

class SInitCritSect {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ long m_spinLock;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class SCritSect* m_critsect;
  /*<thisrel this+0x8>*/ /*|0x18|*/ unsigned char m_critsectData[24];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall SInitCritSect::Enter();
  void __thiscall SInitCritSect::Leave();

  // virtual functions ------------------------------
};
// <size 0x20>

class CDebugSRWLock : class CSRWLock  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0xc|*/ unsigned char m_debugData[12];

  // base classes -----------------------------------
  // baseclass class CSRWLock
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDebugSRWLock::DumpAllEntries();

  // non-virtual functions --------------------------
  class CDebugSRWLock& __thiscall operator=(class CDebugSRWLock&);
  void __thiscall CDebugSRWLock::CDebugSRWLock();
  void __thiscall CDebugSRWLock(class CDebugSRWLock&);
  void __thiscall CDebugSRWLock::~CDebugSRWLock();
  void __thiscall CDebugSRWLock::Enter(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  void __thiscall CDebugSRWLock::Leave(/*<regrel ebp+0x8>*/ /*|0x4|*/ int fromwriting, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  int __thiscall CDebugSRWLock::TryEnter(/*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class SSemaphore : class SSyncObject  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class SSyncObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SSemaphore(class SSemaphore&);
  void __thiscall SSemaphore::SSemaphore(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int initialCount, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int maximumCount);
  void __thiscall ~SSemaphore();
  class SSemaphore& __thiscall operator=(class SSemaphore&);
  int __thiscall SSemaphore::Signal(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class SMutex : class SSyncObject  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class SSyncObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SMutex(class SMutex&);
  void __thiscall SMutex::SMutex(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall SMutex::SMutex(/*<regrel ebp+0x8>*/ /*|0x4|*/ int initialOwner, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  void __thiscall SMutex::SMutex();
  void __thiscall ~SMutex();
  class SMutex& __thiscall operator=(class SMutex&);
  void __thiscall SMutex::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ int initialOwner, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* name);
  void __thiscall SMutex::Open(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  int __thiscall SMutex::Release();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class ASYNCREAD : class TSLinkedNode<ASYNCREAD>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SFile* fileptr;
  /*<thisrel this+0xc>*/ /*|0x4|*/ void* buffer;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned long bytestoread;
  /*<thisrel this+0x14>*/ /*|0x4|*/ struct SOVERLAPPED* overlapped;

  // base classes -----------------------------------
  // baseclass class TSLinkedNode<ASYNCREAD>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ASYNCREAD(class ASYNCREAD&);
  void __thiscall ASYNCREAD::ASYNCREAD();
  class ASYNCREAD& __thiscall operator=(class ASYNCREAD&);
  void __thiscall ASYNCREAD::~ASYNCREAD();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class MD5 {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x10|*/ unsigned long val[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall MD5(class MD5&);
  void __thiscall MD5::MD5(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long a, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long b, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long c, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long d);
  void __thiscall MD5::MD5();
  class MD5& __thiscall MD5::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class MD5& copy);
  unsigned char __thiscall MD5::operator==(/*<regrel ebp+0x8>*/ /*|0x4|*/ class MD5& cmp);
  unsigned char __thiscall operator!=(class MD5&);

  // virtual functions ------------------------------
};
// <size 0x10>

class CMapChunk : class CMapBaseObj  {

  // static data ------------------------------------
  static /*<rva 0x4a10d8>*/ /*|0x10|*/ unsigned int cornerVertexIndex[4];
  static /*<rva 0xab3968>*/ /*|0x4|*/ unsigned int farCornerIndex;
  static /*<rva 0xa72168>*/ /*|0x3a98|*/ unsigned char syncLoadBuffer[15000];
  static /*<rva 0xa760b0>*/ /*|0x488|*/ class NTempest::C2Vector texCoordList[145];
  static /*<rva 0xa75c18>*/ /*|0x488|*/ class NTempest::C2Vector texCoordList2[145];
  static /*<rva 0xab2128>*/ /*|0x1220|*/ class NTempest::C2Vector rmTexCoordList[4][145];
  static /*<rva 0xa76540>*/ /*|0x1220|*/ class NTempest::C2Vector rmTexCoordList2[4][145];
  static /*<rva 0xa720a8>*/ /*|0xa0|*/ struct CGxBatch rmGxBatchList[4][2];
  static /*<rva 0xab3368>*/ /*|0x600|*/ unsigned short primList[768];
  static /*<rva 0xa75c00>*/ /*|0x4|*/ unsigned short* primPtr;
  static /*<rva 0xa72090>*/ /*|0x14|*/ class TSGrowableArray<CGxBuf *> gxBufFreeList;
  static /*<rva 0xa6e5ac>*/ /*|0x4|*/ struct CGxBuf* gxBufDyn;
  static /*<rva 0xa7207c>*/ /*|0x14|*/ class TSGrowableArray<CGxTex *> gxAlphaTexFreeList;
  static /*<rva 0xa75c04>*/ /*|0x14|*/ class TSGrowableArray<CGxTex *> gxShadowTexFreeList;
  static /*<rva 0x41145c>*/ /*|0x4|*/ float TERRAIN_SPEC_EXP;
  static /*<rva 0xae2800>*/ /*|0x40|*/ class NTempest::C4Vector psLayerMask[4];
  static /*<rva 0xa6e5b4>*/ /*|0x4|*/ void  (soundEmitterCreateHandler*)(class CWSoundEmitter&);
  static /*<rva 0xa6e5b0>*/ /*|0x4|*/ void  (soundEmitterDestroyHandler*)(unsigned long);

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0x4|*/ unsigned long infoIndex;
  /*<thisrel this+0x7c>*/ /*|0x2|*/ unsigned short holes;
  /*<thisrel this+0x7e>*/ /*|0x2|*/ unsigned short pad;
  /*<thisrel this+0x80>*/ /*|0x4|*/ unsigned int lod;
  /*<thisrel this+0x84>*/ /*|0x4|*/ unsigned int remapLod;
  /*<thisrel this+0x88>*/ /*|0x4|*/ class CDetailDoodadInst* detailDoodadInst;
  /*<thisrel this+0x8c>*/ /*|0x10|*/ class CMapChunk* neighbor[4];
  /*<thisrel this+0x9c>*/ /*|0x8|*/ class TSLink<CMapChunk> sceneLink;
  /*<thisrel this+0xa4>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> doodadDefLinkList;
  /*<thisrel this+0xb0>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> mapObjDefLinkList;
  /*<thisrel this+0xbc>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> entityLinkList;
  /*<thisrel this+0xc8>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> lightLinkList;
  /*<thisrel this+0xd4>*/ /*|0xc|*/ class TSExplicitList<CMapSoundEmitter,76> soundEmitterList;
  /*<thisrel this+0xe0>*/ /*|0x10|*/ class CChunkLiquid* liquids[4];
  /*<thisrel this+0xf0>*/ /*|0x8|*/ class NTempest::C2iVector aIndex;
  /*<thisrel this+0xf8>*/ /*|0x8|*/ class NTempest::C2iVector sOffset;
  /*<thisrel this+0x100>*/ /*|0x8|*/ class NTempest::C2iVector cOffset;
  /*<thisrel this+0x108>*/ /*|0x4|*/ float freeTime;
  /*<thisrel this+0x10c>*/ /*|0x4|*/ int bLoaded;
  /*<thisrel this+0x110>*/ /*|0x10|*/ struct CChunkLayer* layerList[4];
  /*<thisrel this+0x120>*/ /*|0x4|*/ unsigned int nLayers;
  /*<thisrel this+0x124>*/ /*|0x4|*/ struct CChunkTex* shadowTexture;
  /*<thisrel this+0x128>*/ /*|0x4|*/ class CGxTex* shadowGxTexture;
  /*<thisrel this+0x12c>*/ /*|0x4|*/ unsigned char* shadowOffs;
  /*<thisrel this+0x130>*/ /*|0x4|*/ unsigned long shadowSize;
  /*<thisrel this+0x134>*/ /*|0x4|*/ struct CGxBuf* gxBuf;
  /*<thisrel this+0x138>*/ /*|0x4|*/ struct CChunkTex* shaderTexture;
  /*<thisrel this+0x13c>*/ /*|0x4|*/ class CGxTex* shaderGxTexture;
  /*<thisrel this+0x140>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0x144>*/ /*|0x4|*/ unsigned int fileOffset;
  /*<thisrel this+0x148>*/ /*|0x4|*/ unsigned int fileSize;
  /*<thisrel this+0x14c>*/ /*|0x8|*/ class NTempest::CRndSeed rSeed;
  /*<thisrel this+0x154>*/ /*|0x4|*/ unsigned int zoneId;
  /*<thisrel this+0x158>*/ /*|0x10|*/ unsigned short predTex[8];
  /*<thisrel this+0x168>*/ /*|0x8|*/ unsigned char noEffectDoodad[8];
  /*<thisrel this+0x170>*/ /*|0x6cc|*/ class NTempest::C3Vector normalList[145];
  /*<thisrel this+0x83c>*/ /*|0x6cc|*/ class NTempest::C3Vector vertexList[145];
  /*<thisrel this+0xf08>*/ /*|0x1000|*/ class NTempest::C4Plane planeList[256];
  /*<thisrel this+0x1f08>*/ /*|0x80|*/ unsigned long shadowBits[32];

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall SetSoundEmitterHandlers(void  (*)(class CWSoundEmitter&), void  (*)(unsigned long));
  static void __fastcall CMapChunk::FreeAsyncLoadBuffer(/*<register ecx>*/ /*|0x4|*/ unsigned char* buffer);
  static void __fastcall CMapChunk::InitAsyncLoadBuffers();
  static unsigned char* __fastcall CMapChunk::AllocAsyncLoadBuffer();
  static void __fastcall CMapChunk::AsyncCallback(/*<register ecx>*/ /*|0x4|*/ void* userArg);
  static void __fastcall CMapChunk::LodCreateTree(/*<register ecx>*/ /*|0x4|*/ int level, /*<register edx>*/ /*|0x4|*/ int maxLevel, /*<regrel ebp+0x8>*/ /*|0x4|*/ int neighborLOD, /*<regrel ebp+0xc>*/ /*|0x4|*/ int holes, /*<regrel ebp+0x10>*/ /*|0x4|*/ int cX, /*<regrel ebp+0x14>*/ /*|0x4|*/ int cY);
  static void __fastcall CMapChunk::Initialize();
  static void __fastcall CMapChunk::Destroy();
  static void __fastcall CMapChunk::FreeLists();
  static void __fastcall CMapChunk::AsyncPollHandler();
  static struct CGxBuf* __fastcall CMapChunk::AllocGxBuf(/*<register ecx>*/ /*|0x4|*/ unsigned int indexCount);
  static void __fastcall CMapChunk::FreeGxBuf(/*<register ecx>*/ /*|0x4|*/ struct CGxBuf* gxBuf);
  static class CGxTex* __fastcall CMapChunk::AllocAlphaGxTex(/*<register ecx>*/ /*|0x4|*/ void* userArg, /*<register edx>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&));
  static void __fastcall CMapChunk::FreeAlphaGxTex(/*<register ecx>*/ /*|0x4|*/ class CGxTex* gxTex);
  static class CGxTex* __fastcall CMapChunk::AllocShadowGxTex(/*<register ecx>*/ /*|0x4|*/ void* userArg, /*<register edx>*/ /*|0x4|*/ void  (userFunc*)(enum EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void*&));
  static void __fastcall CMapChunk::FreeShadowGxTex(/*<register ecx>*/ /*|0x4|*/ class CGxTex* gxTex);
  static void __fastcall CMapChunk::GxBufDynFillCallback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMapChunk::GxBufFillCallback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMapChunk::CreateRenderLists();
  static void __fastcall CMapChunk::UnpackAlphaBits(/*<register ecx>*/ /*|0x4|*/ unsigned long* pixels, /*<register edx>*/ /*|0x4|*/ unsigned char* alphaPixels);
  static void __fastcall CMapChunk::UnpackShadowBits(/*<register ecx>*/ /*|0x4|*/ unsigned long* pixels, /*<register edx>*/ /*|0x4|*/ unsigned long* shadowBits, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* shadow);
  static void __fastcall CMapChunk::UnpackAlphaShadowBits(/*<register ecx>*/ /*|0x4|*/ class NTempest::CImVector* texels, /*<register edx>*/ /*|0x4|*/ unsigned long* bits, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char** alpha, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char* shadow);
  static void __fastcall CMapChunk::UpdateLayerGxTexture(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CMapChunk::UpdateShadowGxTexture(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CMapChunk::UpdateShaderGxTexture(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CMapChunk::UpdateTextureDefault(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);

  // non-virtual functions --------------------------
  void __thiscall CMapChunk(class CMapChunk&);
  void __thiscall CMapChunk::CMapChunk();
  void __thiscall CMapChunk::~CMapChunk();
  void __thiscall CMapChunk::Load(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SMChunkInfo* chunkInfo);
  void __thiscall CMapChunk::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data);
  void __thiscall CMapChunk::UpdateLights();
  void __thiscall CMapChunk::Update();
  void __thiscall CMapChunk::Render();
  void __thiscall CMapChunk::Purge();
  void __thiscall CMapChunk::CreateDetailDoodads();
  void __thiscall CMapChunk::UpdateClipBuffer();
  void __thiscall CMapChunk::SyncLoadLayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CChunkLayer* layer);
  void __thiscall CMapChunk::SyncLoadShadow();
  void __thiscall CMapChunk::SyncLoadShader();
  void __thiscall CMapChunk::SyncLoad(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SMChunk*& mChunk, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SMLayer*& mLayer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char*& shadowTex, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned char*& alphaTex);
  void __thiscall CMapChunk::FindLights();
  void __thiscall CMapChunk::CreateVertices(/*<regrel ebp+0x8>*/ /*|0x4|*/ float* heights);
  void __thiscall CreateVertices2(float*);
  void __thiscall CMapChunk::CreateNormals(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* normals);
  void __thiscall CMapChunk::CreateFacePlanes();
  void __thiscall CMapChunk::CreateLayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapArea* area, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SMLayer* layer, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned char* alphaTex);
  void __thiscall CMapChunk::CreateShadow(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* shadowTex);
  void __thiscall CMapChunk::CreateAlphaShadow();
  void __thiscall CMapChunk::CreateRefs(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapArea* area, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* ref, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int doodadCnt, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int mapObjCnt);
  void __thiscall CMapChunk::RenderLayers();
  void __thiscall CMapChunk::RenderLayersDyn();
  void __thiscall CMapChunk::RenderLayersColor();
  void __thiscall CMapChunk::RenderLayersColorDyn();
  void __thiscall CMapChunk::FillGxBufVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CMapChunk::FillGxBufIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CMapChunk::FillGxBufDynVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CMapChunk::FillGxBufDynIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall RemapVertices();
  void __thiscall RemapVerticesDyn();
  void __thiscall CMapChunk::PurgeLayer(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CChunkLayer* layer);
  void __thiscall CMapChunk::CreateChunkLayerTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CChunkLayer* layer);
  void __thiscall CMapChunk::CreateChunkShadowTex();
  void __thiscall CMapChunk::CreateChunkShaderTex();
  class CMapChunk& __thiscall operator=(class CMapChunk&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapChunk::SelectLights();
};
// <size 0x1f88>

class CMap {

  // static data ------------------------------------
  static /*<rva 0xa6e474>*/ /*|0xc|*/ class TSExplicitList<CMapLight,8> lightFreeList;
  static /*<rva 0xa6e3d0>*/ /*|0xc|*/ class TSExplicitList<CMapLight,8> lightList;
  static /*<rva 0xa6e41c>*/ /*|0xc|*/ class TSExplicitList<CMapCacheLight,72> cacheLightFreeList;
  static /*<rva 0xa6e330>*/ /*|0xc|*/ class TSExplicitList<CMapObjGroup,428> mapObjGroupFreeList;
  static /*<rva 0xa6e4a4>*/ /*|0xc|*/ class TSExplicitList<CMapObj,420> mapObjFreeList;
  static /*<rva 0xa6e480>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,16> baseObjLinkFreeList;
  static /*<rva 0xa6e364>*/ /*|0xc|*/ class TSExplicitList<CMapArea,8> areaFreeList;
  static /*<rva 0xa6e3c4>*/ /*|0xc|*/ class TSExplicitList<CMapChunk,8> chunkFreeList;
  static /*<rva 0xa6e388>*/ /*|0xc|*/ class TSExplicitList<CMapDoodadDef,8> doodadDefFreeList;
  static /*<rva 0xa6e370>*/ /*|0xc|*/ class TSExplicitList<CMapEntity,8> entityFreeList;
  static /*<rva 0xa6e33c>*/ /*|0xc|*/ class TSExplicitList<CMapObjDefGroup,8> mapObjDefGroupFreeList;
  static /*<rva 0xa6e2b4>*/ /*|0xc|*/ class TSExplicitList<CMapObjDef,8> mapObjDefFreeList;
  static /*<rva 0xa6e4b0>*/ /*|0xc|*/ class TSExplicitList<CChunkLiquid,816> chunkLiquidFreeList;
  static /*<rva 0xa6e3b4>*/ /*|0xc|*/ class TSExplicitList<CMapSoundEmitter,76> soundEmitterFreeList;
  static /*<rva 0xa6e348>*/ /*|0xc|*/ class TSExplicitList<CMapArea,8> areaList;
  static /*<rva 0xa6e3a4>*/ /*|0xc|*/ class TSExplicitList<CMapChunk,8> chunkList;
  static /*<rva 0xa6e428>*/ /*|0x2c|*/ class TSHashTable<CMapDoodadDef,HASHKEY_DWORD> doodadDefHash;
  static /*<rva 0xa6e498>*/ /*|0xc|*/ class TSExplicitList<CMapEntity,8> entityList;
  static /*<rva 0xa6e45c>*/ /*|0xc|*/ class TSExplicitList<CMapObjDefGroup,8> mapObjDefGroupList;
  static /*<rva 0xa6e3f0>*/ /*|0x2c|*/ class TSHashTable<CMapObjDef,HASHKEY_NONE> mapObjDefHash;
  static /*<rva 0xa6e37c>*/ /*|0xc|*/ class TSExplicitList<CChunkLiquid,816> chunkLiquidList;
  static /*<rva 0xa6e2d0>*/ /*|0x2c|*/ int counts[11];
  static /*<rva 0xa6e300>*/ /*|0x2c|*/ int freeCounts[11];
  static /*<rva 0xa64e6c>*/ /*|0x4|*/ unsigned int uniqueId;
  static /*<rva 0xa64e88>*/ /*|0x1|*/ unsigned char enablePixelShaders;
  static /*<rva 0xa60b98>*/ /*|0x1|*/ unsigned char enableSpecular;
  static /*<rva 0xa64e68>*/ /*|0x1|*/ unsigned char enableSpecularTerrain;
  static /*<rva 0xa4ca88>*/ /*|0x1|*/ unsigned char enableTerrainShader;
  static /*<rva 0xa64e70>*/ /*|0x1|*/ unsigned char enableSpecularWater;
  static /*<rva 0xa60e38>*/ /*|0x4|*/ class CGxPixelShader* psSpecTerrain;
  static /*<rva 0xa60e10>*/ /*|0x4|*/ class CGxShaderParam* psSpecTerrain_LayerMask;
  static /*<rva 0xa60ba0>*/ /*|0x4|*/ class CGxPixelShader* psTerrain;
  static /*<rva 0xa60e28>*/ /*|0x4|*/ class CGxShaderParam* psTerrain_LayerMask;
  static /*<rva 0xa4ca7c>*/ /*|0x4|*/ class CGxPixelShader* psSpecUTerrain;
  static /*<rva 0xa60e34>*/ /*|0x4|*/ class CGxShaderParam* psSpecUTerrain_LayerMask;
  static /*<rva 0xa60de8>*/ /*|0x4|*/ class CGxPixelShader* psUTerrain;
  static /*<rva 0xa68f10>*/ /*|0x4|*/ class CGxShaderParam* psUTerrain_LayerMask;
  static /*<rva 0xa60b9c>*/ /*|0x4|*/ struct CGxBuf* gxBufDynLowDetail;
  static /*<rva 0xa6e48c>*/ /*|0xc|*/ class TSList<CChunkLayer,TSGetLink<CChunkLayer> > chunkLayerFreeList;
  static /*<rva 0xa6e3e4>*/ /*|0xc|*/ class TSList<CChunkTex,TSGetLink<CChunkTex> > chunkTexFreeList;
  static /*<rva 0xa60e08>*/ /*|0x4|*/ class SFile* wdtFile;
  static /*<rva 0xa60e60>*/ /*|0x4|*/ unsigned long version;
  static /*<rva 0xa68e90>*/ /*|0x80|*/ struct SMMapHeader header;
  static /*<rva 0xa68f14>*/ /*|0x4|*/ int bActive;
  static /*<rva 0x49f484>*/ /*|0x4|*/ int bPreload;
  static /*<rva 0xa68f18>*/ /*|0x4|*/ int bDungeon;
  static /*<rva 0xa4ca90>*/ /*|0x10000|*/ struct SMAreaInfo areaInfo[4096];
  static /*<rva 0xa60e68>*/ /*|0x4000|*/ class CMapArea* areaTable[4096];
  static /*<rva 0xa64e90>*/ /*|0x4000|*/ unsigned long areaLowOffsets[4096];
  static /*<rva 0xa5cb98>*/ /*|0x4000|*/ class CMapAreaLow* areaLowTable[4096];
  static /*<rva 0xa4ca68>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> areaLinkList;
  static /*<rva 0xa4ca54>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> doodadDefLinkList;
  static /*<rva 0xa4ca3c>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> mapObjDefLinkList;
  static /*<rva 0xa4ca28>*/ /*|0x1|*/ class HASHKEY_NONE nullHashKey;
  static /*<rva 0xa60dc0>*/ /*|0x14|*/ class TSGrowableArray<char> doodadNames;
  static /*<rva 0xa60ba4>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> doodadNamesIndex;
  static /*<rva 0xa60dd4>*/ /*|0x14|*/ class TSGrowableArray<char> mapObjNames;
  static /*<rva 0xa60df0>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> mapObjNamesIndex;
  static /*<rva 0x410cf4>*/ /*|0x4|*/ unsigned int SKYTEX_HEIGHT;
  static /*<rva 0x410cf8>*/ /*|0x4|*/ unsigned int WATERTEX_HEIGHT;
  static /*<rva 0xa4c8d8>*/ /*|0xc|*/ class TSList<WaterRadWave,TSGetLink<WaterRadWave> > waterRipplesActive;
  static /*<rva 0xa44888>*/ /*|0xc|*/ class TSList<WaterRadWave,TSGetLink<WaterRadWave> > waterRipplesFree;
  static /*<rva 0xa43618>*/ /*|0x10|*/ class TSFixedArray<NTempest::CImVector> skyTexels;
  static /*<rva 0xa42dc4>*/ /*|0x4|*/ class CGxTex* skyTexid;
  static /*<rva 0xa4c8b8>*/ /*|0x4|*/ class CGxTex* riverDiffTexid;
  static /*<rva 0xa446e0>*/ /*|0x4|*/ class CGxTex* oceanDiffTexid;
  static /*<rva 0xa446d8>*/ /*|0x1|*/ unsigned char oceanDiffTexUpdated;
  static /*<rva 0xa43e58>*/ /*|0x1|*/ unsigned char riverDiffTexUpdated;
  static /*<rva 0x410d24>*/ /*|0x4|*/ float WATER_SPEC_EXP;
  static /*<rva 0xa4c8d4>*/ /*|0x4|*/ class CGxPixelShader* psOcean0;
  static /*<rva 0xa43e90>*/ /*|0x438|*/ struct HTEXTURE__* liquidTex[9][30];
  static /*<rva 0xa4c8e8>*/ /*|0x9|*/ unsigned char liquidTexLoaded[9];
  static /*<rva 0xa43e64>*/ /*|0x24|*/ float liquidLastShown[9];
  static /*<rva 0x410d00>*/ /*|0x24|*/ float liquidTexLoopTime[9];
  static /*<rva 0x49efbc>*/ /*|0x24|*/ char* liquidTexBaseName[9];
  static /*<rva 0x410cfc>*/ /*|0x4|*/ float LIQUID_TEX_PURGE_TIME;
  static /*<rva 0xa5ca98>*/ /*|0x100|*/ char mapPath[256];
  static /*<rva 0xa60cb8>*/ /*|0x100|*/ char mapName[256];
  static /*<rva 0xa60bb8>*/ /*|0x100|*/ char wdtFilename[256];
  static /*<rva 0xa4c900>*/ /*|0x100|*/ char wobFilename[256];
  static /*<rva 0xa60e14>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> scCollideList;
  static /*<rva 0xa4ca80>*/ /*|0x4|*/ unsigned int scCollideCnt;
  static /*<rva 0xa4ca4c>*/ /*|0x4|*/ unsigned int cCount;
  static /*<rva 0xa4ca74>*/ /*|0x4|*/ unsigned int bspRecurseCount;
  static /*<rva 0xa64e8c>*/ /*|0x4|*/ unsigned int mapGetFacetsCount;
  static /*<rva 0xa60e5c>*/ /*|0x4|*/ unsigned int nChunksPrepared;
  static /*<rva 0xa4ca48>*/ /*|0x4|*/ unsigned int nGbChunksPrepared;
  static /*<rva 0xa60e3c>*/ /*|0x14|*/ class TSGrowableArray<CGxVertexPC> testQueryVerts;
  static /*<rva 0xa4ca04>*/ /*|0x14|*/ class TSGrowableArray<unsigned short> testQueryIndices;
  static /*<rva 0xa60dbc>*/ /*|0x4|*/ int  (entityHandler*)(void*, unsigned long, unsigned __int64, unsigned long);
  static /*<rva 0xa4ca84>*/ /*|0x4|*/ void* entityHandlerParam;
  static /*<rva 0xa4ca00>*/ /*|0x4|*/ int  (entityCollisionHandler*)(unsigned __int64, unsigned long, struct WorldObjCollisionHandlerData*);
  static /*<rva 0xa5ca90>*/ /*|0x4|*/ void* oldSelectLightParm;
  static /*<rva 0xa4ca20>*/ /*|0x4|*/ class CMapLight* sunLight;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetUniqueId();
  static class CMapBaseObjLink* __fastcall CMap::AllocBaseObjLink(/*<register ecx>*/ /*|0x4|*/ class CMapBaseObj* owner);
  static class CMapObj* __fastcall CMap::AllocMapObj();
  static class CMapObjGroup* __fastcall CMap::AllocMapObjGroup();
  static class CMapArea* __fastcall CMap::AllocArea();
  static class CMapChunk* __fastcall CMap::AllocChunk();
  static class CMapDoodadDef* __fastcall CMap::AllocDoodadDef();
  static struct CMapEntity* __fastcall CMap::AllocEntity();
  static class CMapLight* __fastcall CMap::AllocLight();
  static class CMapCacheLight* __fastcall CMap::AllocCacheLight();
  static class CMapObjDefGroup* __fastcall CMap::AllocMapObjDefGroup();
  static class CMapObjDef* __fastcall CMap::AllocMapObjDef();
  static class CChunkLiquid* __fastcall CMap::AllocChunkLiquid();
  static class CMapSoundEmitter* __fastcall CMap::AllocSoundEmitter();
  static void __fastcall CMap::FreeBaseObjLink(/*<register ecx>*/ /*|0x4|*/ class CMapBaseObjLink* link);
  static void __fastcall CMap::FreeMapObj(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj);
  static void __fastcall CMap::FreeMapObjGroup(/*<register ecx>*/ /*|0x4|*/ class CMapObjGroup* group);
  static void __fastcall CMap::FreeArea(/*<register ecx>*/ /*|0x4|*/ class CMapArea* area);
  static void __fastcall CMap::FreeChunk(/*<register ecx>*/ /*|0x4|*/ class CMapChunk* chunk);
  static void __fastcall CMap::FreeDoodadDef(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef);
  static void __fastcall CMap::FreeEntity(/*<register ecx>*/ /*|0x4|*/ struct CMapEntity* entity);
  static void __fastcall CMap::FreeLight(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::FreeCacheLight(/*<register ecx>*/ /*|0x4|*/ class CMapCacheLight* cacheLight);
  static void __fastcall CMap::FreeMapObjDefGroup(/*<register ecx>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::FreeMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef);
  static void __fastcall CMap::FreeChunkLiquid(/*<register ecx>*/ /*|0x4|*/ class CChunkLiquid*& cl);
  static void __fastcall CMap::FreeSoundEmitter(/*<register ecx>*/ /*|0x4|*/ class CMapSoundEmitter* soundEmitter);
  static unsigned char __fastcall EnablePixelShaders();
  static unsigned char __fastcall EnableSpecular();
  static unsigned char __fastcall EnableSpecularTerrain();
  static unsigned char __fastcall EnableSpecularWater();
  static unsigned char __fastcall EnableTerrainShader();
  static struct CChunkLayer* __fastcall CMap::GetLayer();
  static struct CChunkTex* __fastcall CMap::GetTex();
  static void __fastcall CMap::FreeLayer(/*<register ecx>*/ /*|0x4|*/ struct CChunkLayer* layer);
  static void __fastcall CMap::FreeTex(/*<register ecx>*/ /*|0x4|*/ struct CChunkTex* tex);
  static void __fastcall CMap::GetCounts(/*<register ecx>*/ /*|0x4|*/ int* counts);
  static void __fastcall CMap::CalcMem();
  static unsigned long __fastcall CMap::GetTextureUseage();
  static struct HTEXTURE__* __fastcall CMap::LoadTexture(/*<register ecx>*/ /*|0x4|*/ char* fileName);
  static void __fastcall CMap::Initialize();
  static void __fastcall CMap::Destroy();
  static void __fastcall CMap::ClearDetailDoodads();
  static void __fastcall CMap::Load(/*<register ecx>*/ /*|0x4|*/ char* fileName);
  static void __fastcall CMap::Unload();
  static void __fastcall CMap::LoadWdl();
  static void __fastcall CMap::LoadWdt();
  static void __fastcall CMap::Preload();
  static void __fastcall CMap::Open();
  static void __fastcall CMap::ReloadDoodadModels();
  static void __fastcall CMap::EnableDoodadFullAlpha(/*<register ecx>*/ /*|0x4|*/ int enable);
  static int __fastcall CMap::LoadDoodadModel(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef, /*<register edx>*/ /*|0x4|*/ int bWait);
  static class CMapDoodadDef* __fastcall CMap::CreateDoodadDef(/*<register ecx>*/ /*|0x4|*/ unsigned int doodadRef, /*<register edx>*/ /*|0x4|*/ struct SMODoodadDef& smoDoodadDef, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int mapObjDefId, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C44Matrix& mapObjDefMat);
  static class CMapDoodadDef* __fastcall CMap::CreateDoodadDef(/*<register ecx>*/ /*|0x4|*/ struct SMDoodadDef& smDoodadDef, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  static class CMapDoodadDef* __fastcall CMap::CreateDoodadDef(/*<register ecx>*/ /*|0x4|*/ char* fileName, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bWait);
  static class CMapObjDef* __fastcall CMap::CreateMapObjDef(/*<register ecx>*/ /*|0x4|*/ struct SMMapObjDef& smMapObjDef, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  static class CMapObjDef* __fastcall CMap::CreateMapObjDef(/*<register ecx>*/ /*|0x4|*/ char* fileName, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bWait);
  static void __fastcall CMap::CreateMapObjDefGroupDoodads(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj, /*<register edx>*/ /*|0x4|*/ class CMapObjGroup* mapObjGroup, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::UpdateMapObjDefGroupDoodads(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj, /*<register edx>*/ /*|0x4|*/ class CMapObjGroup* mapObjGroup, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::CreateMapObjDefLights(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj, /*<register edx>*/ /*|0x4|*/ class CMapObjGroup* mapObjGroup, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::PurgeMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef);
  static void __fastcall CMap::PurgeMapObjDefGroup(/*<register ecx>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::PurgeDoodadDef(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef);
  static void __fastcall CMap::PurgeArea(/*<register ecx>*/ /*|0x4|*/ class CMapArea* area);
  static void __fastcall CMap::PurgeChunk(/*<register ecx>*/ /*|0x4|*/ class CMapChunk* chunk);
  static unsigned int __fastcall CMap::QueryAreaId(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static unsigned char __fastcall CMap::QueryGroundType(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<register edx>*/ /*|0x4|*/ unsigned int& groundType);
  static unsigned char __fastcall CMap::QueryShadow(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  static float __fastcall CMap::PointIntersect(/*<regrel ebp+0x8>*/ /*|0x4|*/ float wx, /*<regrel ebp+0xc>*/ /*|0x4|*/ float wy, /*<regrel ebp+0x10>*/ /*|0x4|*/ float radius);
  static unsigned char __fastcall CMap::GetPlane(/*<regrel ebp+0x8>*/ /*|0x4|*/ float wx, /*<regrel ebp+0xc>*/ /*|0x4|*/ float wy, /*<register ecx>*/ /*|0x4|*/ class NTempest::C4Plane& plane);
  static unsigned char __fastcall CMap::VectorIntersect(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* ip, /*<regrel ebp+0xc>*/ /*|0x4|*/ float* dist, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::VectorIntersectTerrain(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ float* t, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapChunk** chunk);
  static unsigned char __fastcall CMap::VectorIntersectMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int polyIgnoreFlags, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int groupIgnoreFlags, /*<regrel ebp+0x14>*/ /*|0x4|*/ float* t, /*<regrel ebp+0x18>*/ /*|0x4|*/ struct SMOPoly** poly, /*<regrel ebp+0x1c>*/ /*|0x4|*/ class CMapObj** qMapObj);
  static unsigned char __fastcall CMap::VectorIntersectDoodadDefLinkList(/*<register ecx>*/ /*|0x4|*/ class TSExplicitList<CMapBaseObjLink,8>& doodadDefLinkList, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0xc>*/ /*|0x4|*/ float* t, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::VectorIntersectGameObjLinkList(/*<register ecx>*/ /*|0x4|*/ class TSExplicitList<CMapBaseObjLink,8>& gameObjLinkList, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0xc>*/ /*|0x4|*/ float* t, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacet(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& t, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& facet, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacets(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacets(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetTris(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CMap::TestQueryAdd(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector color, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix* basis);
  static void __fastcall CMap::TestQueryAdd(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aabox, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector color, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix* basis);
  static void __fastcall CMap::TestQueryAdd(/*<register ecx>*/ /*|0x4|*/ struct NTempest::CFacet& facet, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector color, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix* basis);
  static void __fastcall CMap::TestQueryRender();
  static void __fastcall CMap::RenderLow();
  static void __fastcall CMap::RenderAreaLow(/*<register ecx>*/ /*|0x4|*/ class CMapAreaLow* areaLow);
  static void __fastcall CMap::GxBufDynLowDetailCallback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMap::CreateAreaLowDetailVertices(/*<register ecx>*/ /*|0x4|*/ class CMapAreaLow* areaLow, /*<register edx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMap::CreateAreaLowDetailIndices(/*<register ecx>*/ /*|0x4|*/ class CMapAreaLow* areaLow, /*<register edx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMap::PrepareUpdate();
  static void __fastcall CMap::Update();
  static void __fastcall CMap::CreateChunkNeighborPtrs(/*<register ecx>*/ /*|0x4|*/ class CMapChunk* chunk);
  static void __fastcall MakeAllEntityNonVisible();
  static void __fastcall CMap::UpdateEntity(/*<register ecx>*/ /*|0x4|*/ struct CMapEntity* entity);
  static void __fastcall CMap::LinkEntity(/*<register ecx>*/ /*|0x4|*/ class CMapStaticEntity* entity);
  static void __fastcall CMap::InitializeDoodadBounds(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef);
  static void __fastcall CMap::SnapBaseObjToSubChunk(/*<register ecx>*/ /*|0x4|*/ class CMapBaseObj* baseObj, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  static void __fastcall CMap::UpdateDoodadDef(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  static void __fastcall UpdateMapObjDef(class CMapObjDef*, class CMapObj*);
  static void __fastcall CMap::UpdateMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle);
  static void __fastcall CMap::SetLightFuncs();
  static void __fastcall CMap::GxuLightInitialize();
  static void __fastcall CMap::GxuLightShutdown();
  static unsigned long __fastcall CMap::GxuLightCreate();
  static void __fastcall CMap::GxuLightDestroy(/*<register ecx>*/ /*|0x4|*/ unsigned long lightId);
  static class CGxLight* __fastcall CMap::GxuLightLock(/*<register ecx>*/ /*|0x4|*/ unsigned long lightId);
  static void __fastcall CMap::GxuLightUnlock(/*<register ecx>*/ /*|0x4|*/ unsigned long lightId);
  static void __fastcall CMap::GxuLightSelect(/*<regrel ebp+0x8>*/ /*|0xc|*/ class NTempest::C3Vector worldPos, /*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<register edx>*/ /*|0x4|*/ unsigned int maxLightsToUse);
  static int __fastcall CMap::GxuLightEnable(/*<register ecx>*/ /*|0x4|*/ unsigned long lightId);
  static void __fastcall CMap::GxuLightEnableSet(/*<register ecx>*/ /*|0x4|*/ unsigned long lightId, /*<register edx>*/ /*|0x4|*/ int enable);
  static void __fastcall CMap::GxuLightSetMaxLights(/*<register ecx>*/ /*|0x4|*/ unsigned int maxLightsToUse);
  static float __fastcall CMap::GxuLightBucketSize();
  static void __fastcall CMap::GxuLightBucketSizeSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ float bucketSize);
  static void __fastcall CMap::GxuLightResetCache();
  static class CMapLight* __fastcall CMap::CreateLight(/*<register cl>*/ /*|0x1|*/ unsigned char dynamic);
  static void __fastcall CMap::DestroyLight(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::UpdateLight(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::UpdateLightBounds(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::EnableLight(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::DisableLight(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::SelectLight(/*<register ecx>*/ /*|0x4|*/ void* parm, /*<regrel ebp+0x8>*/ /*|0xc|*/ class NTempest::C3Vector worldPos, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int maxLightsToUse);
  static void __fastcall CMap::SelectLight(/*<register ecx>*/ /*|0x4|*/ class CMapBaseObj* baseObj);
  static unsigned char __fastcall CMap::LocateViewerMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& lCen, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& lEnd, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& maxT, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjDef*& hitMapObjDef, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* hitGroupIDs);
  static unsigned char __fastcall LocateViewerMapObjs4(class NTempest::C3Vector&, class NTempest::C3Vector&, float&, class CMapObjDef*&, unsigned int*);
  static unsigned char __fastcall CMap::QueryLiquidStatus(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& waterDir, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& deep);
  static unsigned char __fastcall CMap::QueryLiquidStatusMapObjsExt(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& waterDir);
  static void __fastcall CMap::QueryLiquidSounds(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& worldPos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius, /*<register edx>*/ /*|0x4|*/ int* lbool, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* ldelta, /*<regrel ebp+0x10>*/ /*|0x4|*/ float* ldsquared);
  static unsigned char __fastcall CMap::QueryLiquidFishable(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ int& fishable);
  static unsigned char __fastcall CMap::QueryLiquidFishableMapObjsExt(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ int& fishable);
  static void __fastcall CMap::WaterRipple(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float len, /*<regrel ebp+0xc>*/ /*|0x4|*/ float time, /*<regrel ebp+0x10>*/ /*|0x4|*/ float amp, /*<regrel ebp+0x14>*/ /*|0x4|*/ float vel, /*<regrel ebp+0x18>*/ /*|0x4|*/ float freq);
  static void __fastcall CMap::WaterInitialize();
  static void __fastcall CMap::WaterDestroy();
  static void __fastcall UpdateOcean();
  static void __fastcall CMap::UnloadLiquidTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int liquid);
  static void __fastcall CMap::UpdateLiquidTextures();
  static void __fastcall CMap::OceanFFT();
  static void __fastcall CMap::WaterDiffTexCallback(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static struct HTEXTURE__* __fastcall CMap::GetLiquidTexture(/*<register ecx>*/ /*|0x4|*/ unsigned int liquid);
  static void __fastcall CMap::ProjectLights();
  static void __fastcall CreateChunk(class CMapArea*, class CMapChunk*, unsigned long);
  static void __fastcall CMap::LoadDoodadNames();
  static void __fastcall CMap::LoadMapObjNames();
  static void __fastcall CMap::CreateMapObjDefGroups(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj, /*<register edx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef);
  static void __fastcall CMap::PrepareAreas();
  static void __fastcall CMap::PrepareMapObjDefs();
  static void __fastcall CMap::PrepareDoodadDefs();
  static void __fastcall CMap::PrepareChunks();
  static void __fastcall CMap::QueryLightmap(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef);
  static void __fastcall CMap::PrepareMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<register edx>*/ /*|0x4|*/ class CMapObj* mapObj);
  static void __fastcall CMap::PrepareArea(/*<register ecx>*/ /*|0x4|*/ int x, /*<register edx>*/ /*|0x4|*/ int y);
  static void __fastcall CMap::PrepareChunk(/*<register ecx>*/ /*|0x4|*/ class CMapArea* area, /*<register edx>*/ /*|0x4|*/ int x, /*<regrel ebp+0x8>*/ /*|0x4|*/ int y);
  static void __fastcall CMap::Purge();
  static void __fastcall CMap::UpdateMapObjDefs();
  static void __fastcall UpdateMapObjDefGroups(class CMapObjDef*, class CMapObj*);
  static void __fastcall CMap::UpdateChunks(/*<register ecx>*/ /*|0x4|*/ class CMapArea* area);
  static void __fastcall CMap::LinkLightToMapObjDefs(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall CMap::LinkLightToChunks(/*<register ecx>*/ /*|0x4|*/ class CMapLight* light);
  static void __fastcall LodCreateTree(int, int, int, int, int, int);
  static float __fastcall PointIntersectSubChunk(float, float, int, int, class CMapChunk*);
  static void __fastcall CMap::VectorIntersectSX(/*<register ecx>*/ /*|0x4|*/ class NTempest::CiRect& sRect);
  static void __fastcall CMap::VectorIntersectSY(/*<register ecx>*/ /*|0x4|*/ class NTempest::CiRect& sRect);
  static void __fastcall CMap::VectorIntersectDX(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& sRect);
  static void __fastcall CMap::VectorIntersectDY(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& sRect);
  static unsigned char __fastcall VectorIntersectSubchunk(class NTempest::C3Vector*, class NTempest::C3Vector*, class NTempest::C3Vector*, float*);
  static unsigned char __fastcall VectorIntersectSubchunk(class NTempest::C3Vector*, class NTempest::C3Vector*, float*, unsigned int);
  static unsigned char __fastcall CMap::VectorIntersectSubchunks(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p0, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* p1, /*<regrel ebp+0x8>*/ /*|0x4|*/ float* t, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapChunk** retChunk);
  static unsigned char __fastcall CMap::VectorIntersectTri(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* v0, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* v1, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* v2, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* n);
  static unsigned char __fastcall CMap::GetFacetMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& t, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& facet, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacetTerrain(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& t, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& facet, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacetSubchunks(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& t, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& facet, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetChunkFacets(/*<register ecx>*/ /*|0x4|*/ int cx, /*<register edx>*/ /*|0x4|*/ int cy, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& sRect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CWFrustum& wFrustum, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CWFacetData* facetData);
  static unsigned char __fastcall CMap::GetChunkFacets(/*<register ecx>*/ /*|0x4|*/ int cx, /*<register edx>*/ /*|0x4|*/ int cy, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& sRect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CMap::CreateImpassableFacets(/*<register ecx>*/ /*|0x4|*/ class CMapChunk* chunk, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x8>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacetsMapObjs(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetFacetsMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetTrisMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetTrisTerrain(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CMap::GetTrisChunk(/*<register ecx>*/ /*|0x4|*/ int cx, /*<register edx>*/ /*|0x4|*/ int cy, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CiRect& sRect, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CMap::LinkEntityToMapObj(/*<register ecx>*/ /*|0x4|*/ class CMapStaticEntity* entity, /*<register edx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDefGroup* mapObjDefGroup);
  static void __fastcall CMap::LinkEntityToChunk(/*<register ecx>*/ /*|0x4|*/ class CMapStaticEntity* entity, /*<register edx>*/ /*|0x4|*/ class CMapChunk* chunk);
  static unsigned char __fastcall CMap::LinkIntersectMapObjs(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& lCen, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& lEnd, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& hitT, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjDef*& hitMapObjDef, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDefGroup*& hitMapObjDefGroup);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CMapObj : class TSHashObject<CMapObj,HASHKEY_NONE>  {

  // static data ------------------------------------
  static /*<rva 0xac1a48>*/ /*|0x104|*/ class TSCArray<NTempest::CRect,16> extViewList;
  static /*<rva 0xab3988>*/ /*|0xe004|*/ class TSCArray<SPortalExt,2048> portalExtList;
  static /*<rva 0xab3984>*/ /*|0x4|*/ unsigned int maxRLevel;
  static /*<rva 0x4a13d4>*/ /*|0x4|*/ unsigned int DEFAULT_RLEVEL;
  static /*<rva 0x4a0608>*/ /*|0x4|*/ unsigned int MAX_SOUND_RLEVEL;
  static /*<rva 0xa6e4d0>*/ /*|0xc|*/ class NTempest::C3Vector localCamPos;
  static /*<rva 0xa6e4f0>*/ /*|0x4|*/ class CMapObjDef* curMapObjDef;
  static /*<rva 0xae1cc0>*/ /*|0x4|*/ int bIntRender;
  static /*<rva 0xa6e4c0>*/ /*|0x4|*/ unsigned int sMinimapTag;
  static /*<rva 0xa6e4f4>*/ /*|0x2c|*/ class TSHashTable<CMapObj,HASHKEY_NONE> mapObjHash;
  static /*<rva 0xa6e554>*/ /*|0x1|*/ class HASHKEY_NONE nullHashKey;
  static /*<rva 0xae1cc4>*/ /*|0x4|*/ void  (gRenderCallback*)(unsigned int, void*, int);
  static /*<rva 0xae1cc8>*/ /*|0x4|*/ void* gRenderUserParam;
  static /*<rva 0xa6e4e8>*/ /*|0x4|*/ unsigned int gRenderCount;

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x104|*/ char name[260];
  /*<thisrel this+0x11c>*/ /*|0x4|*/ struct SMOHeader* header;
  /*<thisrel this+0x120>*/ /*|0x4|*/ char* textureNameList;
  /*<thisrel this+0x124>*/ /*|0x4|*/ char* groupNameList;
  /*<thisrel this+0x128>*/ /*|0x4|*/ struct SMOGroupInfo* groupInfoList;
  /*<thisrel this+0x12c>*/ /*|0x4|*/ class NTempest::C3Vector* portalVertexList;
  /*<thisrel this+0x130>*/ /*|0x4|*/ struct SMOPortal* portalList;
  /*<thisrel this+0x134>*/ /*|0x4|*/ struct SMOPortalRef* portalRefList;
  /*<thisrel this+0x138>*/ /*|0x4|*/ struct SMOLight* lightList;
  /*<thisrel this+0x13c>*/ /*|0x4|*/ struct SMODoodadSet* doodadSetList;
  /*<thisrel this+0x140>*/ /*|0x4|*/ char* doodadNameList;
  /*<thisrel this+0x144>*/ /*|0x4|*/ struct SMODoodadDef* doodadDefList;
  /*<thisrel this+0x148>*/ /*|0x4|*/ struct SMOFog* fogList;
  /*<thisrel this+0x14c>*/ /*|0x4|*/ class NTempest::C4Plane* convexVolumePlanes;
  /*<thisrel this+0x150>*/ /*|0x4|*/ unsigned int textureNameCount;
  /*<thisrel this+0x154>*/ /*|0x4|*/ unsigned int groupNameCount;
  /*<thisrel this+0x158>*/ /*|0x4|*/ unsigned int groupCount;
  /*<thisrel this+0x15c>*/ /*|0x4|*/ unsigned int portalVertexCount;
  /*<thisrel this+0x160>*/ /*|0x4|*/ unsigned int portalCount;
  /*<thisrel this+0x164>*/ /*|0x4|*/ unsigned int portalRefCount;
  /*<thisrel this+0x168>*/ /*|0x4|*/ unsigned int lightCount;
  /*<thisrel this+0x16c>*/ /*|0x4|*/ unsigned int doodadSetCount;
  /*<thisrel this+0x170>*/ /*|0x4|*/ unsigned int doodadNameCount;
  /*<thisrel this+0x174>*/ /*|0x4|*/ unsigned int doodadDefCount;
  /*<thisrel this+0x178>*/ /*|0x4|*/ unsigned int fogCount;
  /*<thisrel this+0x17c>*/ /*|0x4|*/ unsigned int volumePlaneCount;
  /*<thisrel this+0x180>*/ /*|0x4|*/ class NTempest::CImVector ambColor;
  /*<thisrel this+0x184>*/ /*|0x4|*/ int version;
  /*<thisrel this+0x188>*/ /*|0x18|*/ class NTempest::CAaBox aaBox;
  /*<thisrel this+0x1a0>*/ /*|0x4|*/ class SFile* file;
  /*<thisrel this+0x1a4>*/ /*|0x8|*/ class TSLink<CMapObj> lameAssLink;
  /*<thisrel this+0x1ac>*/ /*|0x14|*/ struct CMapObjHeader fileHeader;
  /*<thisrel this+0x1c0>*/ /*|0x4|*/ unsigned char* data;
  /*<thisrel this+0x1c4>*/ /*|0x4|*/ unsigned long dataBytes;
  /*<thisrel this+0x1c8>*/ /*|0x4|*/ int refCount;
  /*<thisrel this+0x1cc>*/ /*|0x4|*/ float flushTime;
  /*<thisrel this+0x1d0>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0x1d4>*/ /*|0x1|*/ unsigned char bLoaded;
  /*<thisrel this+0x1d8>*/ /*|0x4|*/ struct SMOMaterial* materialList;
  /*<thisrel this+0x1dc>*/ /*|0x4|*/ unsigned int materialCount;
  /*<thisrel this+0x1e0>*/ /*|0x4|*/ unsigned int nGroupsRead;
  /*<thisrel this+0x1e4>*/ /*|0xc|*/ class TSExplicitList<CMapObjGroup,428> groupList;
  /*<thisrel this+0x1f0>*/ /*|0x604|*/ class TSCArray<CMapObjGroup *,384> groupPtrList;

  // base classes -----------------------------------
  // baseclass class TSHashObject<CMapObj,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CMapObj::AsyncPostloadCallbackHeader(/*<register ecx>*/ /*|0x4|*/ void* userArg);
  static void __fastcall CMapObj::AsyncPostloadCallback(/*<register ecx>*/ /*|0x4|*/ void* userArg);
  static void __fastcall CMapObj::AsyncPostloadCallbackAll(/*<register ecx>*/ /*|0x4|*/ void* userArg);
  static void __fastcall CMapObj::Initialize();
  static void __fastcall CMapObj::Destroy();
  static void __fastcall CMapObj::ClearCache(/*<register ecx>*/ /*|0x4|*/ int force);
  static void __fastcall CMapObj::PrepareUpdate();
  static class CMapObj* __fastcall CMapObj::Create(/*<register ecx>*/ /*|0x4|*/ char* fileName);
  static void __fastcall CMapObj::Delete(/*<register ecx>*/ /*|0x4|*/ class CMapObj* mapObj);
  static void __fastcall CMapObj::SetGroupRenderCallback(/*<register ecx>*/ /*|0x4|*/ void  (func*)(unsigned int, void*, int), /*<register edx>*/ /*|0x4|*/ void* userParam);

  // non-virtual functions --------------------------
  void __thiscall CMapObj(class CMapObj&);
  void __thiscall CMapObj::CMapObj();
  void __thiscall CMapObj::~CMapObj();
  void __thiscall CMapObj::Init();
  void __thiscall CMapObj::InitPtrs();
  void __thiscall CMapObj::Clear();
  unsigned int __thiscall GetId();
  class NTempest::CImVector __thiscall GetAmbientColor();
  struct SMOMaterial* __thiscall GetMaterial(unsigned int);
  unsigned char __thiscall IsLoaded();
  unsigned char __thiscall IsLoading();
  char* __thiscall GetFileName();
  unsigned int __thiscall GetNumGroups();
  unsigned int __thiscall GetWmoID();
  struct SMODoodadDef* __thiscall GetDoodadDef(unsigned int);
  char* __thiscall GetDoodadName(unsigned int);
  unsigned int __thiscall CMapObj::GetDoodadSet(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int doodadIndex);
  unsigned int __thiscall GetLightCount();
  struct SMOLight* __thiscall GetLight(unsigned int);
  struct SMOFog& __thiscall CMapObj::GetFog(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int __thiscall GetFogCount();
  class NTempest::C3Vector* __thiscall GetMin();
  class NTempest::C3Vector* __thiscall GetMax();
  class NTempest::CAaBox& __thiscall GetAaBox();
  unsigned char __thiscall CMapObj::IsGroupLoaded(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall CMapObj::IsGroupLoading(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall SetFlushTime(float);
  class CMapObjGroup* __thiscall CMapObj::GetGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int force);
  char* __thiscall CMapObj::GetGroupName(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct SMOGroupInfo* __thiscall CMapObj::GetGroupInfo(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CMapObj::ReadGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SMOGroupInfo* groupInfo, /*<regrel ebp+0x10>*/ /*|0x4|*/ int preLoad);
  void __thiscall CMapObj::ReadGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CMapObj::WaitLoad();
  void __thiscall CMapObj::WaitLoadGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CMapObj::GetBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox);
  void __thiscall CMapObj::GetBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaSphere& aaSphere);
  void __thiscall CMapObj::GetGroupBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int index);
  void __thiscall CMapObj::GetGroupBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaSphere& aaSphere, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int index);
  unsigned int __thiscall CMapObj::GetGroupFlags(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall CMapObj::TestBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& v1);
  unsigned char __thiscall CMapObj::TestBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  unsigned char __thiscall CMapObj::TestBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& box);
  unsigned char __thiscall CMapObj::TestGroupBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& v1, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall CMapObj::TestGroupBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall CMapObj::TestGroupBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int index);
  unsigned char __thiscall CMapObj::TestConvexVolume(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point);
  unsigned char __thiscall CMapObj::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& tris, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CWFrustum& frustum, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags);
  unsigned char __thiscall CMapObj::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& tris, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& maxT, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int queryFlags);
  unsigned char __thiscall CMapObj::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& tris, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags);
  unsigned char __thiscall CMapObj::VectorIntersectPortals(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& maxT, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* groupIDs);
  unsigned char __thiscall CMapObj::VectorIntersect(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* v0, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* v1, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int polyIgnoreFlags, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned int groupIgnoreFlags, /*<regrel ebp+0x20>*/ /*|0x4|*/ float* dist, /*<regrel ebp+0x24>*/ /*|0x4|*/ struct SMOPoly** poly);
  void __thiscall CMapObj::LocateViewer(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& im, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& inGroups);
  unsigned int __thiscall CMapObj::StabPortals(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int fromGroupIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int groupIndex, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& rayOrig, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& rayDir);
  unsigned int __thiscall CMapObj::StabPortals(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& start, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& end);
  void __thiscall CMapObj::IntRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& mat, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& inGroups);
  void __thiscall CMapObj::ExtRender(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& mat, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CRect& rect);
  void __thiscall CMapObj::RenderGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupNum, /*<regrel ebp+0xc>*/ /*|0x4|*/ int rDrawSharedLiquidToggle, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C44Matrix& invMat, /*<regrel ebp+0x14>*/ /*|0x4|*/ class TSExplicitList<CWFrustum,244>& frustumList);
  unsigned char __thiscall CMapObj::VectorIntersectPortal(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& v1, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int fromGroup, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& toGroup);
  unsigned char __thiscall CMapObj::QueryLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0x10>*/ /*|0x4|*/ float* t);
  unsigned char __thiscall CMapObj::QueryLiquidStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int ignoreGroupFlags, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x14>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& dir);
  void __thiscall CMapObj::QueryLiquidSounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupIdx, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int parentIdx, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int rlevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& closestExtLevel, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int* lbool, /*<regrel ebp+0x20>*/ /*|0x4|*/ class NTempest::C3Vector* ldelta, /*<regrel ebp+0x24>*/ /*|0x4|*/ float* ldsquared);
  unsigned char __thiscall CMapObj::QueryLiquidFishable(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int ignoreGroupFlags, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& fishable);
  unsigned char __thiscall CMapObj::QueryMapObjMinimap(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& localBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSStackArray<CWorld::MinimapQuad>& quads);
  int __thiscall CMapObj::Read(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* fileName);
  void __thiscall CMapObj::CreateData();
  void __thiscall AllocGroups();
  void __thiscall CMapObj::CreateAllGroups();
  void __thiscall CMapObj::ReadExtGroups();
  void __thiscall CMapObj::CreateDataPointers();
  void __thiscall CMapObj::CreateMaterials();
  void __thiscall CMapObj::CreateMaterial(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int materialId);
  struct SIffChunk* __thiscall CMapObj::ReadChunkHeader(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& pData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long expectedToken);
  struct SIffChunk* __thiscall CMapObj::ReadOptionalChunkHeader(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& pData, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long expectedToken);
  void __thiscall CMapObj::CreateGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SMOGroupInfo* groupInfo);
  void __thiscall CMapObj::UpdateMaterials();
  void __thiscall CMapObj::RenderAlways(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupIdx);
  unsigned char __thiscall CMapObj::CullBatch(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SMOBatch* batch);
  void __thiscall CMapObj::RenderGroupLightTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupLightmapTex_Int(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupLightmapTex_Ext(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupLightmapTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupColorTex_Int(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupColorTex_Ext(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupColorTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupTex(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroup_Ext(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroup_Int(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderGroupBsp(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int frustumCount);
  void __thiscall CMapObj::RenderPortals();
  void __thiscall CMapObj::RenderPortals(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group);
  void __thiscall CMapObj::RenderGroupNormals(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group);
  void __thiscall CMapObj::RenderWaterIndices_0(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned short* idxBase, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int vtxSub, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int& idxSub);
  void __thiscall CMapObj::RenderLiquid_0(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group);
  void __thiscall CMapObj::RenderInteriorWater_0(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int liquid);
  void __thiscall CMapObj::RenderExteriorWater_0(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int liquid);
  void __thiscall CMapObj::RenderMagma(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjGroup* group, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int liquid);
  void __thiscall CMapObj::RRenderThruPortals(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupIdx, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int parentIdx, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CRect& viewRect, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int level);
  void __thiscall CMapObj::RTransformPortal(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SMOPortal* portal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct SPortalExt* portalExt, /*<regrel ebp+0x10>*/ /*|0x4|*/ int cpIgnore);
  void __thiscall CMapObj::QueryMapObjMinimapGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int parentID, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CAaBox& localBox, /*<regrel ebp+0x14>*/ /*|0x4|*/ class TSStackArray<CWorld::MinimapQuad>& quads);
  class CMapObj& __thiscall operator=(class CMapObj&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x7f4>

class CMapObjGroup {

  // static data ------------------------------------
  static /*<rva 0x41106c>*/ /*|0x4|*/ enum EGxTexFormat LIGHTMAP_FORMAT;
  static /*<rva 0xa6da40>*/ /*|0x4|*/ unsigned int rDrawSharedLiquidFirst;
  static /*<rva 0xa6ba04>*/ /*|0x4|*/ unsigned int rDrawSharedLiquidToggle;
  static /*<rva 0xa6b1f8>*/ /*|0x804|*/ class TSCArray<CGxBuf *,512> extGxBufFreeList;
  static /*<rva 0xa6da48>*/ /*|0x804|*/ class TSCArray<CGxBuf *,512> intGxBufFreeList;
  static /*<rva 0xa6ba00>*/ /*|0x4|*/ struct SMOGxBatch* sLockGxBatch;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int flags;
  /*<thisrel this+0x4>*/ /*|0x18|*/ class NTempest::CAaBox aaBox;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int portalStart;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int portalCount;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned char fogIds[4];
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int groupLiquid;
  /*<thisrel this+0x2c>*/ /*|0x20|*/ struct SMOGxBatch intBatch[4];
  /*<thisrel this+0x4c>*/ /*|0x20|*/ struct SMOGxBatch extBatch[4];
  /*<thisrel this+0x6c>*/ /*|0x10|*/ struct CGxBuf* intGxBuf[4];
  /*<thisrel this+0x7c>*/ /*|0x10|*/ struct CGxBuf* extGxBuf[4];
  /*<thisrel this+0x8c>*/ /*|0x64|*/ class CAaBsp aaBsp;
  /*<thisrel this+0xf0>*/ /*|0x4|*/ unsigned int frameCount;
  /*<thisrel this+0xf4>*/ /*|0x4|*/ unsigned int rLevel;
  /*<thisrel this+0xf8>*/ /*|0x4|*/ unsigned int minimapTag;
  /*<thisrel this+0xfc>*/ /*|0x4|*/ float lightmapTexFlushTime;
  /*<thisrel this+0x100>*/ /*|0x4|*/ char* dbgName;
  /*<thisrel this+0x104>*/ /*|0x4|*/ class NTempest::C4Plane* planeList;
  /*<thisrel this+0x108>*/ /*|0x4|*/ struct SMOPoly* polyList;
  /*<thisrel this+0x10c>*/ /*|0x4|*/ class NTempest::C3Vector* vertexList;
  /*<thisrel this+0x110>*/ /*|0x4|*/ class NTempest::C3Vector* normalList;
  /*<thisrel this+0x114>*/ /*|0x4|*/ class NTempest::C2Vector* textureVertexList;
  /*<thisrel this+0x118>*/ /*|0x4|*/ unsigned short* indexList;
  /*<thisrel this+0x11c>*/ /*|0x4|*/ struct SMOBatch* batchList;
  /*<thisrel this+0x120>*/ /*|0x4|*/ unsigned short* lightRefList;
  /*<thisrel this+0x124>*/ /*|0x4|*/ unsigned short* doodadRefList;
  /*<thisrel this+0x128>*/ /*|0x4|*/ class NTempest::CImVector* colorVertexList;
  /*<thisrel this+0x12c>*/ /*|0x4|*/ class NTempest::C2Vector* lightmapVertexList;
  /*<thisrel this+0x130>*/ /*|0x4|*/ struct SMOLightmap* lightmapList;
  /*<thisrel this+0x134>*/ /*|0x4|*/ struct SMOLightmapTex* lightmapTexList;
  /*<thisrel this+0x138>*/ /*|0x8|*/ class NTempest::C2iVector liquidVerts;
  /*<thisrel this+0x140>*/ /*|0x8|*/ class NTempest::C2iVector liquidTiles;
  /*<thisrel this+0x148>*/ /*|0xc|*/ class NTempest::C3Vector liquidCorner;
  /*<thisrel this+0x154>*/ /*|0x2|*/ unsigned short liquidMtlId;
  /*<thisrel this+0x158>*/ /*|0x4|*/ struct SMOLVert* liquidVertexList;
  /*<thisrel this+0x15c>*/ /*|0x4|*/ struct SMOLTile* liquidTileList;
  /*<thisrel this+0x160>*/ /*|0x4|*/ unsigned int planeCount;
  /*<thisrel this+0x164>*/ /*|0x4|*/ unsigned int polyCount;
  /*<thisrel this+0x168>*/ /*|0x4|*/ unsigned int vertexCount;
  /*<thisrel this+0x16c>*/ /*|0x4|*/ unsigned int normalCount;
  /*<thisrel this+0x170>*/ /*|0x4|*/ unsigned int textureVertexCount;
  /*<thisrel this+0x174>*/ /*|0x4|*/ unsigned int indexCount;
  /*<thisrel this+0x178>*/ /*|0x4|*/ unsigned int batchCount;
  /*<thisrel this+0x17c>*/ /*|0x4|*/ unsigned int lightRefCount;
  /*<thisrel this+0x180>*/ /*|0x4|*/ unsigned int doodadRefCount;
  /*<thisrel this+0x184>*/ /*|0x4|*/ unsigned int colorVertexCount;
  /*<thisrel this+0x188>*/ /*|0x4|*/ unsigned int lightmapVertexCount;
  /*<thisrel this+0x18c>*/ /*|0x4|*/ unsigned int lightmapCount;
  /*<thisrel this+0x190>*/ /*|0x4|*/ unsigned int lightmapTexCount;
  /*<thisrel this+0x194>*/ /*|0x4|*/ long uniqueID;
  /*<thisrel this+0x198>*/ /*|0x4|*/ unsigned char* data;
  /*<thisrel this+0x19c>*/ /*|0x4|*/ class CMapObj* parent;
  /*<thisrel this+0x1a0>*/ /*|0x4|*/ float flushTime;
  /*<thisrel this+0x1a4>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0x1a8>*/ /*|0x1|*/ unsigned char bLoaded;
  /*<thisrel this+0x1ac>*/ /*|0x8|*/ class TSLink<CMapObjGroup> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CMapObjGroup::UpdateLightmapTex(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CMapObjGroup::AsyncPostloadCallback(/*<register ecx>*/ /*|0x4|*/ void* userArg);
  static struct CGxBuf* __fastcall CMapObjGroup::AllocExtGxBuf(/*<register ecx>*/ /*|0x4|*/ unsigned int nVerts, /*<register edx>*/ /*|0x4|*/ unsigned int nIndices);
  static void __fastcall CMapObjGroup::FreeExtGxBuf(/*<register ecx>*/ /*|0x4|*/ struct CGxBuf*& gxBuf);
  static void __fastcall CMapObjGroup::ExtGxBufFill(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static struct CGxBuf* __fastcall CMapObjGroup::AllocIntGxBuf(/*<register ecx>*/ /*|0x4|*/ unsigned int nVerts, /*<register edx>*/ /*|0x4|*/ unsigned int nIndices);
  static void __fastcall CMapObjGroup::FreeIntGxBuf(/*<register ecx>*/ /*|0x4|*/ struct CGxBuf*& gxBuf);
  static void __fastcall CMapObjGroup::IntGxBufFill(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CMapObjGroup::Destroy();

  // non-virtual functions --------------------------
  void __thiscall CMapObjGroup(class CMapObjGroup&);
  void __thiscall CMapObjGroup::CMapObjGroup();
  void __thiscall CMapObjGroup::~CMapObjGroup();
  void __thiscall CMapObjGroup::Init();
  void __thiscall CMapObjGroup::InitPtrs();
  void __thiscall CMapObjGroup::Clear();
  unsigned char __thiscall IsLoaded();
  unsigned char __thiscall IsLoading();
  void __thiscall SetFlushTime(float);
  unsigned int __thiscall GetFlags();
  unsigned int __thiscall GetGroupLiquid();
  unsigned int __thiscall GetDoodadRefCount();
  unsigned int __thiscall GetDoodadRef(unsigned int);
  unsigned int __thiscall GetLightRefCount();
  unsigned int __thiscall GetLightRef(unsigned int);
  long __thiscall GetUniqueID();
  unsigned char __thiscall GetFogId(unsigned int);
  struct SMOPoly* __thiscall GetPoly(unsigned short);
  unsigned char __thiscall CMapObjGroup::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CWFrustum& frustum, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int faceIgnoreFlags);
  unsigned char __thiscall CMapObjGroup::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& maxT, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int faceIgnoreFlags);
  unsigned char __thiscall CMapObjGroup::GetTris(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int faceIgnoreFlags);
  unsigned char __thiscall CMapObjGroup::QueryLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& color);
  unsigned char __thiscall CMapObjGroup::QueryLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<regrel ebp+0xc>*/ /*|0x2|*/ unsigned short polyIdx, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector& color);
  unsigned char __thiscall CMapObjGroup::QueryLiquidStatus(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& dir);
  unsigned char __thiscall CMapObjGroup::QueryLiquidFishable(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int& fishable);
  void __thiscall CMapObjGroup::QueryLiquidSounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* lbool, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* ldelta, /*<regrel ebp+0x14>*/ /*|0x4|*/ float* ldsquared);
  unsigned char __thiscall QueryMtlId(class NTempest::C3Segment&, unsigned int&);
  unsigned int __thiscall CMapObjGroup::SphereIntersectPoly(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaSphere& sphere, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numVerts, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* indicies);
  unsigned char __thiscall CMapObjGroup::PointInPoly(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* p, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int numIndicies, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* indicies, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* n);
  void __thiscall CMapObjGroup::GetTrisFromQuery(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0xc>*/ /*|0x4|*/ class BspQuery& q, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* mapObjDef);
  void __thiscall CMapObjGroup::QueryMinimap(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int groupID, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& localBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSStackArray<CWorld::MinimapQuad>& quads);
  void __thiscall CMapObjGroup::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* rawData);
  void __thiscall CMapObjGroup::CreateDataPointers(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pData);
  void __thiscall CMapObjGroup::CreateOptionalDataPointers(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* pData);
  void __thiscall CMapObjGroup::CreateLightmapPointers(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char*& pData);
  void __thiscall FreeData();
  void __thiscall CMapObjGroup::CreateLightmaps();
  void __thiscall CMapObjGroup::FreeLightmaps();
  void __thiscall GenTexture(struct SMOLightmap*, class NTempest::CImVector*, class NTempest::CImVector*);
  void __thiscall CMapObjGroup::ExtGxBufFillVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CMapObjGroup::GxBufFillIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CMapObjGroup::IntGxBufFillVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  class CMapObjGroup& __thiscall operator=(class CMapObjGroup&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1b4>

class CAaBspNode {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2|*/ unsigned short flags;
  /*<thisrel this+0x2>*/ /*|0x2|*/ unsigned short negChild;
  /*<thisrel this+0x4>*/ /*|0x2|*/ unsigned short posChild;
  /*<thisrel this+0x6>*/ /*|0x2|*/ unsigned short nFaces;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned long faceStart;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float planeDist;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CAaBspNode();

  // virtual functions ------------------------------
};
// <size 0x10>

class CFaceQuery {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned short* indices;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int maxCount;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int count;
  /*<thisrel this+0xc>*/ /*|0x2000|*/ unsigned char faceBits[8192];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CFaceQuery();
  void __thiscall AddFace(unsigned short);
  void __thiscall ClearFaceBits();

  // virtual functions ------------------------------
};
// <size 0x200c>

class CAaBsp {

  // static data ------------------------------------
  static /*<rva 0xbaca28>*/ /*|0x24|*/ class NTempest::C3Vector s_axisNormalTable[3];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CAaBspNode* rootNode;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CAaBspNode* nodes;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned short* nodeFaceIndices;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int nNodes;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int nNodeFaceIndices;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned short* faceVertexIndices;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned int nFaceVertexIndices;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ class NTempest::C3Vector* vertices;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned int nVertices;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned int nodeSize;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int nodeNext;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned int nodeFaceIndicesSize;
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned int nodeFaceIndicesNext;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned short* buildFaceIndices;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned int buildFaceIndicesSize;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int buildFaceIndicesNext;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned int treeDepth;
  /*<thisrel this+0x44>*/ /*|0x4|*/ unsigned int avgNodeFaces;
  /*<thisrel this+0x48>*/ /*|0x4|*/ int bFree;
  /*<thisrel this+0x4c>*/ /*|0x18|*/ class NTempest::CAaBox aaBox;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CAaBsp::CAaBsp();
  void __thiscall CAaBsp::~CAaBsp();
  void __thiscall CAaBsp::Clear();
  void __thiscall CAaBsp::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* vertices, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int nVertices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* faceVertexIndices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int nFaceVertexIndices);
  void __thiscall CAaBsp::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CAaBspNode* nodeList, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int nNodes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* faceIndices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int nFaceIndices, /*<regrel ebp+0x18>*/ /*|0x4|*/ class NTempest::CAaBox& box);
  void __thiscall CAaBsp::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodeIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox);
  void __thiscall CAaBsp::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodeIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Segment& seg);
  void __thiscall CAaBsp::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CAaBspNode* node);
  unsigned short* __thiscall GetFaceIndices();
  unsigned short* __thiscall GetFaceIndices();
  unsigned int __thiscall CAaBsp::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned short* indices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int maxCount);
  unsigned int __thiscall CAaBsp::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned short* indices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int maxCount);
  class CAaBspNode* __thiscall GetNodeList();
  class CAaBspNode* __thiscall GetNodeList();
  unsigned int __thiscall GetNumNodes();
  unsigned int __thiscall GetNumFaceIndices();
  class NTempest::CAaBox& __thiscall GetAaBox();
  void __thiscall SetAaBox(class NTempest::CAaBox&);
  void __thiscall CAaBsp::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CAaBsp& rhs);
  void __thiscall CAaBsp::Init();
  void __thiscall CAaBsp::Free();
  unsigned short* __thiscall CAaBsp::AllocBuildFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CAaBsp::FreeBuildFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned short __thiscall CAaBsp::AllocNode();
  unsigned long __thiscall CAaBsp::AllocNodeFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned short __thiscall CAaBsp::BuildTree(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* buildFaceIndices, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CAaBsp::GenBoundingBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned short* buildFaceIndices, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CAaBsp::ChoosePlane(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& bestAxis, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& bestDist, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* buildFaceIndices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int count);
  void __thiscall CAaBsp::PartitionFaceList(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int axis, /*<regrel ebp+0xc>*/ /*|0x4|*/ float dist, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned short* buildFaceIndices, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned short* posIndices, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned int& posCount, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned short* negIndices, /*<regrel ebp+0x24>*/ /*|0x4|*/ unsigned int& negCount);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x64>

class CMapLight : class CMapBaseObj  {

  // static data ------------------------------------
  static /*<rva 0xa690a4>*/ /*|0x4|*/ struct HTEXTURE__* s_hPointAttenTex;
  static /*<rva 0xa690b4>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> dirLightLinkList;
  static /*<rva 0x49fea8>*/ /*|0x4|*/ unsigned int maxLights;
  static /*<rva 0x49feac>*/ /*|0x4|*/ float bucketSize;
  static /*<rva 0x49feb0>*/ /*|0x4|*/ float halfBucketSize;

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0x3c|*/ class CGxLight gxLight;
  /*<thisrel this+0xb4>*/ /*|0x4|*/ float attenStart;
  /*<thisrel this+0xb8>*/ /*|0x4|*/ float attenEnd;
  /*<thisrel this+0xbc>*/ /*|0x4|*/ float attenDenom;
  /*<thisrel this+0xc0>*/ /*|0x1|*/ unsigned char dynamic;

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CMapLight::ProjectLightRenderPN(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static class CGxTex* __fastcall CMapLight::GetPointAttenTex();
  static void __fastcall CMapLight::CreatePointAtten();
  static void __fastcall CMapLight::DestroyPointAtten();

  // non-virtual functions --------------------------
  void __thiscall SetAtten(float, float);
  void __thiscall CMapLight(class CMapLight&);
  void __thiscall CMapLight::CMapLight();
  void __thiscall CMapLight::~CMapLight();
  void __thiscall SetConstantAtten(float);
  void __thiscall SetLinearAtten(float);
  void __thiscall SetQuadraticAtten(float);
  void __thiscall CMapLight::Project();
  class CMapLight& __thiscall operator=(class CMapLight&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc4>

class CMapObjDefGroup : class CMapBaseObj  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0x4|*/ unsigned int groupNum;
  /*<thisrel this+0x7c>*/ /*|0x4|*/ unsigned long doodadRefStart;
  /*<thisrel this+0x80>*/ /*|0x4|*/ unsigned long nDoodadRefs;
  /*<thisrel this+0x84>*/ /*|0x4|*/ class NTempest::CImVector ambient;
  /*<thisrel this+0x88>*/ /*|0x4|*/ char* subzoneName;
  /*<thisrel this+0x8c>*/ /*|0x4|*/ unsigned int level;
  /*<thisrel this+0x90>*/ /*|0x4|*/ int rDrawSharedLiquidToggle;
  /*<thisrel this+0x94>*/ /*|0xc|*/ class TSExplicitList<CWFrustum,244> frustumList;
  /*<thisrel this+0xa0>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> doodadDefLinkList;
  /*<thisrel this+0xac>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> entityLinkList;
  /*<thisrel this+0xb8>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> lightLinkList;
  /*<thisrel this+0xc4>*/ /*|0x8|*/ class TSLink<CMapObjDefGroup> sceneLink;

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapObjDefGroup(class CMapObjDefGroup&);
  void __thiscall CMapObjDefGroup::CMapObjDefGroup();
  void __thiscall CMapObjDefGroup::~CMapObjDefGroup();
  void __thiscall CMapObjDefGroup::UpdateLights();
  void __thiscall CMapObjDefGroup::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& newMat);
  class CMapObjDefGroup& __thiscall operator=(class CMapObjDefGroup&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapObjDefGroup::SelectLights();
};
// <size 0xcc>

class CMapObjDef : class CMapBaseObj,  class TSHashObject<CMapObjDef,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x90>*/ /*|0x40|*/ class NTempest::C44Matrix mat;
  /*<thisrel this+0xd0>*/ /*|0x40|*/ class NTempest::C44Matrix invMat;
  /*<thisrel this+0x110>*/ /*|0x4|*/ unsigned long nameId;
  /*<thisrel this+0x114>*/ /*|0x4|*/ class CMapObj* mapObj;
  /*<thisrel this+0x118>*/ /*|0x2|*/ unsigned short tDoodadRefs;
  /*<thisrel this+0x11a>*/ /*|0x2|*/ unsigned short firstDoodadRef;
  /*<thisrel this+0x11c>*/ /*|0x4|*/ unsigned long doodadSet;
  /*<thisrel this+0x120>*/ /*|0x2|*/ unsigned short nameSet;
  /*<thisrel this+0x124>*/ /*|0x4|*/ char* zoneName;
  /*<thisrel this+0x128>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> groupLinkList;
  /*<thisrel this+0x134>*/ /*|0x14|*/ class TSGrowableArray<CMapLight *> lightList;
  /*<thisrel this+0x148>*/ /*|0x4|*/ unsigned int rCount;
  /*<thisrel this+0x14c>*/ /*|0x4|*/ class NTempest::CImVector ambient;
  /*<thisrel this+0x150>*/ /*|0x8|*/ unsigned __int64 param64;
  /*<thisrel this+0x158>*/ /*|0x8|*/ class TSLink<CMapStaticEntity> sceneLink;

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // baseclass class TSHashObject<CMapObjDef,HASHKEY_NONE>
  // <base data offset+0x78>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapObjDef(class CMapObjDef&);
  void __thiscall CMapObjDef::CMapObjDef();
  void __thiscall CMapObjDef::~CMapObjDef();
  class CMapObjDef& __thiscall operator=(class CMapObjDef&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x160>

class CMapBaseObj {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long type;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class TSLink<CMapBaseObj> lameAssLink;
  /*<thisrel this+0x10>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,16> parentLinkList;
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class NTempest::C3Vector pos;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float scale;
  /*<thisrel this+0x2c>*/ /*|0x10|*/ class NTempest::C4Quaternion rot;
  /*<thisrel this+0x3c>*/ /*|0x18|*/ class NTempest::CAaBox aaBox;
  /*<thisrel this+0x54>*/ /*|0x10|*/ class NTempest::CAaSphere aaSphere;
  /*<thisrel this+0x64>*/ /*|0xc|*/ class NTempest::C3Vector corner;
  /*<thisrel this+0x70>*/ /*|0x4|*/ float camDist;
  /*<thisrel this+0x74>*/ /*|0x2|*/ unsigned short flags;
  /*<thisrel this+0x76>*/ /*|0x2|*/ short refCount;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall CMapBaseObj::TestAABox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& v1);
  void __thiscall CMapBaseObj(class CMapBaseObj&);
  void __thiscall CMapBaseObj::CMapBaseObj();
  void __thiscall CMapBaseObj::~CMapBaseObj();
  unsigned int __thiscall GetType();
  class CMapBaseObj& __thiscall operator=(class CMapBaseObj&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapBaseObj::SelectLights();
};
// <size 0x78>

class CMapArea : class CMapBaseObj  {

  // static data ------------------------------------
  static /*<rva 0x0>*/ /*|0x4|*/ int ccWaterShowTri;
  static /*<rva 0x49efe0>*/ /*|0x4|*/ int ccWaterLOD;
  static /*<rva 0x49efe8>*/ /*|0x4|*/ int ccWaterWaves;
  static /*<rva 0x49efec>*/ /*|0x4|*/ int ccWaterSpecular;
  static /*<rva 0x49eff0>*/ /*|0x4|*/ int ccWaterRipples;
  static /*<rva 0x49efe4>*/ /*|0x4|*/ int ccWaterMaxLOD;

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0xc|*/ class TSExplicitList<CMapBaseObjLink,8> chunkLinkList;
  /*<thisrel this+0x84>*/ /*|0x4|*/ unsigned long infoIndex;
  /*<thisrel this+0x88>*/ /*|0x8|*/ class NTempest::C2iVector mIndex;
  /*<thisrel this+0x90>*/ /*|0x8|*/ class NTempest::C2iVector cOffset;
  /*<thisrel this+0x98>*/ /*|0x10|*/ class NTempest::CiRect localRect;
  /*<thisrel this+0xa8>*/ /*|0x4|*/ unsigned int texCount;
  /*<thisrel this+0xac>*/ /*|0x40|*/ struct SMAreaHeader header;
  /*<thisrel this+0xec>*/ /*|0x4|*/ class CAsyncObject* asyncObject;
  /*<thisrel this+0xf0>*/ /*|0x184|*/ class TSCArray<HTEXTURE__ *,96> texIdTable;
  /*<thisrel this+0x274>*/ /*|0x14|*/ class TSGrowableArray<SMDoodadDef> doodadDefList;
  /*<thisrel this+0x288>*/ /*|0x14|*/ class TSGrowableArray<SMMapObjDef> mapObjDefList;
  /*<thisrel this+0x29c>*/ /*|0x1000|*/ struct SMChunkInfo chunkInfo[256];
  /*<thisrel this+0x129c>*/ /*|0x400|*/ class CMapChunk* chunkTable[256];

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CMapArea::Initialize();
  static void __fastcall CMapArea::Destroy();
  static void __fastcall CMapArea::AsyncPollHandler();
  static void __fastcall CMapArea::FreeAsyncLoadBuffer(/*<register ecx>*/ /*|0x4|*/ unsigned char* buffer);
  static void __fastcall CMapArea::InitAsyncLoadBuffers();
  static unsigned char* __fastcall CMapArea::AllocAsyncLoadBuffer();
  static void __fastcall CMapArea::AsyncCallback(/*<register ecx>*/ /*|0x4|*/ void* userArg);

  // non-virtual functions --------------------------
  void __thiscall CMapArea::Create(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data);
  void __thiscall CMapArea::LoadTextures(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* texNames, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long size);
  void __thiscall CMapArea(class CMapArea&);
  void __thiscall CMapArea::CMapArea();
  void __thiscall CMapArea::~CMapArea();
  void __thiscall CMapArea::Load(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SMAreaInfo* areaInfo);
  void __thiscall CMapArea::PrepareLocalRect();
  void __thiscall CMapArea::Purge();
  void __thiscall CMapArea::PurgeChunks();
  void __thiscall CMapArea::InitWater();
  void __thiscall CMapArea::QueryLiquidSounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& worldPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ float radius, /*<regrel ebp+0x10>*/ /*|0x4|*/ int* lbool, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* ldelta, /*<regrel ebp+0x18>*/ /*|0x4|*/ float* ldsquared);
  class CMapArea& __thiscall operator=(class CMapArea&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x169c>

class CMapDoodadDef : class CMapStaticEntity,  class TSHashObject<CMapDoodadDef,HASHKEY_DWORD>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xb0>*/ /*|0x40|*/ class NTempest::C44Matrix lMat;
  /*<thisrel this+0xf0>*/ /*|0x40|*/ class NTempest::C44Matrix mat;
  /*<thisrel this+0x130>*/ /*|0x18|*/ class NTempest::CAaBox collideExt;
  /*<thisrel this+0x148>*/ /*|0x4|*/ char* modelName;
  /*<thisrel this+0x14c>*/ /*|0x4|*/ unsigned int rCount;
  /*<thisrel this+0x150>*/ /*|0x4|*/ unsigned int cCount;
  /*<thisrel this+0x154>*/ /*|0x4|*/ int doodadSoundHandle;
  /*<thisrel this+0x158>*/ /*|0x8|*/ class TSLink<CMapDoodadDef> sceneLink;
  /*<thisrel this+0x160>*/ /*|0x4|*/ void  (RenderCB*)(void*, class NTempest::C44Matrix&);
  /*<thisrel this+0x164>*/ /*|0x4|*/ void* renderCBParam;

  // base classes -----------------------------------
  // baseclass class CMapStaticEntity
  // <base data offset+0x0>

  // baseclass class TSHashObject<CMapDoodadDef,HASHKEY_DWORD>
  // <base data offset+0x98>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapDoodadDef(class CMapDoodadDef&);
  void __thiscall CMapDoodadDef::CMapDoodadDef();
  void __thiscall CMapDoodadDef::~CMapDoodadDef();
  void __thiscall CMapDoodadDef::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& newMat);
  void __thiscall CMapDoodadDef::GetBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& bounds);
  void __thiscall CMapDoodadDef::GetBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaSphere& bounds);
  void __thiscall CMapDoodadDef::GetCollideExt(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& bounds);
  class CMapDoodadDef& __thiscall operator=(class CMapDoodadDef&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapDoodadDef::SelectLights();
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapDoodadDef::QueryLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObjGroup* mapObjGroup);
};
// <size 0x168>

class CSimpleDoodadGeoset {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> vertexList;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> normalList;
  /*<thisrel this+0x28>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C2Vector> tVertexList;
  /*<thisrel this+0x3c>*/ /*|0x14|*/ class TSGrowableArray<unsigned short> indexList;
  /*<thisrel this+0x50>*/ /*|0x4|*/ unsigned int material;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleDoodadGeoset(class CSimpleDoodadGeoset&);
  void __thiscall CSimpleDoodadGeoset::CSimpleDoodadGeoset();
  class CSimpleDoodadGeoset& __thiscall operator=(class CSimpleDoodadGeoset&);
  void __thiscall CSimpleDoodadGeoset::~CSimpleDoodadGeoset();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>

class CMapStaticEntity : class CMapBaseObj  {

  // static data ------------------------------------
  static /*<rva 0x4113a0>*/ /*|0x4|*/ float dirLightScaleAmount;
  static /*<rva 0xae2688>*/ /*|0xc|*/ class NTempest::C3Vector interiorSunDir;

  // non-static data --------------------------------
  /*<thisrel this+0x78>*/ /*|0xc|*/ class TSExplicitList<CMapCacheLight,72> cacheLightList;
  /*<thisrel this+0x84>*/ /*|0x4|*/ class NTempest::CImVector ambient;
  /*<thisrel this+0x88>*/ /*|0x4|*/ class NTempest::CImVector interiorDirColor;
  /*<thisrel this+0x8c>*/ /*|0x4|*/ float dirLightScale;
  /*<thisrel this+0x90>*/ /*|0x4|*/ struct HMODEL__* model;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagInside:0:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagVisible:1:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagCollidable:2:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagHidden:3:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagShadowed:4:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagInLiquid:5:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagDeepLiquid:6:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagAlwaysAnimate:7:1;
  /*<bitfield this+0x94>*/ /*|0x4|*/ unsigned int flagCastShadow:8:1;

  // base classes -----------------------------------
  // baseclass class CMapBaseObj
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapStaticEntity::AdjustLightmap(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& lmColor, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CImVector& dirColor, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char minDir, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::CImVector& ambColor, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char maxAmbient);
  int __thiscall CMapStaticEntity::GetMapObjAndGroup(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef*& mapObjDef, /*<regrel ebp+0xc>*/ /*|0x4|*/ class CMapObj*& mapObj, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDefGroup*& mapObjDefGroup, /*<regrel ebp+0x14>*/ /*|0x4|*/ class CMapObjGroup*& mapObjGroup);
  int __thiscall CMapStaticEntity::GetMapObjDef(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef*& mapObjDef);
  void __thiscall CMapStaticEntity::FindLights();
  void __thiscall CMapStaticEntity::CreateCacheLight(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapLight* light);
  void __thiscall CMapStaticEntity(class CMapStaticEntity&);
  void __thiscall CMapStaticEntity();
  class CMapStaticEntity& __thiscall operator=(class CMapStaticEntity&);
  void __thiscall ~CMapStaticEntity();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x4>*/ void __thiscall QueryLightmap(class CMapObjDef*, class CMapObjGroup*) = 0;
  virtual /*<vtableoff 0x0>*/ void __thiscall CMapStaticEntity::SelectLights();
};
// <size 0x98>

class CMapBaseObjLink {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CMapBaseObj* owner;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapBaseObj* ref;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class TSLink<CMapBaseObjLink> refLink;
  /*<thisrel this+0x10>*/ /*|0x8|*/ class TSLink<CMapBaseObjLink> ownerLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapBaseObjLink(class CMapBaseObjLink&);
  void __thiscall CMapBaseObjLink();
  class CMapBaseObjLink& __thiscall operator=(class CMapBaseObjLink&);
  void __thiscall CMapBaseObjLink::~CMapBaseObjLink();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CMapCacheLight {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x3c|*/ class CGxLight gxLight;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ float attenStart;
  /*<thisrel this+0x40>*/ /*|0x4|*/ float attenEnd;
  /*<thisrel this+0x44>*/ /*|0x4|*/ float attenDenom;
  /*<thisrel this+0x48>*/ /*|0x8|*/ class TSLink<CMapCacheLight> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapCacheLight(class CMapCacheLight&);
  void __thiscall CMapCacheLight();
  class CMapCacheLight& __thiscall operator=(class CMapCacheLight&);
  void __thiscall CMapCacheLight::~CMapCacheLight();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x50>

class CDetailDoodadData {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ char* fileName;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int loaded;
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct HTEXTURE__* texture;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CDetailDoodadGeom* geom;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDetailDoodadData::MdlReadCallback(/*<register ecx>*/ /*|0x4|*/ unsigned char* fileData, /*<register edx>*/ /*|0x4|*/ unsigned int fileBytes, /*<regrel ebp+0x8>*/ /*|0x4|*/ class CDetailDoodadData* detailDoodad);
  static void __fastcall CDetailDoodadData::MdlReadCallback(/*<register ecx>*/ /*|0x4|*/ struct MDLDATA& data, /*<register edx>*/ /*|0x4|*/ class CDetailDoodadData* detailDoodad);

  // non-virtual functions --------------------------
  void __thiscall CDetailDoodadData::CDetailDoodadData(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* mdlName);
  void __thiscall CDetailDoodadData::CDetailDoodadData();
  void __thiscall CDetailDoodadData::~CDetailDoodadData();
  int __thiscall CDetailDoodadData::Load();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class CDetailDoodad {

  // static data ------------------------------------
  static /*<rva 0xae2638>*/ /*|0xc|*/ class TSExplicitList<CDetailDoodadGeom,104> geomList;
  static /*<rva 0xae1dd4>*/ /*|0xc|*/ class TSExplicitList<CDetailDoodadInst,16> instList;
  static /*<rva 0xae2624>*/ /*|0x14|*/ class TSGrowableArray<CDetailDoodadData *> doodadList;
  static /*<rva 0xae1de0>*/ /*|0x4|*/ class CGxTex* alphaRampTexture;
  static /*<rva 0xae25fc>*/ /*|0x14|*/ class TSGrowableArray<CGxBuf *> gxBufFreeList;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDetailDoodad::CreateAlphaRampTexture(/*<register ecx>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CDetailDoodad::UpdateAlphaRampTexture(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& texels);
  static void __fastcall CDetailDoodad::GxBufFillCallback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* buf);
  static void __fastcall CDetailDoodad::Initialize();
  static void __fastcall CDetailDoodad::Destroy();
  static void __fastcall CDetailDoodad::Clear();
  static class CDetailDoodadInst* __fastcall CDetailDoodad::AllocInst();
  static void __fastcall CDetailDoodad::FreeInst(/*<register ecx>*/ /*|0x4|*/ class CDetailDoodadInst* inst);
  static class CDetailDoodadGeom* __fastcall CDetailDoodad::AllocGeom();
  static void __fastcall CDetailDoodad::FreeGeom(/*<register ecx>*/ /*|0x4|*/ class CDetailDoodadGeom* geom);
  static struct CGxBuf* __fastcall CDetailDoodad::AllocGxBuf(/*<register ecx>*/ /*|0x4|*/ unsigned int vertexCount, /*<register edx>*/ /*|0x4|*/ unsigned int indexCount);
  static void __fastcall CDetailDoodad::FreeGxBuf(/*<register ecx>*/ /*|0x4|*/ struct CGxBuf* gxBuf);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CDetailDoodadInst {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class CDetailDoodadGeom* geom[2];
  /*<thisrel this+0x8>*/ /*|0x8|*/ struct CGxBuf* gxBuf[2];
  /*<thisrel this+0x10>*/ /*|0x8|*/ class TSLink<CDetailDoodadGeom> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CDetailDoodadInst(class CDetailDoodadInst&);
  void __thiscall CDetailDoodadInst::CDetailDoodadInst();
  void __thiscall CDetailDoodadInst::~CDetailDoodadInst();
  void __thiscall CDetailDoodadInst::AddDoodad(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int doodadId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Plane& plane);
  void __thiscall CDetailDoodadInst::AddDoodad(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int doodadId, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  void __thiscall CDetailDoodadInst::Render();
  void __thiscall CDetailDoodadInst::RenderAlpha();
  void __thiscall CDetailDoodadInst::FreeBufs();
  int __thiscall HasBufs();
  class CDetailDoodadInst& __thiscall operator=(class CDetailDoodadInst&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CDetailDoodadGeom {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct HTEXTURE__* texture;
  /*<thisrel this+0x4>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> vertexList;
  /*<thisrel this+0x18>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C3Vector> normalList;
  /*<thisrel this+0x2c>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C2Vector> tVertexList;
  /*<thisrel this+0x40>*/ /*|0x14|*/ class TSGrowableArray<NTempest::CImVector> cVertexList;
  /*<thisrel this+0x54>*/ /*|0x14|*/ class TSGrowableArray<unsigned short> indexList;
  /*<thisrel this+0x68>*/ /*|0x8|*/ class TSLink<CDetailDoodadGeom> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CDetailDoodadGeom::FillGxBufVertex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CDetailDoodadGeom::FillGxBufIndex(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGxBuf* buf);
  void __thiscall CDetailDoodadGeom(class CDetailDoodadGeom&);
  void __thiscall CDetailDoodadGeom();
  class CDetailDoodadGeom& __thiscall operator=(class CDetailDoodadGeom&);
  void __thiscall ~CDetailDoodadGeom();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x70>

class CMapAreaLow {

  // static data ------------------------------------
  static /*<rva 0x0>*/ /*|0xbfff4|*/ class NTempest::C3Vector s_vertexBuffer[65535];
  static /*<rva 0x0>*/ /*|0x1fffe|*/ unsigned short s_indexBuffer[65535];
  static /*<rva 0x0>*/ /*|0x4|*/ unsigned int s_vertexBufferIndex;
  static /*<rva 0x0>*/ /*|0x4|*/ unsigned int s_indexBufferIndex;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ class NTempest::CAaBox aaBox;
  /*<thisrel this+0x18>*/ /*|0x10|*/ class NTempest::CAaSphere aaSphere;
  /*<thisrel this+0x28>*/ /*|0xc|*/ class NTempest::C3Vector corner;
  /*<thisrel this+0x34>*/ /*|0x8|*/ class NTempest::C2iVector mIndex;
  /*<thisrel this+0x3c>*/ /*|0x884|*/ float heights[545];
  /*<thisrel this+0x8c0>*/ /*|0x8|*/ class TSLink<CMapAreaLow> sceneLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapAreaLow(class CMapAreaLow&);
  void __thiscall CMapAreaLow();
  class CMapAreaLow& __thiscall operator=(class CMapAreaLow&);
  void __thiscall CMapAreaLow::~CMapAreaLow();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8c8>

class DNGlare : class GlareBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x30>*/ /*|0x20|*/ class NTempest::C2Vector m_fadeTable[4];
  /*<thisrel this+0x50>*/ /*|0x4|*/ float m_scaleMin;
  /*<thisrel this+0x54>*/ /*|0x4|*/ float m_scaleMax;
  /*<thisrel this+0x58>*/ /*|0x4|*/ float m_dotMin;
  /*<thisrel this+0x5c>*/ /*|0x4|*/ float m_alphaMin;
  /*<thisrel this+0x60>*/ /*|0x4|*/ float m_alphaMax;

  // base classes -----------------------------------
  // baseclass class GlareBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNGlare::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  void __thiscall DNGlare::Destroy();
  void __thiscall DNGlare(class DNGlare&);
  void __thiscall DNGlare();
  class DNGlare& __thiscall operator=(class DNGlare&);
  void __thiscall ~DNGlare();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ float __thiscall GetCloudDensityFade() = 0;
  virtual /*<vtableoff 0x0>*/ void __thiscall DNGlare::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void __thiscall DNGlare::Render();
  virtual /*<vtableoff 0x0>*/ int __thiscall DNGlare::IsVisible();
};
// <size 0x64>

class DNPlanet {

  // static data ------------------------------------
  static /*<rva 0xcb22a8>*/ /*|0x0|*/ class NTempest::C2Vector m_scaleTable[0];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class NTempest::C3Vector m_pos;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct HTEXTURE__* m_texid;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float m_scale;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float m_baseScale;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_period;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNPlanet::GenGeometry(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* geov, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector* texv, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector* clrv, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned short* idx, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned long& vertCount, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned long& idxCount);
  void __thiscall DNPlanet::Render();
  void __thiscall Update();
  void __thiscall DNPlanet::Initialize(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* filename);
  void __thiscall DNPlanet::Destroy();
  void __thiscall DNPlanet(class DNPlanet&);
  void __thiscall DNPlanet();
  class DNPlanet& __thiscall operator=(class DNPlanet&);
  void __thiscall ~DNPlanet();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class DNClouds {

  // static data ------------------------------------
  static /*<rva 0x4a48d4>*/ /*|0x0|*/ unsigned long m_tmSizeTable[0];
  static /*<rva 0x4a48e8>*/ /*|0x0|*/ unsigned long m_tmShiftTable[0];
  static /*<rva 0xcb2308>*/ /*|0x0|*/ class NTempest::C2Vector m_bumpFadeTable[0];
  static /*<rva 0x411978>*/ /*|0x4|*/ float BUMPFADETIME;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_lastTime;
  /*<thisrel this+0x4>*/ /*|0x4|*/ float m_sharpness;
  /*<thisrel this+0x8>*/ /*|0x1|*/ unsigned char m_density;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float m_densityOverride;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned long m_lod;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned long m_updateSize;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned long m_updateRow;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned long m_tmSize;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned long m_tmShift;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned long m_wrapMask;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned long m_nOctaves;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_nLayers;
  /*<thisrel this+0x30>*/ /*|0x10|*/ class TSFixedArray<NTempest::CImVector> m_texels;
  /*<thisrel this+0x40>*/ /*|0x10|*/ class TSFixedArray<unsigned char> m_height;
  /*<thisrel this+0x50>*/ /*|0x10|*/ class TSFixedArray<float> m_noise;
  /*<thisrel this+0x60>*/ /*|0x10|*/ class TSFixedArray<float> m_lastBumpNoiseY;
  /*<thisrel this+0x70>*/ /*|0x10|*/ class TSFixedArray<NTempest::C2Vector> m_bump;
  /*<thisrel this+0x80>*/ /*|0x10|*/ class TSFixedArray<NTempest::C3Vector> m_geoVerts;
  /*<thisrel this+0x90>*/ /*|0x10|*/ class TSFixedArray<NTempest::C2Vector> m_texVerts;
  /*<thisrel this+0xa0>*/ /*|0x10|*/ class TSFixedArray<unsigned short> m_indices;
  /*<thisrel this+0xb0>*/ /*|0x2|*/ unsigned short m_nIndices;
  /*<thisrel this+0xb2>*/ /*|0x2|*/ unsigned short m_nVerts;
  /*<thisrel this+0xb4>*/ /*|0x2|*/ unsigned short m_timeX;
  /*<thisrel this+0xb8>*/ /*|0xc|*/ struct DNFogInfo m_fogInfo;
  /*<thisrel this+0xc4>*/ /*|0x4|*/ float m_waitTime;
  /*<thisrel this+0xc8>*/ /*|0x4|*/ class CGxTex* m_texid;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall DNClouds::Callback_GxTex(/*<register ecx>*/ /*|0x4|*/ enum EGxTexCommand cmd, /*<register edx>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int d, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int mipLevel, /*<regrel ebp+0x14>*/ /*|0x4|*/ void* userArg, /*<regrel ebp+0x18>*/ /*|0x4|*/ unsigned int& texelStrideInBytes, /*<regrel ebp+0x1c>*/ /*|0x4|*/ void*& gxTexels);

  // non-virtual functions --------------------------
  void __thiscall DNClouds::WorldToTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& worldPt, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector& tex);
  void __thiscall DNClouds::BumpMap();
  void __thiscall DNClouds(class DNClouds&);
  void __thiscall DNClouds::DNClouds();
  void __thiscall DNClouds::GenSphere(/*<regrel ebp+0x8>*/ /*|0x4|*/ float size);
  void __thiscall SetLayers(unsigned long);
  void __thiscall DNClouds::SetLOD(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long newlod, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long newUpdateSize);
  void __thiscall DNClouds::SetDensity(/*<regrel ebp+0x8>*/ /*|0x4|*/ float newDensity);
  void __thiscall DNClouds::SetSharpness(/*<regrel ebp+0x8>*/ /*|0x4|*/ float newSharpness);
  void __thiscall DNClouds::OverrideDensitySharpness(/*<regrel ebp+0x8>*/ /*|0x4|*/ float newDensity, /*<regrel ebp+0xc>*/ /*|0x4|*/ float newSharpness);
  void __thiscall DNClouds::Update();
  void __thiscall DNClouds::FullUpdate();
  void __thiscall DNClouds::Render();
  float __thiscall DNClouds::GetDensity(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& worldPoint, /*<regrel ebp+0xc>*/ /*|0x4|*/ float area);
  void __thiscall DNClouds::Collide(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& origin, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& dir, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& hitPoint);
  void __thiscall DNClouds::Destroy();
  class DNClouds& __thiscall operator=(class DNClouds&);
  void __thiscall ~DNClouds();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xcc>

class DNSky {

  // static data ------------------------------------
  static /*<rva 0xcb237c>*/ /*|0x0|*/ class NTempest::C2Vector m_darkTable[0];
  static /*<rva 0x41195c>*/ /*|0x1c|*/ float m_stripSizes[7];
  static /*<rva 0xcb25a0>*/ /*|0x1c|*/ float m_fadeAngle[7];
  static /*<rva 0xcb25bc>*/ /*|0x1c|*/ float m_darkAngle[7];
  static /*<rva 0xcb2348>*/ /*|0x0|*/ class NTempest::C2Vector m_fadeTable[0];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x10|*/ class TSFixedArray<NTempest::C3Vector> m_geoVerts;
  /*<thisrel this+0x10>*/ /*|0x10|*/ class TSFixedArray<NTempest::CImVector> m_clrVerts;
  /*<thisrel this+0x20>*/ /*|0x10|*/ class TSFixedArray<unsigned short> m_indices;
  /*<thisrel this+0x30>*/ /*|0x4|*/ int m_sphThetaTess;
  /*<thisrel this+0x34>*/ /*|0x2|*/ unsigned short m_nVerts;
  /*<thisrel this+0x36>*/ /*|0x2|*/ unsigned short m_nIndices;
  /*<thisrel this+0x38>*/ /*|0x4|*/ float m_sphRadius;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNSky::GenTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int w, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int h, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector* texels);
  void __thiscall DNSky::GenSphere(/*<regrel ebp+0x8>*/ /*|0x4|*/ float sphRadius);
  void __thiscall DNSky::SetColors();
  void __thiscall DNSky::Render();
  void __thiscall DNSky(class DNSky&);
  void __thiscall DNSky();
  class DNSky& __thiscall operator=(class DNSky&);
  void __thiscall ~DNSky();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x3c>

class DNStars {

  // static data ------------------------------------
  static /*<rva 0xcb22e8>*/ /*|0x20|*/ class NTempest::C2Vector m_fadeTable[4];

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct HMODEL__* m_hModel;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x8>*/ /*|0xc|*/ class NTempest::C3Vector m_pos;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNStars::Initialize();
  void __thiscall DNStars::Update();
  void __thiscall DNStars::Render();
  void __thiscall DNStars::Destroy();
  void __thiscall DNStars(class DNStars&);
  void __thiscall DNStars();
  class DNStars& __thiscall operator=(class DNStars&);
  void __thiscall ~DNStars();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CWSoundEmitter {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long soundPointID;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned long soundNameID;
  /*<thisrel this+0x8>*/ /*|0xc|*/ class NTempest::C3Vector pos;
  /*<thisrel this+0x14>*/ /*|0x4|*/ float minDistance;
  /*<thisrel this+0x18>*/ /*|0x4|*/ float maxDistance;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float cutoffDistance;
  /*<thisrel this+0x20>*/ /*|0x4|*/ unsigned long startTime;
  /*<thisrel this+0x24>*/ /*|0x4|*/ unsigned long endTime;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned long mode;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long groupSilenceMin;
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned long groupSilenceMax;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned long playInstancesMin;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long playInstancesMax;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned long loopCountMin;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned long loopCountMax;
  /*<thisrel this+0x44>*/ /*|0x4|*/ unsigned long interSoundGapMin;
  /*<thisrel this+0x48>*/ /*|0x4|*/ unsigned long interSoundGapMax;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CWSoundEmitter();
  void __thiscall ~CWSoundEmitter();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4c>

class CMapSoundEmitter {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4c|*/ class CWSoundEmitter data;
  /*<thisrel this+0x4c>*/ /*|0x8|*/ class TSLink<CMapSoundEmitter> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CMapSoundEmitter(class CMapSoundEmitter&);
  void __thiscall CMapSoundEmitter();
  class CMapSoundEmitter& __thiscall operator=(class CMapSoundEmitter&);
  void __thiscall ~CMapSoundEmitter();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>

class CChunkLiquid {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class NTempest::CRange height;
  /*<thisrel this+0x8>*/ /*|0x288|*/ struct SLVert verts[81];
  /*<thisrel this+0x290>*/ /*|0x40|*/ struct SLTiles tiles;
  /*<thisrel this+0x2d0>*/ /*|0x4|*/ unsigned int nFlowvs;
  /*<thisrel this+0x2d4>*/ /*|0x50|*/ struct SWFlowv flowvs[2];
  /*<thisrel this+0x324>*/ /*|0x4|*/ class CMapChunk* chunk;
  /*<thisrel this+0x328>*/ /*|0x8|*/ class TSLink<CChunkLiquid> sceneLink;
  /*<thisrel this+0x330>*/ /*|0x8|*/ class TSLink<CChunkLiquid> lameAssLink;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CChunkLiquid::RenderOcean0Callback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* gxBuf);
  static void __fastcall CChunkLiquid::RenderRiver0Callback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* gxBuf);
  static void __fastcall CChunkLiquid::RenderMagma0Callback(/*<register ecx>*/ /*|0x4|*/ struct CGxBufCommand& cmd, /*<register edx>*/ /*|0x4|*/ struct CGxBuf* gxBuf);

  // non-virtual functions --------------------------
  unsigned short __thiscall CChunkLiquid::Render0I(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned short* idxBase, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int liquidType);
  void __thiscall CChunkLiquid::RenderOcean0();
  void __thiscall CChunkLiquid::RenderOcean0V(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxVertexPNT0* vtx);
  void __thiscall CChunkLiquid::RenderRiver0(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int type);
  void __thiscall CChunkLiquid::RenderRiver0V(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxVertexPNT0* vtx);
  void __thiscall CChunkLiquid::RenderMagma0(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int type);
  void __thiscall CChunkLiquid::RenderMagma0V(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxVertexPCT0* vtx);
  void __thiscall CChunkLiquid::Render(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int type);
  void __thiscall CChunkLiquid::GetAaBox(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox);
  void __thiscall CChunkLiquid(class CChunkLiquid&);
  void __thiscall CChunkLiquid();
  class CChunkLiquid& __thiscall operator=(class CChunkLiquid&);
  void __thiscall ~CChunkLiquid();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x338>

class BspQuery {

  // static data ------------------------------------
  static /*<rva 0xa6ba40>*/ /*|0x2000|*/ unsigned short testFaces[4096];
  static /*<rva 0xa6ba38>*/ /*|0x4|*/ unsigned int testFaceSub;
  static /*<rva 0xa691e0>*/ /*|0x2000|*/ unsigned short hitFaces[4096];
  static /*<rva 0xa6e25c>*/ /*|0x4|*/ unsigned int hitFaceSub;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall ~BspQuery();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1>

class BspQuery_Segment : class BspQuery  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct SMOPoly* faces;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NTempest::C3Vector* vertexList;
  /*<thisrel this+0x8>*/ /*|0x4|*/ float* hitT;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float origHitT;
  /*<thisrel this+0x10>*/ /*|0x18|*/ class NTempest::C3Ray ray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float oosegMag;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float maxT;
  /*<thisrel this+0x30>*/ /*|0x2|*/ unsigned short faceIgnoreFlags;

  // base classes -----------------------------------
  // baseclass class BspQuery
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall operator=(class BspQuery_Segment&);
  void __thiscall BspQuery_Segment::operator()(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short faceIndex);
  void __thiscall BspQuery_Segment(struct SMOPoly*, class NTempest::C3Vector*, class NTempest::C3Segment&, float*, unsigned short);
  void __thiscall ~BspQuery_Segment();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x34>

class FogQ {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float dist;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int subscript;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned char __fastcall HasHigherPriority(class FogQ&, class FogQ&);

  // non-virtual functions --------------------------
  void __thiscall FogQ(float, int);

  // virtual functions ------------------------------
};
// <size 0x8>

class SMOFog::Fogs {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ struct SMOFog::Fog fog[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SMOFog::Fogs::Blend(/*<regrel ebp+0x8>*/ /*|0x4|*/ class SMOFog::Fogs& fogs, /*<regrel ebp+0xc>*/ /*|0x4|*/ float t);
  struct SMOFog::Fog& __thiscall operator[](unsigned int);
  struct SMOFog::Fog& __thiscall operator[](unsigned int);
  void __thiscall Fogs(class SMOFog::Fogs&);
  void __thiscall Fogs();
  class SMOFog::Fogs& __thiscall operator=(class SMOFog::Fogs&);
  void __thiscall ~Fogs();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class WaveTrain {

  // static data ------------------------------------
  static /*<rva 0x410d2c>*/ /*|0x4|*/ float PHASE_GRID_SIZE;
  static /*<rva 0xa4c8d0>*/ /*|0x4|*/ float DEPTH_RANGE_SCALE;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class NTempest::C2Vector pos;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class NTempest::C2Vector halfSize;
  /*<thisrel this+0x10>*/ /*|0x4|*/ float radiusSq;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class NTempest::C2iVector phaseSize;
  /*<thisrel this+0x1c>*/ /*|0x10|*/ class NTempest::C22Matrix localToWorld;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float speed;
  /*<thisrel this+0x30>*/ /*|0x800|*/ float phaseGrid[512];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int __thiscall WaveTrain::Phase(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& worldPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& phase);
  void __thiscall WaveTrain::Init(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& pPos, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector& pSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ float radAngle, /*<regrel ebp+0x14>*/ /*|0x4|*/ float pSpeed);
  void __thiscall WaveTrain::Move(/*<regrel ebp+0x8>*/ /*|0x4|*/ float deltat);
  int __thiscall WaveTrain::Contains(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& worldPos);
  void __thiscall WaveTrain();
  void __thiscall ~WaveTrain();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x830>

class Particulate {

  // static data ------------------------------------
  static /*<rva 0xa435d8>*/ /*|0x30|*/ class NTempest::C3Vector s_vcv[4];
  static /*<rva 0xa446e8>*/ /*|0x1a0|*/ class NTempest::C2Vector s_tc[13][4];
  static /*<rva 0x49f050>*/ /*|0x80|*/ unsigned int s_tcSub[4][8];
  static /*<rva 0x410d34>*/ /*|0x4|*/ float PTSIZE;

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xfa00|*/ struct Particulate::Particle particles[4000];
  /*<thisrel this+0xfa00>*/ /*|0x4|*/ unsigned int numParticles;
  /*<thisrel this+0xfa04>*/ /*|0xc|*/ class NTempest::C3Vector lastCamPos;
  /*<thisrel this+0xfa10>*/ /*|0x4|*/ struct HTEXTURE__* texture;
  /*<thisrel this+0xfa14>*/ /*|0x1|*/ unsigned char show;
  /*<thisrel this+0xfa18>*/ /*|0x4|*/ float scale;
  /*<thisrel this+0xfa1c>*/ /*|0x4|*/ float boxSize;
  /*<thisrel this+0xfa20>*/ /*|0x4|*/ float percent;
  /*<thisrel this+0xfa24>*/ /*|0x4|*/ unsigned int liquid;
  /*<thisrel this+0xfa28>*/ /*|0x18|*/ struct Particulate::Movement movement;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall Particulate::CustomRenderCallback(/*<register ecx>*/ /*|0x4|*/ void* p1, /*<register edx>*/ /*|0x4|*/ int p2);

  // non-virtual functions --------------------------
  class NTempest::C3Vector __thiscall Particulate::ComputeMovement(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* __$ReturnUdt);
  void __thiscall Particulate::InitMovement();
  void __thiscall Particulate::Particulate(/*<regrel ebp+0x8>*/ /*|0x4|*/ float particleScale, /*<regrel ebp+0xc>*/ /*|0x4|*/ float boxSize, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* particulateTexture);
  void __thiscall Particulate::~Particulate();
  void __thiscall Particulate::SetPercentage(/*<regrel ebp+0x8>*/ /*|0x4|*/ float percent);
  void __thiscall Particulate::SetSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ float units);
  void __thiscall Particulate::SetScale(/*<regrel ebp+0x8>*/ /*|0x4|*/ float s);
  void __thiscall Particulate::SetTexture(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* name);
  void __thiscall Particulate::InitParticles(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int l);
  void __thiscall Show(unsigned char);
  void __thiscall Particulate::Update();
  void __thiscall Particulate::Render();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xfa40>

class CWorld {

  // static data ------------------------------------
  static /*<rva 0x410b0c>*/ /*|0x4|*/ unsigned int MAX_SOUND_EXT_LEVEL;
  static /*<rva 0x410b10>*/ /*|0x4|*/ unsigned int MIN_SOUND_EXT_LEVEL;
  static /*<rva 0xa40468>*/ /*|0x4|*/ float curTimeSec;
  static /*<rva 0xa39744>*/ /*|0x4|*/ float tickTimeSec;
  static /*<rva 0xa40490>*/ /*|0x4|*/ unsigned int curTimeMs;
  static /*<rva 0xa3a3ac>*/ /*|0x4|*/ unsigned int tickTimeMs;
  static /*<rva 0xa40498>*/ /*|0x4|*/ unsigned int frameCnt;
  static /*<rva 0xa39b70>*/ /*|0x4|*/ unsigned int chunkCnt;
  static /*<rva 0xa404a0>*/ /*|0x4|*/ unsigned int nChunksRender;
  static /*<rva 0xa39b68>*/ /*|0x4|*/ unsigned int nDoodadsRender;
  static /*<rva 0xa39754>*/ /*|0x4|*/ unsigned int nPrimsRender;
  static /*<rva 0xa3a39c>*/ /*|0x10|*/ class NTempest::CiRect chunkRectHi;
  static /*<rva 0xa3a448>*/ /*|0x10|*/ class NTempest::CiRect gbChunkRect;
  static /*<rva 0xa39b74>*/ /*|0x10|*/ class NTempest::CiRect areaRect;
  static /*<rva 0xa40488>*/ /*|0x8|*/ class NTempest::C2iVector chunkAoiSize;
  static /*<rva 0xa3a430>*/ /*|0x4|*/ int prepareAll;
  static /*<rva 0xa404c0>*/ /*|0x40|*/ class NTempest::C44Matrix idMat;
  static /*<rva 0xa376c0>*/ /*|0x80|*/ class NTempest::C4Vector texVect[8];
  static /*<rva 0x49d888>*/ /*|0x4|*/ float detailDoodadDist;
  static /*<rva 0xa39748>*/ /*|0x4|*/ float detailDoodadDistS;
  static /*<rva 0xa40638>*/ /*|0x4|*/ unsigned int detailDoodadDensity;
  static /*<rva 0xa3a398>*/ /*|0x4|*/ int detailDoodadTest;
  static /*<rva 0xa404ac>*/ /*|0x4|*/ unsigned int detailDoodadAlphaRef;
  static /*<rva 0x49d88c>*/ /*|0x4|*/ float textureLodDist;
  static /*<rva 0x49d890>*/ /*|0x4|*/ float lodDist;
  static /*<rva 0x49d894>*/ /*|0x4|*/ unsigned int lodMax;
  static /*<rva 0x49d898>*/ /*|0x4|*/ unsigned int lodMin;
  static /*<rva 0xa4063c>*/ /*|0x4|*/ unsigned int pnEstimateVertex;
  static /*<rva 0xa40640>*/ /*|0x4|*/ unsigned int pnEstimateIndex;
  static /*<rva 0xa40644>*/ /*|0x4|*/ unsigned int pnt0EstimateVertex;
  static /*<rva 0xa40648>*/ /*|0x4|*/ unsigned int pnt0EstimateIndex;
  static /*<rva 0xa4064c>*/ /*|0x4|*/ unsigned int pnct0EstimateVertex;
  static /*<rva 0xa40650>*/ /*|0x4|*/ unsigned int pnct0EstimateIndex;
  static /*<rva 0xa39b6c>*/ /*|0x4|*/ float farFog;
  static /*<rva 0xa40654>*/ /*|0x4|*/ float farClip;
  static /*<rva 0xa40628>*/ /*|0x4|*/ float nearClip;
  static /*<rva 0xa4049c>*/ /*|0x4|*/ float unitDrawDist;
  static /*<rva 0xa40470>*/ /*|0x18|*/ class NTempest::CAaBox groupAoi;
  static /*<rva 0xa40500>*/ /*|0x18|*/ class NTempest::CAaBox objectAoi;
  static /*<rva 0xa4046c>*/ /*|0x4|*/ unsigned long enables;
  static /*<rva 0xa376a8>*/ /*|0x4|*/ unsigned long enableLayerCnt;
  static /*<rva 0xa376a4>*/ /*|0x4|*/ unsigned int maxLights;
  static /*<rva 0xa3a45c>*/ /*|0x4|*/ class NTempest::CImVector shadowColor;
  static /*<rva 0xa40528>*/ /*|0x100|*/ unsigned int shadowModColor[64];
  static /*<rva 0xa3a3b0>*/ /*|0x4|*/ class CGxTex* shadowModGxTex;
  static /*<rva 0xa376ac>*/ /*|0x4|*/ unsigned int shadowMipLevel;
  static /*<rva 0xa3a440>*/ /*|0x4|*/ unsigned int alphaMipLevel;
  static /*<rva 0xa40520>*/ /*|0x4|*/ float texLodBias;
  static /*<rva 0xa39b88>*/ /*|0x4|*/ unsigned int texMaxAnisotropy;
  static /*<rva 0xa39b84>*/ /*|0x4|*/ unsigned int texMaxAnisotropyLog2;
  static /*<rva 0xa3a390>*/ /*|0x4|*/ class Particulate* particulate;
  static /*<rva 0xa39758>*/ /*|0x4|*/ int bLoadSimpleDoodads;
  static /*<rva 0xa40494>*/ /*|0x4|*/ int bShowSimpleDoodads;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CWorld::Initialize();
  static void __fastcall CWorld::Destroy();
  static void __fastcall CWorld::LoadMap(/*<register ecx>*/ /*|0x4|*/ char* mapName, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<regrel ebp+0x8>*/ /*|0x4|*/ int preLoad);
  static void __fastcall CWorld::UnloadMap();
  static unsigned char __fastcall CWorld::MapIsDungeon();
  static void __fastcall CWorld::ClearCache();
  static void __fastcall CWorld::Preload(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& position);
  static void __fastcall CWorld::PrepareUpdate(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& target);
  static void __fastcall CWorld::Update();
  static void __fastcall CWorld::Render();
  static void __fastcall CWorld::RenderAlpha();
  static void __fastcall CWorld::UpdateDayNight(/*<register ecx>*/ /*|0x4|*/ int forceFull, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* position);
  static void __fastcall CWorld::SetEnvironment();
  static class NTempest::C3Vector& __fastcall CWorld::GetCamPos();
  static class NTempest::C3Vector& __fastcall CWorld::GetCamTarget();
  static unsigned int __fastcall CWorld::QueryAreaId(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y);
  static int __fastcall CWorld::QueryShadow(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<register edx>*/ /*|0x4|*/ class NTempest::CImVector& argb);
  static int __fastcall CWorld::QueryObjectInside(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject);
  static int __fastcall CWorld::QueryObjectVisible(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject);
  static int __fastcall CWorld::QueryMapObjZoneName(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ char*& zoneName);
  static int __fastcall CWorld::QueryMapObjSubzoneName(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ char*& subzoneName, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& subzoneId);
  static int __fastcall CWorld::QueryMapObjFileName(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ char*& fileName);
  static unsigned char __fastcall CWorld::QueryMapObjIDs(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ unsigned int& wmoID, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int& instanceID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& groupID);
  static int __fastcall CWorld::QueryMapObjFog(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ class SMOFog::Fogs& oFogs, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& oPct);
  static int __fastcall CWorld::QueryGroundType(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ unsigned int& groundType);
  static unsigned char __fastcall CWorld::QueryMountAllowed(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ unsigned char& allowed);
  static unsigned char __fastcall CWorld::QueryMapObjAreaTable(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ class WMOAreaTableRec*& subzoneRec, /*<regrel ebp+0x8>*/ /*|0x4|*/ class WMOAreaTableRec*& globalRec);
  static unsigned char __fastcall CWorld::QueryMapObjMinimap(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<regrel ebp+0x8>*/ /*|0x4|*/ class TSStackArray<CWorld::MinimapQuad>& quads);
  static unsigned char __fastcall CWorld::QueryMapObjMatrix(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix* mtx, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix* invMtx);
  static int __fastcall CWorld::QueryObjectLiquid(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& flowDir, /*<regrel ebp+0x10>*/ /*|0x4|*/ int& deep);
  static int __fastcall CWorld::QueryLiquidStatus(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ unsigned int& liquid, /*<regrel ebp+0x8>*/ /*|0x4|*/ float& surface, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& waterDir);
  static int __fastcall QueryLiquidFishable(class NTempest::C3Vector&, int&);
  static int __fastcall CWorld::QueryLiquidSounds(/*<register ecx>*/ /*|0x4|*/ unsigned long hwObject, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius, /*<register edx>*/ /*|0x4|*/ int* lbool, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* ldelta);
  static unsigned int __fastcall CWorld::SceneCamLiquidStatus();
  static unsigned int __fastcall CWorld::ObjectCreate(/*<register ecx>*/ /*|0x4|*/ char* name, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bWait, /*<regrel ebp+0x10>*/ /*|0x4|*/ int bSnap, /*<regrel ebp+0x14>*/ /*|0x8|*/ unsigned __int64 param64);
  static void __fastcall CWorld::ObjectUpdate(/*<register ecx>*/ /*|0x4|*/ unsigned int id, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float angle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int bSnap);
  static void __fastcall CWorld::ObjectGetExtents(/*<register ecx>*/ /*|0x4|*/ unsigned int id, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& extents);
  static void __fastcall CWorld::ObjectEnableCollision(/*<register ecx>*/ /*|0x4|*/ unsigned int id, /*<register edx>*/ /*|0x4|*/ int bEnable);
  static unsigned char __fastcall CWorld::ObjectTestConvexVolume(/*<register ecx>*/ /*|0x4|*/ unsigned int id, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  static void __fastcall CWorld::ObjectDelete(/*<register ecx>*/ /*|0x4|*/ unsigned int id);
  static void __fastcall CWorld::SetObjectHandler(/*<register ecx>*/ /*|0x4|*/ int  (handler*)(void*, unsigned long, unsigned __int64, unsigned long), /*<register edx>*/ /*|0x4|*/ void* handlerParam);
  static void __fastcall CWorld::SetObjectCollisionHandler(/*<register ecx>*/ /*|0x4|*/ int  (handler*)(unsigned __int64, unsigned long, struct WorldObjCollisionHandlerData*));
  static unsigned long __fastcall CWorld::AddObject(/*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 param64, /*<register ecx>*/ /*|0x4|*/ unsigned long param32, /*<register edx>*/ /*|0x4|*/ struct HMODEL__* hModel, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int objFlags);
  static unsigned long __fastcall CWorld::AddDoodad(/*<register ecx>*/ /*|0x4|*/ char* fileName, /*<register edx>*/ /*|0x4|*/ struct HMODEL__* hModel, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& mat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int objFlags);
  static struct HMODEL__* __fastcall CWorld::GetModel(/*<register ecx>*/ /*|0x4|*/ unsigned long doodad);
  static void __fastcall CWorld::UpdateObject(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix& mat, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox);
  static void __fastcall CWorld::RemoveObject(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject);
  static void __fastcall CWorld::SetHidden(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ int hidden);
  static void __fastcall CWorld::TickObject(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject);
  static void __fastcall CWorld::SetObjectRenderCallback(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject, /*<register edx>*/ /*|0x4|*/ void  (cb*)(void*, class NTempest::C44Matrix&), /*<regrel ebp+0x8>*/ /*|0x4|*/ void* param);
  static void __fastcall CWorld::SetCameraTarget(/*<register ecx>*/ /*|0x4|*/ unsigned long hWorldObject);
  static void __fastcall CWorld::SetUpdateTime(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec, /*<register ecx>*/ /*|0x4|*/ unsigned long pCurTimeMs);
  static void __fastcall CWorld::SelectLight(/*<register ecx>*/ /*|0x4|*/ void* parm, /*<regrel ebp+0x8>*/ /*|0xc|*/ class NTempest::C3Vector worldPos, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& cameraWorldPos, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int maxLightsToUse);
  static float __fastcall CWorld::CalcAltitude(/*<regrel ebp+0x8>*/ /*|0x4|*/ float x, /*<regrel ebp+0xc>*/ /*|0x4|*/ float y, /*<regrel ebp+0x10>*/ /*|0x4|*/ float radius);
  static unsigned char __fastcall CWorld::Intersect(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* a, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector* b, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* ip, /*<regrel ebp+0x10>*/ /*|0x4|*/ float* dist, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CWorld::GetFacets(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CWorld::GetFacets(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ struct CWFacetData* facetData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall CWorld::GetFacet(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& t, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C4Plane& facet, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int queryFlags);
  static unsigned char __fastcall GetTris(class NTempest::C3Segment&, float&, class CWTriData&, unsigned int);
  static unsigned char __fastcall CWorld::GetTris(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ class CWTriData& triData, /*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int queryFlags);
  static void __fastcall CWorld::TriDataToFacetData(/*<register ecx>*/ /*|0x4|*/ class CWTriData& triData, /*<register edx>*/ /*|0x4|*/ struct CWFacetData& facetData, /*<regrel ebp+0x8>*/ /*|0x8|*/ unsigned __int64 param64);
  static void __fastcall DBGShowQuery(unsigned char);
  static void __fastcall CWorld::SetSoundEmitterHandlers(/*<register ecx>*/ /*|0x4|*/ void  (create*)(class CWSoundEmitter&), /*<register edx>*/ /*|0x4|*/ void  (destroy*)(unsigned long));
  static void __fastcall CWorld::WaterRipple(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& pos, /*<regrel ebp+0x8>*/ /*|0x4|*/ float len, /*<regrel ebp+0xc>*/ /*|0x4|*/ float time, /*<regrel ebp+0x10>*/ /*|0x4|*/ float amp, /*<regrel ebp+0x14>*/ /*|0x4|*/ float vel, /*<regrel ebp+0x18>*/ /*|0x4|*/ float freq);
  static char* __fastcall CWorld::QueryChunkName();
  static int __fastcall CWorld::NDCClip(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* p_inVerts, /*<register edx>*/ /*|0x4|*/ unsigned int p_inCount, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector**& p_outVerts, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int& p_outCount);
  static unsigned char __fastcall CWorld::NDCXform(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix& xf, /*<regrel ebp+0x8>*/ /*|0x1|*/ unsigned char translate);
  static void __fastcall CWorld::SetShadowColor(/*<register ecx>*/ /*|0x4|*/ class NTempest::CImVector& color);
  static void __fastcall CWorld::SetFarClip(/*<regrel ebp+0x8>*/ /*|0x4|*/ float farClip);
  static void __fastcall CWorld::SetNearClip(/*<regrel ebp+0x8>*/ /*|0x4|*/ float nearClip);
  static void __fastcall CWorld::SetDetailDoodadDensity(/*<register ecx>*/ /*|0x4|*/ unsigned int density);
  static void __fastcall CWorld::SetTexLodBias(/*<regrel ebp+0x8>*/ /*|0x4|*/ float bias);
  static void __fastcall CWorld::SetTexAnisotropy(/*<register ecx>*/ /*|0x4|*/ unsigned int anisotropy);
  static unsigned char __fastcall CWorld::SetLodDist(/*<regrel ebp+0x8>*/ /*|0x4|*/ float dist);
  static unsigned char __fastcall CWorld::SetTextureLodDist(/*<regrel ebp+0x8>*/ /*|0x4|*/ float dist);
  static void __fastcall CWorld::CalcFPS();
  static void __fastcall CWorld::PrepareAreaOfInterest(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& target);
  static void __fastcall CWorld::ModelGeoProjectCallback(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& worldBox, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector color, /*<register edx>*/ /*|0x4|*/ class NTempest::C44Matrix& basis);
  static int __fastcall CWorld::AnimBoneProjectCallback(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& z);
  static int __fastcall CWorld::ParticleProjectCallback(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<register edx>*/ /*|0x4|*/ float& z);
  static unsigned long __fastcall GetEnables();
  static float __fastcall CWorld::GetCurTimeSec();
  static float __fastcall GetTickTimeSec();
  static unsigned int __fastcall GetCurTimeMs();
  static unsigned int __fastcall GetTickTimeMs();
  static float __fastcall CWorld::GetFramerate();
  static unsigned int __fastcall CWorld::GetPrimsRendered();
  static unsigned int __fastcall CWorld::GetChunksRendered();
  static unsigned int __fastcall CWorld::GetDoodadsRendered();
  static void __fastcall CWorld::GetCounts(/*<register ecx>*/ /*|0x4|*/ int* counts);
  static float __fastcall GetFarClip();
  static float __fastcall GetNearClip();
  static unsigned int __fastcall GetTexMaxAnisotropyLog2();
  static int __fastcall CWorld::ConsoleCommand_DebugBSP(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowTerrain(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowDoodads(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowCollision(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowAABoxes(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowQuery(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowTris(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowNormals(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowCrappyBatches(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowMapObjs(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowMapObjLight(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowMapObjBSP(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowMapObjTex(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowPortals(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowDetailDoodads(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowCull(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowSimpleDoodads(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_MaxLOD(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_WaterMaxLOD(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_WaterWaves(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_WaterSpecular(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_WaterRipples(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_WaterShow(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_WaterParticulates(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_Proj(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_SetShadow(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_MapObjLightMode(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_PortalVis(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_DebugZones(/*<register ecx>*/ /*|0x4|*/ char* command, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_DetailDoodadTest(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_DetailDoodadAlpha(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* arguments);
  static int __fastcall CWorld::ConsoleCommand_GroupOnly(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowShadow(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_ShowLowDetail(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* __formal);
  static int __fastcall CWorld::ConsoleCommand_EnumTextures(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* name);
  static int __fastcall CWorld::ConsoleCommand_EnumTextureGxCache(/*<register ecx>*/ /*|0x4|*/ char* __formal, /*<register edx>*/ /*|0x4|*/ char* name);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CWorldParam {

  // static data ------------------------------------
  static /*<rva 0xa42d88>*/ /*|0x4|*/ struct CVar* cvar_maxLights;
  static /*<rva 0xa42d50>*/ /*|0x4|*/ struct CVar* cvar_smallCull;
  static /*<rva 0xa42d44>*/ /*|0x4|*/ struct CVar* cvar_distCull;
  static /*<rva 0xa42d00>*/ /*|0x4|*/ struct CVar* cvar_triLinear;
  static /*<rva 0xa42d3c>*/ /*|0x4|*/ struct CVar* cvar_lod;
  static /*<rva 0xa42cec>*/ /*|0x4|*/ struct CVar* cvar_fullAlpha;
  static /*<rva 0xa42d70>*/ /*|0x4|*/ struct CVar* cvar_doodadAnim;
  static /*<rva 0xa42d40>*/ /*|0x4|*/ struct CVar* cvar_mapShadows;
  static /*<rva 0xa42cf0>*/ /*|0x4|*/ struct CVar* cvar_lightMaps;
  static /*<rva 0xa42d64>*/ /*|0x4|*/ struct CVar* cvar_lodDist;
  static /*<rva 0xa42d6c>*/ /*|0x4|*/ struct CVar* cvar_shadowLevel;
  static /*<rva 0xa42cf8>*/ /*|0x4|*/ struct CVar* cvar_alphaLevel;
  static /*<rva 0xa42d2c>*/ /*|0x4|*/ struct CVar* cvar_texLodBias;
  static /*<rva 0xa42d30>*/ /*|0x4|*/ struct CVar* cvar_farClip;
  static /*<rva 0xa42d68>*/ /*|0x4|*/ struct CVar* cvar_nearClip;
  static /*<rva 0xa42d58>*/ /*|0x4|*/ struct CVar* cvar_fov;
  static /*<rva 0xa42d34>*/ /*|0x4|*/ struct CVar* cvar_detailDensity;
  static /*<rva 0xa42d0c>*/ /*|0x4|*/ struct CVar* cvar_specular;
  static /*<rva 0xa42d7c>*/ /*|0x4|*/ struct CVar* cvar_pixelShaders;
  static /*<rva 0xa42d80>*/ /*|0x4|*/ struct CVar* cvar_particleDensity;
  static /*<rva 0xa42ce4>*/ /*|0x4|*/ struct CVar* cvar_unitDrawDist;
  static /*<rva 0xa42d04>*/ /*|0x4|*/ struct CVar* cvar_waterLod;
  static /*<rva 0xa42d28>*/ /*|0x4|*/ struct CVar* cvar_baseMip;
  static /*<rva 0xa42d20>*/ /*|0x4|*/ struct CVar* cvar_anisotropic;
  static /*<rva 0xa42d14>*/ /*|0x4|*/ struct CVar* cvar_textureLodDist;

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CWorldParam::Initialize();
  static void __fastcall CWorldParam::Destroy();
  static unsigned char __fastcall CWorldParam::LodCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::FullAlphaCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::DoodadAnimCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::MapShadowsCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::LightMapsCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::LodDistCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::SmallCullCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::DistCullCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::MaxLightsCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::ShadowLevelCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::AlphaLevelCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::TexLodBiasCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::TrilinearCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::FarClipCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::NearClipCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::FovCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::DetailDoodadDensityCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::SpecularCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::PixelShadersCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::ParticleDensityCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::UnitDrawDistCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::WaterLodCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::BaseMipCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::AnisotropicCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);
  static unsigned char __fastcall CWorldParam::TextureLodDistCallback(/*<register ecx>*/ /*|0x4|*/ struct CVar* h, /*<register edx>*/ /*|0x4|*/ char* oldValue, /*<regrel ebp+0x8>*/ /*|0x4|*/ char* newValue, /*<regrel ebp+0xc>*/ /*|0x4|*/ void* arg);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class CSortEntry {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class TSExplicitList<CWFrustum,244> frustumList;
  /*<thisrel this+0xc>*/ /*|0xc|*/ class TSExplicitList<CMapChunk,156> chunkList;
  /*<thisrel this+0x18>*/ /*|0xc|*/ class TSExplicitList<CMapDoodadDef,344> doodadDefList;
  /*<thisrel this+0x24>*/ /*|0xc|*/ class TSExplicitList<CMapObjDef,344> mapObjDefList;
  /*<thisrel this+0x30>*/ /*|0x30|*/ class TSExplicitList<CChunkLiquid,808> liquidList[4];
  /*<thisrel this+0x60>*/ /*|0xc|*/ class TSExplicitList<CMapEntity,216> entityList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSortEntry(class CSortEntry&);
  void __thiscall CSortEntry::CSortEntry();
  class CSortEntry& __thiscall operator=(class CSortEntry&);
  void __thiscall CSortEntry::~CSortEntry();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x6c>

class CSortTable {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xaf8|*/ class CSortEntry table[26];
  /*<thisrel this+0xaf8>*/ /*|0xc|*/ class TSExplicitList<CWFrustum,244> frustumList;
  /*<thisrel this+0xb04>*/ /*|0xc|*/ class TSExplicitList<CMapAreaLow,2240> visAreaLowList;
  /*<thisrel this+0xb10>*/ /*|0xc|*/ class TSExplicitList<CMapChunk,156> visChunkList;
  /*<thisrel this+0xb1c>*/ /*|0xc|*/ class TSExplicitList<CMapDoodadDef,344> visDoodadList;
  /*<thisrel this+0xb28>*/ /*|0xc|*/ class TSExplicitList<CMapObjDefGroup,196> visMapObjDefGroupList;
  /*<thisrel this+0xb34>*/ /*|0xc|*/ class TSExplicitList<CMapEntity,216> visEntityList;
  /*<thisrel this+0xb40>*/ /*|0x30|*/ class TSExplicitList<CChunkLiquid,808> visLiquidList[4];
  /*<thisrel this+0xb70>*/ /*|0xc|*/ class TSExplicitList<CMapEntity,216> nonVisEntityList;
  /*<thisrel this+0xb7c>*/ /*|0xc|*/ class TSExplicitList<CMapChunk,156> updateChunkList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSortTable::Initialize();
  void __thiscall CSortTable::Destroy();
  void __thiscall CSortTable::Clear();
  void __thiscall CSortTable(class CSortTable&);
  void __thiscall CSortTable();
  class CSortTable& __thiscall operator=(class CSortTable&);
  void __thiscall ~CSortTable();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xb88>

class CWorldScene {

  // static data ------------------------------------
  static /*<rva 0xa41940>*/ /*|0xc|*/ class TSExplicitList<CWFrustum,244> frustumFreeList;
  static /*<rva 0xa40ba0>*/ /*|0xb88|*/ class CSortTable sortTable;
  static /*<rva 0xa41748>*/ /*|0x90|*/ class NTempest::C4Vector clipVertexBuffer[9];
  static /*<rva 0xa408d8>*/ /*|0x200|*/ float clipBuffer[128];
  static /*<rva 0xa40800>*/ /*|0x4|*/ struct CMapEntity* camTargEntity;
  static /*<rva 0xa408d4>*/ /*|0x4|*/ class CMapObjDef* viewerMapObjDef;
  static /*<rva 0xa4192c>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> viewerMapObjGroups;
  static /*<rva 0xa40b9c>*/ /*|0x4|*/ unsigned int bspStateBits;
  static /*<rva 0x49e3cc>*/ /*|0x4|*/ float cullSmallThreshold;
  static /*<rva 0x49e3d0>*/ /*|0x4|*/ float cullDistance;
  static /*<rva 0xa41728>*/ /*|0x18|*/ class NTempest::CAaBox camFrustumBounds;
  static /*<rva 0xa40b38>*/ /*|0x60|*/ class NTempest::C3Vector camFrustumCorners[8];
  static /*<rva 0xa41d20>*/ /*|0xfc0|*/ class CWFrustum frustumStack[16];
  static /*<rva 0xa41b50>*/ /*|0x4|*/ int frustumIndex;
  static /*<rva 0xa41ad8>*/ /*|0xc|*/ class NTempest::C3Vector camPos;
  static /*<rva 0xa41c80>*/ /*|0xc|*/ class NTempest::C3Vector camTarg;
  static /*<rva 0xa41b5c>*/ /*|0xc|*/ class NTempest::C3Vector camVec;
  static /*<rva 0xa41b28>*/ /*|0x10|*/ class NTempest::C4Plane camPlaneXY;
  static /*<rva 0xa42ce0>*/ /*|0x4|*/ unsigned int camLiquid;
  static /*<rva 0xa406e0>*/ /*|0x4|*/ class CMapObjDef* camMapObjDef;
  static /*<rva 0xa406ec>*/ /*|0x4|*/ class CMapObj* camMapObj;
  static /*<rva 0xa4194c>*/ /*|0x4|*/ class CMapObjGroup* camMapObjGroup;
  static /*<rva 0xa41ae8>*/ /*|0x40|*/ class NTempest::C44Matrix mvp;
  static /*<rva 0xa41bf8>*/ /*|0x40|*/ class NTempest::C44Matrix mv;
  static /*<rva 0xa41ce0>*/ /*|0x40|*/ class NTempest::C44Matrix mp;
  static /*<rva 0xa41b40>*/ /*|0xc|*/ class NTempest::C3Vector vpMinPos;
  static /*<rva 0xa41cd0>*/ /*|0xc|*/ class NTempest::C3Vector vpMaxPos;
  static /*<rva 0xa41c40>*/ /*|0x40|*/ class NTempest::C4Plane vpPlanes[4];
  static /*<rva 0xa40b24>*/ /*|0x10|*/ class NTempest::C4Vector mvpCol3;
  static /*<rva 0xa41c90>*/ /*|0x40|*/ class NTempest::C44Matrix gxViewMat;
  static /*<rva 0xa41b4c>*/ /*|0x4|*/ unsigned int nPrimsRendered;
  static /*<rva 0xa408c8>*/ /*|0x4|*/ unsigned int nChunksRendered;
  static /*<rva 0xa406e4>*/ /*|0x4|*/ unsigned int nDoodadsRendered;
  static /*<rva 0xa408d0>*/ /*|0x4|*/ unsigned int nObjectsRendered;
  static /*<rva 0xa40ae0>*/ /*|0x40|*/ char currentChunkName[64];

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CWorldScene::PrepareRenderLiquid();
  static void __fastcall CWorldScene::Initialize();
  static void __fastcall CWorldScene::Destroy();
  static void __fastcall CWorldScene::PrepareRender(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& position, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& target);
  static void __fastcall CWorldScene::Update();
  static void __fastcall CWorldScene::Render();
  static void __fastcall CWorldScene::RenderAlpha();
  static void __fastcall CWorldScene::CalcFrustumCorners(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* corners);
  static void __fastcall CWorldScene::AddDoodadDef(/*<register ecx>*/ /*|0x4|*/ class CMapDoodadDef* doodadDef);
  static void __fastcall CWorldScene::AddMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef);
  static void __fastcall CWorldScene::AddMapChunk(/*<register ecx>*/ /*|0x4|*/ class CMapChunk* chunk, /*<regrel ebp+0x8>*/ /*|0x4|*/ float sortDist);
  static void __fastcall CWorldScene::AddMapEntity(/*<register ecx>*/ /*|0x4|*/ struct CMapEntity* entity);
  static void __fastcall CWorldScene::AddChunkLiquid(/*<register ecx>*/ /*|0x4|*/ class CChunkLiquid* liquid, /*<register edx>*/ /*|0x4|*/ unsigned int type);
  static void __fastcall CWorldScene::ClipBufferUpdate(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* vertices, /*<register edx>*/ /*|0x4|*/ int* indicies, /*<regrel ebp+0x8>*/ /*|0x4|*/ int nVertices, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& corner);
  static void __fastcall CWorldScene::ClipPortal(/*<register ecx>*/ /*|0x4|*/ class NTempest::C4Vector* inList, /*<register edx>*/ /*|0x4|*/ unsigned int& inCount);
  static void __fastcall CWorldScene::FrustumPush();
  static void __fastcall CWorldScene::FrustumSet(/*<register ecx>*/ /*|0x4|*/ class CWFrustum& frustum);
  static void __fastcall CWorldScene::FrustumSet(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* corners, /*<register edx>*/ /*|0x4|*/ class NTempest::CRect& sRect);
  static void __fastcall CWorldScene::FrustumSet(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector* corners);
  static void __fastcall CWorldScene::FrustumSet(/*<register ecx>*/ /*|0x4|*/ class NTempest::CRect& sRect);
  static class CWFrustum& __fastcall CWorldScene::FrustumGet();
  static void __fastcall CWorldScene::FrustumXform(/*<register ecx>*/ /*|0x4|*/ class NTempest::C44Matrix& mat);
  static int __fastcall CWorldScene::FrustumCull(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ class NTempest::C33Matrix& basis, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  static int __fastcall CWorldScene::FrustumCull(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox);
  static int __fastcall CWorldScene::FrustumCull(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& center, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius);
  static void __fastcall CWorldScene::FrustumPop();
  static class CWFrustum* __fastcall CWorldScene::AllocFrustum();
  static void __fastcall CWorldScene::FreeFrustum(/*<register ecx>*/ /*|0x4|*/ class CWFrustum* frustum);
  static void __fastcall CWorldScene::LocateViewer();
  static void __fastcall CWorldScene::AddViewerGroup2(/*<register ecx>*/ /*|0x4|*/ unsigned int groupNum);
  static void __fastcall CWorldScene::LocateViewer2();
  static void __fastcall CWorldScene::LocateViewer3();
  static void __fastcall CWorldScene::CullSortTable(/*<register ecx>*/ /*|0x4|*/ class NTempest::CRect& sRect);
  static void __fastcall CWorldScene::CullHorizon(/*<register ecx>*/ /*|0x4|*/ class NTempest::CRect& sRect);
  static void __fastcall CWorldScene::CullChunks(/*<register ecx>*/ /*|0x4|*/ class CSortEntry* sortEntry);
  static void __fastcall CWorldScene::CullChunkLiquid(/*<register ecx>*/ /*|0x4|*/ class CSortEntry* sortEntry, /*<register edx>*/ /*|0x4|*/ unsigned int type);
  static void __fastcall CWorldScene::CullEntitys(/*<register ecx>*/ /*|0x4|*/ class CSortEntry* sortEntry);
  static void __fastcall CWorldScene::CullDoodads(/*<register ecx>*/ /*|0x4|*/ class TSExplicitList<CMapBaseObjLink,8>& doodadDefLinkList);
  static void __fastcall CWorldScene::CullDoodads(/*<register ecx>*/ /*|0x4|*/ class CSortEntry* sortEntry);
  static void __fastcall CWorldScene::CullMapObjDefs(/*<register ecx>*/ /*|0x4|*/ class CSortEntry* sortEntry, /*<register edx>*/ /*|0x4|*/ class NTempest::CRect& sRect);
  static void __fastcall CWorldScene::CullMapObjDef(/*<register ecx>*/ /*|0x4|*/ class CMapObjDef* mapObjDef, /*<register edx>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>& inGroups);
  static void __fastcall CWorldScene::CullMapObjDefGroup(/*<register ecx>*/ /*|0x4|*/ unsigned int groupNum, /*<register edx>*/ /*|0x4|*/ void* userParam, /*<regrel ebp+0x8>*/ /*|0x4|*/ int rDrawSharedLiquidToggle);
  static void __fastcall CWorldScene::RenderHorizon();
  static void __fastcall CWorldScene::RenderChunks();
  static void __fastcall CWorldScene::RenderMapObjDefGroups();
  static void __fastcall CWorldScene::RenderObjects();
  static void __fastcall CWorldScene::RenderDoodads();
  static void __fastcall CWorldScene::RenderOcean();
  static void __fastcall CWorldScene::RenderWater();
  static void __fastcall CWorldScene::RenderMagma();
  static void __fastcall CWorldScene::ClipBufferClear();
  static int __fastcall CWorldScene::ClipBufferCull(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& aaBox, /*<register edx>*/ /*|0x4|*/ unsigned int cullFlags);
  static int __fastcall CWorldScene::ClipBufferCull(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& center, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius, /*<register edx>*/ /*|0x4|*/ unsigned int cullFlags);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class DNSunGlare : class DNGlare  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class DNGlare
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNSunGlare(class DNSunGlare&);
  void __thiscall DNSunGlare();
  class DNSunGlare& __thiscall operator=(class DNSunGlare&);
  void __thiscall ~DNSunGlare();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ float __thiscall DNSunGlare::GetCloudDensityFade();
};
// <size 0x64>

class DNMoonGlare : class DNGlare  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class DNGlare
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall DNMoonGlare(class DNMoonGlare&);
  void __thiscall DNMoonGlare();
  class DNMoonGlare& __thiscall operator=(class DNMoonGlare&);
  void __thiscall ~DNMoonGlare();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ float __thiscall DNMoonGlare::GetCloudDensityFade();
};
// <size 0x64>

class LightQE {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ float dist;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int subscript;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned char __fastcall HasHigherPriority(class LightQE&, class LightQE&);

  // non-virtual functions --------------------------
  void __thiscall LightQE(float, int);

  // virtual functions ------------------------------
};
// <size 0x8>

class PLAYERNAMEDESC : class CHandleObject  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x8>*/ /*|0x8|*/ class TSLink<PLAYERNAMEDESC> m_link;
  /*<thisrel this+0x10>*/ /*|0x4|*/ struct CGxString* m_string;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_customGeosetID;
  /*<thisrel this+0x18>*/ /*|0x4|*/ class NTempest::CImVector m_stringColor;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int m_lastUpdateTime;
  /*<thisrel this+0x20>*/ /*|0xc|*/ class NTempest::C3Vector m_basePos;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ class CGUnit_C* m_unitPtr;
  /*<thisrel this+0x30>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x34>*/ /*|0x4|*/ unsigned int m_lastRenderFrame;
  /*<thisrel this+0x38>*/ /*|0x10|*/ struct HWORLDTEXT__* m_worldTextHandles[4];
  /*<thisrel this+0x48>*/ /*|0x4|*/ float m_heightOffset;

  // base classes -----------------------------------
  // baseclass class CHandleObject
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall PLAYERNAMEDESC(class PLAYERNAMEDESC&);
  void __thiscall PLAYERNAMEDESC::PLAYERNAMEDESC();
  void __thiscall PLAYERNAMEDESC::UpdateWorldPos();
  void __thiscall PLAYERNAMEDESC::Render(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& b);
  void __thiscall PLAYERNAMEDESC::SetStringColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color);
  class NTempest::CImVector __thiscall GetStringColor();
  void __thiscall PLAYERNAMEDESC::CreateWorldText(/*<regrel ebp+0x8>*/ /*|0x4|*/ enum WORLDTEXTTYPE type, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* text, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CImVector* colorOverride);
  void __thiscall PLAYERNAMEDESC::UpdateWorldText();
  void __thiscall PLAYERNAMEDESC::ShowWorldText(/*<regrel ebp+0x8>*/ /*|0x4|*/ int show);
  void __thiscall PLAYERNAMEDESC::RenderWorldText();
  void __thiscall PLAYERNAMEDESC::MoveGeoset(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& pos);
  class PLAYERNAMEDESC& __thiscall operator=(class PLAYERNAMEDESC&);
  void __thiscall __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall PLAYERNAMEDESC::~PLAYERNAMEDESC();
  virtual /*<vtableoff 0x0>*/ void* __thiscall __vecDelDtor(unsigned int);
};
// <size 0x4c>

class WTOBJECT {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<WTOBJECT> m_explicitLink;
  /*<thisrel this+0x8>*/ /*|0xc|*/ class TSList<SWING,TSGetLink<SWING> > m_swings;
  /*<thisrel this+0x14>*/ /*|0x4|*/ struct HMODEL__* m_model;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned int m_geosetID;
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class NTempest::C3Vector m_bottomCoord;
  /*<thisrel this+0x28>*/ /*|0xc|*/ class NTempest::C3Vector m_topCoord;
  /*<thisrel this+0x34>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x38>*/ /*|0x4|*/ int m_fadeOutRate;
  /*<thisrel this+0x3c>*/ /*|0x4|*/ unsigned int m_flags;
  /*<thisrel this+0x40>*/ /*|0x4|*/ unsigned int m_timer;
  /*<thisrel this+0x44>*/ /*|0x4|*/ int m_currentAlpha;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall WTOBJECT(class WTOBJECT&);
  void __thiscall WTOBJECT::WTOBJECT();
  void __thiscall WTOBJECT::~WTOBJECT();
  void __thiscall WTOBJECT::Recycle();
  void __thiscall WTOBJECT::DisableDrawing();
  void __thiscall WTOBJECT::SetDrawTrail(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector& color, /*<regrel ebp+0xc>*/ /*|0x4|*/ int fadeOutRate, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int duration);
  void __thiscall WTOBJECT::SetColor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CImVector color);
  void __thiscall WTOBJECT::SetFadeOutRate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int fadeOutRate);
  void __thiscall WTOBJECT::Render(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C44Matrix& basis);
  void __thiscall WTOBJECT::RenderVerts(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& cameraPos);
  void __thiscall WTOBJECT::FadeVerts();
  class WTOBJECT& __thiscall operator=(class WTOBJECT&);
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x48>

class CWorldMath {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall CWorldMath::EdgeIntersectEdge(/*<register ecx>*/ /*|0x4|*/ class NTempest::C2Vector& a, /*<register edx>*/ /*|0x4|*/ class NTempest::C2Vector& b, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C2Vector& c, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& d, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C2Vector& p);
  static int __fastcall CWorldMath::RayIntersectTri(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& rayOrig, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& rayDir, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& v0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& v1, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& v2, /*<regrel ebp+0x14>*/ /*|0x4|*/ float& dist);
  static void __fastcall CWorldMath::TransformAABox(/*<register ecx>*/ /*|0x4|*/ class NTempest::C44Matrix& m, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& nBox);
  static void __fastcall CWorldMath::TransformAABox(/*<register ecx>*/ /*|0x4|*/ class NTempest::C34Matrix& m, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& nBox);
  static void __fastcall CWorldMath::TransformAABox(/*<register ecx>*/ /*|0x4|*/ class NTempest::C33Matrix& m, /*<register edx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& nBox);
  static int __fastcall CWorldMath::VectorIntersectAABox2(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Segment& seg);
  static int __fastcall CWorldMath::VectorIntersectAABox2(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& start, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& end);
  static int __fastcall CWorldMath::SphereIntersectAABox(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& center, /*<regrel ebp+0x8>*/ /*|0x4|*/ float radius);
  static unsigned int __fastcall CWorldMath::AABoxIntersectPlane(/*<register ecx>*/ /*|0x4|*/ class NTempest::CAaBox& box, /*<register edx>*/ /*|0x4|*/ class NTempest::C4Plane& plane);
  static float __fastcall CWorldMath::TriSqrDistance(/*<register ecx>*/ /*|0x4|*/ class NTempest::C3Vector& point, /*<register edx>*/ /*|0x4|*/ class NTempest::C3Vector& origin, /*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& edge0, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& edge1);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class SpellHistory {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> > m_spellHistory;
  /*<thisrel this+0xc>*/ /*|0xc|*/ class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> > m_freeList;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SpellHistory::AddHistory(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int itemID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long recoveryStart, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int recoveryTime, /*<regrel ebp+0x18>*/ /*|0x4|*/ int category, /*<regrel ebp+0x1c>*/ /*|0x4|*/ unsigned long categoryRecoveryStart, /*<regrel ebp+0x20>*/ /*|0x4|*/ unsigned int categoryRecoveryTime, /*<regrel ebp+0x24>*/ /*|0x1|*/ unsigned char onHold, /*<regrel ebp+0x28>*/ /*|0x4|*/ int startRecoveryCategory, /*<regrel ebp+0x2c>*/ /*|0x4|*/ unsigned int startRecoveryTime);
  int __thiscall SpellHistory::GetCooldown(/*<regrel ebx+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebx+0xc>*/ /*|0x4|*/ int itemID, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned int* duration, /*<regrel ebx+0x14>*/ /*|0x4|*/ unsigned long* startTime, /*<regrel ebx+0x18>*/ /*|0x4|*/ unsigned int* enable);
  int __thiscall SpellHistory::IsOnHold(/*<regrel ebx+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebx+0xc>*/ /*|0x4|*/ int itemID);
  void __thiscall SpellHistory::RemoveHold(/*<regrel ebp+0x8>*/ /*|0x4|*/ int spellID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long startTime, /*<regrel ebp+0x10>*/ /*|0x1|*/ unsigned char clear);
  void __thiscall SpellHistory::ClearHistory();
  void __thiscall SpellHistory::GarbageCollect(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long timestamp);
  void __thiscall SpellHistory(class SpellHistory&);
  void __thiscall SpellHistory();
  class SpellHistory& __thiscall operator=(class SpellHistory&);
  void __thiscall ~SpellHistory();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class SkillLineTable {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x10|*/ class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> > m_abilities;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall SkillLineTable::Initialize();
  class SkillLineAbilityRec* __thiscall SkillLineTable::Lookup(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int raceID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int classID, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int spellID);
  class SkillLineAbilityRec* __thiscall SkillLineTable::LookupPet(/*<regrel ebp+0x8>*/ /*|0x4|*/ int skillLineID, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int spellID);
  unsigned char __thiscall SkillLineTable::MatchRaceClass(/*<regrel ebp+0x8>*/ /*|0x4|*/ int raceID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int classID, /*<regrel ebp+0x10>*/ /*|0x4|*/ int raceMask, /*<regrel ebp+0x14>*/ /*|0x4|*/ int classMask, /*<regrel ebp+0x18>*/ /*|0x4|*/ int excludeRace, /*<regrel ebp+0x1c>*/ /*|0x4|*/ int excludeClass);
  unsigned char __thiscall SkillLineTable::AddAbility(/*<regrel ebp+0x8>*/ /*|0x4|*/ int raceID, /*<regrel ebp+0xc>*/ /*|0x4|*/ int classID, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSFixedArray<SkillLineAbilityRec const *>& abilities, /*<regrel ebp+0x14>*/ /*|0x4|*/ class SkillLineAbilityRec* rec);
  void __thiscall SkillLineTable(class SkillLineTable&);
  void __thiscall SkillLineTable();
  class SkillLineTable& __thiscall operator=(class SkillLineTable&);
  void __thiscall ~SkillLineTable();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class CGObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGObjectData* m_obj;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned char __thiscall IsA(enum OBJECT_TYPE_ID);
  unsigned char __thiscall IsA(enum OBJECT_TYPE);
  unsigned char __thiscall IsExactlyA(enum OBJECT_TYPE_ID);
  unsigned __int64 __thiscall GetGUID();
  enum OBJECT_TYPE __thiscall GetType();
  float __thiscall GetObjectScale();
  int __thiscall GetEntryID();
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  unsigned long* __thiscall GetStorage();
  void __thiscall CGObject(unsigned long*);
  void __thiscall ~CGObject();
  struct CGObjectData* __thiscall Obj();
  struct CGObjectData* __thiscall Obj();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CGBag {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int* m_slotCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned __int64* m_slots;
  /*<thisrel this+0x8>*/ /*|0x8|*/ unsigned __int64 m_guid;
  /*<thisrel this+0x10>*/ /*|0x1|*/ unsigned char m_isInventory;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CGBag(unsigned __int64, unsigned int*, unsigned __int64*, unsigned char);
  unsigned __int64 __thiscall GetItem(unsigned int);
  int __thiscall GetIndexOfObject(unsigned __int64);
  unsigned int __thiscall NumItems();
  unsigned int __thiscall NumSlots();
  int __thiscall IsInventory();
  unsigned __int64 __thiscall GetGUID();

  // virtual functions ------------------------------
};
// <size 0x18>

class CGItem {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGItemData* m_item;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  int __thiscall GetStackCount();
  unsigned __int64 __thiscall GetOwner();
  unsigned __int64 __thiscall GetContainedIn();
  unsigned __int64 __thiscall GetCreator();
  unsigned int __thiscall GetItemStaticFlags();
  unsigned int __thiscall GetItemDynamicFlags();
  unsigned char __thiscall IsBound();
  unsigned char __thiscall IsTranslated();
  unsigned char __thiscall IsUnlocked();
  unsigned char __thiscall IsWrapped();
  unsigned int __thiscall GetExpiration();
  int __thiscall GetItemDynamicFlag(enum ITEM_DYNAMIC_FLAGS);
  int __thiscall GetSpellCharges(int);
  struct ItemEnchantment* __thiscall GetEnchantment(int);
  int __thiscall GetEnchantmentID(int);
  int __thiscall GetEnchantmentExpiration(int);
  int __thiscall GetEnchantmentCharges(int);
  int __thiscall GetPetitionID();
  int __thiscall GetNumPetitionSignatures();
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  void __thiscall CGItem(unsigned long*);
  void __thiscall ~CGItem();
  struct CGItemData* __thiscall Item();
  struct CGItemData* __thiscall Item();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CGContainer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGContainerData* m_cont;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  void __thiscall CGContainer(unsigned long*);
  void __thiscall ~CGContainer();
  struct CGContainerData* __thiscall Container();
  struct CGContainerData* __thiscall Container();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CGGameObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGGameObjectData* m_gameObj;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  struct CGGameObjectData* __thiscall GameObject();
  struct CGGameObjectData* __thiscall GameObject();
  int __thiscall GetDisplayID();
  class NTempest::C4Quaternion& __thiscall GetRotation();
  int __thiscall GetState();
  unsigned int __thiscall GetTimeStamp();
  unsigned int __thiscall GetGameObjectFlags();
  void __thiscall GetObjectPosition(class NTempest::C3Vector&);
  class NTempest::C3Vector __thiscall GetObjectPosition();
  float __thiscall GetObjectFacing();
  int __thiscall GetFactionTemplate();
  unsigned char __thiscall GetDisabled();
  unsigned char __thiscall GetLocked();
  unsigned char __thiscall GetQuestOnly();
  void __thiscall CGGameObject(unsigned long*);
  void __thiscall ~CGGameObject();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CGPlayer {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGPlayerData* m_plyr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned int __thiscall GetGuildID();
  unsigned int __thiscall GetGuildRank();
  int __thiscall GetXP();
  int __thiscall GetNextLevelXP();
  unsigned short __thiscall GetMirrorSkillID(int);
  unsigned short __thiscall GetMirrorSkillRank(int);
  unsigned short __thiscall GetMirrorSkillMaxRank(int);
  short __thiscall GetMirrorSkillModifier(int);
  unsigned short __thiscall GetMirrorSkillStep(int);
  struct CQuestLogData* __thiscall GetQuestLogData(int);
  unsigned __int64 __thiscall GetSelection();
  int __thiscall GetCharacterPoints(int);
  unsigned int __thiscall GetCreatureTracking();
  unsigned int __thiscall GetResourceTracking();
  unsigned int __thiscall GetPlayerFlags();
  int __thiscall GetPVPEnabled();
  int __thiscall IsPartyLeader();
  unsigned char __thiscall GetNumBankSlots();
  unsigned char __thiscall GetSkin();
  unsigned char __thiscall GetFace();
  unsigned char __thiscall GetHairStyle();
  unsigned char __thiscall GetHairColorID();
  unsigned char __thiscall GetFacialHair();
  unsigned __int64 __thiscall GetFarsightFocus();
  unsigned char __thiscall IsDueling();
  unsigned __int64& __thiscall GetDuelArbiter();
  unsigned int __thiscall GetDuelTeam();
  int __thiscall GetBaseMana();
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  void __thiscall CGPlayer(unsigned long*);
  void __thiscall ~CGPlayer();
  struct CGPlayerData* __thiscall Player();
  struct CGPlayerData* __thiscall Player();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class HASHKEY_INT { // +

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_INT(unsigned int);
  void __thiscall HASHKEY_INT(int);
  void __thiscall HASHKEY_INT();
  unsigned char __thiscall operator==(class HASHKEY_INT&);
  class HASHKEY_INT& __thiscall operator=(class HASHKEY_INT&);

  // virtual functions ------------------------------
};
// <size 0x1>

class GlareBase {

  // static data ------------------------------------
  static /*<rva 0xcb157c>*/ /*|0x30|*/ class NTempest::C3Vector m_geov[4];
  static /*<rva 0xcb1558>*/ /*|0x20|*/ class NTempest::C2Vector m_texv[4];
  static /*<rva 0x4a4a00>*/ /*|0x8|*/ unsigned short m_idx[4];
  static /*<rva 0xcb1554>*/ /*|0x4|*/ int m_masterEnable;

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_enabled;
  /*<thisrel this+0x8>*/ /*|0xc|*/ class NTempest::C3Vector m_pos;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class NTempest::CImVector m_color;
  /*<thisrel this+0x18>*/ /*|0x4|*/ struct HTEXTURE__* m_texid;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_baseScale;
  /*<thisrel this+0x20>*/ /*|0x4|*/ float m_curScale;
  /*<thisrel this+0x24>*/ /*|0x4|*/ float m_fadeRate;
  /*<thisrel this+0x28>*/ /*|0x4|*/ float m_opacity;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ float m_targetOpacity;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall GlareBase(class GlareBase&);
  void __thiscall GlareBase();
  class GlareBase& __thiscall operator=(class GlareBase&);
  void __thiscall ~GlareBase();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void __thiscall Update(float) = 0;
  virtual /*<vtableoff 0x4>*/ void __thiscall Render() = 0;
  virtual /*<vtableoff 0x8>*/ int __thiscall IsVisible() = 0;
};
// <size 0x30>

class CSimpleDoodadMat {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x10|*/ unsigned int texture[4];
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int nTextures;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int props;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CSimpleDoodadMat();

  // virtual functions ------------------------------
};
// <size 0x18>

class CBoundingBox {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class NTempest::CRange x;
  /*<thisrel this+0x8>*/ /*|0x8|*/ class NTempest::CRange y;
  /*<thisrel this+0x10>*/ /*|0x8|*/ class NTempest::CRange z;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CBoundingBox();
  void __thiscall ~CBoundingBox();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class CGDynamicObject {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGDynamicObjectData* m_dynamicObj;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned char* __thiscall GetData(unsigned int);
  enum DYNAMIC_OBJECT_TYPE __thiscall GetDynamicType();
  void __thiscall SetStorage(unsigned long*);
  int __thiscall GetSpellID();
  float __thiscall GetRadius();
  void __thiscall GetObjectPosition(class NTempest::C3Vector&);
  class NTempest::C3Vector __thiscall GetObjectPosition();
  float __thiscall GetObjectFacing();
  unsigned __int64 __thiscall GetCaster();
  void __thiscall CGDynamicObject(unsigned long*);
  void __thiscall ~CGDynamicObject();
  struct CGDynamicObjectData* __thiscall DynamicObject();
  struct CGDynamicObjectData* __thiscall DynamicObject();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CGCorpse {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CGCorpseData* m_corpse;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall GetDataSize();
  static unsigned int __fastcall GetBaseOffset();
  static unsigned int __fastcall TotalFields();
  static unsigned int __fastcall GetUpdateMaskBytes();
  static unsigned int __fastcall GetUpdateMaskBlocks();

  // non-virtual functions --------------------------
  unsigned __int64 __thiscall GetOwner();
  unsigned int __thiscall GetDisplayID();
  unsigned int __thiscall GetItemDisplayID(unsigned int);
  unsigned int __thiscall GetItemInventoryType(unsigned int);
  unsigned char __thiscall GetRaceID();
  unsigned char __thiscall GetSex();
  unsigned char __thiscall GetSkinID();
  unsigned char __thiscall GetFaceID();
  unsigned char __thiscall GetHairStyleID();
  unsigned char __thiscall GetHairColorID();
  unsigned char __thiscall GetFacialHairStyleID();
  void __thiscall GetCorpsePosition(class NTempest::C3Vector&);
  class NTempest::C3Vector __thiscall GetCorpsePosition();
  float __thiscall GetCorpseFacing();
  unsigned char* __thiscall GetData(unsigned int);
  void __thiscall SetStorage(unsigned long*);
  void __thiscall CGCorpse(unsigned long*);
  void __thiscall ~CGCorpse();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class TObjectAllocMemHandle {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int memHandle;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int __thiscall GetMemHandle();
  void __thiscall SetMemHandle(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class CPlayerMoveQueue {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0xc|*/ class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> > m_events;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall Enqueue(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* __thiscall Root();
  void __thiscall Dequeue();
  unsigned char __thiscall HasEntries();
  void __thiscall DiscardAll();
  void __thiscall CPlayerMoveQueue(class CPlayerMoveQueue&);
  void __thiscall CPlayerMoveQueue();
  class CPlayerMoveQueue& __thiscall operator=(class CPlayerMoveQueue&);
  void __thiscall ~CPlayerMoveQueue();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class HASHKEY_LONGLONG { // +

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ __int64 m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall HASHKEY_LONGLONG(class HASHKEY_LONGLONG&);
  void __thiscall HASHKEY_LONGLONG(__int64);
  void __thiscall HASHKEY_LONGLONG();
  void __thiscall HASHKEY_LONGLONG(int);
  class HASHKEY_LONGLONG& __thiscall operator=(class HASHKEY_LONGLONG&);
  int __thiscall operator==(class HASHKEY_LONGLONG&);
  __int64 __thiscall GetLongLong();

  // virtual functions ------------------------------
};
// <size 0x8>

class CHashKeyFilePath {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x104|*/ char path[260];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall CHashKeyFilePath(class CHashKeyFilePath&);
  void __thiscall CHashKeyFilePath(char*);
  void __thiscall CHashKeyFilePath();
  class CHashKeyFilePath& __thiscall operator=(class CHashKeyFilePath&);
  class CHashKeyFilePath& __thiscall operator=(char*);
  unsigned char __thiscall operator==(char*);
  unsigned char __thiscall operator==(class CHashKeyFilePath&);

  // virtual functions ------------------------------
};
// <size 0x104>

class EvtTimerQueue : class TSPriorityQueue<EvtTimer>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSPriorityQueue<EvtTimer>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall EvtTimerQueue(class EvtTimerQueue&);
  void __thiscall EvtTimerQueue();
  class EvtTimerQueue& __thiscall operator=(class EvtTimerQueue&);
  void __thiscall ~EvtTimerQueue();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class EvtContextQueue : class TSPriorityQueue<EvtContext>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSPriorityQueue<EvtContext>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void __thiscall EvtContextQueue(class EvtContextQueue&);
  void __thiscall EvtContextQueue();
  class EvtContextQueue& __thiscall operator=(class EvtContextQueue&);
  void __thiscall ~EvtContextQueue();
  void* __thiscall __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

