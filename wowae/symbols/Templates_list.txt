//
// Templates
/////////////////////////////////////////////////

{ // TSLink ( wowae)

class TSLink<CILayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CILayer>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CILayer* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CILayer>&);
  class TSLink<CILayer>* NextLink(int);
  void TSLink<CILayer>(class TSLink<CILayer>&);
  void TSLink<CILayer>();
  void ~TSLink<CILayer>();
  class TSLink<CILayer>& operator=(class TSLink<CILayer>&);
  int IsLinked();
  class CILayer* Next();
  class CILayer* Next();
  class CILayer* Prev();
  class CILayer* Prev();
  class CILayer* RawNext();
  class CILayer* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxTexCache> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxTexCache>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGxTexCache* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxTexCache>&);
  class TSLink<CGxTexCache>* NextLink(int);
  void TSLink<CGxTexCache>(class TSLink<CGxTexCache>&);
  void TSLink<CGxTexCache>();
  void ~TSLink<CGxTexCache>();
  class TSLink<CGxTexCache>& operator=(class TSLink<CGxTexCache>&);
  int IsLinked();
  class CGxTexCache* Next();
  class CGxTexCache* Next();
  class CGxTexCache* Prev();
  class CGxTexCache* Prev();
  class CGxTexCache* RawNext();
  class CGxTexCache* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CTexture> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CTexture>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CTexture* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CTexture>&);
  class TSLink<CTexture>* NextLink(int);
  void TSLink<CTexture>(class TSLink<CTexture>&);
  void TSLink<CTexture>();
  void ~TSLink<CTexture>();
  class TSLink<CTexture>& operator=(class TSLink<CTexture>&);
  int IsLinked();
  class CTexture* Next();
  class CTexture* Next();
  class CTexture* Prev();
  class CTexture* Prev();
  class CTexture* RawNext();
  class CTexture* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PERSISTENTUNITEFFECT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PERSISTENTUNITEFFECT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class PERSISTENTUNITEFFECT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PERSISTENTUNITEFFECT>&);
  class TSLink<PERSISTENTUNITEFFECT>* NextLink(int);
  void TSLink<PERSISTENTUNITEFFECT>(class TSLink<PERSISTENTUNITEFFECT>&);
  void TSLink<PERSISTENTUNITEFFECT>();
  void ~TSLink<PERSISTENTUNITEFFECT>();
  class TSLink<PERSISTENTUNITEFFECT>& operator=(class TSLink<PERSISTENTUNITEFFECT>&);
  int IsLinked();
  class PERSISTENTUNITEFFECT* Next();
  class PERSISTENTUNITEFFECT* Next();
  class PERSISTENTUNITEFFECT* Prev();
  class PERSISTENTUNITEFFECT* Prev();
  class PERSISTENTUNITEFFECT* RawNext();
  class PERSISTENTUNITEFFECT* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<NODEBASE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<NODEBASE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NODEBASE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<NODEBASE>&);
  class TSLink<NODEBASE>* NextLink(int);
  void TSLink<NODEBASE>(class TSLink<NODEBASE>&);
  void TSLink<NODEBASE>();
  void ~TSLink<NODEBASE>();
  class TSLink<NODEBASE>& operator=(class TSLink<NODEBASE>&);
  int IsLinked();
  class NODEBASE* Next();
  class NODEBASE* Next();
  class NODEBASE* Prev();
  class NODEBASE* Prev();
  class NODEBASE* RawNext();
  class NODEBASE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<HITSPRITE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<HITSPRITE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct HITSPRITE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<HITSPRITE>&);
  class TSLink<HITSPRITE>* NextLink(int);
  void TSLink<HITSPRITE>(class TSLink<HITSPRITE>&);
  void TSLink<HITSPRITE>();
  void ~TSLink<HITSPRITE>();
  class TSLink<HITSPRITE>& operator=(class TSLink<HITSPRITE>&);
  int IsLinked();
  struct HITSPRITE* Next();
  struct HITSPRITE* Next();
  struct HITSPRITE* Prev();
  struct HITSPRITE* Prev();
  struct HITSPRITE* RawNext();
  struct HITSPRITE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CDetailDoodadInst> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CDetailDoodadInst>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CDetailDoodadInst* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CDetailDoodadInst>&);
  class TSLink<CDetailDoodadInst>* NextLink(int);
  void TSLink<CDetailDoodadInst>(class TSLink<CDetailDoodadInst>&);
  void TSLink<CDetailDoodadInst>();
  void ~TSLink<CDetailDoodadInst>();
  class TSLink<CDetailDoodadInst>& operator=(class TSLink<CDetailDoodadInst>&);
  int IsLinked();
  class CDetailDoodadInst* Next();
  class CDetailDoodadInst* Next();
  class CDetailDoodadInst* Prev();
  class CDetailDoodadInst* Prev();
  class CDetailDoodadInst* RawNext();
  class CDetailDoodadInst* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapBaseObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapBaseObj>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapBaseObj* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapBaseObj>&);
  class TSLink<CMapBaseObj>* NextLink(int);
  void TSLink<CMapBaseObj>(class TSLink<CMapBaseObj>&);
  void TSLink<CMapBaseObj>();
  void ~TSLink<CMapBaseObj>();
  class TSLink<CMapBaseObj>& operator=(class TSLink<CMapBaseObj>&);
  int IsLinked();
  class CMapBaseObj* Next();
  class CMapBaseObj* Next();
  class CMapBaseObj* Prev();
  class CMapBaseObj* Prev();
  class CMapBaseObj* RawNext();
  class CMapBaseObj* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WTOBJECT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WTOBJECT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class WTOBJECT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WTOBJECT>&);
  class TSLink<WTOBJECT>* NextLink(int);
  void TSLink<WTOBJECT>(class TSLink<WTOBJECT>&);
  void TSLink<WTOBJECT>();
  void ~TSLink<WTOBJECT>();
  class TSLink<WTOBJECT>& operator=(class TSLink<WTOBJECT>&);
  int IsLinked();
  class WTOBJECT* Next();
  class WTOBJECT* Next();
  class WTOBJECT* Prev();
  class WTOBJECT* Prev();
  class WTOBJECT* RawNext();
  class WTOBJECT* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SPELLVISUALNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SPELLVISUALNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SPELLVISUALNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SPELLVISUALNODE>&);
  class TSLink<SPELLVISUALNODE>* NextLink(int);
  void TSLink<SPELLVISUALNODE>(class TSLink<SPELLVISUALNODE>&);
  void TSLink<SPELLVISUALNODE>();
  void ~TSLink<SPELLVISUALNODE>();
  class TSLink<SPELLVISUALNODE>& operator=(class TSLink<SPELLVISUALNODE>&);
  int IsLinked();
  struct SPELLVISUALNODE* Next();
  struct SPELLVISUALNODE* Next();
  struct SPELLVISUALNODE* Prev();
  struct SPELLVISUALNODE* Prev();
  struct SPELLVISUALNODE* RawNext();
  struct SPELLVISUALNODE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGGameObject_C> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGGameObject_C>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGGameObject_C* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGGameObject_C>&);
  class TSLink<CGGameObject_C>* NextLink(int);
  void TSLink<CGGameObject_C>(class TSLink<CGGameObject_C>&);
  void TSLink<CGGameObject_C>();
  void ~TSLink<CGGameObject_C>();
  class TSLink<CGGameObject_C>& operator=(class TSLink<CGGameObject_C>&);
  int IsLinked();
  class CGGameObject_C* Next();
  class CGGameObject_C* Next();
  class CGGameObject_C* Prev();
  class CGGameObject_C* Prev();
  class CGGameObject_C* RawNext();
  class CGGameObject_C* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CStatus::STATUSENTRY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CStatus::STATUSENTRY>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CStatus::STATUSENTRY* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CStatus::STATUSENTRY>&);
  class TSLink<CStatus::STATUSENTRY>* NextLink(int);
  void TSLink<CStatus::STATUSENTRY>(class TSLink<CStatus::STATUSENTRY>&);
  void TSLink<CStatus::STATUSENTRY>();
  void ~TSLink<CStatus::STATUSENTRY>();
  class TSLink<CStatus::STATUSENTRY>& operator=(class TSLink<CStatus::STATUSENTRY>&);
  int IsLinked();
  struct CStatus::STATUSENTRY* Next();
  struct CStatus::STATUSENTRY* Next();
  struct CStatus::STATUSENTRY* Prev();
  struct CStatus::STATUSENTRY* Prev();
  struct CStatus::STATUSENTRY* RawNext();
  struct CStatus::STATUSENTRY* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<LightningObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<LightningObject>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct LightningObject* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<LightningObject>&);
  class TSLink<LightningObject>* NextLink(int);
  void TSLink<LightningObject>(class TSLink<LightningObject>&);
  void TSLink<LightningObject>();
  void ~TSLink<LightningObject>();
  class TSLink<LightningObject>& operator=(class TSLink<LightningObject>&);
  int IsLinked();
  struct LightningObject* Next();
  struct LightningObject* Next();
  struct LightningObject* Prev();
  struct LightningObject* Prev();
  struct LightningObject* RawNext();
  struct LightningObject* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FishingLineObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FishingLineObject>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FishingLineObject* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FishingLineObject>&);
  class TSLink<FishingLineObject>* NextLink(int);
  void TSLink<FishingLineObject>(class TSLink<FishingLineObject>&);
  void TSLink<FishingLineObject>();
  void ~TSLink<FishingLineObject>();
  class TSLink<FishingLineObject>& operator=(class TSLink<FishingLineObject>&);
  int IsLinked();
  struct FishingLineObject* Next();
  struct FishingLineObject* Next();
  struct FishingLineObject* Prev();
  struct FishingLineObject* Prev();
  struct FishingLineObject* RawNext();
  struct FishingLineObject* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BlizzardObject::Shard> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BlizzardObject::Shard>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BlizzardObject::Shard* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<BlizzardObject::Shard>&);
  class TSLink<BlizzardObject::Shard>* NextLink(int);
  void TSLink<BlizzardObject::Shard>(class TSLink<BlizzardObject::Shard>&);
  void TSLink<BlizzardObject::Shard>();
  void ~TSLink<BlizzardObject::Shard>();
  class TSLink<BlizzardObject::Shard>& operator=(class TSLink<BlizzardObject::Shard>&);
  int IsLinked();
  struct BlizzardObject::Shard* Next();
  struct BlizzardObject::Shard* Next();
  struct BlizzardObject::Shard* Prev();
  struct BlizzardObject::Shard* Prev();
  struct BlizzardObject::Shard* RawNext();
  struct BlizzardObject::Shard* RawNext();
  void TSLink<BlizzardObject::Shard>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BlizzardObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BlizzardObject>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BlizzardObject* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<BlizzardObject>&);
  class TSLink<BlizzardObject>* NextLink(int);
  void TSLink<BlizzardObject>(class TSLink<BlizzardObject>&);
  void TSLink<BlizzardObject>();
  void ~TSLink<BlizzardObject>();
  class TSLink<BlizzardObject>& operator=(class TSLink<BlizzardObject>&);
  int IsLinked();
  struct BlizzardObject* Next();
  struct BlizzardObject* Next();
  struct BlizzardObject* Prev();
  struct BlizzardObject* Prev();
  struct BlizzardObject* RawNext();
  struct BlizzardObject* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ITEMCOOLDOWNHASHNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ITEMCOOLDOWNHASHNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ITEMCOOLDOWNHASHNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ITEMCOOLDOWNHASHNODE>&);
  class TSLink<ITEMCOOLDOWNHASHNODE>* TSLink<ITEMCOOLDOWNHASHNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ITEMCOOLDOWNHASHNODE>(class TSLink<ITEMCOOLDOWNHASHNODE>&);
  void TSLink<ITEMCOOLDOWNHASHNODE>();
  void ~TSLink<ITEMCOOLDOWNHASHNODE>();
  class TSLink<ITEMCOOLDOWNHASHNODE>& operator=(class TSLink<ITEMCOOLDOWNHASHNODE>&);
  int IsLinked();
  struct ITEMCOOLDOWNHASHNODE* Next();
  struct ITEMCOOLDOWNHASHNODE* Next();
  struct ITEMCOOLDOWNHASHNODE* Prev();
  struct ITEMCOOLDOWNHASHNODE* Prev();
  struct ITEMCOOLDOWNHASHNODE* RawNext();
  struct ITEMCOOLDOWNHASHNODE* RawNext();
  void TSLink<ITEMCOOLDOWNHASHNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SPELLHISTORY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SPELLHISTORY>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SPELLHISTORY* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SPELLHISTORY>&);
  class TSLink<SPELLHISTORY>* TSLink<SPELLHISTORY>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SPELLHISTORY>(class TSLink<SPELLHISTORY>&);
  void TSLink<SPELLHISTORY>();
  void ~TSLink<SPELLHISTORY>();
  class TSLink<SPELLHISTORY>& operator=(class TSLink<SPELLHISTORY>&);
  int IsLinked();
  struct SPELLHISTORY* Next();
  struct SPELLHISTORY* Next();
  struct SPELLHISTORY* Prev();
  struct SPELLHISTORY* Prev();
  struct SPELLHISTORY* RawNext();
  struct SPELLHISTORY* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SWING> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SWING>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SWING* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SWING>&);
  class TSLink<SWING>* TSLink<SWING>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SWING>(class TSLink<SWING>&);
  void TSLink<SWING>();
  void ~TSLink<SWING>();
  class TSLink<SWING>& operator=(class TSLink<SWING>&);
  int IsLinked();
  struct SWING* Next();
  struct SWING* Next();
  struct SWING* Prev();
  struct SWING* Prev();
  struct SWING* RawNext();
  struct SWING* RawNext();
  void TSLink<SWING>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PLAYERNAMEDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PLAYERNAMEDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class PLAYERNAMEDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PLAYERNAMEDESC>&);
  class TSLink<PLAYERNAMEDESC>* TSLink<PLAYERNAMEDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<PLAYERNAMEDESC>(class TSLink<PLAYERNAMEDESC>&);
  void TSLink<PLAYERNAMEDESC>();
  void ~TSLink<PLAYERNAMEDESC>();
  class TSLink<PLAYERNAMEDESC>& operator=(class TSLink<PLAYERNAMEDESC>&);
  int IsLinked();
  class PLAYERNAMEDESC* Next();
  class PLAYERNAMEDESC* Next();
  class PLAYERNAMEDESC* Prev();
  class PLAYERNAMEDESC* Prev();
  class PLAYERNAMEDESC* RawNext();
  class PLAYERNAMEDESC* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WORLDTEXTSTRING> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WORLDTEXTSTRING>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct WORLDTEXTSTRING* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WORLDTEXTSTRING>&);
  class TSLink<WORLDTEXTSTRING>* TSLink<WORLDTEXTSTRING>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WORLDTEXTSTRING>(class TSLink<WORLDTEXTSTRING>&);
  void TSLink<WORLDTEXTSTRING>();
  void ~TSLink<WORLDTEXTSTRING>();
  class TSLink<WORLDTEXTSTRING>& operator=(class TSLink<WORLDTEXTSTRING>&);
  int IsLinked();
  struct WORLDTEXTSTRING* Next();
  struct WORLDTEXTSTRING* Next();
  struct WORLDTEXTSTRING* Prev();
  struct WORLDTEXTSTRING* Prev();
  struct WORLDTEXTSTRING* RawNext();
  struct WORLDTEXTSTRING* RawNext();
  void TSLink<WORLDTEXTSTRING>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<MINIMAPMD5NAME> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<MINIMAPMD5NAME>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct MINIMAPMD5NAME* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<MINIMAPMD5NAME>&);
  class TSLink<MINIMAPMD5NAME>* TSLink<MINIMAPMD5NAME>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<MINIMAPMD5NAME>(class TSLink<MINIMAPMD5NAME>&);
  void TSLink<MINIMAPMD5NAME>();
  void ~TSLink<MINIMAPMD5NAME>();
  class TSLink<MINIMAPMD5NAME>& operator=(class TSLink<MINIMAPMD5NAME>&);
  int IsLinked();
  struct MINIMAPMD5NAME* Next();
  struct MINIMAPMD5NAME* Next();
  struct MINIMAPMD5NAME* Prev();
  struct MINIMAPMD5NAME* Prev();
  struct MINIMAPMD5NAME* RawNext();
  struct MINIMAPMD5NAME* RawNext();
  void TSLink<MINIMAPMD5NAME>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<AREAHASHOBJECT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<AREAHASHOBJECT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct AREAHASHOBJECT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<AREAHASHOBJECT>&);
  class TSLink<AREAHASHOBJECT>* TSLink<AREAHASHOBJECT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<AREAHASHOBJECT>(class TSLink<AREAHASHOBJECT>&);
  void TSLink<AREAHASHOBJECT>();
  void ~TSLink<AREAHASHOBJECT>();
  class TSLink<AREAHASHOBJECT>& operator=(class TSLink<AREAHASHOBJECT>&);
  int IsLinked();
  struct AREAHASHOBJECT* Next();
  struct AREAHASHOBJECT* Next();
  struct AREAHASHOBJECT* Prev();
  struct AREAHASHOBJECT* Prev();
  struct AREAHASHOBJECT* RawNext();
  struct AREAHASHOBJECT* RawNext();
  void TSLink<AREAHASHOBJECT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapEntity> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapEntity>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CMapEntity* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapEntity>&);
  class TSLink<CMapEntity>* TSLink<CMapEntity>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapEntity>(class TSLink<CMapEntity>&);
  void TSLink<CMapEntity>();
  void ~TSLink<CMapEntity>();
  class TSLink<CMapEntity>& operator=(class TSLink<CMapEntity>&);
  int IsLinked();
  struct CMapEntity* Next();
  struct CMapEntity* Next();
  struct CMapEntity* Prev();
  struct CMapEntity* Prev();
  struct CMapEntity* RawNext();
  struct CMapEntity* RawNext();
  void TSLink<CMapEntity>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapStaticEntity> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapStaticEntity>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapStaticEntity* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapStaticEntity>&);
  class TSLink<CMapStaticEntity>* TSLink<CMapStaticEntity>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapStaticEntity>(class TSLink<CMapStaticEntity>&);
  void TSLink<CMapStaticEntity>();
  void ~TSLink<CMapStaticEntity>();
  class TSLink<CMapStaticEntity>& operator=(class TSLink<CMapStaticEntity>&);
  int IsLinked();
  class CMapStaticEntity* Next();
  class CMapStaticEntity* Next();
  class CMapStaticEntity* Prev();
  class CMapStaticEntity* Prev();
  class CMapStaticEntity* RawNext();
  class CMapStaticEntity* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapObjDef> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapObjDef>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapObjDef* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapObjDef>&);
  class TSLink<CMapObjDef>* TSLink<CMapObjDef>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapObjDef>(class TSLink<CMapObjDef>&);
  void TSLink<CMapObjDef>();
  void ~TSLink<CMapObjDef>();
  class TSLink<CMapObjDef>& operator=(class TSLink<CMapObjDef>&);
  int IsLinked();
  class CMapObjDef* Next();
  class CMapObjDef* Next();
  class CMapObjDef* Prev();
  class CMapObjDef* Prev();
  class CMapObjDef* RawNext();
  class CMapObjDef* RawNext();
  void TSLink<CMapObjDef>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapAreaLow> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapAreaLow>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapAreaLow* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapAreaLow>&);
  class TSLink<CMapAreaLow>* TSLink<CMapAreaLow>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapAreaLow>(class TSLink<CMapAreaLow>&);
  void TSLink<CMapAreaLow>();
  void ~TSLink<CMapAreaLow>();
  class TSLink<CMapAreaLow>& operator=(class TSLink<CMapAreaLow>&);
  int IsLinked();
  class CMapAreaLow* Next();
  class CMapAreaLow* Next();
  class CMapAreaLow* Prev();
  class CMapAreaLow* Prev();
  class CMapAreaLow* RawNext();
  class CMapAreaLow* RawNext();
  void TSLink<CMapAreaLow>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapChunk> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapChunk>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapChunk* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapChunk>&);
  class TSLink<CMapChunk>* TSLink<CMapChunk>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapChunk>(class TSLink<CMapChunk>&);
  void TSLink<CMapChunk>();
  void ~TSLink<CMapChunk>();
  class TSLink<CMapChunk>& operator=(class TSLink<CMapChunk>&);
  int IsLinked();
  class CMapChunk* Next();
  class CMapChunk* Next();
  class CMapChunk* Prev();
  class CMapChunk* Prev();
  class CMapChunk* RawNext();
  class CMapChunk* RawNext();
  void TSLink<CMapChunk>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CChunkLiquid> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CChunkLiquid>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CChunkLiquid* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CChunkLiquid>&);
  class TSLink<CChunkLiquid>* TSLink<CChunkLiquid>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CChunkLiquid>(class TSLink<CChunkLiquid>&);
  void TSLink<CChunkLiquid>();
  void ~TSLink<CChunkLiquid>();
  class TSLink<CChunkLiquid>& operator=(class TSLink<CChunkLiquid>&);
  int IsLinked();
  class CChunkLiquid* Next();
  class CChunkLiquid* Next();
  class CChunkLiquid* Prev();
  class CChunkLiquid* Prev();
  class CChunkLiquid* RawNext();
  class CChunkLiquid* RawNext();
  void TSLink<CChunkLiquid>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapObjDefGroup> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapObjDefGroup>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapObjDefGroup* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapObjDefGroup>&);
  class TSLink<CMapObjDefGroup>* TSLink<CMapObjDefGroup>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapObjDefGroup>(class TSLink<CMapObjDefGroup>&);
  void TSLink<CMapObjDefGroup>();
  void ~TSLink<CMapObjDefGroup>();
  class TSLink<CMapObjDefGroup>& operator=(class TSLink<CMapObjDefGroup>&);
  int IsLinked();
  class CMapObjDefGroup* Next();
  class CMapObjDefGroup* Next();
  class CMapObjDefGroup* Prev();
  class CMapObjDefGroup* Prev();
  class CMapObjDefGroup* RawNext();
  class CMapObjDefGroup* RawNext();
  void TSLink<CMapObjDefGroup>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapDoodadDef> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapDoodadDef>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapDoodadDef* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapDoodadDef>&);
  class TSLink<CMapDoodadDef>* TSLink<CMapDoodadDef>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapDoodadDef>(class TSLink<CMapDoodadDef>&);
  void TSLink<CMapDoodadDef>();
  void ~TSLink<CMapDoodadDef>();
  class TSLink<CMapDoodadDef>& operator=(class TSLink<CMapDoodadDef>&);
  int IsLinked();
  class CMapDoodadDef* Next();
  class CMapDoodadDef* Next();
  class CMapDoodadDef* Prev();
  class CMapDoodadDef* Prev();
  class CMapDoodadDef* RawNext();
  class CMapDoodadDef* RawNext();
  void TSLink<CMapDoodadDef>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapBaseObjLink> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapBaseObjLink>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapBaseObjLink* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapBaseObjLink>&);
  class TSLink<CMapBaseObjLink>* TSLink<CMapBaseObjLink>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapBaseObjLink>(class TSLink<CMapBaseObjLink>&);
  void TSLink<CMapBaseObjLink>();
  void ~TSLink<CMapBaseObjLink>();
  class TSLink<CMapBaseObjLink>& operator=(class TSLink<CMapBaseObjLink>&);
  int IsLinked();
  class CMapBaseObjLink* Next();
  class CMapBaseObjLink* Next();
  class CMapBaseObjLink* Prev();
  class CMapBaseObjLink* Prev();
  class CMapBaseObjLink* RawNext();
  class CMapBaseObjLink* RawNext();
  void TSLink<CMapBaseObjLink>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WaterRadWave> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WaterRadWave>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct WaterRadWave* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WaterRadWave>&);
  class TSLink<WaterRadWave>* TSLink<WaterRadWave>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WaterRadWave>(class TSLink<WaterRadWave>&);
  void TSLink<WaterRadWave>();
  void ~TSLink<WaterRadWave>();
  class TSLink<WaterRadWave>& operator=(class TSLink<WaterRadWave>&);
  int IsLinked();
  struct WaterRadWave* Next();
  struct WaterRadWave* Next();
  struct WaterRadWave* Prev();
  struct WaterRadWave* Prev();
  struct WaterRadWave* RawNext();
  struct WaterRadWave* RawNext();
  void TSLink<WaterRadWave>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapArea> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapArea>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapArea* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapArea>&);
  class TSLink<CMapArea>* TSLink<CMapArea>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapArea>(class TSLink<CMapArea>&);
  void TSLink<CMapArea>();
  void ~TSLink<CMapArea>();
  class TSLink<CMapArea>& operator=(class TSLink<CMapArea>&);
  int IsLinked();
  class CMapArea* Next();
  class CMapArea* Next();
  class CMapArea* Prev();
  class CMapArea* Prev();
  class CMapArea* RawNext();
  class CMapArea* RawNext();
  void TSLink<CMapArea>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapLight> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapLight>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapLight* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapLight>&);
  class TSLink<CMapLight>* TSLink<CMapLight>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapLight>(class TSLink<CMapLight>&);
  void TSLink<CMapLight>();
  void ~TSLink<CMapLight>();
  class TSLink<CMapLight>& operator=(class TSLink<CMapLight>&);
  int IsLinked();
  class CMapLight* Next();
  class CMapLight* Next();
  class CMapLight* Prev();
  class CMapLight* Prev();
  class CMapLight* RawNext();
  class CMapLight* RawNext();
  void TSLink<CMapLight>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CChunkTex> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CChunkTex>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CChunkTex* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CChunkTex>&);
  class TSLink<CChunkTex>* TSLink<CChunkTex>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CChunkTex>(class TSLink<CChunkTex>&);
  void TSLink<CChunkTex>();
  void ~TSLink<CChunkTex>();
  class TSLink<CChunkTex>& operator=(class TSLink<CChunkTex>&);
  int IsLinked();
  struct CChunkTex* Next();
  struct CChunkTex* Next();
  struct CChunkTex* Prev();
  struct CChunkTex* Prev();
  struct CChunkTex* RawNext();
  struct CChunkTex* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CChunkLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CChunkLayer>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CChunkLayer* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CChunkLayer>&);
  class TSLink<CChunkLayer>* TSLink<CChunkLayer>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CChunkLayer>(class TSLink<CChunkLayer>&);
  void TSLink<CChunkLayer>();
  void ~TSLink<CChunkLayer>();
  class TSLink<CChunkLayer>& operator=(class TSLink<CChunkLayer>&);
  int IsLinked();
  struct CChunkLayer* Next();
  struct CChunkLayer* Next();
  struct CChunkLayer* Prev();
  struct CChunkLayer* Prev();
  struct CChunkLayer* RawNext();
  struct CChunkLayer* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapObjGroup> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapObjGroup>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapObjGroup* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapObjGroup>&);
  class TSLink<CMapObjGroup>* NextLink(int);
  void TSLink<CMapObjGroup>(class TSLink<CMapObjGroup>&);
  void TSLink<CMapObjGroup>();
  void ~TSLink<CMapObjGroup>();
  class TSLink<CMapObjGroup>& operator=(class TSLink<CMapObjGroup>&);
  int IsLinked();
  class CMapObjGroup* Next();
  class CMapObjGroup* Next();
  class CMapObjGroup* Prev();
  class CMapObjGroup* Prev();
  class CMapObjGroup* RawNext();
  class CMapObjGroup* RawNext();
  void TSLink<CMapObjGroup>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapObj>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapObj* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapObj>&);
  class TSLink<CMapObj>* TSLink<CMapObj>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapObj>(class TSLink<CMapObj>&);
  void TSLink<CMapObj>();
  void ~TSLink<CMapObj>();
  class TSLink<CMapObj>& operator=(class TSLink<CMapObj>&);
  int IsLinked();
  class CMapObj* Next();
  class CMapObj* Next();
  class CMapObj* Prev();
  class CMapObj* Prev();
  class CMapObj* RawNext();
  class CMapObj* RawNext();
  void TSLink<CMapObj>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapSoundEmitter> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapSoundEmitter>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapSoundEmitter* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapSoundEmitter>&);
  class TSLink<CMapSoundEmitter>* NextLink(int);
  void TSLink<CMapSoundEmitter>(class TSLink<CMapSoundEmitter>&);
  void TSLink<CMapSoundEmitter>();
  void ~TSLink<CMapSoundEmitter>();
  class TSLink<CMapSoundEmitter>& operator=(class TSLink<CMapSoundEmitter>&);
  int IsLinked();
  class CMapSoundEmitter* Next();
  class CMapSoundEmitter* Next();
  class CMapSoundEmitter* Prev();
  class CMapSoundEmitter* Prev();
  class CMapSoundEmitter* RawNext();
  class CMapSoundEmitter* RawNext();
  void TSLink<CMapSoundEmitter>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CDetailDoodadGeom> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CDetailDoodadGeom>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CDetailDoodadGeom* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CDetailDoodadGeom>&);
  class TSLink<CDetailDoodadGeom>* NextLink(int);
  void TSLink<CDetailDoodadGeom>(class TSLink<CDetailDoodadGeom>&);
  void TSLink<CDetailDoodadGeom>();
  void ~TSLink<CDetailDoodadGeom>();
  class TSLink<CDetailDoodadGeom>& operator=(class TSLink<CDetailDoodadGeom>&);
  int IsLinked();
  class CDetailDoodadGeom* Next();
  class CDetailDoodadGeom* Next();
  class CDetailDoodadGeom* Prev();
  class CDetailDoodadGeom* Prev();
  class CDetailDoodadGeom* RawNext();
  class CDetailDoodadGeom* RawNext();
  void TSLink<CDetailDoodadGeom>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMapCacheLight> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMapCacheLight>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMapCacheLight* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMapCacheLight>&);
  class TSLink<CMapCacheLight>* TSLink<CMapCacheLight>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMapCacheLight>(class TSLink<CMapCacheLight>&);
  void TSLink<CMapCacheLight>();
  void ~TSLink<CMapCacheLight>();
  class TSLink<CMapCacheLight>& operator=(class TSLink<CMapCacheLight>&);
  int IsLinked();
  class CMapCacheLight* Next();
  class CMapCacheLight* Next();
  class CMapCacheLight* Prev();
  class CMapCacheLight* Prev();
  class CMapCacheLight* RawNext();
  class CMapCacheLight* RawNext();
  void TSLink<CMapCacheLight>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CSimpleDoodad> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CSimpleDoodad>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CSimpleDoodad* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CSimpleDoodad>&);
  class TSLink<CSimpleDoodad>* TSLink<CSimpleDoodad>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CSimpleDoodad>(class TSLink<CSimpleDoodad>&);
  void TSLink<CSimpleDoodad>();
  void ~TSLink<CSimpleDoodad>();
  class TSLink<CSimpleDoodad>& operator=(class TSLink<CSimpleDoodad>&);
  int IsLinked();
  struct CSimpleDoodad* Next();
  struct CSimpleDoodad* Next();
  struct CSimpleDoodad* Prev();
  struct CSimpleDoodad* Prev();
  struct CSimpleDoodad* RawNext();
  struct CSimpleDoodad* RawNext();
  void TSLink<CSimpleDoodad>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<HANDLER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<HANDLER>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct HANDLER* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<HANDLER>::Constructor();
  void CopyConstructor(class TSLink<HANDLER>&);
  class TSLink<HANDLER>* TSLink<HANDLER>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<HANDLER>(class TSLink<HANDLER>&);
  void TSLink<HANDLER>::TSLink<HANDLER>();
  void TSLink<HANDLER>::~TSLink<HANDLER>();
  class TSLink<HANDLER>& operator=(class TSLink<HANDLER>&);
  int IsLinked();
  struct HANDLER* Next();
  struct HANDLER* TSLink<HANDLER>::Next();
  struct HANDLER* Prev();
  struct HANDLER* Prev();
  struct HANDLER* RawNext();
  struct HANDLER* TSLink<HANDLER>::RawNext();
  void TSLink<HANDLER>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FILEMAP> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FILEMAP>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FILEMAP* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<FILEMAP>::Constructor();
  void CopyConstructor(class TSLink<FILEMAP>&);
  class TSLink<FILEMAP>* TSLink<FILEMAP>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FILEMAP>(class TSLink<FILEMAP>&);
  void TSLink<FILEMAP>::TSLink<FILEMAP>();
  void TSLink<FILEMAP>::~TSLink<FILEMAP>();
  class TSLink<FILEMAP>& operator=(class TSLink<FILEMAP>&);
  int IsLinked();
  struct FILEMAP* Next();
  struct FILEMAP* TSLink<FILEMAP>::Next();
  struct FILEMAP* Prev();
  struct FILEMAP* Prev();
  struct FILEMAP* RawNext();
  struct FILEMAP* TSLink<FILEMAP>::RawNext();
  void TSLink<FILEMAP>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ASYNCREAD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ASYNCREAD>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class ASYNCREAD* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<ASYNCREAD>::Constructor();
  void CopyConstructor(class TSLink<ASYNCREAD>&);
  class TSLink<ASYNCREAD>* TSLink<ASYNCREAD>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ASYNCREAD>(class TSLink<ASYNCREAD>&);
  void TSLink<ASYNCREAD>::TSLink<ASYNCREAD>();
  void TSLink<ASYNCREAD>::~TSLink<ASYNCREAD>();
  class TSLink<ASYNCREAD>& operator=(class TSLink<ASYNCREAD>&);
  int IsLinked();
  class ASYNCREAD* Next();
  class ASYNCREAD* TSLink<ASYNCREAD>::Next();
  class ASYNCREAD* Prev();
  class ASYNCREAD* Prev();
  class ASYNCREAD* RawNext();
  class ASYNCREAD* RawNext();
  void TSLink<ASYNCREAD>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMDDEF> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMDDEF>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CMDDEF* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<CMDDEF>::Constructor();
  void CopyConstructor(class TSLink<CMDDEF>&);
  class TSLink<CMDDEF>* TSLink<CMDDEF>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMDDEF>(class TSLink<CMDDEF>&);
  void TSLink<CMDDEF>::TSLink<CMDDEF>();
  void TSLink<CMDDEF>::~TSLink<CMDDEF>();
  class TSLink<CMDDEF>& operator=(class TSLink<CMDDEF>&);
  int IsLinked();
  struct CMDDEF* Next();
  struct CMDDEF* TSLink<CMDDEF>::Next();
  struct CMDDEF* Prev();
  struct CMDDEF* Prev();
  struct CMDDEF* RawNext();
  struct CMDDEF* TSLink<CMDDEF>::RawNext();
  void TSLink<CMDDEF>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<RGN,HASHKEY_NONE>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >&);
  class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >* TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >(class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >&);
  void TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >();
  void TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::~TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >();
  class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >& operator=(class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >&);
  int IsLinked();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::Next();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* RawNext();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* RawNext();
  void TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<RGN> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<RGN>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct RGN* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<RGN>::Constructor();
  void CopyConstructor(class TSLink<RGN>&);
  class TSLink<RGN>* TSLink<RGN>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<RGN>(class TSLink<RGN>&);
  void TSLink<RGN>::TSLink<RGN>();
  void TSLink<RGN>::~TSLink<RGN>();
  class TSLink<RGN>& operator=(class TSLink<RGN>&);
  int TSLink<RGN>::IsLinked();
  struct RGN* Next();
  struct RGN* TSLink<RGN>::Next();
  struct RGN* Prev();
  struct RGN* Prev();
  struct RGN* RawNext();
  struct RGN* TSLink<RGN>::RawNext();
  void TSLink<RGN>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<HUFFNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<HUFFNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct HUFFNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<HUFFNODE>::Constructor();
  void CopyConstructor(class TSLink<HUFFNODE>&);
  class TSLink<HUFFNODE>* TSLink<HUFFNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<HUFFNODE>(class TSLink<HUFFNODE>&);
  void TSLink<HUFFNODE>::TSLink<HUFFNODE>();
  void TSLink<HUFFNODE>::~TSLink<HUFFNODE>();
  class TSLink<HUFFNODE>& operator=(class TSLink<HUFFNODE>&);
  int IsLinked();
  struct HUFFNODE* Next();
  struct HUFFNODE* TSLink<HUFFNODE>::Next();
  struct HUFFNODE* Prev();
  struct HUFFNODE* TSLink<HUFFNODE>::Prev();
  struct HUFFNODE* RawNext();
  struct HUFFNODE* TSLink<HUFFNODE>::RawNext();
  void TSLink<HUFFNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WNDREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WNDREC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct WNDREC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<WNDREC>::Constructor();
  void CopyConstructor(class TSLink<WNDREC>&);
  class TSLink<WNDREC>* TSLink<WNDREC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WNDREC>(class TSLink<WNDREC>&);
  void TSLink<WNDREC>::TSLink<WNDREC>();
  void TSLink<WNDREC>::~TSLink<WNDREC>();
  class TSLink<WNDREC>& operator=(class TSLink<WNDREC>&);
  int IsLinked();
  struct WNDREC* TSLink<WNDREC>::Next();
  struct WNDREC* TSLink<WNDREC>::Next();
  struct WNDREC* Prev();
  struct WNDREC* Prev();
  struct WNDREC* RawNext();
  struct WNDREC* TSLink<WNDREC>::RawNext();
  void TSLink<WNDREC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<Storm::SFile::FILEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<Storm::SFile::FILEREC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<Storm::SFile::FILEREC>::Constructor();
  void CopyConstructor(class TSLink<Storm::SFile::FILEREC>&);
  class TSLink<Storm::SFile::FILEREC>* TSLink<Storm::SFile::FILEREC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<Storm::SFile::FILEREC>(class TSLink<Storm::SFile::FILEREC>&);
  void TSLink<Storm::SFile::FILEREC>::TSLink<Storm::SFile::FILEREC>();
  void TSLink<Storm::SFile::FILEREC>::~TSLink<Storm::SFile::FILEREC>();
  class TSLink<Storm::SFile::FILEREC>& operator=(class TSLink<Storm::SFile::FILEREC>&);
  int IsLinked();
  struct Storm::SFile::FILEREC* Next();
  struct Storm::SFile::FILEREC* TSLink<Storm::SFile::FILEREC>::Next();
  struct Storm::SFile::FILEREC* Prev();
  struct Storm::SFile::FILEREC* Prev();
  struct Storm::SFile::FILEREC* RawNext();
  struct Storm::SFile::FILEREC* TSLink<Storm::SFile::FILEREC>::RawNext();
  void TSLink<Storm::SFile::FILEREC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<Storm::SFile::ARCHIVEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<Storm::SFile::ARCHIVEREC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<Storm::SFile::ARCHIVEREC>::Constructor();
  void CopyConstructor(class TSLink<Storm::SFile::ARCHIVEREC>&);
  class TSLink<Storm::SFile::ARCHIVEREC>* TSLink<Storm::SFile::ARCHIVEREC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<Storm::SFile::ARCHIVEREC>(class TSLink<Storm::SFile::ARCHIVEREC>&);
  void TSLink<Storm::SFile::ARCHIVEREC>::TSLink<Storm::SFile::ARCHIVEREC>();
  void TSLink<Storm::SFile::ARCHIVEREC>::~TSLink<Storm::SFile::ARCHIVEREC>();
  class TSLink<Storm::SFile::ARCHIVEREC>& operator=(class TSLink<Storm::SFile::ARCHIVEREC>&);
  int IsLinked();
  struct Storm::SFile::ARCHIVEREC* TSLink<Storm::SFile::ARCHIVEREC>::Next();
  struct Storm::SFile::ARCHIVEREC* TSLink<Storm::SFile::ARCHIVEREC>::Next();
  struct Storm::SFile::ARCHIVEREC* Prev();
  struct Storm::SFile::ARCHIVEREC* Prev();
  struct Storm::SFile::ARCHIVEREC* RawNext();
  struct Storm::SFile::ARCHIVEREC* TSLink<Storm::SFile::ARCHIVEREC>::RawNext();
  void TSLink<Storm::SFile::ARCHIVEREC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<Storm::SFile::AUDIOSTREAM> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<Storm::SFile::AUDIOSTREAM>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<Storm::SFile::AUDIOSTREAM>::Constructor();
  void CopyConstructor(class TSLink<Storm::SFile::AUDIOSTREAM>&);
  class TSLink<Storm::SFile::AUDIOSTREAM>* TSLink<Storm::SFile::AUDIOSTREAM>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<Storm::SFile::AUDIOSTREAM>(class TSLink<Storm::SFile::AUDIOSTREAM>&);
  void TSLink<Storm::SFile::AUDIOSTREAM>::TSLink<Storm::SFile::AUDIOSTREAM>();
  void TSLink<Storm::SFile::AUDIOSTREAM>::~TSLink<Storm::SFile::AUDIOSTREAM>();
  class TSLink<Storm::SFile::AUDIOSTREAM>& operator=(class TSLink<Storm::SFile::AUDIOSTREAM>&);
  int IsLinked();
  struct Storm::SFile::AUDIOSTREAM* TSLink<Storm::SFile::AUDIOSTREAM>::Next();
  struct Storm::SFile::AUDIOSTREAM* TSLink<Storm::SFile::AUDIOSTREAM>::Next();
  struct Storm::SFile::AUDIOSTREAM* Prev();
  struct Storm::SFile::AUDIOSTREAM* Prev();
  struct Storm::SFile::AUDIOSTREAM* RawNext();
  struct Storm::SFile::AUDIOSTREAM* TSLink<Storm::SFile::AUDIOSTREAM>::RawNext();
  void TSLink<Storm::SFile::AUDIOSTREAM>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EVENTREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EVENTREC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EVENTREC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<EVENTREC>::Constructor();
  void CopyConstructor(class TSLink<EVENTREC>&);
  class TSLink<EVENTREC>* TSLink<EVENTREC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EVENTREC>(class TSLink<EVENTREC>&);
  void TSLink<EVENTREC>::TSLink<EVENTREC>();
  void TSLink<EVENTREC>::~TSLink<EVENTREC>();
  class TSLink<EVENTREC>& operator=(class TSLink<EVENTREC>&);
  int IsLinked();
  struct EVENTREC* Next();
  struct EVENTREC* TSLink<EVENTREC>::Next();
  struct EVENTREC* Prev();
  struct EVENTREC* Prev();
  struct EVENTREC* RawNext();
  struct EVENTREC* RawNext();
  void TSLink<EVENTREC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<REQUEST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<REQUEST>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct REQUEST* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<REQUEST>::Constructor();
  void CopyConstructor(class TSLink<REQUEST>&);
  class TSLink<REQUEST>* TSLink<REQUEST>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<REQUEST>(class TSLink<REQUEST>&);
  void TSLink<REQUEST>::TSLink<REQUEST>();
  void TSLink<REQUEST>::~TSLink<REQUEST>();
  class TSLink<REQUEST>& operator=(class TSLink<REQUEST>&);
  int IsLinked();
  struct REQUEST* TSLink<REQUEST>::Next();
  struct REQUEST* TSLink<REQUEST>::Next();
  struct REQUEST* Prev();
  struct REQUEST* TSLink<REQUEST>::Prev();
  struct REQUEST* RawNext();
  struct REQUEST* TSLink<REQUEST>::RawNext();
  void TSLink<REQUEST>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BREAKCMD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BREAKCMD>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BREAKCMD* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<BREAKCMD>::Constructor();
  void CopyConstructor(class TSLink<BREAKCMD>&);
  class TSLink<BREAKCMD>* TSLink<BREAKCMD>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<BREAKCMD>(class TSLink<BREAKCMD>&);
  void TSLink<BREAKCMD>::TSLink<BREAKCMD>();
  void TSLink<BREAKCMD>::~TSLink<BREAKCMD>();
  class TSLink<BREAKCMD>& operator=(class TSLink<BREAKCMD>&);
  int IsLinked();
  struct BREAKCMD* Next();
  struct BREAKCMD* TSLink<BREAKCMD>::Next();
  struct BREAKCMD* Prev();
  struct BREAKCMD* Prev();
  struct BREAKCMD* RawNext();
  struct BREAKCMD* TSLink<BREAKCMD>::RawNext();
  void TSLink<BREAKCMD>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ZipFileDirEntry> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ZipFileDirEntry>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ZipFileDirEntry* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<ZipFileDirEntry>::Constructor();
  void CopyConstructor(class TSLink<ZipFileDirEntry>&);
  class TSLink<ZipFileDirEntry>* TSLink<ZipFileDirEntry>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ZipFileDirEntry>(class TSLink<ZipFileDirEntry>&);
  void TSLink<ZipFileDirEntry>::TSLink<ZipFileDirEntry>();
  void TSLink<ZipFileDirEntry>::~TSLink<ZipFileDirEntry>();
  class TSLink<ZipFileDirEntry>& operator=(class TSLink<ZipFileDirEntry>&);
  int TSLink<ZipFileDirEntry>::IsLinked();
  struct ZipFileDirEntry* Next();
  struct ZipFileDirEntry* TSLink<ZipFileDirEntry>::Next();
  struct ZipFileDirEntry* Prev();
  struct ZipFileDirEntry* Prev();
  struct ZipFileDirEntry* RawNext();
  struct ZipFileDirEntry* TSLink<ZipFileDirEntry>::RawNext();
  void TSLink<ZipFileDirEntry>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ZipFileArchive> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ZipFileArchive>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ZipFileArchive* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLink<ZipFileArchive>::Constructor();
  void CopyConstructor(class TSLink<ZipFileArchive>&);
  class TSLink<ZipFileArchive>* TSLink<ZipFileArchive>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ZipFileArchive>(class TSLink<ZipFileArchive>&);
  void TSLink<ZipFileArchive>::TSLink<ZipFileArchive>();
  void TSLink<ZipFileArchive>::~TSLink<ZipFileArchive>();
  class TSLink<ZipFileArchive>& operator=(class TSLink<ZipFileArchive>&);
  int IsLinked();
  struct ZipFileArchive* Next();
  struct ZipFileArchive* TSLink<ZipFileArchive>::Next();
  struct ZipFileArchive* Prev();
  struct ZipFileArchive* Prev();
  struct ZipFileArchive* RawNext();
  struct ZipFileArchive* RawNext();
  void TSLink<ZipFileArchive>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TIMESTAMPSTRUCT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TIMESTAMPSTRUCT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct TIMESTAMPSTRUCT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TIMESTAMPSTRUCT>&);
  class TSLink<TIMESTAMPSTRUCT>* TSLink<TIMESTAMPSTRUCT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TIMESTAMPSTRUCT>(class TSLink<TIMESTAMPSTRUCT>&);
  void TSLink<TIMESTAMPSTRUCT>();
  void ~TSLink<TIMESTAMPSTRUCT>();
  class TSLink<TIMESTAMPSTRUCT>& operator=(class TSLink<TIMESTAMPSTRUCT>&);
  int IsLinked();
  struct TIMESTAMPSTRUCT* Next();
  struct TIMESTAMPSTRUCT* Next();
  struct TIMESTAMPSTRUCT* Prev();
  struct TIMESTAMPSTRUCT* Prev();
  struct TIMESTAMPSTRUCT* RawNext();
  struct TIMESTAMPSTRUCT* RawNext();
  void TSLink<TIMESTAMPSTRUCT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<GAMETIMECBSTRUCT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<GAMETIMECBSTRUCT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct GAMETIMECBSTRUCT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<GAMETIMECBSTRUCT>&);
  class TSLink<GAMETIMECBSTRUCT>* NextLink(int);
  void TSLink<GAMETIMECBSTRUCT>(class TSLink<GAMETIMECBSTRUCT>&);
  void TSLink<GAMETIMECBSTRUCT>();
  void ~TSLink<GAMETIMECBSTRUCT>();
  class TSLink<GAMETIMECBSTRUCT>& operator=(class TSLink<GAMETIMECBSTRUCT>&);
  int IsLinked();
  struct GAMETIMECBSTRUCT* Next();
  struct GAMETIMECBSTRUCT* Next();
  struct GAMETIMECBSTRUCT* Prev();
  struct GAMETIMECBSTRUCT* Prev();
  struct GAMETIMECBSTRUCT* RawNext();
  struct GAMETIMECBSTRUCT* RawNext();
  void TSLink<GAMETIMECBSTRUCT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CONSOLELINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CONSOLELINE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CONSOLELINE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CONSOLELINE>&);
  class TSLink<CONSOLELINE>* TSLink<CONSOLELINE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CONSOLELINE>(class TSLink<CONSOLELINE>&);
  void TSLink<CONSOLELINE>();
  void ~TSLink<CONSOLELINE>();
  class TSLink<CONSOLELINE>& operator=(class TSLink<CONSOLELINE>&);
  int IsLinked();
  struct CONSOLELINE* Next();
  struct CONSOLELINE* Next();
  struct CONSOLELINE* Prev();
  struct CONSOLELINE* Prev();
  struct CONSOLELINE* RawNext();
  struct CONSOLELINE* RawNext();
  void TSLink<CONSOLELINE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CVar> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CVar>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CVar* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CVar>&);
  class TSLink<CVar>* TSLink<CVar>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CVar>(class TSLink<CVar>&);
  void TSLink<CVar>();
  void ~TSLink<CVar>();
  class TSLink<CVar>& operator=(class TSLink<CVar>&);
  int IsLinked();
  struct CVar* Next();
  struct CVar* Next();
  struct CVar* Prev();
  struct CVar* Prev();
  struct CVar* RawNext();
  struct CVar* RawNext();
  void TSLink<CVar>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CONSOLECOMMAND> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CONSOLECOMMAND>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CONSOLECOMMAND* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CONSOLECOMMAND>&);
  class TSLink<CONSOLECOMMAND>* TSLink<CONSOLECOMMAND>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CONSOLECOMMAND>(class TSLink<CONSOLECOMMAND>&);
  void TSLink<CONSOLECOMMAND>();
  void ~TSLink<CONSOLECOMMAND>();
  class TSLink<CONSOLECOMMAND>& operator=(class TSLink<CONSOLECOMMAND>&);
  int IsLinked();
  struct CONSOLECOMMAND* Next();
  struct CONSOLECOMMAND* Next();
  struct CONSOLECOMMAND* Prev();
  struct CONSOLECOMMAND* Prev();
  struct CONSOLECOMMAND* RawNext();
  struct CONSOLECOMMAND* RawNext();
  void TSLink<CONSOLECOMMAND>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<INVENTORYART> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<INVENTORYART>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct INVENTORYART* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<INVENTORYART>&);
  class TSLink<INVENTORYART>* TSLink<INVENTORYART>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<INVENTORYART>(class TSLink<INVENTORYART>&);
  void TSLink<INVENTORYART>();
  void ~TSLink<INVENTORYART>();
  class TSLink<INVENTORYART>& operator=(class TSLink<INVENTORYART>&);
  int IsLinked();
  struct INVENTORYART* Next();
  struct INVENTORYART* Next();
  struct INVENTORYART* Prev();
  struct INVENTORYART* Prev();
  struct INVENTORYART* RawNext();
  struct INVENTORYART* RawNext();
  void TSLink<INVENTORYART>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ITEMEXPIRATION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ITEMEXPIRATION>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ITEMEXPIRATION* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ITEMEXPIRATION>&);
  class TSLink<ITEMEXPIRATION>* TSLink<ITEMEXPIRATION>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ITEMEXPIRATION>(class TSLink<ITEMEXPIRATION>&);
  void TSLink<ITEMEXPIRATION>();
  void ~TSLink<ITEMEXPIRATION>();
  class TSLink<ITEMEXPIRATION>& operator=(class TSLink<ITEMEXPIRATION>&);
  int IsLinked();
  struct ITEMEXPIRATION* Next();
  struct ITEMEXPIRATION* Next();
  struct ITEMEXPIRATION* Prev();
  struct ITEMEXPIRATION* Prev();
  struct ITEMEXPIRATION* RawNext();
  struct ITEMEXPIRATION* RawNext();
  void TSLink<ITEMEXPIRATION>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TRADESKILLLINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TRADESKILLLINE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct TRADESKILLLINE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TRADESKILLLINE>&);
  class TSLink<TRADESKILLLINE>* TSLink<TRADESKILLLINE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TRADESKILLLINE>(class TSLink<TRADESKILLLINE>&);
  void TSLink<TRADESKILLLINE>();
  void ~TSLink<TRADESKILLLINE>();
  class TSLink<TRADESKILLLINE>& operator=(class TSLink<TRADESKILLLINE>&);
  int IsLinked();
  struct TRADESKILLLINE* Next();
  struct TRADESKILLLINE* Next();
  struct TRADESKILLLINE* Prev();
  struct TRADESKILLLINE* Prev();
  struct TRADESKILLLINE* RawNext();
  struct TRADESKILLLINE* RawNext();
  void TSLink<TRADESKILLLINE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DEFERREDSPELLMISS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DEFERREDSPELLMISS>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DEFERREDSPELLMISS* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DEFERREDSPELLMISS>&);
  class TSLink<DEFERREDSPELLMISS>* NextLink(int);
  void TSLink<DEFERREDSPELLMISS>(class TSLink<DEFERREDSPELLMISS>&);
  void TSLink<DEFERREDSPELLMISS>();
  void ~TSLink<DEFERREDSPELLMISS>();
  class TSLink<DEFERREDSPELLMISS>& operator=(class TSLink<DEFERREDSPELLMISS>&);
  int IsLinked();
  struct DEFERREDSPELLMISS* Next();
  struct DEFERREDSPELLMISS* Next();
  struct DEFERREDSPELLMISS* Prev();
  struct DEFERREDSPELLMISS* Prev();
  struct DEFERREDSPELLMISS* RawNext();
  struct DEFERREDSPELLMISS* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DEFERREDDAMAGE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DEFERREDDAMAGE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DEFERREDDAMAGE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DEFERREDDAMAGE>&);
  class TSLink<DEFERREDDAMAGE>* NextLink(int);
  void TSLink<DEFERREDDAMAGE>(class TSLink<DEFERREDDAMAGE>&);
  void TSLink<DEFERREDDAMAGE>();
  void ~TSLink<DEFERREDDAMAGE>();
  class TSLink<DEFERREDDAMAGE>& operator=(class TSLink<DEFERREDDAMAGE>&);
  int IsLinked();
  struct DEFERREDDAMAGE* Next();
  struct DEFERREDDAMAGE* Next();
  struct DEFERREDDAMAGE* Prev();
  struct DEFERREDDAMAGE* Prev();
  struct DEFERREDDAMAGE* RawNext();
  struct DEFERREDDAMAGE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ANIMQUEUENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ANIMQUEUENODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ANIMQUEUENODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ANIMQUEUENODE>&);
  class TSLink<ANIMQUEUENODE>* TSLink<ANIMQUEUENODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ANIMQUEUENODE>(class TSLink<ANIMQUEUENODE>&);
  void TSLink<ANIMQUEUENODE>();
  void ~TSLink<ANIMQUEUENODE>();
  class TSLink<ANIMQUEUENODE>& operator=(class TSLink<ANIMQUEUENODE>&);
  int IsLinked();
  struct ANIMQUEUENODE* Next();
  struct ANIMQUEUENODE* Next();
  struct ANIMQUEUENODE* Prev();
  struct ANIMQUEUENODE* Prev();
  struct ANIMQUEUENODE* RawNext();
  struct ANIMQUEUENODE* RawNext();
  void TSLink<ANIMQUEUENODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ACTIVEAURAINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ACTIVEAURAINFO>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ACTIVEAURAINFO* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ACTIVEAURAINFO>&);
  class TSLink<ACTIVEAURAINFO>* TSLink<ACTIVEAURAINFO>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ACTIVEAURAINFO>(class TSLink<ACTIVEAURAINFO>&);
  void TSLink<ACTIVEAURAINFO>();
  void ~TSLink<ACTIVEAURAINFO>();
  class TSLink<ACTIVEAURAINFO>& operator=(class TSLink<ACTIVEAURAINFO>&);
  int IsLinked();
  struct ACTIVEAURAINFO* Next();
  struct ACTIVEAURAINFO* Next();
  struct ACTIVEAURAINFO* Prev();
  struct ACTIVEAURAINFO* Prev();
  struct ACTIVEAURAINFO* RawNext();
  struct ACTIVEAURAINFO* RawNext();
  void TSLink<ACTIVEAURAINFO>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<IMPACTEFFECTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<IMPACTEFFECTDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct IMPACTEFFECTDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<IMPACTEFFECTDESC>&);
  class TSLink<IMPACTEFFECTDESC>* NextLink(int);
  void TSLink<IMPACTEFFECTDESC>(class TSLink<IMPACTEFFECTDESC>&);
  void TSLink<IMPACTEFFECTDESC>();
  void ~TSLink<IMPACTEFFECTDESC>();
  class TSLink<IMPACTEFFECTDESC>& operator=(class TSLink<IMPACTEFFECTDESC>&);
  int IsLinked();
  struct IMPACTEFFECTDESC* Next();
  struct IMPACTEFFECTDESC* Next();
  struct IMPACTEFFECTDESC* Prev();
  struct IMPACTEFFECTDESC* Prev();
  struct IMPACTEFFECTDESC* RawNext();
  struct IMPACTEFFECTDESC* RawNext();
  void TSLink<IMPACTEFFECTDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SPELLEFFECTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SPELLEFFECTDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SPELLEFFECTDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SPELLEFFECTDESC>&);
  class TSLink<SPELLEFFECTDESC>* TSLink<SPELLEFFECTDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SPELLEFFECTDESC>(class TSLink<SPELLEFFECTDESC>&);
  void TSLink<SPELLEFFECTDESC>();
  void ~TSLink<SPELLEFFECTDESC>();
  class TSLink<SPELLEFFECTDESC>& operator=(class TSLink<SPELLEFFECTDESC>&);
  int IsLinked();
  struct SPELLEFFECTDESC* Next();
  struct SPELLEFFECTDESC* Next();
  struct SPELLEFFECTDESC* Prev();
  struct SPELLEFFECTDESC* Prev();
  struct SPELLEFFECTDESC* RawNext();
  struct SPELLEFFECTDESC* RawNext();
  void TSLink<SPELLEFFECTDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<NAMEPLATEDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<NAMEPLATEDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct NAMEPLATEDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<NAMEPLATEDESC>&);
  class TSLink<NAMEPLATEDESC>* TSLink<NAMEPLATEDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<NAMEPLATEDESC>(class TSLink<NAMEPLATEDESC>&);
  void TSLink<NAMEPLATEDESC>();
  void ~TSLink<NAMEPLATEDESC>();
  class TSLink<NAMEPLATEDESC>& operator=(class TSLink<NAMEPLATEDESC>&);
  int IsLinked();
  struct NAMEPLATEDESC* Next();
  struct NAMEPLATEDESC* Next();
  struct NAMEPLATEDESC* Prev();
  struct NAMEPLATEDESC* Prev();
  struct NAMEPLATEDESC* RawNext();
  struct NAMEPLATEDESC* RawNext();
  void TSLink<NAMEPLATEDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<AuraDecayNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<AuraDecayNode>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct AuraDecayNode* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<AuraDecayNode>&);
  class TSLink<AuraDecayNode>* TSLink<AuraDecayNode>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<AuraDecayNode>(class TSLink<AuraDecayNode>&);
  void TSLink<AuraDecayNode>();
  void ~TSLink<AuraDecayNode>();
  class TSLink<AuraDecayNode>& operator=(class TSLink<AuraDecayNode>&);
  int IsLinked();
  struct AuraDecayNode* Next();
  struct AuraDecayNode* Next();
  struct AuraDecayNode* Prev();
  struct AuraDecayNode* Prev();
  struct AuraDecayNode* RawNext();
  struct AuraDecayNode* RawNext();
  void TSLink<AuraDecayNode>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BLOODSPLATNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BLOODSPLATNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BLOODSPLATNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<BLOODSPLATNODE>&);
  class TSLink<BLOODSPLATNODE>* TSLink<BLOODSPLATNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<BLOODSPLATNODE>(class TSLink<BLOODSPLATNODE>&);
  void TSLink<BLOODSPLATNODE>();
  void ~TSLink<BLOODSPLATNODE>();
  class TSLink<BLOODSPLATNODE>& operator=(class TSLink<BLOODSPLATNODE>&);
  int IsLinked();
  struct BLOODSPLATNODE* Next();
  struct BLOODSPLATNODE* Next();
  struct BLOODSPLATNODE* Prev();
  struct BLOODSPLATNODE* Prev();
  struct BLOODSPLATNODE* RawNext();
  struct BLOODSPLATNODE* RawNext();
  void TSLink<BLOODSPLATNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FREENAMEPLATE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FREENAMEPLATE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FREENAMEPLATE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FREENAMEPLATE>&);
  class TSLink<FREENAMEPLATE>* NextLink(int);
  void TSLink<FREENAMEPLATE>(class TSLink<FREENAMEPLATE>&);
  void TSLink<FREENAMEPLATE>();
  void ~TSLink<FREENAMEPLATE>();
  class TSLink<FREENAMEPLATE>& operator=(class TSLink<FREENAMEPLATE>&);
  int IsLinked();
  struct FREENAMEPLATE* Next();
  struct FREENAMEPLATE* Next();
  struct FREENAMEPLATE* Prev();
  struct FREENAMEPLATE* Prev();
  struct FREENAMEPLATE* RawNext();
  struct FREENAMEPLATE* RawNext();
  void TSLink<FREENAMEPLATE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ONESHOTEFFECTNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ONESHOTEFFECTNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class ONESHOTEFFECTNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ONESHOTEFFECTNODE>&);
  class TSLink<ONESHOTEFFECTNODE>* NextLink(int);
  void TSLink<ONESHOTEFFECTNODE>(class TSLink<ONESHOTEFFECTNODE>&);
  void TSLink<ONESHOTEFFECTNODE>();
  void ~TSLink<ONESHOTEFFECTNODE>();
  class TSLink<ONESHOTEFFECTNODE>& operator=(class TSLink<ONESHOTEFFECTNODE>&);
  int IsLinked();
  class ONESHOTEFFECTNODE* Next();
  class ONESHOTEFFECTNODE* Next();
  class ONESHOTEFFECTNODE* Prev();
  class ONESHOTEFFECTNODE* Prev();
  class ONESHOTEFFECTNODE* RawNext();
  class ONESHOTEFFECTNODE* RawNext();
  void TSLink<ONESHOTEFFECTNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ONESHOTSTANDALONEEFFECTNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ONESHOTSTANDALONEEFFECTNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class ONESHOTSTANDALONEEFFECTNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ONESHOTSTANDALONEEFFECTNODE>&);
  class TSLink<ONESHOTSTANDALONEEFFECTNODE>* NextLink(int);
  void TSLink<ONESHOTSTANDALONEEFFECTNODE>(class TSLink<ONESHOTSTANDALONEEFFECTNODE>&);
  void TSLink<ONESHOTSTANDALONEEFFECTNODE>();
  void ~TSLink<ONESHOTSTANDALONEEFFECTNODE>();
  class TSLink<ONESHOTSTANDALONEEFFECTNODE>& operator=(class TSLink<ONESHOTSTANDALONEEFFECTNODE>&);
  int IsLinked();
  class ONESHOTSTANDALONEEFFECTNODE* Next();
  class ONESHOTSTANDALONEEFFECTNODE* Next();
  class ONESHOTSTANDALONEEFFECTNODE* Prev();
  class ONESHOTSTANDALONEEFFECTNODE* Prev();
  class ONESHOTSTANDALONEEFFECTNODE* RawNext();
  class ONESHOTSTANDALONEEFFECTNODE* RawNext();
  void TSLink<ONESHOTSTANDALONEEFFECTNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<UNITONESHOTEFFECTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<UNITONESHOTEFFECTDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct UNITONESHOTEFFECTDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<UNITONESHOTEFFECTDESC>&);
  class TSLink<UNITONESHOTEFFECTDESC>* TSLink<UNITONESHOTEFFECTDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<UNITONESHOTEFFECTDESC>(class TSLink<UNITONESHOTEFFECTDESC>&);
  void TSLink<UNITONESHOTEFFECTDESC>();
  void ~TSLink<UNITONESHOTEFFECTDESC>();
  class TSLink<UNITONESHOTEFFECTDESC>& operator=(class TSLink<UNITONESHOTEFFECTDESC>&);
  int IsLinked();
  struct UNITONESHOTEFFECTDESC* Next();
  struct UNITONESHOTEFFECTDESC* Next();
  struct UNITONESHOTEFFECTDESC* Prev();
  struct UNITONESHOTEFFECTDESC* Prev();
  struct UNITONESHOTEFFECTDESC* RawNext();
  struct UNITONESHOTEFFECTDESC* RawNext();
  void TSLink<UNITONESHOTEFFECTDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<MISSILENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<MISSILENODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct MISSILENODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<MISSILENODE>&);
  class TSLink<MISSILENODE>* NextLink(int);
  void TSLink<MISSILENODE>(class TSLink<MISSILENODE>&);
  void TSLink<MISSILENODE>();
  void ~TSLink<MISSILENODE>();
  class TSLink<MISSILENODE>& operator=(class TSLink<MISSILENODE>&);
  int IsLinked();
  struct MISSILENODE* Next();
  struct MISSILENODE* Next();
  struct MISSILENODE* Prev();
  struct MISSILENODE* Prev();
  struct MISSILENODE* RawNext();
  struct MISSILENODE* RawNext();
  void TSLink<MISSILENODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CHUNKDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CHUNKDATA>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CHUNKDATA* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CHUNKDATA>&);
  class TSLink<CHUNKDATA>* TSLink<CHUNKDATA>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CHUNKDATA>(class TSLink<CHUNKDATA>&);
  void TSLink<CHUNKDATA>();
  void ~TSLink<CHUNKDATA>();
  class TSLink<CHUNKDATA>& operator=(class TSLink<CHUNKDATA>&);
  int IsLinked();
  struct CHUNKDATA* Next();
  struct CHUNKDATA* Next();
  struct CHUNKDATA* Prev();
  struct CHUNKDATA* Prev();
  struct CHUNKDATA* RawNext();
  struct CHUNKDATA* RawNext();
  void TSLink<CHUNKDATA>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SPLATDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SPLATDATA>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SPLATDATA* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SPLATDATA>&);
  class TSLink<SPLATDATA>* TSLink<SPLATDATA>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SPLATDATA>(class TSLink<SPLATDATA>&);
  void TSLink<SPLATDATA>();
  void ~TSLink<SPLATDATA>();
  class TSLink<SPLATDATA>& operator=(class TSLink<SPLATDATA>&);
  int IsLinked();
  struct SPLATDATA* Next();
  struct SPLATDATA* Next();
  struct SPLATDATA* Prev();
  struct SPLATDATA* Prev();
  struct SPLATDATA* RawNext();
  struct SPLATDATA* RawNext();
  void TSLink<SPLATDATA>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<UNITHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<UNITHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct UNITHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<UNITHASHOBJ>&);
  class TSLink<UNITHASHOBJ>* TSLink<UNITHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<UNITHASHOBJ>(class TSLink<UNITHASHOBJ>&);
  void TSLink<UNITHASHOBJ>();
  void ~TSLink<UNITHASHOBJ>();
  class TSLink<UNITHASHOBJ>& operator=(class TSLink<UNITHASHOBJ>&);
  int IsLinked();
  struct UNITHASHOBJ* Next();
  struct UNITHASHOBJ* Next();
  struct UNITHASHOBJ* Prev();
  struct UNITHASHOBJ* Prev();
  struct UNITHASHOBJ* RawNext();
  struct UNITHASHOBJ* RawNext();
  void TSLink<UNITHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ANIMKIT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ANIMKIT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ANIMKIT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ANIMKIT>&);
  class TSLink<ANIMKIT>* TSLink<ANIMKIT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ANIMKIT>(class TSLink<ANIMKIT>&);
  void TSLink<ANIMKIT>();
  void ~TSLink<ANIMKIT>();
  class TSLink<ANIMKIT>& operator=(class TSLink<ANIMKIT>&);
  int IsLinked();
  struct ANIMKIT* Next();
  struct ANIMKIT* Next();
  struct ANIMKIT* Prev();
  struct ANIMKIT* Prev();
  struct ANIMKIT* RawNext();
  struct ANIMKIT* RawNext();
  void TSLink<ANIMKIT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >&);
  class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >* TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >(class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >&);
  void TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >();
  void ~TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >();
  class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >& operator=(class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >&);
  int IsLinked();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Next();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Next();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Prev();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Prev();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* RawNext();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* RawNext();
  void TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CLightList> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CLightList>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CLightList* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CLightList>&);
  class TSLink<CLightList>* TSLink<CLightList>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CLightList>(class TSLink<CLightList>&);
  void TSLink<CLightList>();
  void ~TSLink<CLightList>();
  class TSLink<CLightList>& operator=(class TSLink<CLightList>&);
  int IsLinked();
  struct CLightList* Next();
  struct CLightList* Next();
  struct CLightList* Prev();
  struct CLightList* Prev();
  struct CLightList* RawNext();
  struct CLightList* RawNext();
  void TSLink<CLightList>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxuLightLink> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxuLightLink>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGxuLightLink* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxuLightLink>&);
  class TSLink<CGxuLightLink>* TSLink<CGxuLightLink>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxuLightLink>(class TSLink<CGxuLightLink>&);
  void TSLink<CGxuLightLink>();
  void ~TSLink<CGxuLightLink>();
  class TSLink<CGxuLightLink>& operator=(class TSLink<CGxuLightLink>&);
  int IsLinked();
  class CGxuLightLink* Next();
  class CGxuLightLink* Next();
  class CGxuLightLink* Prev();
  class CGxuLightLink* Prev();
  class CGxuLightLink* RawNext();
  class CGxuLightLink* RawNext();
  void TSLink<CGxuLightLink>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxuLight> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxuLight>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxuLight* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxuLight>&);
  class TSLink<CGxuLight>* TSLink<CGxuLight>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxuLight>(class TSLink<CGxuLight>&);
  void TSLink<CGxuLight>();
  void ~TSLink<CGxuLight>();
  class TSLink<CGxuLight>& operator=(class TSLink<CGxuLight>&);
  int IsLinked();
  struct CGxuLight* Next();
  struct CGxuLight* Next();
  struct CGxuLight* Prev();
  struct CGxuLight* Prev();
  struct CGxuLight* RawNext();
  struct CGxuLight* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BATCHEDRENDERFONTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BATCHEDRENDERFONTDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BATCHEDRENDERFONTDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<BATCHEDRENDERFONTDESC>&);
  class TSLink<BATCHEDRENDERFONTDESC>* TSLink<BATCHEDRENDERFONTDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<BATCHEDRENDERFONTDESC>(class TSLink<BATCHEDRENDERFONTDESC>&);
  void TSLink<BATCHEDRENDERFONTDESC>();
  void ~TSLink<BATCHEDRENDERFONTDESC>();
  class TSLink<BATCHEDRENDERFONTDESC>& operator=(class TSLink<BATCHEDRENDERFONTDESC>&);
  int IsLinked();
  struct BATCHEDRENDERFONTDESC* Next();
  struct BATCHEDRENDERFONTDESC* Next();
  struct BATCHEDRENDERFONTDESC* Prev();
  struct BATCHEDRENDERFONTDESC* Prev();
  struct BATCHEDRENDERFONTDESC* RawNext();
  struct BATCHEDRENDERFONTDESC* RawNext();
  void TSLink<BATCHEDRENDERFONTDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxStringBatch> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxStringBatch>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxStringBatch* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxStringBatch>&);
  class TSLink<CGxStringBatch>* TSLink<CGxStringBatch>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxStringBatch>(class TSLink<CGxStringBatch>&);
  void TSLink<CGxStringBatch>();
  void ~TSLink<CGxStringBatch>();
  class TSLink<CGxStringBatch>& operator=(class TSLink<CGxStringBatch>&);
  int IsLinked();
  struct CGxStringBatch* Next();
  struct CGxStringBatch* Next();
  struct CGxStringBatch* Prev();
  struct CGxStringBatch* Prev();
  struct CGxStringBatch* RawNext();
  struct CGxStringBatch* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<STRINGVIEWMATRICES> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<STRINGVIEWMATRICES>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct STRINGVIEWMATRICES* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<STRINGVIEWMATRICES>&);
  class TSLink<STRINGVIEWMATRICES>* TSLink<STRINGVIEWMATRICES>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<STRINGVIEWMATRICES>(class TSLink<STRINGVIEWMATRICES>&);
  void TSLink<STRINGVIEWMATRICES>();
  void ~TSLink<STRINGVIEWMATRICES>();
  class TSLink<STRINGVIEWMATRICES>& operator=(class TSLink<STRINGVIEWMATRICES>&);
  int IsLinked();
  struct STRINGVIEWMATRICES* Next();
  struct STRINGVIEWMATRICES* Next();
  struct STRINGVIEWMATRICES* Prev();
  struct STRINGVIEWMATRICES* Prev();
  struct STRINGVIEWMATRICES* RawNext();
  struct STRINGVIEWMATRICES* RawNext();
  void TSLink<STRINGVIEWMATRICES>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxFont> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxFont>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxFont* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxFont>&);
  class TSLink<CGxFont>* TSLink<CGxFont>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxFont>(class TSLink<CGxFont>&);
  void TSLink<CGxFont>();
  void ~TSLink<CGxFont>();
  class TSLink<CGxFont>& operator=(class TSLink<CGxFont>&);
  int IsLinked();
  struct CGxFont* Next();
  struct CGxFont* Next();
  struct CGxFont* Prev();
  struct CGxFont* Prev();
  struct CGxFont* RawNext();
  struct CGxFont* RawNext();
  void TSLink<CGxFont>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<KERNNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<KERNNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct KERNNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<KERNNODE>&);
  class TSLink<KERNNODE>* TSLink<KERNNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<KERNNODE>(class TSLink<KERNNODE>&);
  void TSLink<KERNNODE>();
  void ~TSLink<KERNNODE>();
  class TSLink<KERNNODE>& operator=(class TSLink<KERNNODE>&);
  int IsLinked();
  struct KERNNODE* Next();
  struct KERNNODE* Next();
  struct KERNNODE* Prev();
  struct KERNNODE* Prev();
  struct KERNNODE* RawNext();
  struct KERNNODE* RawNext();
  void TSLink<KERNNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CHARCODEDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CHARCODEDESC>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CHARCODEDESC* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CHARCODEDESC>&);
  class TSLink<CHARCODEDESC>* TSLink<CHARCODEDESC>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CHARCODEDESC>(class TSLink<CHARCODEDESC>&);
  void TSLink<CHARCODEDESC>();
  void ~TSLink<CHARCODEDESC>();
  class TSLink<CHARCODEDESC>& operator=(class TSLink<CHARCODEDESC>&);
  int IsLinked();
  struct CHARCODEDESC* Next();
  struct CHARCODEDESC* Next();
  struct CHARCODEDESC* Prev();
  struct CHARCODEDESC* Prev();
  struct CHARCODEDESC* RawNext();
  struct CHARCODEDESC* RawNext();
  void TSLink<CHARCODEDESC>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<GLYPHBITMAPDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<GLYPHBITMAPDATA>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<GLYPHBITMAPDATA>&);
  class TSLink<GLYPHBITMAPDATA>* TSLink<GLYPHBITMAPDATA>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<GLYPHBITMAPDATA>(class TSLink<GLYPHBITMAPDATA>&);
  void TSLink<GLYPHBITMAPDATA>();
  void ~TSLink<GLYPHBITMAPDATA>();
  class TSLink<GLYPHBITMAPDATA>& operator=(class TSLink<GLYPHBITMAPDATA>&);
  int IsLinked();
  struct GLYPHBITMAPDATA* Next();
  struct GLYPHBITMAPDATA* Next();
  struct GLYPHBITMAPDATA* Prev();
  struct GLYPHBITMAPDATA* Prev();
  struct GLYPHBITMAPDATA* RawNext();
  struct GLYPHBITMAPDATA* RawNext();
  void TSLink<GLYPHBITMAPDATA>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxString> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxString>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxString* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxString>&);
  class TSLink<CGxString>* TSLink<CGxString>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxString>(class TSLink<CGxString>&);
  void TSLink<CGxString>();
  void ~TSLink<CGxString>();
  class TSLink<CGxString>& operator=(class TSLink<CGxString>&);
  int IsLinked();
  struct CGxString* Next();
  struct CGxString* Next();
  struct CGxString* Prev();
  struct CGxString* Prev();
  struct CGxString* RawNext();
  struct CGxString* RawNext();
  void TSLink<CGxString>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<IGXUTEXTLINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<IGXUTEXTLINE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct IGXUTEXTLINE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<IGXUTEXTLINE>&);
  class TSLink<IGXUTEXTLINE>* TSLink<IGXUTEXTLINE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<IGXUTEXTLINE>(class TSLink<IGXUTEXTLINE>&);
  void TSLink<IGXUTEXTLINE>();
  void ~TSLink<IGXUTEXTLINE>();
  class TSLink<IGXUTEXTLINE>& operator=(class TSLink<IGXUTEXTLINE>&);
  int IsLinked();
  struct IGXUTEXTLINE* Next();
  struct IGXUTEXTLINE* Next();
  struct IGXUTEXTLINE* Prev();
  struct IGXUTEXTLINE* Prev();
  struct IGXUTEXTLINE* RawNext();
  struct IGXUTEXTLINE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TEXTLINETEXTURE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TEXTLINETEXTURE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct TEXTLINETEXTURE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TEXTLINETEXTURE>&);
  class TSLink<TEXTLINETEXTURE>* TSLink<TEXTLINETEXTURE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TEXTLINETEXTURE>(class TSLink<TEXTLINETEXTURE>&);
  void TSLink<TEXTLINETEXTURE>();
  void ~TSLink<TEXTLINETEXTURE>();
  class TSLink<TEXTLINETEXTURE>& operator=(class TSLink<TEXTLINETEXTURE>&);
  int IsLinked();
  struct TEXTLINETEXTURE* Next();
  struct TEXTLINETEXTURE* Next();
  struct TEXTLINETEXTURE* Prev();
  struct TEXTLINETEXTURE* Prev();
  struct TEXTLINETEXTURE* RawNext();
  struct TEXTLINETEXTURE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FACEDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FACEDATA>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FACEDATA* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FACEDATA>&);
  class TSLink<FACEDATA>* TSLink<FACEDATA>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FACEDATA>(class TSLink<FACEDATA>&);
  void TSLink<FACEDATA>();
  void ~TSLink<FACEDATA>();
  class TSLink<FACEDATA>& operator=(class TSLink<FACEDATA>&);
  int IsLinked();
  struct FACEDATA* Next();
  struct FACEDATA* Next();
  struct FACEDATA* Prev();
  struct FACEDATA* Prev();
  struct FACEDATA* RawNext();
  struct FACEDATA* RawNext();
  void TSLink<FACEDATA>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WowConnection::SENDNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WowConnection::SENDNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct WowConnection::SENDNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WowConnection::SENDNODE>&);
  class TSLink<WowConnection::SENDNODE>* TSLink<WowConnection::SENDNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WowConnection::SENDNODE>(class TSLink<WowConnection::SENDNODE>&);
  void TSLink<WowConnection::SENDNODE>();
  void ~TSLink<WowConnection::SENDNODE>();
  class TSLink<WowConnection::SENDNODE>& operator=(class TSLink<WowConnection::SENDNODE>&);
  int IsLinked();
  struct WowConnection::SENDNODE* Next();
  struct WowConnection::SENDNODE* Next();
  struct WowConnection::SENDNODE* Prev();
  struct WowConnection::SENDNODE* Prev();
  struct WowConnection::SENDNODE* RawNext();
  struct WowConnection::SENDNODE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WowConnection> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WowConnection>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class WowConnection* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WowConnection>&);
  class TSLink<WowConnection>* TSLink<WowConnection>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WowConnection>(class TSLink<WowConnection>&);
  void TSLink<WowConnection>();
  void ~TSLink<WowConnection>();
  class TSLink<WowConnection>& operator=(class TSLink<WowConnection>&);
  int IsLinked();
  class WowConnection* Next();
  class WowConnection* Next();
  class WowConnection* Prev();
  class WowConnection* Prev();
  class WowConnection* RawNext();
  class WowConnection* RawNext();
  void TSLink<WowConnection>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >&);
  class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >* NextLink(int);
  void TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >(class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >&);
  void TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >();
  void ~TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >();
  class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >& operator=(class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >&);
  int IsLinked();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Next();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Next();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Prev();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Prev();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* RawNext();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* RawNext();
  void TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >&);
  class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >* NextLink(int);
  void TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >(class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >&);
  void TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >();
  void ~TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >();
  class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >& operator=(class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >&);
  int IsLinked();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Next();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Next();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Prev();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Prev();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* RawNext();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* RawNext();
  void TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxVertexShader> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxVertexShader>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGxVertexShader* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxVertexShader>&);
  class TSLink<CGxVertexShader>* TSLink<CGxVertexShader>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxVertexShader>(class TSLink<CGxVertexShader>&);
  void TSLink<CGxVertexShader>();
  void ~TSLink<CGxVertexShader>();
  class TSLink<CGxVertexShader>& operator=(class TSLink<CGxVertexShader>&);
  int IsLinked();
  class CGxVertexShader* Next();
  class CGxVertexShader* Next();
  class CGxVertexShader* Prev();
  class CGxVertexShader* Prev();
  class CGxVertexShader* RawNext();
  class CGxVertexShader* RawNext();
  void TSLink<CGxVertexShader>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxPixelShader> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxPixelShader>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGxPixelShader* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxPixelShader>&);
  class TSLink<CGxPixelShader>* TSLink<CGxPixelShader>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxPixelShader>(class TSLink<CGxPixelShader>&);
  void TSLink<CGxPixelShader>();
  void ~TSLink<CGxPixelShader>();
  class TSLink<CGxPixelShader>& operator=(class TSLink<CGxPixelShader>&);
  int IsLinked();
  class CGxPixelShader* Next();
  class CGxPixelShader* Next();
  class CGxPixelShader* Prev();
  class CGxPixelShader* Prev();
  class CGxPixelShader* RawNext();
  class CGxPixelShader* RawNext();
  void TSLink<CGxPixelShader>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxShaderParam> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxShaderParam>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CGxShaderParam* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxShaderParam>&);
  class TSLink<CGxShaderParam>* TSLink<CGxShaderParam>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxShaderParam>(class TSLink<CGxShaderParam>&);
  void TSLink<CGxShaderParam>();
  void ~TSLink<CGxShaderParam>();
  class TSLink<CGxShaderParam>& operator=(class TSLink<CGxShaderParam>&);
  int IsLinked();
  class CGxShaderParam* Next();
  class CGxShaderParam* Next();
  class CGxShaderParam* Prev();
  class CGxShaderParam* Prev();
  class CGxShaderParam* RawNext();
  class CGxShaderParam* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CGxBuf> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CGxBuf>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CGxBuf* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CGxBuf>&);
  class TSLink<CGxBuf>* TSLink<CGxBuf>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CGxBuf>(class TSLink<CGxBuf>&);
  void TSLink<CGxBuf>();
  void ~TSLink<CGxBuf>();
  class TSLink<CGxBuf>& operator=(class TSLink<CGxBuf>&);
  int IsLinked();
  struct CGxBuf* Next();
  struct CGxBuf* Next();
  struct CGxBuf* Prev();
  struct CGxBuf* Prev();
  struct CGxBuf* RawNext();
  struct CGxBuf* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>&);
  class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>* TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>(class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>&);
  void TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>();
  void ~TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>();
  class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>& operator=(class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCACHECALLBACK> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCACHECALLBACK>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCACHECALLBACK* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCACHECALLBACK>&);
  class TSLink<DBCACHECALLBACK>* NextLink(int);
  void TSLink<DBCACHECALLBACK>(class TSLink<DBCACHECALLBACK>&);
  void TSLink<DBCACHECALLBACK>();
  void ~TSLink<DBCACHECALLBACK>();
  class TSLink<DBCACHECALLBACK>& operator=(class TSLink<DBCACHECALLBACK>&);
  int IsLinked();
  struct DBCACHECALLBACK* Next();
  struct DBCACHECALLBACK* Next();
  struct DBCACHECALLBACK* Prev();
  struct DBCACHECALLBACK* Prev();
  struct DBCACHECALLBACK* RawNext();
  struct DBCACHECALLBACK* RawNext();
  void TSLink<DBCACHECALLBACK>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>(class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  void TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  void ~TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>();
  class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>& operator=(class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>&);
  int IsLinked();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext();
  void TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<NETCLIENTNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<NETCLIENTNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct NETCLIENTNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<NETCLIENTNODE>&);
  class TSLink<NETCLIENTNODE>* NextLink(int);
  void TSLink<NETCLIENTNODE>(class TSLink<NETCLIENTNODE>&);
  void TSLink<NETCLIENTNODE>();
  void ~TSLink<NETCLIENTNODE>();
  class TSLink<NETCLIENTNODE>& operator=(class TSLink<NETCLIENTNODE>&);
  int IsLinked();
  struct NETCLIENTNODE* Next();
  struct NETCLIENTNODE* Next();
  struct NETCLIENTNODE* Prev();
  struct NETCLIENTNODE* Prev();
  struct NETCLIENTNODE* RawNext();
  struct NETCLIENTNODE* RawNext();
  void TSLink<NETCLIENTNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<NETEVENTQUEUENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<NETEVENTQUEUENODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct NETEVENTQUEUENODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<NETEVENTQUEUENODE>&);
  class TSLink<NETEVENTQUEUENODE>* TSLink<NETEVENTQUEUENODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<NETEVENTQUEUENODE>(class TSLink<NETEVENTQUEUENODE>&);
  void TSLink<NETEVENTQUEUENODE>();
  void ~TSLink<NETEVENTQUEUENODE>();
  class TSLink<NETEVENTQUEUENODE>& operator=(class TSLink<NETEVENTQUEUENODE>&);
  int IsLinked();
  struct NETEVENTQUEUENODE* Next();
  struct NETEVENTQUEUENODE* Next();
  struct NETEVENTQUEUENODE* Prev();
  struct NETEVENTQUEUENODE* Prev();
  struct NETEVENTQUEUENODE* RawNext();
  struct NETEVENTQUEUENODE* RawNext();
  void TSLink<NETEVENTQUEUENODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<BFSNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<BFSNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct BFSNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<BFSNODE>&);
  class TSLink<BFSNODE>* TSLink<BFSNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<BFSNODE>(class TSLink<BFSNODE>&);
  void TSLink<BFSNODE>();
  void ~TSLink<BFSNODE>();
  class TSLink<BFSNODE>& operator=(class TSLink<BFSNODE>&);
  int IsLinked();
  struct BFSNODE* Next();
  struct BFSNODE* Next();
  struct BFSNODE* Prev();
  struct BFSNODE* Prev();
  struct BFSNODE* RawNext();
  struct BFSNODE* RawNext();
  void TSLink<BFSNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CameraShake> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CameraShake>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CameraShake* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CameraShake>&);
  class TSLink<CameraShake>* TSLink<CameraShake>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CameraShake>(class TSLink<CameraShake>&);
  void TSLink<CameraShake>();
  void ~TSLink<CameraShake>();
  class TSLink<CameraShake>& operator=(class TSLink<CameraShake>&);
  int IsLinked();
  struct CameraShake* Next();
  struct CameraShake* Next();
  struct CameraShake* Prev();
  struct CameraShake* Prev();
  struct CameraShake* RawNext();
  struct CameraShake* RawNext();
  void TSLink<CameraShake>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CWFrustum> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CWFrustum>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CWFrustum* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CWFrustum>&);
  class TSLink<CWFrustum>* TSLink<CWFrustum>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CWFrustum>(class TSLink<CWFrustum>&);
  void TSLink<CWFrustum>();
  void ~TSLink<CWFrustum>();
  class TSLink<CWFrustum>& operator=(class TSLink<CWFrustum>&);
  int IsLinked();
  class CWFrustum* Next();
  class CWFrustum* Next();
  class CWFrustum* Prev();
  class CWFrustum* Prev();
  class CWFrustum* RawNext();
  class CWFrustum* RawNext();
  void TSLink<CWFrustum>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CACHEENTRY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CACHEENTRY>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CACHEENTRY* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CACHEENTRY>&);
  class TSLink<CACHEENTRY>* TSLink<CACHEENTRY>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CACHEENTRY>(class TSLink<CACHEENTRY>&);
  void TSLink<CACHEENTRY>();
  void ~TSLink<CACHEENTRY>();
  class TSLink<CACHEENTRY>& operator=(class TSLink<CACHEENTRY>&);
  int IsLinked();
  struct CACHEENTRY* Next();
  struct CACHEENTRY* Next();
  struct CACHEENTRY* Prev();
  struct CACHEENTRY* Prev();
  struct CACHEENTRY* RawNext();
  struct CACHEENTRY* RawNext();
  void TSLink<CACHEENTRY>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ITEMPORTRAIT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ITEMPORTRAIT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ITEMPORTRAIT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ITEMPORTRAIT>&);
  class TSLink<ITEMPORTRAIT>* TSLink<ITEMPORTRAIT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ITEMPORTRAIT>(class TSLink<ITEMPORTRAIT>&);
  void TSLink<ITEMPORTRAIT>();
  void ~TSLink<ITEMPORTRAIT>();
  class TSLink<ITEMPORTRAIT>& operator=(class TSLink<ITEMPORTRAIT>&);
  int IsLinked();
  struct ITEMPORTRAIT* Next();
  struct ITEMPORTRAIT* Next();
  struct ITEMPORTRAIT* Prev();
  struct ITEMPORTRAIT* Prev();
  struct ITEMPORTRAIT* RawNext();
  struct ITEMPORTRAIT* RawNext();
  void TSLink<ITEMPORTRAIT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<UNITPORTRAIT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<UNITPORTRAIT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct UNITPORTRAIT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<UNITPORTRAIT>&);
  class TSLink<UNITPORTRAIT>* TSLink<UNITPORTRAIT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<UNITPORTRAIT>(class TSLink<UNITPORTRAIT>&);
  void TSLink<UNITPORTRAIT>();
  void ~TSLink<UNITPORTRAIT>();
  class TSLink<UNITPORTRAIT>& operator=(class TSLink<UNITPORTRAIT>&);
  int IsLinked();
  struct UNITPORTRAIT* Next();
  struct UNITPORTRAIT* Next();
  struct UNITPORTRAIT* Prev();
  struct UNITPORTRAIT* Prev();
  struct UNITPORTRAIT* RawNext();
  struct UNITPORTRAIT* RawNext();
  void TSLink<UNITPORTRAIT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PLAYERPORTRAIT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PLAYERPORTRAIT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct PLAYERPORTRAIT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PLAYERPORTRAIT>&);
  class TSLink<PLAYERPORTRAIT>* TSLink<PLAYERPORTRAIT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<PLAYERPORTRAIT>(class TSLink<PLAYERPORTRAIT>&);
  void TSLink<PLAYERPORTRAIT>();
  void ~TSLink<PLAYERPORTRAIT>();
  class TSLink<PLAYERPORTRAIT>& operator=(class TSLink<PLAYERPORTRAIT>&);
  int IsLinked();
  struct PLAYERPORTRAIT* Next();
  struct PLAYERPORTRAIT* Next();
  struct PLAYERPORTRAIT* Prev();
  struct PLAYERPORTRAIT* Prev();
  struct PLAYERPORTRAIT* RawNext();
  struct PLAYERPORTRAIT* RawNext();
  void TSLink<PLAYERPORTRAIT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<DIRTYFACE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<DIRTYFACE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct DIRTYFACE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<DIRTYFACE>&);
  class TSLink<DIRTYFACE>* TSLink<DIRTYFACE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<DIRTYFACE>(class TSLink<DIRTYFACE>&);
  void TSLink<DIRTYFACE>();
  void ~TSLink<DIRTYFACE>();
  class TSLink<DIRTYFACE>& operator=(class TSLink<DIRTYFACE>&);
  int IsLinked();
  struct DIRTYFACE* Next();
  struct DIRTYFACE* Next();
  struct DIRTYFACE* Prev();
  struct DIRTYFACE* Prev();
  struct DIRTYFACE* RawNext();
  struct DIRTYFACE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<WORDLIST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<WORDLIST>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct WORDLIST* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<WORDLIST>&);
  class TSLink<WORDLIST>* TSLink<WORDLIST>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<WORDLIST>(class TSLink<WORDLIST>&);
  void TSLink<WORDLIST>();
  void ~TSLink<WORDLIST>();
  class TSLink<WORDLIST>& operator=(class TSLink<WORDLIST>&);
  int IsLinked();
  struct WORDLIST* Next();
  struct WORDLIST* Next();
  struct WORDLIST* Prev();
  struct WORDLIST* Prev();
  struct WORDLIST* RawNext();
  struct WORDLIST* RawNext();
  void TSLink<WORDLIST>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PENDINGUSERLIST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PENDINGUSERLIST>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct PENDINGUSERLIST* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PENDINGUSERLIST>&);
  class TSLink<PENDINGUSERLIST>* TSLink<PENDINGUSERLIST>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<PENDINGUSERLIST>(class TSLink<PENDINGUSERLIST>&);
  void TSLink<PENDINGUSERLIST>();
  void ~TSLink<PENDINGUSERLIST>();
  class TSLink<PENDINGUSERLIST>& operator=(class TSLink<PENDINGUSERLIST>&);
  int IsLinked();
  struct PENDINGUSERLIST* Next();
  struct PENDINGUSERLIST* Next();
  struct PENDINGUSERLIST* Prev();
  struct PENDINGUSERLIST* Prev();
  struct PENDINGUSERLIST* RawNext();
  struct PENDINGUSERLIST* RawNext();
  void TSLink<PENDINGUSERLIST>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PENDINGTEXTEMOTE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PENDINGTEXTEMOTE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct PENDINGTEXTEMOTE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PENDINGTEXTEMOTE>&);
  class TSLink<PENDINGTEXTEMOTE>* NextLink(int);
  void TSLink<PENDINGTEXTEMOTE>(class TSLink<PENDINGTEXTEMOTE>&);
  void TSLink<PENDINGTEXTEMOTE>();
  void ~TSLink<PENDINGTEXTEMOTE>();
  class TSLink<PENDINGTEXTEMOTE>& operator=(class TSLink<PENDINGTEXTEMOTE>&);
  int IsLinked();
  struct PENDINGTEXTEMOTE* Next();
  struct PENDINGTEXTEMOTE* Next();
  struct PENDINGTEXTEMOTE* Prev();
  struct PENDINGTEXTEMOTE* Prev();
  struct PENDINGTEXTEMOTE* RawNext();
  struct PENDINGTEXTEMOTE* RawNext();
  void TSLink<PENDINGTEXTEMOTE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PENDINGCHAT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PENDINGCHAT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct PENDINGCHAT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PENDINGCHAT>&);
  class TSLink<PENDINGCHAT>* TSLink<PENDINGCHAT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<PENDINGCHAT>(class TSLink<PENDINGCHAT>&);
  void TSLink<PENDINGCHAT>();
  void ~TSLink<PENDINGCHAT>();
  class TSLink<PENDINGCHAT>& operator=(class TSLink<PENDINGCHAT>&);
  int IsLinked();
  struct PENDINGCHAT* Next();
  struct PENDINGCHAT* Next();
  struct PENDINGCHAT* Prev();
  struct PENDINGCHAT* Prev();
  struct PENDINGCHAT* RawNext();
  struct PENDINGCHAT* RawNext();
  void TSLink<PENDINGCHAT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FADEOUTHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FADEOUTHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FADEOUTHASHOBJ>&);
  class TSLink<FADEOUTHASHOBJ>* TSLink<FADEOUTHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FADEOUTHASHOBJ>(class TSLink<FADEOUTHASHOBJ>&);
  void TSLink<FADEOUTHASHOBJ>();
  void ~TSLink<FADEOUTHASHOBJ>();
  class TSLink<FADEOUTHASHOBJ>& operator=(class TSLink<FADEOUTHASHOBJ>&);
  int IsLinked();
  struct FADEOUTHASHOBJ* Next();
  struct FADEOUTHASHOBJ* Next();
  struct FADEOUTHASHOBJ* Prev();
  struct FADEOUTHASHOBJ* Prev();
  struct FADEOUTHASHOBJ* RawNext();
  struct FADEOUTHASHOBJ* RawNext();
  void TSLink<FADEOUTHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CModelRecord> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CModelRecord>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CModelRecord* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CModelRecord>&);
  class TSLink<CModelRecord>* TSLink<CModelRecord>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CModelRecord>(class TSLink<CModelRecord>&);
  void TSLink<CModelRecord>();
  void ~TSLink<CModelRecord>();
  class TSLink<CModelRecord>& operator=(class TSLink<CModelRecord>&);
  int IsLinked();
  struct CModelRecord* Next();
  struct CModelRecord* Next();
  struct CModelRecord* Prev();
  struct CModelRecord* Prev();
  struct CModelRecord* RawNext();
  struct CModelRecord* RawNext();
  void TSLink<CModelRecord>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<KEYCOMMAND> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<KEYCOMMAND>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct KEYCOMMAND* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<KEYCOMMAND>&);
  class TSLink<KEYCOMMAND>* TSLink<KEYCOMMAND>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<KEYCOMMAND>(class TSLink<KEYCOMMAND>&);
  void TSLink<KEYCOMMAND>();
  void ~TSLink<KEYCOMMAND>();
  class TSLink<KEYCOMMAND>& operator=(class TSLink<KEYCOMMAND>&);
  int IsLinked();
  struct KEYCOMMAND* Next();
  struct KEYCOMMAND* Next();
  struct KEYCOMMAND* Prev();
  struct KEYCOMMAND* Prev();
  struct KEYCOMMAND* RawNext();
  struct KEYCOMMAND* RawNext();
  void TSLink<KEYCOMMAND>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<KEYBINDING> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<KEYBINDING>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct KEYBINDING* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<KEYBINDING>&);
  class TSLink<KEYBINDING>* TSLink<KEYBINDING>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<KEYBINDING>(class TSLink<KEYBINDING>&);
  void TSLink<KEYBINDING>();
  void ~TSLink<KEYBINDING>();
  class TSLink<KEYBINDING>& operator=(class TSLink<KEYBINDING>&);
  int IsLinked();
  struct KEYBINDING* Next();
  struct KEYBINDING* Next();
  struct KEYBINDING* Prev();
  struct KEYBINDING* Prev();
  struct KEYBINDING* RawNext();
  struct KEYBINDING* RawNext();
  void TSLink<KEYBINDING>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FrameScriptObject_Variable> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FrameScriptObject_Variable>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FrameScriptObject_Variable* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FrameScriptObject_Variable>&);
  class TSLink<FrameScriptObject_Variable>* TSLink<FrameScriptObject_Variable>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FrameScriptObject_Variable>(class TSLink<FrameScriptObject_Variable>&);
  void TSLink<FrameScriptObject_Variable>();
  void ~TSLink<FrameScriptObject_Variable>();
  class TSLink<FrameScriptObject_Variable>& operator=(class TSLink<FrameScriptObject_Variable>&);
  int IsLinked();
  struct FrameScriptObject_Variable* Next();
  struct FrameScriptObject_Variable* Next();
  struct FrameScriptObject_Variable* Prev();
  struct FrameScriptObject_Variable* Prev();
  struct FrameScriptObject_Variable* RawNext();
  struct FrameScriptObject_Variable* RawNext();
  void TSLink<FrameScriptObject_Variable>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CPlayerMoveEvent> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CPlayerMoveEvent>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CPlayerMoveEvent* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CPlayerMoveEvent>&);
  class TSLink<CPlayerMoveEvent>* TSLink<CPlayerMoveEvent>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CPlayerMoveEvent>(class TSLink<CPlayerMoveEvent>&);
  void TSLink<CPlayerMoveEvent>();
  void ~TSLink<CPlayerMoveEvent>();
  class TSLink<CPlayerMoveEvent>& operator=(class TSLink<CPlayerMoveEvent>&);
  int IsLinked();
  struct CPlayerMoveEvent* Next();
  struct CPlayerMoveEvent* Next();
  struct CPlayerMoveEvent* Prev();
  struct CPlayerMoveEvent* Prev();
  struct CPlayerMoveEvent* RawNext();
  struct CPlayerMoveEvent* RawNext();
  void TSLink<CPlayerMoveEvent>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMovementData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMovementData>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CMovementData* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMovementData>&);
  class TSLink<CMovementData>* TSLink<CMovementData>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMovementData>(class TSLink<CMovementData>&);
  void TSLink<CMovementData>();
  void ~TSLink<CMovementData>();
  class TSLink<CMovementData>& operator=(class TSLink<CMovementData>&);
  int IsLinked();
  class CMovementData* Next();
  class CMovementData* Next();
  class CMovementData* Prev();
  class CMovementData* Prev();
  class CMovementData* RawNext();
  class CMovementData* RawNext();
  void TSLink<CMovementData>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OBJHANDLERREQUEST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OBJHANDLERREQUEST>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OBJHANDLERREQUEST* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OBJHANDLERREQUEST>&);
  class TSLink<OBJHANDLERREQUEST>* TSLink<OBJHANDLERREQUEST>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OBJHANDLERREQUEST>(class TSLink<OBJHANDLERREQUEST>&);
  void TSLink<OBJHANDLERREQUEST>();
  void ~TSLink<OBJHANDLERREQUEST>();
  class TSLink<OBJHANDLERREQUEST>& operator=(class TSLink<OBJHANDLERREQUEST>&);
  int IsLinked();
  struct OBJHANDLERREQUEST* Next();
  struct OBJHANDLERREQUEST* Next();
  struct OBJHANDLERREQUEST* Prev();
  struct OBJHANDLERREQUEST* Prev();
  struct OBJHANDLERREQUEST* RawNext();
  struct OBJHANDLERREQUEST* RawNext();
  void TSLink<OBJHANDLERREQUEST>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<C_OBJECTHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<C_OBJECTHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct C_OBJECTHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<C_OBJECTHASH>&);
  class TSLink<C_OBJECTHASH>* TSLink<C_OBJECTHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<C_OBJECTHASH>(class TSLink<C_OBJECTHASH>&);
  void TSLink<C_OBJECTHASH>();
  void ~TSLink<C_OBJECTHASH>();
  class TSLink<C_OBJECTHASH>& operator=(class TSLink<C_OBJECTHASH>&);
  int IsLinked();
  struct C_OBJECTHASH* Next();
  struct C_OBJECTHASH* Next();
  struct C_OBJECTHASH* Prev();
  struct C_OBJECTHASH* Prev();
  struct C_OBJECTHASH* RawNext();
  struct C_OBJECTHASH* RawNext();
  void TSLink<C_OBJECTHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CMirrorHandler> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CMirrorHandler>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CMirrorHandler* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CMirrorHandler>&);
  class TSLink<CMirrorHandler>* TSLink<CMirrorHandler>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CMirrorHandler>(class TSLink<CMirrorHandler>&);
  void TSLink<CMirrorHandler>();
  void ~TSLink<CMirrorHandler>();
  class TSLink<CMirrorHandler>& operator=(class TSLink<CMirrorHandler>&);
  int IsLinked();
  struct CMirrorHandler* Next();
  struct CMirrorHandler* Next();
  struct CMirrorHandler* Prev();
  struct CMirrorHandler* Prev();
  struct CMirrorHandler* RawNext();
  struct CMirrorHandler* RawNext();
  void TSLink<CMirrorHandler>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FOOTSTEPSNDCACHE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FOOTSTEPSNDCACHE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FOOTSTEPSNDCACHE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FOOTSTEPSNDCACHE>&);
  class TSLink<FOOTSTEPSNDCACHE>* TSLink<FOOTSTEPSNDCACHE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FOOTSTEPSNDCACHE>(class TSLink<FOOTSTEPSNDCACHE>&);
  void TSLink<FOOTSTEPSNDCACHE>();
  void ~TSLink<FOOTSTEPSNDCACHE>();
  class TSLink<FOOTSTEPSNDCACHE>& operator=(class TSLink<FOOTSTEPSNDCACHE>&);
  int IsLinked();
  struct FOOTSTEPSNDCACHE* Next();
  struct FOOTSTEPSNDCACHE* Next();
  struct FOOTSTEPSNDCACHE* Prev();
  struct FOOTSTEPSNDCACHE* Prev();
  struct FOOTSTEPSNDCACHE* RawNext();
  struct FOOTSTEPSNDCACHE* RawNext();
  void TSLink<FOOTSTEPSNDCACHE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SHEATHSOUNDHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SHEATHSOUNDHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SHEATHSOUNDHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SHEATHSOUNDHASH>&);
  class TSLink<SHEATHSOUNDHASH>* TSLink<SHEATHSOUNDHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SHEATHSOUNDHASH>(class TSLink<SHEATHSOUNDHASH>&);
  void TSLink<SHEATHSOUNDHASH>();
  void ~TSLink<SHEATHSOUNDHASH>();
  class TSLink<SHEATHSOUNDHASH>& operator=(class TSLink<SHEATHSOUNDHASH>&);
  int IsLinked();
  struct SHEATHSOUNDHASH* Next();
  struct SHEATHSOUNDHASH* Next();
  struct SHEATHSOUNDHASH* Prev();
  struct SHEATHSOUNDHASH* Prev();
  struct SHEATHSOUNDHASH* RawNext();
  struct SHEATHSOUNDHASH* RawNext();
  void TSLink<SHEATHSOUNDHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<UISOUNDLOOKUP> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<UISOUNDLOOKUP>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct UISOUNDLOOKUP* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<UISOUNDLOOKUP>&);
  class TSLink<UISOUNDLOOKUP>* TSLink<UISOUNDLOOKUP>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<UISOUNDLOOKUP>(class TSLink<UISOUNDLOOKUP>&);
  void TSLink<UISOUNDLOOKUP>();
  void ~TSLink<UISOUNDLOOKUP>();
  class TSLink<UISOUNDLOOKUP>& operator=(class TSLink<UISOUNDLOOKUP>&);
  int IsLinked();
  struct UISOUNDLOOKUP* Next();
  struct UISOUNDLOOKUP* Next();
  struct UISOUNDLOOKUP* Prev();
  struct UISOUNDLOOKUP* Prev();
  struct UISOUNDLOOKUP* RawNext();
  struct UISOUNDLOOKUP* RawNext();
  void TSLink<UISOUNDLOOKUP>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SOUNDDEFINITION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SOUNDDEFINITION>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SOUNDDEFINITION* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SOUNDDEFINITION>&);
  class TSLink<SOUNDDEFINITION>* TSLink<SOUNDDEFINITION>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SOUNDDEFINITION>(class TSLink<SOUNDDEFINITION>&);
  void TSLink<SOUNDDEFINITION>();
  void ~TSLink<SOUNDDEFINITION>();
  class TSLink<SOUNDDEFINITION>& operator=(class TSLink<SOUNDDEFINITION>&);
  int IsLinked();
  struct SOUNDDEFINITION* Next();
  struct SOUNDDEFINITION* Next();
  struct SOUNDDEFINITION* Prev();
  struct SOUNDDEFINITION* Prev();
  struct SOUNDDEFINITION* RawNext();
  struct SOUNDDEFINITION* RawNext();
  void TSLink<SOUNDDEFINITION>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OUTDOORSCHUNKHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OUTDOORSCHUNKHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OUTDOORSCHUNKHASHOBJ>&);
  class TSLink<OUTDOORSCHUNKHASHOBJ>* TSLink<OUTDOORSCHUNKHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OUTDOORSCHUNKHASHOBJ>(class TSLink<OUTDOORSCHUNKHASHOBJ>&);
  void TSLink<OUTDOORSCHUNKHASHOBJ>();
  void ~TSLink<OUTDOORSCHUNKHASHOBJ>();
  class TSLink<OUTDOORSCHUNKHASHOBJ>& operator=(class TSLink<OUTDOORSCHUNKHASHOBJ>&);
  int IsLinked();
  struct OUTDOORSCHUNKHASHOBJ* Next();
  struct OUTDOORSCHUNKHASHOBJ* Next();
  struct OUTDOORSCHUNKHASHOBJ* Prev();
  struct OUTDOORSCHUNKHASHOBJ* Prev();
  struct OUTDOORSCHUNKHASHOBJ* RawNext();
  struct OUTDOORSCHUNKHASHOBJ* RawNext();
  void TSLink<OUTDOORSCHUNKHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CHUNKHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CHUNKHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CHUNKHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CHUNKHASHOBJ>&);
  class TSLink<CHUNKHASHOBJ>* TSLink<CHUNKHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CHUNKHASHOBJ>(class TSLink<CHUNKHASHOBJ>&);
  void TSLink<CHUNKHASHOBJ>();
  void ~TSLink<CHUNKHASHOBJ>();
  class TSLink<CHUNKHASHOBJ>& operator=(class TSLink<CHUNKHASHOBJ>&);
  int IsLinked();
  struct CHUNKHASHOBJ* Next();
  struct CHUNKHASHOBJ* Next();
  struct CHUNKHASHOBJ* Prev();
  struct CHUNKHASHOBJ* Prev();
  struct CHUNKHASHOBJ* RawNext();
  struct CHUNKHASHOBJ* RawNext();
  void TSLink<CHUNKHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<MSGBUFFER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<MSGBUFFER>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct MSGBUFFER* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<MSGBUFFER>&);
  class TSLink<MSGBUFFER>* TSLink<MSGBUFFER>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<MSGBUFFER>(class TSLink<MSGBUFFER>&);
  void TSLink<MSGBUFFER>();
  void ~TSLink<MSGBUFFER>();
  class TSLink<MSGBUFFER>& operator=(class TSLink<MSGBUFFER>&);
  int IsLinked();
  struct MSGBUFFER* Next();
  struct MSGBUFFER* Next();
  struct MSGBUFFER* Prev();
  struct MSGBUFFER* Prev();
  struct MSGBUFFER* RawNext();
  struct MSGBUFFER* RawNext();
  void TSLink<MSGBUFFER>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >&);
  class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >* TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >(class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >&);
  void TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >();
  void ~TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >();
  class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >& operator=(class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >&);
  int IsLinked();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* RawNext();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* RawNext();
  void TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >&);
  class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >* TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >(class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >&);
  void TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >();
  void ~TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >();
  class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >& operator=(class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >&);
  int IsLinked();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Next();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Next();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Prev();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Prev();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* RawNext();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* RawNext();
  void TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CSolidTextureHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CSolidTextureHash>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CSolidTextureHash* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CSolidTextureHash>&);
  class TSLink<CSolidTextureHash>* TSLink<CSolidTextureHash>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CSolidTextureHash>(class TSLink<CSolidTextureHash>&);
  void TSLink<CSolidTextureHash>();
  void ~TSLink<CSolidTextureHash>();
  class TSLink<CSolidTextureHash>& operator=(class TSLink<CSolidTextureHash>&);
  int IsLinked();
  struct CSolidTextureHash* Next();
  struct CSolidTextureHash* Next();
  struct CSolidTextureHash* Prev();
  struct CSolidTextureHash* Prev();
  struct CSolidTextureHash* RawNext();
  struct CSolidTextureHash* RawNext();
  void TSLink<CSolidTextureHash>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CTextureHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CTextureHash>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CTextureHash* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CTextureHash>&);
  class TSLink<CTextureHash>* TSLink<CTextureHash>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CTextureHash>(class TSLink<CTextureHash>&);
  void TSLink<CTextureHash>();
  void ~TSLink<CTextureHash>();
  class TSLink<CTextureHash>& operator=(class TSLink<CTextureHash>&);
  int IsLinked();
  struct CTextureHash* Next();
  struct CTextureHash* Next();
  struct CTextureHash* Prev();
  struct CTextureHash* Prev();
  struct CTextureHash* RawNext();
  struct CTextureHash* RawNext();
  void TSLink<CTextureHash>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CTextureItem> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CTextureItem>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CTextureItem* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CTextureItem>&);
  class TSLink<CTextureItem>* TSLink<CTextureItem>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CTextureItem>(class TSLink<CTextureItem>&);
  void TSLink<CTextureItem>();
  void ~TSLink<CTextureItem>();
  class TSLink<CTextureItem>& operator=(class TSLink<CTextureItem>&);
  int IsLinked();
  struct CTextureItem* Next();
  struct CTextureItem* Next();
  struct CTextureItem* Prev();
  struct CTextureItem* Prev();
  struct CTextureItem* RawNext();
  struct CTextureItem* RawNext();
  void TSLink<CTextureItem>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CAsyncObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CAsyncObject>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CAsyncObject* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CAsyncObject>&);
  class TSLink<CAsyncObject>* TSLink<CAsyncObject>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CAsyncObject>(class TSLink<CAsyncObject>&);
  void TSLink<CAsyncObject>();
  void ~TSLink<CAsyncObject>();
  class TSLink<CAsyncObject>& operator=(class TSLink<CAsyncObject>&);
  int IsLinked();
  class CAsyncObject* Next();
  class CAsyncObject* Next();
  class CAsyncObject* Prev();
  class CAsyncObject* Prev();
  class CAsyncObject* RawNext();
  class CAsyncObject* RawNext();
  void TSLink<CAsyncObject>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CBaseManaged> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CBaseManaged>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CBaseManaged* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CBaseManaged>&);
  class TSLink<CBaseManaged>* TSLink<CBaseManaged>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CBaseManaged>(class TSLink<CBaseManaged>&);
  void TSLink<CBaseManaged>();
  void ~TSLink<CBaseManaged>();
  class TSLink<CBaseManaged>& operator=(class TSLink<CBaseManaged>&);
  int IsLinked();
  class CBaseManaged* Next();
  class CBaseManaged* Next();
  class CBaseManaged* Prev();
  class CBaseManaged* Prev();
  class CBaseManaged* RawNext();
  class CBaseManaged* RawNext();
  void TSLink<CBaseManaged>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<FONTHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<FONTHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct FONTHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<FONTHASHOBJ>&);
  class TSLink<FONTHASHOBJ>* TSLink<FONTHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<FONTHASHOBJ>(class TSLink<FONTHASHOBJ>&);
  void TSLink<FONTHASHOBJ>();
  void ~TSLink<FONTHASHOBJ>();
  class TSLink<FONTHASHOBJ>& operator=(class TSLink<FONTHASHOBJ>&);
  int IsLinked();
  struct FONTHASHOBJ* Next();
  struct FONTHASHOBJ* Next();
  struct FONTHASHOBJ* Prev();
  struct FONTHASHOBJ* Prev();
  struct FONTHASHOBJ* RawNext();
  struct FONTHASHOBJ* RawNext();
  void TSLink<FONTHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ProfileInternal::KEYVALUE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ProfileInternal::KEYVALUE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ProfileInternal::KEYVALUE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ProfileInternal::KEYVALUE>&);
  class TSLink<ProfileInternal::KEYVALUE>* TSLink<ProfileInternal::KEYVALUE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ProfileInternal::KEYVALUE>(class TSLink<ProfileInternal::KEYVALUE>&);
  void TSLink<ProfileInternal::KEYVALUE>();
  void ~TSLink<ProfileInternal::KEYVALUE>();
  class TSLink<ProfileInternal::KEYVALUE>& operator=(class TSLink<ProfileInternal::KEYVALUE>&);
  int IsLinked();
  struct ProfileInternal::KEYVALUE* Next();
  struct ProfileInternal::KEYVALUE* Next();
  struct ProfileInternal::KEYVALUE* Prev();
  struct ProfileInternal::KEYVALUE* Prev();
  struct ProfileInternal::KEYVALUE* RawNext();
  struct ProfileInternal::KEYVALUE* RawNext();
  void TSLink<ProfileInternal::KEYVALUE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ProfileInternal::SECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ProfileInternal::SECTION>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ProfileInternal::SECTION* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ProfileInternal::SECTION>&);
  class TSLink<ProfileInternal::SECTION>* TSLink<ProfileInternal::SECTION>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ProfileInternal::SECTION>(class TSLink<ProfileInternal::SECTION>&);
  void TSLink<ProfileInternal::SECTION>();
  void ~TSLink<ProfileInternal::SECTION>();
  class TSLink<ProfileInternal::SECTION>& operator=(class TSLink<ProfileInternal::SECTION>&);
  int IsLinked();
  struct ProfileInternal::SECTION* Next();
  struct ProfileInternal::SECTION* Next();
  struct ProfileInternal::SECTION* Prev();
  struct ProfileInternal::SECTION* Prev();
  struct ProfileInternal::SECTION* RawNext();
  struct ProfileInternal::SECTION* RawNext();
  void TSLink<ProfileInternal::SECTION>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ProfileInternal::STRINGBLOCK> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ProfileInternal::STRINGBLOCK>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ProfileInternal::STRINGBLOCK* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ProfileInternal::STRINGBLOCK>&);
  class TSLink<ProfileInternal::STRINGBLOCK>* NextLink(int);
  void TSLink<ProfileInternal::STRINGBLOCK>(class TSLink<ProfileInternal::STRINGBLOCK>&);
  void TSLink<ProfileInternal::STRINGBLOCK>();
  void ~TSLink<ProfileInternal::STRINGBLOCK>();
  class TSLink<ProfileInternal::STRINGBLOCK>& operator=(class TSLink<ProfileInternal::STRINGBLOCK>&);
  int IsLinked();
  struct ProfileInternal::STRINGBLOCK* Next();
  struct ProfileInternal::STRINGBLOCK* Next();
  struct ProfileInternal::STRINGBLOCK* Prev();
  struct ProfileInternal::STRINGBLOCK* Prev();
  struct ProfileInternal::STRINGBLOCK* RawNext();
  struct ProfileInternal::STRINGBLOCK* RawNext();
  void TSLink<ProfileInternal::STRINGBLOCK>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ContextTurn> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ContextTurn>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ContextTurn* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ContextTurn>&);
  class TSLink<ContextTurn>* NextLink(int);
  void TSLink<ContextTurn>(class TSLink<ContextTurn>&);
  void TSLink<ContextTurn>();
  void ~TSLink<ContextTurn>();
  class TSLink<ContextTurn>& operator=(class TSLink<ContextTurn>&);
  int IsLinked();
  struct ContextTurn* Next();
  struct ContextTurn* Next();
  struct ContextTurn* Prev();
  struct ContextTurn* Prev();
  struct ContextTurn* RawNext();
  struct ContextTurn* RawNext();
  void TSLink<ContextTurn>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ContextData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ContextData>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ContextData* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ContextData>&);
  class TSLink<ContextData>* TSLink<ContextData>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ContextData>(class TSLink<ContextData>&);
  void TSLink<ContextData>();
  void ~TSLink<ContextData>();
  class TSLink<ContextData>& operator=(class TSLink<ContextData>&);
  int IsLinked();
  struct ContextData* Next();
  struct ContextData* Next();
  struct ContextData* Prev();
  struct ContextData* Prev();
  struct ContextData* RawNext();
  struct ContextData* RawNext();
  void TSLink<ContextData>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ThreadData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ThreadData>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ThreadData* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ThreadData>&);
  class TSLink<ThreadData>* TSLink<ThreadData>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ThreadData>(class TSLink<ThreadData>&);
  void TSLink<ThreadData>();
  void ~TSLink<ThreadData>();
  class TSLink<ThreadData>& operator=(class TSLink<ThreadData>&);
  int IsLinked();
  struct ThreadData* Next();
  struct ThreadData* Next();
  struct ThreadData* Prev();
  struct ThreadData* Prev();
  struct ThreadData* RawNext();
  struct ThreadData* RawNext();
  void TSLink<ThreadData>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >&);
  class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >* TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >(class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >&);
  void TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >();
  void ~TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >();
  class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >& operator=(class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >&);
  int IsLinked();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* RawNext();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* RawNext();
  void TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::TCPLISTEN> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::TCPLISTEN>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::TCPLISTEN* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::TCPLISTEN>&);
  class TSLink<OsNet::TCPLISTEN>* TSLink<OsNet::TCPLISTEN>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::TCPLISTEN>(class TSLink<OsNet::TCPLISTEN>&);
  void TSLink<OsNet::TCPLISTEN>();
  void ~TSLink<OsNet::TCPLISTEN>();
  class TSLink<OsNet::TCPLISTEN>& operator=(class TSLink<OsNet::TCPLISTEN>&);
  int IsLinked();
  struct OsNet::TCPLISTEN* Next();
  struct OsNet::TCPLISTEN* Next();
  struct OsNet::TCPLISTEN* Prev();
  struct OsNet::TCPLISTEN* Prev();
  struct OsNet::TCPLISTEN* RawNext();
  struct OsNet::TCPLISTEN* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::NETSELSOCKPTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::NETSELSOCKPTR>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::NETSELSOCKPTR>&);
  class TSLink<OsNet::NETSELSOCKPTR>* TSLink<OsNet::NETSELSOCKPTR>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::NETSELSOCKPTR>(class TSLink<OsNet::NETSELSOCKPTR>&);
  void TSLink<OsNet::NETSELSOCKPTR>();
  void ~TSLink<OsNet::NETSELSOCKPTR>();
  class TSLink<OsNet::NETSELSOCKPTR>& operator=(class TSLink<OsNet::NETSELSOCKPTR>&);
  int IsLinked();
  struct OsNet::NETSELSOCKPTR* Next();
  struct OsNet::NETSELSOCKPTR* Next();
  struct OsNet::NETSELSOCKPTR* Prev();
  struct OsNet::NETSELSOCKPTR* Prev();
  struct OsNet::NETSELSOCKPTR* RawNext();
  struct OsNet::NETSELSOCKPTR* RawNext();
  void TSLink<OsNet::NETSELSOCKPTR>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::NETCONNECT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::NETCONNECT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::NETCONNECT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::NETCONNECT>&);
  class TSLink<OsNet::NETCONNECT>* TSLink<OsNet::NETCONNECT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::NETCONNECT>(class TSLink<OsNet::NETCONNECT>&);
  void TSLink<OsNet::NETCONNECT>();
  void ~TSLink<OsNet::NETCONNECT>();
  class TSLink<OsNet::NETCONNECT>& operator=(class TSLink<OsNet::NETCONNECT>&);
  int IsLinked();
  struct OsNet::NETCONNECT* Next();
  struct OsNet::NETCONNECT* Next();
  struct OsNet::NETCONNECT* Prev();
  struct OsNet::NETCONNECT* Prev();
  struct OsNet::NETCONNECT* RawNext();
  struct OsNet::NETCONNECT* RawNext();
  void TSLink<OsNet::NETCONNECT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::TCPACCEPT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::TCPACCEPT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::TCPACCEPT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::TCPACCEPT>&);
  class TSLink<OsNet::TCPACCEPT>* TSLink<OsNet::TCPACCEPT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::TCPACCEPT>(class TSLink<OsNet::TCPACCEPT>&);
  void TSLink<OsNet::TCPACCEPT>();
  void ~TSLink<OsNet::TCPACCEPT>();
  class TSLink<OsNet::TCPACCEPT>& operator=(class TSLink<OsNet::TCPACCEPT>&);
  int IsLinked();
  struct OsNet::TCPACCEPT* Next();
  struct OsNet::TCPACCEPT* Next();
  struct OsNet::TCPACCEPT* Prev();
  struct OsNet::TCPACCEPT* Prev();
  struct OsNet::TCPACCEPT* RawNext();
  struct OsNet::TCPACCEPT* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::LOOPCONN> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::LOOPCONN>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class OsNet::LOOPCONN* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::LOOPCONN>&);
  class TSLink<OsNet::LOOPCONN>* TSLink<OsNet::LOOPCONN>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::LOOPCONN>(class TSLink<OsNet::LOOPCONN>&);
  void TSLink<OsNet::LOOPCONN>();
  void ~TSLink<OsNet::LOOPCONN>();
  class TSLink<OsNet::LOOPCONN>& operator=(class TSLink<OsNet::LOOPCONN>&);
  int IsLinked();
  class OsNet::LOOPCONN* Next();
  class OsNet::LOOPCONN* Next();
  class OsNet::LOOPCONN* Prev();
  class OsNet::LOOPCONN* Prev();
  class OsNet::LOOPCONN* RawNext();
  class OsNet::LOOPCONN* RawNext();
  void TSLink<OsNet::LOOPCONN>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::NETCONN> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::NETCONN>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class OsNet::NETCONN* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::NETCONN>&);
  class TSLink<OsNet::NETCONN>* TSLink<OsNet::NETCONN>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::NETCONN>(class TSLink<OsNet::NETCONN>&);
  void TSLink<OsNet::NETCONN>();
  void ~TSLink<OsNet::NETCONN>();
  class TSLink<OsNet::NETCONN>& operator=(class TSLink<OsNet::NETCONN>&);
  int IsLinked();
  class OsNet::NETCONN* Next();
  class OsNet::NETCONN* Next();
  class OsNet::NETCONN* Prev();
  class OsNet::NETCONN* Prev();
  class OsNet::NETCONN* RawNext();
  class OsNet::NETCONN* RawNext();
  void TSLink<OsNet::NETCONN>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::INPUT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::INPUT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::INPUT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::INPUT>&);
  class TSLink<OsNet::INPUT>* TSLink<OsNet::INPUT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::INPUT>(class TSLink<OsNet::INPUT>&);
  void TSLink<OsNet::INPUT>();
  void ~TSLink<OsNet::INPUT>();
  class TSLink<OsNet::INPUT>& operator=(class TSLink<OsNet::INPUT>&);
  int IsLinked();
  struct OsNet::INPUT* Next();
  struct OsNet::INPUT* Next();
  struct OsNet::INPUT* Prev();
  struct OsNet::INPUT* Prev();
  struct OsNet::INPUT* RawNext();
  struct OsNet::INPUT* RawNext();
  void TSLink<OsNet::INPUT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::OUTPUT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::OUTPUT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::OUTPUT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::OUTPUT>&);
  class TSLink<OsNet::OUTPUT>* TSLink<OsNet::OUTPUT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::OUTPUT>(class TSLink<OsNet::OUTPUT>&);
  void TSLink<OsNet::OUTPUT>();
  void ~TSLink<OsNet::OUTPUT>();
  class TSLink<OsNet::OUTPUT>& operator=(class TSLink<OsNet::OUTPUT>&);
  int IsLinked();
  struct OsNet::OUTPUT* Next();
  struct OsNet::OUTPUT* Next();
  struct OsNet::OUTPUT* Prev();
  struct OsNet::OUTPUT* Prev();
  struct OsNet::OUTPUT* RawNext();
  struct OsNet::OUTPUT* RawNext();
  void TSLink<OsNet::OUTPUT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::LOOPCONN::INPUT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::LOOPCONN::INPUT>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::LOOPCONN::INPUT* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::LOOPCONN::INPUT>&);
  class TSLink<OsNet::LOOPCONN::INPUT>* TSLink<OsNet::LOOPCONN::INPUT>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::LOOPCONN::INPUT>(class TSLink<OsNet::LOOPCONN::INPUT>&);
  void TSLink<OsNet::LOOPCONN::INPUT>();
  void ~TSLink<OsNet::LOOPCONN::INPUT>();
  class TSLink<OsNet::LOOPCONN::INPUT>& operator=(class TSLink<OsNet::LOOPCONN::INPUT>&);
  int IsLinked();
  struct OsNet::LOOPCONN::INPUT* Next();
  struct OsNet::LOOPCONN::INPUT* Next();
  struct OsNet::LOOPCONN::INPUT* Prev();
  struct OsNet::LOOPCONN::INPUT* Prev();
  struct OsNet::LOOPCONN::INPUT* RawNext();
  struct OsNet::LOOPCONN::INPUT* RawNext();
  void TSLink<OsNet::LOOPCONN::INPUT>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<OsNet::TCPHOSTADDRINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<OsNet::TCPHOSTADDRINFO>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct OsNet::TCPHOSTADDRINFO* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<OsNet::TCPHOSTADDRINFO>&);
  class TSLink<OsNet::TCPHOSTADDRINFO>* TSLink<OsNet::TCPHOSTADDRINFO>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<OsNet::TCPHOSTADDRINFO>(class TSLink<OsNet::TCPHOSTADDRINFO>&);
  void TSLink<OsNet::TCPHOSTADDRINFO>();
  void ~TSLink<OsNet::TCPHOSTADDRINFO>();
  class TSLink<OsNet::TCPHOSTADDRINFO>& operator=(class TSLink<OsNet::TCPHOSTADDRINFO>&);
  int IsLinked();
  struct OsNet::TCPHOSTADDRINFO* Next();
  struct OsNet::TCPHOSTADDRINFO* Next();
  struct OsNet::TCPHOSTADDRINFO* Prev();
  struct OsNet::TCPHOSTADDRINFO* Prev();
  struct OsNet::TCPHOSTADDRINFO* RawNext();
  struct OsNet::TCPHOSTADDRINFO* RawNext();
  void TSLink<OsNet::TCPHOSTADDRINFO>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<Sound> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<Sound>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct Sound* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<Sound>&);
  class TSLink<Sound>* TSLink<Sound>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<Sound>(class TSLink<Sound>&);
  void TSLink<Sound>();
  void ~TSLink<Sound>();
  class TSLink<Sound>& operator=(class TSLink<Sound>&);
  int IsLinked();
  struct Sound* Next();
  struct Sound* Next();
  struct Sound* Prev();
  struct Sound* Prev();
  struct Sound* RawNext();
  struct Sound* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >&);
  class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >* TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >(class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >&);
  void TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >();
  void ~TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >();
  class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >& operator=(class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >&);
  int IsLinked();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Next();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Prev();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* RawNext();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* RawNext();
  void TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >&);
  class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >* TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >(class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >&);
  void TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >();
  void ~TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >();
  class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >& operator=(class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >&);
  int IsLinked();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Next();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Next();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Prev();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Prev();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* RawNext();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* RawNext();
  void TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SoundFileObjectCacheNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SoundFileObjectCacheNode>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SoundFileObjectCacheNode>&);
  class TSLink<SoundFileObjectCacheNode>* TSLink<SoundFileObjectCacheNode>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SoundFileObjectCacheNode>(class TSLink<SoundFileObjectCacheNode>&);
  void TSLink<SoundFileObjectCacheNode>();
  void ~TSLink<SoundFileObjectCacheNode>();
  class TSLink<SoundFileObjectCacheNode>& operator=(class TSLink<SoundFileObjectCacheNode>&);
  int IsLinked();
  struct SoundFileObjectCacheNode* Next();
  struct SoundFileObjectCacheNode* Next();
  struct SoundFileObjectCacheNode* Prev();
  struct SoundFileObjectCacheNode* Prev();
  struct SoundFileObjectCacheNode* RawNext();
  struct SoundFileObjectCacheNode* RawNext();
  void TSLink<SoundFileObjectCacheNode>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SoundFileObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SoundFileObject>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SoundFileObject* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SoundFileObject>&);
  class TSLink<SoundFileObject>* TSLink<SoundFileObject>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SoundFileObject>(class TSLink<SoundFileObject>&);
  void TSLink<SoundFileObject>();
  void ~TSLink<SoundFileObject>();
  class TSLink<SoundFileObject>& operator=(class TSLink<SoundFileObject>&);
  int IsLinked();
  struct SoundFileObject* Next();
  struct SoundFileObject* Next();
  struct SoundFileObject* Prev();
  struct SoundFileObject* Prev();
  struct SoundFileObject* RawNext();
  struct SoundFileObject* RawNext();
  void TSLink<SoundFileObject>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SoundFileDataCacheBlock> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SoundFileDataCacheBlock>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SoundFileDataCacheBlock>&);
  class TSLink<SoundFileDataCacheBlock>* TSLink<SoundFileDataCacheBlock>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SoundFileDataCacheBlock>(class TSLink<SoundFileDataCacheBlock>&);
  void TSLink<SoundFileDataCacheBlock>();
  void ~TSLink<SoundFileDataCacheBlock>();
  class TSLink<SoundFileDataCacheBlock>& operator=(class TSLink<SoundFileDataCacheBlock>&);
  int IsLinked();
  struct SoundFileDataCacheBlock* Next();
  struct SoundFileDataCacheBlock* Next();
  struct SoundFileDataCacheBlock* Prev();
  struct SoundFileDataCacheBlock* Prev();
  struct SoundFileDataCacheBlock* RawNext();
  struct SoundFileDataCacheBlock* RawNext();
  void TSLink<SoundFileDataCacheBlock>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >&);
  class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >* TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >(class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >&);
  void TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >();
  void ~TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >();
  class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >& operator=(class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >&);
  int IsLinked();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Next();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Next();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Prev();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Prev();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* RawNext();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* RawNext();
  void TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CModelHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CModelHash>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CModelHash* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CModelHash>&);
  class TSLink<CModelHash>* TSLink<CModelHash>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CModelHash>(class TSLink<CModelHash>&);
  void TSLink<CModelHash>();
  void ~TSLink<CModelHash>();
  class TSLink<CModelHash>& operator=(class TSLink<CModelHash>&);
  int IsLinked();
  struct CModelHash* Next();
  struct CModelHash* Next();
  struct CModelHash* Prev();
  struct CModelHash* Prev();
  struct CModelHash* RawNext();
  struct CModelHash* RawNext();
  void TSLink<CModelHash>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CModelModItem> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CModelModItem>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CModelModItem* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CModelModItem>&);
  class TSLink<CModelModItem>* TSLink<CModelModItem>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CModelModItem>(class TSLink<CModelModItem>&);
  void TSLink<CModelModItem>();
  void ~TSLink<CModelModItem>();
  class TSLink<CModelModItem>& operator=(class TSLink<CModelModItem>&);
  int IsLinked();
  struct CModelModItem* Next();
  struct CModelModItem* Next();
  struct CModelModItem* Prev();
  struct CModelModItem* Prev();
  struct CModelModItem* RawNext();
  struct CModelModItem* RawNext();
  void TSLink<CModelModItem>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<LINKUNIQUE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<LINKUNIQUE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct LINKUNIQUE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<LINKUNIQUE>&);
  class TSLink<LINKUNIQUE>* TSLink<LINKUNIQUE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<LINKUNIQUE>(class TSLink<LINKUNIQUE>&);
  void TSLink<LINKUNIQUE>();
  void ~TSLink<LINKUNIQUE>();
  class TSLink<LINKUNIQUE>& operator=(class TSLink<LINKUNIQUE>&);
  int IsLinked();
  struct LINKUNIQUE* Next();
  struct LINKUNIQUE* Next();
  struct LINKUNIQUE* Prev();
  struct LINKUNIQUE* Prev();
  struct LINKUNIQUE* RawNext();
  struct LINKUNIQUE* RawNext();
  void TSLink<LINKUNIQUE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CRenderBatch> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CRenderBatch>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CRenderBatch* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CRenderBatch>&);
  class TSLink<CRenderBatch>* TSLink<CRenderBatch>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CRenderBatch>(class TSLink<CRenderBatch>&);
  void TSLink<CRenderBatch>();
  void ~TSLink<CRenderBatch>();
  class TSLink<CRenderBatch>& operator=(class TSLink<CRenderBatch>&);
  int IsLinked();
  class CRenderBatch* Next();
  class CRenderBatch* Next();
  class CRenderBatch* Prev();
  class CRenderBatch* Prev();
  class CRenderBatch* RawNext();
  class CRenderBatch* RawNext();
  void TSLink<CRenderBatch>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SIMPLEFONTSTRINGREGHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SIMPLEFONTSTRINGREGHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SIMPLEFONTSTRINGREGHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SIMPLEFONTSTRINGREGHASH>&);
  class TSLink<SIMPLEFONTSTRINGREGHASH>* TSLink<SIMPLEFONTSTRINGREGHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SIMPLEFONTSTRINGREGHASH>(class TSLink<SIMPLEFONTSTRINGREGHASH>&);
  void TSLink<SIMPLEFONTSTRINGREGHASH>();
  void ~TSLink<SIMPLEFONTSTRINGREGHASH>();
  class TSLink<SIMPLEFONTSTRINGREGHASH>& operator=(class TSLink<SIMPLEFONTSTRINGREGHASH>&);
  int IsLinked();
  struct SIMPLEFONTSTRINGREGHASH* Next();
  struct SIMPLEFONTSTRINGREGHASH* Next();
  struct SIMPLEFONTSTRINGREGHASH* Prev();
  struct SIMPLEFONTSTRINGREGHASH* Prev();
  struct SIMPLEFONTSTRINGREGHASH* RawNext();
  struct SIMPLEFONTSTRINGREGHASH* RawNext();
  void TSLink<SIMPLEFONTSTRINGREGHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SIMPLETEXTUREREGHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SIMPLETEXTUREREGHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SIMPLETEXTUREREGHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SIMPLETEXTUREREGHASH>&);
  class TSLink<SIMPLETEXTUREREGHASH>* TSLink<SIMPLETEXTUREREGHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SIMPLETEXTUREREGHASH>(class TSLink<SIMPLETEXTUREREGHASH>&);
  void TSLink<SIMPLETEXTUREREGHASH>();
  void ~TSLink<SIMPLETEXTUREREGHASH>();
  class TSLink<SIMPLETEXTUREREGHASH>& operator=(class TSLink<SIMPLETEXTUREREGHASH>&);
  int IsLinked();
  struct SIMPLETEXTUREREGHASH* Next();
  struct SIMPLETEXTUREREGHASH* Next();
  struct SIMPLETEXTUREREGHASH* Prev();
  struct SIMPLETEXTUREREGHASH* Prev();
  struct SIMPLETEXTUREREGHASH* RawNext();
  struct SIMPLETEXTUREREGHASH* RawNext();
  void TSLink<SIMPLETEXTUREREGHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SIMPLEFRAMEREGHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SIMPLEFRAMEREGHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SIMPLEFRAMEREGHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SIMPLEFRAMEREGHASH>&);
  class TSLink<SIMPLEFRAMEREGHASH>* TSLink<SIMPLEFRAMEREGHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SIMPLEFRAMEREGHASH>(class TSLink<SIMPLEFRAMEREGHASH>&);
  void TSLink<SIMPLEFRAMEREGHASH>();
  void ~TSLink<SIMPLEFRAMEREGHASH>();
  class TSLink<SIMPLEFRAMEREGHASH>& operator=(class TSLink<SIMPLEFRAMEREGHASH>&);
  int IsLinked();
  struct SIMPLEFRAMEREGHASH* Next();
  struct SIMPLEFRAMEREGHASH* Next();
  struct SIMPLEFRAMEREGHASH* Prev();
  struct SIMPLEFRAMEREGHASH* Prev();
  struct SIMPLEFRAMEREGHASH* RawNext();
  struct SIMPLEFRAMEREGHASH* RawNext();
  void TSLink<SIMPLEFRAMEREGHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SIMPLECONTEXTHASHOBJ> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SIMPLECONTEXTHASHOBJ>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SIMPLECONTEXTHASHOBJ* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SIMPLECONTEXTHASHOBJ>&);
  class TSLink<SIMPLECONTEXTHASHOBJ>* TSLink<SIMPLECONTEXTHASHOBJ>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SIMPLECONTEXTHASHOBJ>(class TSLink<SIMPLECONTEXTHASHOBJ>&);
  void TSLink<SIMPLECONTEXTHASHOBJ>();
  void ~TSLink<SIMPLECONTEXTHASHOBJ>();
  class TSLink<SIMPLECONTEXTHASHOBJ>& operator=(class TSLink<SIMPLECONTEXTHASHOBJ>&);
  int IsLinked();
  struct SIMPLECONTEXTHASHOBJ* Next();
  struct SIMPLECONTEXTHASHOBJ* Next();
  struct SIMPLECONTEXTHASHOBJ* Prev();
  struct SIMPLECONTEXTHASHOBJ* Prev();
  struct SIMPLECONTEXTHASHOBJ* RawNext();
  struct SIMPLECONTEXTHASHOBJ* RawNext();
  void TSLink<SIMPLECONTEXTHASHOBJ>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CLayoutFrame::FRAMENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CLayoutFrame::FRAMENODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CLayoutFrame::FRAMENODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CLayoutFrame::FRAMENODE>&);
  class TSLink<CLayoutFrame::FRAMENODE>* TSLink<CLayoutFrame::FRAMENODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CLayoutFrame::FRAMENODE>(class TSLink<CLayoutFrame::FRAMENODE>&);
  void TSLink<CLayoutFrame::FRAMENODE>();
  void ~TSLink<CLayoutFrame::FRAMENODE>();
  class TSLink<CLayoutFrame::FRAMENODE>& operator=(class TSLink<CLayoutFrame::FRAMENODE>&);
  int IsLinked();
  struct CLayoutFrame::FRAMENODE* Next();
  struct CLayoutFrame::FRAMENODE* Next();
  struct CLayoutFrame::FRAMENODE* Prev();
  struct CLayoutFrame::FRAMENODE* Prev();
  struct CLayoutFrame::FRAMENODE* RawNext();
  struct CLayoutFrame::FRAMENODE* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CLayoutFrame> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CLayoutFrame>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CLayoutFrame* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CLayoutFrame>&);
  class TSLink<CLayoutFrame>* TSLink<CLayoutFrame>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CLayoutFrame>(class TSLink<CLayoutFrame>&);
  void TSLink<CLayoutFrame>();
  void ~TSLink<CLayoutFrame>();
  class TSLink<CLayoutFrame>& operator=(class TSLink<CLayoutFrame>&);
  int IsLinked();
  class CLayoutFrame* Next();
  class CLayoutFrame* Next();
  class CLayoutFrame* Prev();
  class CLayoutFrame* Prev();
  class CLayoutFrame* RawNext();
  class CLayoutFrame* RawNext();
  void TSLink<CLayoutFrame>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CSimpleFrame> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CSimpleFrame>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CSimpleFrame* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CSimpleFrame>&);
  class TSLink<CSimpleFrame>* NextLink(int);
  void TSLink<CSimpleFrame>(class TSLink<CSimpleFrame>&);
  void TSLink<CSimpleFrame>();
  void ~TSLink<CSimpleFrame>();
  class TSLink<CSimpleFrame>& operator=(class TSLink<CSimpleFrame>&);
  int IsLinked();
  class CSimpleFrame* Next();
  class CSimpleFrame* Next();
  class CSimpleFrame* Prev();
  class CSimpleFrame* Prev();
  class CSimpleFrame* RawNext();
  class CSimpleFrame* RawNext();
  void TSLink<CSimpleFrame>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<REGIONNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<REGIONNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct REGIONNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<REGIONNODE>&);
  class TSLink<REGIONNODE>* NextLink(int);
  void TSLink<REGIONNODE>(class TSLink<REGIONNODE>&);
  void TSLink<REGIONNODE>();
  void ~TSLink<REGIONNODE>();
  class TSLink<REGIONNODE>& operator=(class TSLink<REGIONNODE>&);
  int IsLinked();
  struct REGIONNODE* Next();
  struct REGIONNODE* Next();
  struct REGIONNODE* Prev();
  struct REGIONNODE* Prev();
  struct REGIONNODE* RawNext();
  struct REGIONNODE* RawNext();
  void TSLink<REGIONNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<SIMPLEFRAMENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<SIMPLEFRAMENODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct SIMPLEFRAMENODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<SIMPLEFRAMENODE>&);
  class TSLink<SIMPLEFRAMENODE>* TSLink<SIMPLEFRAMENODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<SIMPLEFRAMENODE>(class TSLink<SIMPLEFRAMENODE>&);
  void TSLink<SIMPLEFRAMENODE>();
  void ~TSLink<SIMPLEFRAMENODE>();
  class TSLink<SIMPLEFRAMENODE>& operator=(class TSLink<SIMPLEFRAMENODE>&);
  int IsLinked();
  struct SIMPLEFRAMENODE* Next();
  struct SIMPLEFRAMENODE* Next();
  struct SIMPLEFRAMENODE* Prev();
  struct SIMPLEFRAMENODE* Prev();
  struct SIMPLEFRAMENODE* RawNext();
  struct SIMPLEFRAMENODE* RawNext();
  void TSLink<SIMPLEFRAMENODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<RENDERCALLBACKNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<RENDERCALLBACKNODE>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct RENDERCALLBACKNODE* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<RENDERCALLBACKNODE>&);
  class TSLink<RENDERCALLBACKNODE>* TSLink<RENDERCALLBACKNODE>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<RENDERCALLBACKNODE>(class TSLink<RENDERCALLBACKNODE>&);
  void TSLink<RENDERCALLBACKNODE>();
  void ~TSLink<RENDERCALLBACKNODE>();
  class TSLink<RENDERCALLBACKNODE>& operator=(class TSLink<RENDERCALLBACKNODE>&);
  int IsLinked();
  struct RENDERCALLBACKNODE* Next();
  struct RENDERCALLBACKNODE* Next();
  struct RENDERCALLBACKNODE* Prev();
  struct RENDERCALLBACKNODE* Prev();
  struct RENDERCALLBACKNODE* RawNext();
  struct RENDERCALLBACKNODE* RawNext();
  void TSLink<RENDERCALLBACKNODE>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CSimpleHyperlinkButton> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CSimpleHyperlinkButton>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CSimpleHyperlinkButton* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CSimpleHyperlinkButton>&);
  class TSLink<CSimpleHyperlinkButton>* TSLink<CSimpleHyperlinkButton>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CSimpleHyperlinkButton>(class TSLink<CSimpleHyperlinkButton>&);
  void TSLink<CSimpleHyperlinkButton>();
  void ~TSLink<CSimpleHyperlinkButton>();
  class TSLink<CSimpleHyperlinkButton>& operator=(class TSLink<CSimpleHyperlinkButton>&);
  int IsLinked();
  class CSimpleHyperlinkButton* Next();
  class CSimpleHyperlinkButton* Next();
  class CSimpleHyperlinkButton* Prev();
  class CSimpleHyperlinkButton* Prev();
  class CSimpleHyperlinkButton* RawNext();
  class CSimpleHyperlinkButton* RawNext();
  void TSLink<CSimpleHyperlinkButton>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EvtContext> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EvtContext>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EvtContext* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EvtContext>&);
  class TSLink<EvtContext>* TSLink<EvtContext>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EvtContext>(class TSLink<EvtContext>&);
  void TSLink<EvtContext>();
  void ~TSLink<EvtContext>();
  class TSLink<EvtContext>& operator=(class TSLink<EvtContext>&);
  int IsLinked();
  struct EvtContext* Next();
  struct EvtContext* Next();
  struct EvtContext* Prev();
  struct EvtContext* Prev();
  struct EvtContext* RawNext();
  struct EvtContext* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EvtThread> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EvtThread>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EvtThread* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EvtThread>&);
  class TSLink<EvtThread>* TSLink<EvtThread>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EvtThread>(class TSLink<EvtThread>&);
  void TSLink<EvtThread>();
  void ~TSLink<EvtThread>();
  class TSLink<EvtThread>& operator=(class TSLink<EvtThread>&);
  int IsLinked();
  struct EvtThread* Next();
  struct EvtThread* Next();
  struct EvtThread* Prev();
  struct EvtThread* Prev();
  struct EvtThread* RawNext();
  struct EvtThread* RawNext();
  void Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EvtKeyDown> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EvtKeyDown>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EvtKeyDown* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EvtKeyDown>&);
  class TSLink<EvtKeyDown>* TSLink<EvtKeyDown>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EvtKeyDown>(class TSLink<EvtKeyDown>&);
  void TSLink<EvtKeyDown>();
  void ~TSLink<EvtKeyDown>();
  class TSLink<EvtKeyDown>& operator=(class TSLink<EvtKeyDown>&);
  int IsLinked();
  struct EvtKeyDown* Next();
  struct EvtKeyDown* Next();
  struct EvtKeyDown* Prev();
  struct EvtKeyDown* Prev();
  struct EvtKeyDown* RawNext();
  struct EvtKeyDown* RawNext();
  void TSLink<EvtKeyDown>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EvtMessage> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EvtMessage>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EvtMessage* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EvtMessage>&);
  class TSLink<EvtMessage>* TSLink<EvtMessage>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EvtMessage>(class TSLink<EvtMessage>&);
  void TSLink<EvtMessage>();
  void ~TSLink<EvtMessage>();
  class TSLink<EvtMessage>& operator=(class TSLink<EvtMessage>&);
  int IsLinked();
  struct EvtMessage* Next();
  struct EvtMessage* Next();
  struct EvtMessage* Prev();
  struct EvtMessage* Prev();
  struct EvtMessage* RawNext();
  struct EvtMessage* RawNext();
  void TSLink<EvtMessage>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EvtHandler> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EvtHandler>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EvtHandler* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EvtHandler>&);
  class TSLink<EvtHandler>* TSLink<EvtHandler>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EvtHandler>(class TSLink<EvtHandler>&);
  void TSLink<EvtHandler>();
  void ~TSLink<EvtHandler>();
  class TSLink<EvtHandler>& operator=(class TSLink<EvtHandler>&);
  int IsLinked();
  struct EvtHandler* Next();
  struct EvtHandler* Next();
  struct EvtHandler* Prev();
  struct EvtHandler* Prev();
  struct EvtHandler* RawNext();
  struct EvtHandler* RawNext();
  void TSLink<EvtHandler>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EventReg::EVENTDISPATCHREG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EventReg::EVENTDISPATCHREG>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EventReg::EVENTDISPATCHREG* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EventReg::EVENTDISPATCHREG>&);
  class TSLink<EventReg::EVENTDISPATCHREG>* TSLink<EventReg::EVENTDISPATCHREG>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EventReg::EVENTDISPATCHREG>(class TSLink<EventReg::EVENTDISPATCHREG>&);
  void TSLink<EventReg::EVENTDISPATCHREG>();
  void ~TSLink<EventReg::EVENTDISPATCHREG>();
  class TSLink<EventReg::EVENTDISPATCHREG>& operator=(class TSLink<EventReg::EVENTDISPATCHREG>&);
  int IsLinked();
  struct EventReg::EVENTDISPATCHREG* Next();
  struct EventReg::EVENTDISPATCHREG* Next();
  struct EventReg::EVENTDISPATCHREG* Prev();
  struct EventReg::EVENTDISPATCHREG* Prev();
  struct EventReg::EVENTDISPATCHREG* RawNext();
  struct EventReg::EVENTDISPATCHREG* RawNext();
  void TSLink<EventReg::EVENTDISPATCHREG>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EventReg::EVENTCALLBACKREG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EventReg::EVENTCALLBACKREG>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EventReg::EVENTCALLBACKREG* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EventReg::EVENTCALLBACKREG>&);
  class TSLink<EventReg::EVENTCALLBACKREG>* TSLink<EventReg::EVENTCALLBACKREG>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EventReg::EVENTCALLBACKREG>(class TSLink<EventReg::EVENTCALLBACKREG>&);
  void TSLink<EventReg::EVENTCALLBACKREG>();
  void ~TSLink<EventReg::EVENTCALLBACKREG>();
  class TSLink<EventReg::EVENTCALLBACKREG>& operator=(class TSLink<EventReg::EVENTCALLBACKREG>&);
  int IsLinked();
  struct EventReg::EVENTCALLBACKREG* Next();
  struct EventReg::EVENTCALLBACKREG* Next();
  struct EventReg::EVENTCALLBACKREG* Prev();
  struct EventReg::EVENTCALLBACKREG* Prev();
  struct EventReg::EVENTCALLBACKREG* RawNext();
  struct EventReg::EVENTCALLBACKREG* RawNext();
  void TSLink<EventReg::EVENTCALLBACKREG>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<EventReg> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<EventReg>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EventReg* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<EventReg>&);
  class TSLink<EventReg>* TSLink<EventReg>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<EventReg>(class TSLink<EventReg>&);
  void TSLink<EventReg>();
  void ~TSLink<EventReg>();
  class TSLink<EventReg>& operator=(class TSLink<EventReg>&);
  int IsLinked();
  struct EventReg* Next();
  struct EventReg* Next();
  struct EventReg* Prev();
  struct EventReg* Prev();
  struct EventReg* RawNext();
  struct EventReg* RawNext();
  void TSLink<EventReg>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<UncachableNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<UncachableNode>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct UncachableNode* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<UncachableNode>&);
  class TSLink<UncachableNode>* TSLink<UncachableNode>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<UncachableNode>(class TSLink<UncachableNode>&);
  void TSLink<UncachableNode>();
  void ~TSLink<UncachableNode>();
  class TSLink<UncachableNode>& operator=(class TSLink<UncachableNode>&);
  int IsLinked();
  struct UncachableNode* Next();
  struct UncachableNode* Next();
  struct UncachableNode* Prev();
  struct UncachableNode* Prev();
  struct UncachableNode* RawNext();
  struct UncachableNode* RawNext();
  void TSLink<UncachableNode>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<PrefetchNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<PrefetchNode>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct PrefetchNode* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<PrefetchNode>&);
  class TSLink<PrefetchNode>* TSLink<PrefetchNode>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<PrefetchNode>(class TSLink<PrefetchNode>&);
  void TSLink<PrefetchNode>();
  void ~TSLink<PrefetchNode>();
  class TSLink<PrefetchNode>& operator=(class TSLink<PrefetchNode>&);
  int IsLinked();
  struct PrefetchNode* Next();
  struct PrefetchNode* Next();
  struct PrefetchNode* Prev();
  struct PrefetchNode* Prev();
  struct PrefetchNode* RawNext();
  struct PrefetchNode* RawNext();
  void TSLink<PrefetchNode>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CStringRep> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CStringRep>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class CStringRep* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CStringRep>&);
  class TSLink<CStringRep>* TSLink<CStringRep>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CStringRep>(class TSLink<CStringRep>&);
  void TSLink<CStringRep>();
  void ~TSLink<CStringRep>();
  class TSLink<CStringRep>& operator=(class TSLink<CStringRep>&);
  int IsLinked();
  class CStringRep* Next();
  class CStringRep* Next();
  class CStringRep* Prev();
  class CStringRep* Prev();
  class CStringRep* RawNext();
  class CStringRep* RawNext();
  void TSLink<CStringRep>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<ANIMHASH> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<ANIMHASH>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct ANIMHASH* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<ANIMHASH>&);
  class TSLink<ANIMHASH>* TSLink<ANIMHASH>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<ANIMHASH>(class TSLink<ANIMHASH>&);
  void TSLink<ANIMHASH>();
  void ~TSLink<ANIMHASH>();
  class TSLink<ANIMHASH>& operator=(class TSLink<ANIMHASH>&);
  int IsLinked();
  struct ANIMHASH* Next();
  struct ANIMHASH* Next();
  struct ANIMHASH* Prev();
  struct ANIMHASH* Prev();
  struct ANIMHASH* RawNext();
  struct ANIMHASH* RawNext();
  void TSLink<ANIMHASH>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLink<CAnimNameHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TSLink<CAnimNameHash>* m_prevlink;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct CAnimNameHash* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSLink<CAnimNameHash>&);
  class TSLink<CAnimNameHash>* TSLink<CAnimNameHash>::NextLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSLink<CAnimNameHash>(class TSLink<CAnimNameHash>&);
  void TSLink<CAnimNameHash>();
  void ~TSLink<CAnimNameHash>();
  class TSLink<CAnimNameHash>& operator=(class TSLink<CAnimNameHash>&);
  int IsLinked();
  struct CAnimNameHash* Next();
  struct CAnimNameHash* Next();
  struct CAnimNameHash* Prev();
  struct CAnimNameHash* Prev();
  struct CAnimNameHash* RawNext();
  struct CAnimNameHash* RawNext();
  void TSLink<CAnimNameHash>::Unlink();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>
}

{ // TSLinkedNode ( wowae )

class TSLinkedNode<EvtThread> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<EvtThread> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<EvtThread>();
  int IsLinked();
  struct EvtThread* Next();
  struct EvtThread* Next();
  struct EvtThread* Prev();
  struct EvtThread* Prev();
  struct EvtThread* RawNext();
  struct EvtThread* RawNext();
  void Unlink();
  void TSLinkedNode<EvtThread>(class TSLinkedNode<EvtThread>&);
  void TSLinkedNode<EvtThread>();
  class TSLinkedNode<EvtThread>& operator=(class TSLinkedNode<EvtThread>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CModelModItem> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CModelModItem> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CModelModItem>();
  int IsLinked();
  struct CModelModItem* Next();
  struct CModelModItem* Next();
  struct CModelModItem* Prev();
  struct CModelModItem* Prev();
  struct CModelModItem* RawNext();
  struct CModelModItem* RawNext();
  void Unlink();
  void TSLinkedNode<CModelModItem>(class TSLinkedNode<CModelModItem>&);
  void TSLinkedNode<CModelModItem>();
  class TSLinkedNode<CModelModItem>& operator=(class TSLinkedNode<CModelModItem>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<OsNet::TCPACCEPT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<OsNet::TCPACCEPT> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<OsNet::TCPACCEPT>();
  int IsLinked();
  struct OsNet::TCPACCEPT* Next();
  struct OsNet::TCPACCEPT* Next();
  struct OsNet::TCPACCEPT* Prev();
  struct OsNet::TCPACCEPT* Prev();
  struct OsNet::TCPACCEPT* RawNext();
  struct OsNet::TCPACCEPT* RawNext();
  void Unlink();
  void TSLinkedNode<OsNet::TCPACCEPT>(class TSLinkedNode<OsNet::TCPACCEPT>&);
  void TSLinkedNode<OsNet::TCPACCEPT>();
  class TSLinkedNode<OsNet::TCPACCEPT>& operator=(class TSLinkedNode<OsNet::TCPACCEPT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ContextTurn> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ContextTurn> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<ContextTurn>();
  int IsLinked();
  struct ContextTurn* Next();
  struct ContextTurn* Next();
  struct ContextTurn* Prev();
  struct ContextTurn* Prev();
  struct ContextTurn* RawNext();
  struct ContextTurn* RawNext();
  void Unlink();
  void TSLinkedNode<ContextTurn>(class TSLinkedNode<ContextTurn>&);
  void TSLinkedNode<ContextTurn>();
  class TSLinkedNode<ContextTurn>& operator=(class TSLinkedNode<ContextTurn>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ContextData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ContextData> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<ContextData>();
  int IsLinked();
  struct ContextData* Next();
  struct ContextData* Next();
  struct ContextData* Prev();
  struct ContextData* Prev();
  struct ContextData* RawNext();
  struct ContextData* RawNext();
  void Unlink();
  void TSLinkedNode<ContextData>(class TSLinkedNode<ContextData>&);
  void TSLinkedNode<ContextData>();
  class TSLinkedNode<ContextData>& operator=(class TSLinkedNode<ContextData>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ThreadData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ThreadData> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<ThreadData>();
  int IsLinked();
  struct ThreadData* Next();
  struct ThreadData* Next();
  struct ThreadData* Prev();
  struct ThreadData* Prev();
  struct ThreadData* RawNext();
  struct ThreadData* RawNext();
  void Unlink();
  void TSLinkedNode<ThreadData>(class TSLinkedNode<ThreadData>&);
  void TSLinkedNode<ThreadData>();
  class TSLinkedNode<ThreadData>& operator=(class TSLinkedNode<ThreadData>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<MSGBUFFER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<MSGBUFFER> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<MSGBUFFER>();
  int IsLinked();
  struct MSGBUFFER* Next();
  struct MSGBUFFER* Next();
  struct MSGBUFFER* Prev();
  struct MSGBUFFER* Prev();
  struct MSGBUFFER* RawNext();
  struct MSGBUFFER* RawNext();
  void Unlink();
  void TSLinkedNode<MSGBUFFER>(class TSLinkedNode<MSGBUFFER>&);
  void TSLinkedNode<MSGBUFFER>();
  class TSLinkedNode<MSGBUFFER>& operator=(class TSLinkedNode<MSGBUFFER>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<OBJHANDLERREQUEST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<OBJHANDLERREQUEST> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<OBJHANDLERREQUEST>();
  int IsLinked();
  struct OBJHANDLERREQUEST* Next();
  struct OBJHANDLERREQUEST* Next();
  struct OBJHANDLERREQUEST* Prev();
  struct OBJHANDLERREQUEST* Prev();
  struct OBJHANDLERREQUEST* RawNext();
  struct OBJHANDLERREQUEST* RawNext();
  void Unlink();
  void TSLinkedNode<OBJHANDLERREQUEST>(class TSLinkedNode<OBJHANDLERREQUEST>&);
  void TSLinkedNode<OBJHANDLERREQUEST>();
  class TSLinkedNode<OBJHANDLERREQUEST>& operator=(class TSLinkedNode<OBJHANDLERREQUEST>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CMirrorHandler> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CMirrorHandler> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CMirrorHandler>();
  int IsLinked();
  struct CMirrorHandler* Next();
  struct CMirrorHandler* Next();
  struct CMirrorHandler* Prev();
  struct CMirrorHandler* Prev();
  struct CMirrorHandler* RawNext();
  struct CMirrorHandler* RawNext();
  void Unlink();
  void TSLinkedNode<CMirrorHandler>(class TSLinkedNode<CMirrorHandler>&);
  void TSLinkedNode<CMirrorHandler>();
  class TSLinkedNode<CMirrorHandler>& operator=(class TSLinkedNode<CMirrorHandler>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CPlayerMoveEvent> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CPlayerMoveEvent> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CPlayerMoveEvent>();
  int IsLinked();
  struct CPlayerMoveEvent* Next();
  struct CPlayerMoveEvent* Next();
  struct CPlayerMoveEvent* Prev();
  struct CPlayerMoveEvent* Prev();
  struct CPlayerMoveEvent* RawNext();
  struct CPlayerMoveEvent* RawNext();
  void Unlink();
  void TSLinkedNode<CPlayerMoveEvent>(class TSLinkedNode<CPlayerMoveEvent>&);
  void TSLinkedNode<CPlayerMoveEvent>();
  class TSLinkedNode<CPlayerMoveEvent>& operator=(class TSLinkedNode<CPlayerMoveEvent>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<PENDINGTEXTEMOTE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<PENDINGTEXTEMOTE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<PENDINGTEXTEMOTE>();
  int IsLinked();
  struct PENDINGTEXTEMOTE* Next();
  struct PENDINGTEXTEMOTE* Next();
  struct PENDINGTEXTEMOTE* Prev();
  struct PENDINGTEXTEMOTE* Prev();
  struct PENDINGTEXTEMOTE* RawNext();
  struct PENDINGTEXTEMOTE* RawNext();
  void Unlink();
  void TSLinkedNode<PENDINGTEXTEMOTE>(class TSLinkedNode<PENDINGTEXTEMOTE>&);
  void TSLinkedNode<PENDINGTEXTEMOTE>();
  class TSLinkedNode<PENDINGTEXTEMOTE>& operator=(class TSLinkedNode<PENDINGTEXTEMOTE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<NETEVENTQUEUENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<NETEVENTQUEUENODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<NETEVENTQUEUENODE>();
  int IsLinked();
  struct NETEVENTQUEUENODE* Next();
  struct NETEVENTQUEUENODE* Next();
  struct NETEVENTQUEUENODE* Prev();
  struct NETEVENTQUEUENODE* Prev();
  struct NETEVENTQUEUENODE* RawNext();
  struct NETEVENTQUEUENODE* RawNext();
  void Unlink();
  void TSLinkedNode<NETEVENTQUEUENODE>(class TSLinkedNode<NETEVENTQUEUENODE>&);
  void TSLinkedNode<NETEVENTQUEUENODE>();
  class TSLinkedNode<NETEVENTQUEUENODE>& operator=(class TSLinkedNode<NETEVENTQUEUENODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<NETCLIENTNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<NETCLIENTNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<NETCLIENTNODE>();
  int IsLinked();
  struct NETCLIENTNODE* Next();
  struct NETCLIENTNODE* Next();
  struct NETCLIENTNODE* Prev();
  struct NETCLIENTNODE* Prev();
  struct NETCLIENTNODE* RawNext();
  struct NETCLIENTNODE* RawNext();
  void Unlink();
  void TSLinkedNode<NETCLIENTNODE>(class TSLinkedNode<NETCLIENTNODE>&);
  void TSLinkedNode<NETCLIENTNODE>();
  class TSLinkedNode<NETCLIENTNODE>& operator=(class TSLinkedNode<NETCLIENTNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<WowConnection::SENDNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<WowConnection::SENDNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<WowConnection::SENDNODE>();
  int IsLinked();
  struct WowConnection::SENDNODE* Next();
  struct WowConnection::SENDNODE* Next();
  struct WowConnection::SENDNODE* Prev();
  struct WowConnection::SENDNODE* Prev();
  struct WowConnection::SENDNODE* RawNext();
  struct WowConnection::SENDNODE* RawNext();
  void Unlink();
  void TSLinkedNode<WowConnection::SENDNODE>(class TSLinkedNode<WowConnection::SENDNODE>&);
  void TSLinkedNode<WowConnection::SENDNODE>();
  class TSLinkedNode<WowConnection::SENDNODE>& operator=(class TSLinkedNode<WowConnection::SENDNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<TEXTLINETEXTURE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<TEXTLINETEXTURE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<TEXTLINETEXTURE>();
  int IsLinked();
  struct TEXTLINETEXTURE* Next();
  struct TEXTLINETEXTURE* Next();
  struct TEXTLINETEXTURE* Prev();
  struct TEXTLINETEXTURE* Prev();
  struct TEXTLINETEXTURE* RawNext();
  struct TEXTLINETEXTURE* RawNext();
  void Unlink();
  void TSLinkedNode<TEXTLINETEXTURE>(class TSLinkedNode<TEXTLINETEXTURE>&);
  void TSLinkedNode<TEXTLINETEXTURE>();
  class TSLinkedNode<TEXTLINETEXTURE>& operator=(class TSLinkedNode<TEXTLINETEXTURE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CHUNKDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CHUNKDATA> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CHUNKDATA>();
  int IsLinked();
  struct CHUNKDATA* Next();
  struct CHUNKDATA* Next();
  struct CHUNKDATA* Prev();
  struct CHUNKDATA* Prev();
  struct CHUNKDATA* RawNext();
  struct CHUNKDATA* RawNext();
  void Unlink();
  void TSLinkedNode<CHUNKDATA>(class TSLinkedNode<CHUNKDATA>&);
  void TSLinkedNode<CHUNKDATA>();
  class TSLinkedNode<CHUNKDATA>& operator=(class TSLinkedNode<CHUNKDATA>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<AuraDecayNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<AuraDecayNode> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<AuraDecayNode>();
  int IsLinked();
  struct AuraDecayNode* Next();
  struct AuraDecayNode* Next();
  struct AuraDecayNode* Prev();
  struct AuraDecayNode* Prev();
  struct AuraDecayNode* RawNext();
  struct AuraDecayNode* RawNext();
  void Unlink();
  void TSLinkedNode<AuraDecayNode>(class TSLinkedNode<AuraDecayNode>&);
  void TSLinkedNode<AuraDecayNode>();
  class TSLinkedNode<AuraDecayNode>& operator=(class TSLinkedNode<AuraDecayNode>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<FREENAMEPLATE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<FREENAMEPLATE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<FREENAMEPLATE>();
  int IsLinked();
  struct FREENAMEPLATE* Next();
  struct FREENAMEPLATE* Next();
  struct FREENAMEPLATE* Prev();
  struct FREENAMEPLATE* Prev();
  struct FREENAMEPLATE* RawNext();
  struct FREENAMEPLATE* RawNext();
  void Unlink();
  void TSLinkedNode<FREENAMEPLATE>(class TSLinkedNode<FREENAMEPLATE>&);
  void TSLinkedNode<FREENAMEPLATE>();
  class TSLinkedNode<FREENAMEPLATE>& operator=(class TSLinkedNode<FREENAMEPLATE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<DEFERREDSPELLMISS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<DEFERREDSPELLMISS> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<DEFERREDSPELLMISS>();
  int IsLinked();
  struct DEFERREDSPELLMISS* Next();
  struct DEFERREDSPELLMISS* Next();
  struct DEFERREDSPELLMISS* Prev();
  struct DEFERREDSPELLMISS* Prev();
  struct DEFERREDSPELLMISS* RawNext();
  struct DEFERREDSPELLMISS* RawNext();
  void Unlink();
  void TSLinkedNode<DEFERREDSPELLMISS>(class TSLinkedNode<DEFERREDSPELLMISS>&);
  void TSLinkedNode<DEFERREDSPELLMISS>();
  class TSLinkedNode<DEFERREDSPELLMISS>& operator=(class TSLinkedNode<DEFERREDSPELLMISS>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<DEFERREDDAMAGE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<DEFERREDDAMAGE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<DEFERREDDAMAGE>();
  int IsLinked();
  struct DEFERREDDAMAGE* Next();
  struct DEFERREDDAMAGE* Next();
  struct DEFERREDDAMAGE* Prev();
  struct DEFERREDDAMAGE* Prev();
  struct DEFERREDDAMAGE* RawNext();
  struct DEFERREDDAMAGE* RawNext();
  void Unlink();
  void TSLinkedNode<DEFERREDDAMAGE>(class TSLinkedNode<DEFERREDDAMAGE>&);
  void TSLinkedNode<DEFERREDDAMAGE>();
  class TSLinkedNode<DEFERREDDAMAGE>& operator=(class TSLinkedNode<DEFERREDDAMAGE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<MISSILENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<MISSILENODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<MISSILENODE>();
  int IsLinked();
  struct MISSILENODE* Next();
  struct MISSILENODE* Next();
  struct MISSILENODE* Prev();
  struct MISSILENODE* Prev();
  struct MISSILENODE* RawNext();
  struct MISSILENODE* RawNext();
  void Unlink();
  void TSLinkedNode<MISSILENODE>(class TSLinkedNode<MISSILENODE>&);
  void TSLinkedNode<MISSILENODE>();
  class TSLinkedNode<MISSILENODE>& operator=(class TSLinkedNode<MISSILENODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<HITSPRITE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<HITSPRITE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<HITSPRITE>();
  int IsLinked();
  struct HITSPRITE* Next();
  struct HITSPRITE* Next();
  struct HITSPRITE* Prev();
  struct HITSPRITE* Prev();
  struct HITSPRITE* RawNext();
  struct HITSPRITE* RawNext();
  void Unlink();
  void TSLinkedNode<HITSPRITE>(class TSLinkedNode<HITSPRITE>&);
  void TSLinkedNode<HITSPRITE>();
  class TSLinkedNode<HITSPRITE>& operator=(class TSLinkedNode<HITSPRITE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CONSOLELINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CONSOLELINE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CONSOLELINE>();
  int IsLinked();
  struct CONSOLELINE* Next();
  struct CONSOLELINE* Next();
  struct CONSOLELINE* Prev();
  struct CONSOLELINE* Prev();
  struct CONSOLELINE* RawNext();
  struct CONSOLELINE* RawNext();
  void Unlink();
  void TSLinkedNode<CONSOLELINE>(class TSLinkedNode<CONSOLELINE>&);
  void TSLinkedNode<CONSOLELINE>();
  class TSLinkedNode<CONSOLELINE>& operator=(class TSLinkedNode<CONSOLELINE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CChunkTex> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CChunkTex> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CChunkTex>();
  int IsLinked();
  struct CChunkTex* Next();
  struct CChunkTex* Next();
  struct CChunkTex* Prev();
  struct CChunkTex* Prev();
  struct CChunkTex* RawNext();
  struct CChunkTex* RawNext();
  void Unlink();
  void TSLinkedNode<CChunkTex>(class TSLinkedNode<CChunkTex>&);
  void TSLinkedNode<CChunkTex>();
  class TSLinkedNode<CChunkTex>& operator=(class TSLinkedNode<CChunkTex>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CChunkLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CChunkLayer> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CChunkLayer>();
  int IsLinked();
  struct CChunkLayer* Next();
  struct CChunkLayer* Next();
  struct CChunkLayer* Prev();
  struct CChunkLayer* Prev();
  struct CChunkLayer* RawNext();
  struct CChunkLayer* RawNext();
  void Unlink();
  void TSLinkedNode<CChunkLayer>(class TSLinkedNode<CChunkLayer>&);
  void TSLinkedNode<CChunkLayer>();
  class TSLinkedNode<CChunkLayer>& operator=(class TSLinkedNode<CChunkLayer>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<GAMETIMECBSTRUCT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<GAMETIMECBSTRUCT> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<GAMETIMECBSTRUCT>();
  int IsLinked();
  struct GAMETIMECBSTRUCT* Next();
  struct GAMETIMECBSTRUCT* Next();
  struct GAMETIMECBSTRUCT* Prev();
  struct GAMETIMECBSTRUCT* Prev();
  struct GAMETIMECBSTRUCT* RawNext();
  struct GAMETIMECBSTRUCT* RawNext();
  void Unlink();
  void TSLinkedNode<GAMETIMECBSTRUCT>(class TSLinkedNode<GAMETIMECBSTRUCT>&);
  void TSLinkedNode<GAMETIMECBSTRUCT>();
  class TSLinkedNode<GAMETIMECBSTRUCT>& operator=(class TSLinkedNode<GAMETIMECBSTRUCT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<SWING> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<SWING> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<SWING>();
  int IsLinked();
  struct SWING* Next();
  struct SWING* Next();
  struct SWING* Prev();
  struct SWING* Prev();
  struct SWING* RawNext();
  struct SWING* RawNext();
  void Unlink();
  void TSLinkedNode<SWING>(class TSLinkedNode<SWING>&);
  void TSLinkedNode<SWING>();
  class TSLinkedNode<SWING>& operator=(class TSLinkedNode<SWING>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CGxFont> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CGxFont> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CGxFont>();
  int IsLinked();
  struct CGxFont* Next();
  struct CGxFont* Next();
  struct CGxFont* Prev();
  struct CGxFont* Prev();
  struct CGxFont* RawNext();
  struct CGxFont* RawNext();
  void Unlink();
  void TSLinkedNode<CGxFont>(class TSLinkedNode<CGxFont>&);
  void TSLinkedNode<CGxFont>();
  class TSLinkedNode<CGxFont>& operator=(class TSLinkedNode<CGxFont>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<RENDERCALLBACKNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<RENDERCALLBACKNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<RENDERCALLBACKNODE>();
  int IsLinked();
  struct RENDERCALLBACKNODE* Next();
  struct RENDERCALLBACKNODE* Next();
  struct RENDERCALLBACKNODE* Prev();
  struct RENDERCALLBACKNODE* Prev();
  struct RENDERCALLBACKNODE* RawNext();
  struct RENDERCALLBACKNODE* RawNext();
  void Unlink();
  void TSLinkedNode<RENDERCALLBACKNODE>(class TSLinkedNode<RENDERCALLBACKNODE>&);
  void TSLinkedNode<RENDERCALLBACKNODE>();
  class TSLinkedNode<RENDERCALLBACKNODE>& operator=(class TSLinkedNode<RENDERCALLBACKNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CLayoutFrame::FRAMENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CLayoutFrame::FRAMENODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CLayoutFrame::FRAMENODE>();
  int IsLinked();
  struct CLayoutFrame::FRAMENODE* Next();
  struct CLayoutFrame::FRAMENODE* Next();
  struct CLayoutFrame::FRAMENODE* Prev();
  struct CLayoutFrame::FRAMENODE* Prev();
  struct CLayoutFrame::FRAMENODE* RawNext();
  struct CLayoutFrame::FRAMENODE* RawNext();
  void Unlink();
  void TSLinkedNode<CLayoutFrame::FRAMENODE>(class TSLinkedNode<CLayoutFrame::FRAMENODE>&);
  void TSLinkedNode<CLayoutFrame::FRAMENODE>();
  class TSLinkedNode<CLayoutFrame::FRAMENODE>& operator=(class TSLinkedNode<CLayoutFrame::FRAMENODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<IMPACTEFFECTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<IMPACTEFFECTDESC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<IMPACTEFFECTDESC>();
  int IsLinked();
  struct IMPACTEFFECTDESC* Next();
  struct IMPACTEFFECTDESC* Next();
  struct IMPACTEFFECTDESC* Prev();
  struct IMPACTEFFECTDESC* Prev();
  struct IMPACTEFFECTDESC* RawNext();
  struct IMPACTEFFECTDESC* RawNext();
  void Unlink();
  void TSLinkedNode<IMPACTEFFECTDESC>(class TSLinkedNode<IMPACTEFFECTDESC>&);
  void TSLinkedNode<IMPACTEFFECTDESC>();
  class TSLinkedNode<IMPACTEFFECTDESC>& operator=(class TSLinkedNode<IMPACTEFFECTDESC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<BlizzardObject::Shard> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<BlizzardObject::Shard> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<BlizzardObject::Shard>();
  int IsLinked();
  struct BlizzardObject::Shard* Next();
  struct BlizzardObject::Shard* Next();
  struct BlizzardObject::Shard* Prev();
  struct BlizzardObject::Shard* Prev();
  struct BlizzardObject::Shard* RawNext();
  struct BlizzardObject::Shard* RawNext();
  void Unlink();
  void TSLinkedNode<BlizzardObject::Shard>(class TSLinkedNode<BlizzardObject::Shard>&);
  void TSLinkedNode<BlizzardObject::Shard>();
  class TSLinkedNode<BlizzardObject::Shard>& operator=(class TSLinkedNode<BlizzardObject::Shard>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<BLOODSPLATNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<BLOODSPLATNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<BLOODSPLATNODE>();
  int IsLinked();
  struct BLOODSPLATNODE* Next();
  struct BLOODSPLATNODE* Next();
  struct BLOODSPLATNODE* Prev();
  struct BLOODSPLATNODE* Prev();
  struct BLOODSPLATNODE* RawNext();
  struct BLOODSPLATNODE* RawNext();
  void Unlink();
  void TSLinkedNode<BLOODSPLATNODE>(class TSLinkedNode<BLOODSPLATNODE>&);
  void TSLinkedNode<BLOODSPLATNODE>();
  class TSLinkedNode<BLOODSPLATNODE>& operator=(class TSLinkedNode<BLOODSPLATNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<SPELLHISTORY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<SPELLHISTORY> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<SPELLHISTORY>();
  int IsLinked();
  struct SPELLHISTORY* Next();
  struct SPELLHISTORY* Next();
  struct SPELLHISTORY* Prev();
  struct SPELLHISTORY* Prev();
  struct SPELLHISTORY* RawNext();
  struct SPELLHISTORY* RawNext();
  void Unlink();
  void TSLinkedNode<SPELLHISTORY>(class TSLinkedNode<SPELLHISTORY>&);
  void TSLinkedNode<SPELLHISTORY>();
  class TSLinkedNode<SPELLHISTORY>& operator=(class TSLinkedNode<SPELLHISTORY>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<BlizzardObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<BlizzardObject> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<BlizzardObject>();
  int IsLinked();
  struct BlizzardObject* Next();
  struct BlizzardObject* Next();
  struct BlizzardObject* Prev();
  struct BlizzardObject* Prev();
  struct BlizzardObject* RawNext();
  struct BlizzardObject* RawNext();
  void Unlink();
  void TSLinkedNode<BlizzardObject>(class TSLinkedNode<BlizzardObject>&);
  void TSLinkedNode<BlizzardObject>();
  class TSLinkedNode<BlizzardObject>& operator=(class TSLinkedNode<BlizzardObject>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CModelRecord> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CModelRecord> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CModelRecord>();
  int IsLinked();
  struct CModelRecord* Next();
  struct CModelRecord* Next();
  struct CModelRecord* Prev();
  struct CModelRecord* Prev();
  struct CModelRecord* RawNext();
  struct CModelRecord* RawNext();
  void Unlink();
  void TSLinkedNode<CModelRecord>(class TSLinkedNode<CModelRecord>&);
  void TSLinkedNode<CModelRecord>();
  class TSLinkedNode<CModelRecord>& operator=(class TSLinkedNode<CModelRecord>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CGxString> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CGxString> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CGxString>();
  int IsLinked();
  struct CGxString* Next();
  struct CGxString* Next();
  struct CGxString* Prev();
  struct CGxString* Prev();
  struct CGxString* RawNext();
  struct CGxString* RawNext();
  void Unlink();
  void TSLinkedNode<CGxString>(class TSLinkedNode<CGxString>&);
  void TSLinkedNode<CGxString>();
  class TSLinkedNode<CGxString>& operator=(class TSLinkedNode<CGxString>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<FishingLineObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<FishingLineObject> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<FishingLineObject>();
  int IsLinked();
  struct FishingLineObject* Next();
  struct FishingLineObject* Next();
  struct FishingLineObject* Prev();
  struct FishingLineObject* Prev();
  struct FishingLineObject* RawNext();
  struct FishingLineObject* RawNext();
  void Unlink();
  void TSLinkedNode<FishingLineObject>(class TSLinkedNode<FishingLineObject>&);
  void TSLinkedNode<FishingLineObject>();
  class TSLinkedNode<FishingLineObject>& operator=(class TSLinkedNode<FishingLineObject>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<Sound> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<Sound> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<Sound>();
  int IsLinked();
  struct Sound* Next();
  struct Sound* Next();
  struct Sound* Prev();
  struct Sound* Prev();
  struct Sound* RawNext();
  struct Sound* RawNext();
  void Unlink();
  void TSLinkedNode<Sound>(class TSLinkedNode<Sound>&);
  void TSLinkedNode<Sound>();
  class TSLinkedNode<Sound>& operator=(class TSLinkedNode<Sound>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ANIMQUEUENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ANIMQUEUENODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<ANIMQUEUENODE>();
  int IsLinked();
  struct ANIMQUEUENODE* Next();
  struct ANIMQUEUENODE* Next();
  struct ANIMQUEUENODE* Prev();
  struct ANIMQUEUENODE* Prev();
  struct ANIMQUEUENODE* RawNext();
  struct ANIMQUEUENODE* RawNext();
  void Unlink();
  void TSLinkedNode<ANIMQUEUENODE>(class TSLinkedNode<ANIMQUEUENODE>&);
  void TSLinkedNode<ANIMQUEUENODE>();
  class TSLinkedNode<ANIMQUEUENODE>& operator=(class TSLinkedNode<ANIMQUEUENODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<LightningObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<LightningObject> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<LightningObject>();
  int IsLinked();
  struct LightningObject* Next();
  struct LightningObject* Next();
  struct LightningObject* Prev();
  struct LightningObject* Prev();
  struct LightningObject* RawNext();
  struct LightningObject* RawNext();
  void Unlink();
  void TSLinkedNode<LightningObject>(class TSLinkedNode<LightningObject>&);
  void TSLinkedNode<LightningObject>();
  class TSLinkedNode<LightningObject>& operator=(class TSLinkedNode<LightningObject>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<SPELLEFFECTDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<SPELLEFFECTDESC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<SPELLEFFECTDESC>();
  int IsLinked();
  struct SPELLEFFECTDESC* Next();
  struct SPELLEFFECTDESC* Next();
  struct SPELLEFFECTDESC* Prev();
  struct SPELLEFFECTDESC* Prev();
  struct SPELLEFFECTDESC* RawNext();
  struct SPELLEFFECTDESC* RawNext();
  void Unlink();
  void TSLinkedNode<SPELLEFFECTDESC>(class TSLinkedNode<SPELLEFFECTDESC>&);
  void TSLinkedNode<SPELLEFFECTDESC>();
  class TSLinkedNode<SPELLEFFECTDESC>& operator=(class TSLinkedNode<SPELLEFFECTDESC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<WaterRadWave> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<WaterRadWave> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<WaterRadWave>();
  int IsLinked();
  struct WaterRadWave* Next();
  struct WaterRadWave* Next();
  struct WaterRadWave* Prev();
  struct WaterRadWave* Prev();
  struct WaterRadWave* RawNext();
  struct WaterRadWave* RawNext();
  void Unlink();
  void TSLinkedNode<WaterRadWave>(class TSLinkedNode<WaterRadWave>&);
  void TSLinkedNode<WaterRadWave>::TSLinkedNode<WaterRadWave>();
  class TSLinkedNode<WaterRadWave>& operator=(class TSLinkedNode<WaterRadWave>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<HANDLER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<HANDLER> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<HANDLER>::~TSLinkedNode<HANDLER>();
  int IsLinked();
  struct HANDLER* Next();
  struct HANDLER* Next();
  struct HANDLER* Prev();
  struct HANDLER* Prev();
  struct HANDLER* RawNext();
  struct HANDLER* RawNext();
  void TSLinkedNode<HANDLER>::Unlink();
  void TSLinkedNode<HANDLER>(class TSLinkedNode<HANDLER>&);
  void TSLinkedNode<HANDLER>::TSLinkedNode<HANDLER>();
  class TSLinkedNode<HANDLER>& operator=(class TSLinkedNode<HANDLER>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ASYNCREAD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ASYNCREAD> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<ASYNCREAD>::~TSLinkedNode<ASYNCREAD>();
  int IsLinked();
  class ASYNCREAD* Next();
  class ASYNCREAD* Next();
  class ASYNCREAD* Prev();
  class ASYNCREAD* Prev();
  class ASYNCREAD* RawNext();
  class ASYNCREAD* RawNext();
  void TSLinkedNode<ASYNCREAD>::Unlink();
  void TSLinkedNode<ASYNCREAD>(class TSLinkedNode<ASYNCREAD>&);
  void TSLinkedNode<ASYNCREAD>::TSLinkedNode<ASYNCREAD>();
  class TSLinkedNode<ASYNCREAD>& operator=(class TSLinkedNode<ASYNCREAD>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CMDDEF> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CMDDEF> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<CMDDEF>::~TSLinkedNode<CMDDEF>();
  int IsLinked();
  struct CMDDEF* Next();
  struct CMDDEF* TSLinkedNode<CMDDEF>::Next();
  struct CMDDEF* Prev();
  struct CMDDEF* Prev();
  struct CMDDEF* RawNext();
  struct CMDDEF* RawNext();
  void TSLinkedNode<CMDDEF>::Unlink();
  void TSLinkedNode<CMDDEF>(class TSLinkedNode<CMDDEF>&);
  void TSLinkedNode<CMDDEF>::TSLinkedNode<CMDDEF>();
  class TSLinkedNode<CMDDEF>& operator=(class TSLinkedNode<CMDDEF>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<HUFFNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<HUFFNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<HUFFNODE>::~TSLinkedNode<HUFFNODE>();
  int IsLinked();
  struct HUFFNODE* Next();
  struct HUFFNODE* TSLinkedNode<HUFFNODE>::Next();
  struct HUFFNODE* Prev();
  struct HUFFNODE* Prev();
  struct HUFFNODE* RawNext();
  struct HUFFNODE* TSLinkedNode<HUFFNODE>::RawNext();
  void TSLinkedNode<HUFFNODE>::Unlink();
  void TSLinkedNode<HUFFNODE>(class TSLinkedNode<HUFFNODE>&);
  void TSLinkedNode<HUFFNODE>::TSLinkedNode<HUFFNODE>();
  class TSLinkedNode<HUFFNODE>& operator=(class TSLinkedNode<HUFFNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<WNDREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<WNDREC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<WNDREC>::~TSLinkedNode<WNDREC>();
  int IsLinked();
  struct WNDREC* Next();
  struct WNDREC* Next();
  struct WNDREC* Prev();
  struct WNDREC* Prev();
  struct WNDREC* RawNext();
  struct WNDREC* RawNext();
  void TSLinkedNode<WNDREC>::Unlink();
  void TSLinkedNode<WNDREC>(class TSLinkedNode<WNDREC>&);
  void TSLinkedNode<WNDREC>::TSLinkedNode<WNDREC>();
  class TSLinkedNode<WNDREC>& operator=(class TSLinkedNode<WNDREC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<EVENTREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<EVENTREC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<EVENTREC>::~TSLinkedNode<EVENTREC>();
  int IsLinked();
  struct EVENTREC* Next();
  struct EVENTREC* Next();
  struct EVENTREC* Prev();
  struct EVENTREC* Prev();
  struct EVENTREC* RawNext();
  struct EVENTREC* RawNext();
  void TSLinkedNode<EVENTREC>::Unlink();
  void TSLinkedNode<EVENTREC>(class TSLinkedNode<EVENTREC>&);
  void TSLinkedNode<EVENTREC>::TSLinkedNode<EVENTREC>();
  class TSLinkedNode<EVENTREC>& operator=(class TSLinkedNode<EVENTREC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<REQUEST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<REQUEST> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<REQUEST>::~TSLinkedNode<REQUEST>();
  int IsLinked();
  struct REQUEST* Next();
  struct REQUEST* Next();
  struct REQUEST* Prev();
  struct REQUEST* TSLinkedNode<REQUEST>::Prev();
  struct REQUEST* RawNext();
  struct REQUEST* RawNext();
  void TSLinkedNode<REQUEST>::Unlink();
  void TSLinkedNode<REQUEST>(class TSLinkedNode<REQUEST>&);
  void TSLinkedNode<REQUEST>::TSLinkedNode<REQUEST>();
  class TSLinkedNode<REQUEST>& operator=(class TSLinkedNode<REQUEST>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<Storm::SFile::AUDIOSTREAM> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<Storm::SFile::AUDIOSTREAM> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<Storm::SFile::AUDIOSTREAM>::~TSLinkedNode<Storm::SFile::AUDIOSTREAM>();
  int IsLinked();
  struct Storm::SFile::AUDIOSTREAM* Next();
  struct Storm::SFile::AUDIOSTREAM* TSLinkedNode<Storm::SFile::AUDIOSTREAM>::Next();
  struct Storm::SFile::AUDIOSTREAM* Prev();
  struct Storm::SFile::AUDIOSTREAM* Prev();
  struct Storm::SFile::AUDIOSTREAM* RawNext();
  struct Storm::SFile::AUDIOSTREAM* RawNext();
  void TSLinkedNode<Storm::SFile::AUDIOSTREAM>::Unlink();
  void TSLinkedNode<Storm::SFile::AUDIOSTREAM>(class TSLinkedNode<Storm::SFile::AUDIOSTREAM>&);
  void TSLinkedNode<Storm::SFile::AUDIOSTREAM>::TSLinkedNode<Storm::SFile::AUDIOSTREAM>();
  class TSLinkedNode<Storm::SFile::AUDIOSTREAM>& operator=(class TSLinkedNode<Storm::SFile::AUDIOSTREAM>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<Storm::SFile::FILEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<Storm::SFile::FILEREC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<Storm::SFile::FILEREC>::~TSLinkedNode<Storm::SFile::FILEREC>();
  int IsLinked();
  struct Storm::SFile::FILEREC* Next();
  struct Storm::SFile::FILEREC* Next();
  struct Storm::SFile::FILEREC* Prev();
  struct Storm::SFile::FILEREC* Prev();
  struct Storm::SFile::FILEREC* RawNext();
  struct Storm::SFile::FILEREC* RawNext();
  void TSLinkedNode<Storm::SFile::FILEREC>::Unlink();
  void TSLinkedNode<Storm::SFile::FILEREC>(class TSLinkedNode<Storm::SFile::FILEREC>&);
  void TSLinkedNode<Storm::SFile::FILEREC>::TSLinkedNode<Storm::SFile::FILEREC>();
  class TSLinkedNode<Storm::SFile::FILEREC>& operator=(class TSLinkedNode<Storm::SFile::FILEREC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<Storm::SFile::ARCHIVEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<Storm::SFile::ARCHIVEREC> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<Storm::SFile::ARCHIVEREC>::~TSLinkedNode<Storm::SFile::ARCHIVEREC>();
  int IsLinked();
  struct Storm::SFile::ARCHIVEREC* Next();
  struct Storm::SFile::ARCHIVEREC* TSLinkedNode<Storm::SFile::ARCHIVEREC>::Next();
  struct Storm::SFile::ARCHIVEREC* Prev();
  struct Storm::SFile::ARCHIVEREC* Prev();
  struct Storm::SFile::ARCHIVEREC* RawNext();
  struct Storm::SFile::ARCHIVEREC* RawNext();
  void TSLinkedNode<Storm::SFile::ARCHIVEREC>::Unlink();
  void TSLinkedNode<Storm::SFile::ARCHIVEREC>(class TSLinkedNode<Storm::SFile::ARCHIVEREC>&);
  void TSLinkedNode<Storm::SFile::ARCHIVEREC>::TSLinkedNode<Storm::SFile::ARCHIVEREC>();
  class TSLinkedNode<Storm::SFile::ARCHIVEREC>& operator=(class TSLinkedNode<Storm::SFile::ARCHIVEREC>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<BREAKCMD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<BREAKCMD> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<BREAKCMD>::~TSLinkedNode<BREAKCMD>();
  int IsLinked();
  struct BREAKCMD* Next();
  struct BREAKCMD* Next();
  struct BREAKCMD* Prev();
  struct BREAKCMD* Prev();
  struct BREAKCMD* RawNext();
  struct BREAKCMD* RawNext();
  void TSLinkedNode<BREAKCMD>::Unlink();
  void TSLinkedNode<BREAKCMD>(class TSLinkedNode<BREAKCMD>&);
  void TSLinkedNode<BREAKCMD>::TSLinkedNode<BREAKCMD>();
  class TSLinkedNode<BREAKCMD>& operator=(class TSLinkedNode<BREAKCMD>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ZipFileArchive> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ZipFileArchive> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<ZipFileArchive>::~TSLinkedNode<ZipFileArchive>();
  int IsLinked();
  struct ZipFileArchive* Next();
  struct ZipFileArchive* Next();
  struct ZipFileArchive* Prev();
  struct ZipFileArchive* Prev();
  struct ZipFileArchive* RawNext();
  struct ZipFileArchive* RawNext();
  void TSLinkedNode<ZipFileArchive>::Unlink();
  void TSLinkedNode<ZipFileArchive>(class TSLinkedNode<ZipFileArchive>&);
  void TSLinkedNode<ZipFileArchive>::TSLinkedNode<ZipFileArchive>();
  class TSLinkedNode<ZipFileArchive>& operator=(class TSLinkedNode<ZipFileArchive>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ACTIVEAURAINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ACTIVEAURAINFO> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<ACTIVEAURAINFO>::~TSLinkedNode<ACTIVEAURAINFO>();
  int IsLinked();
  struct ACTIVEAURAINFO* Next();
  struct ACTIVEAURAINFO* Next();
  struct ACTIVEAURAINFO* Prev();
  struct ACTIVEAURAINFO* Prev();
  struct ACTIVEAURAINFO* RawNext();
  struct ACTIVEAURAINFO* RawNext();
  void Unlink();
  void TSLinkedNode<ACTIVEAURAINFO>(class TSLinkedNode<ACTIVEAURAINFO>&);
  void TSLinkedNode<ACTIVEAURAINFO>();
  class TSLinkedNode<ACTIVEAURAINFO>& operator=(class TSLinkedNode<ACTIVEAURAINFO>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CGxuLight> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CGxuLight> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<CGxuLight>::~TSLinkedNode<CGxuLight>();
  int IsLinked();
  struct CGxuLight* Next();
  struct CGxuLight* Next();
  struct CGxuLight* Prev();
  struct CGxuLight* Prev();
  struct CGxuLight* RawNext();
  struct CGxuLight* RawNext();
  void Unlink();
  void TSLinkedNode<CGxuLight>(class TSLinkedNode<CGxuLight>&);
  void TSLinkedNode<CGxuLight>();
  class TSLinkedNode<CGxuLight>& operator=(class TSLinkedNode<CGxuLight>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<IGXUTEXTLINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<IGXUTEXTLINE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<IGXUTEXTLINE>::~TSLinkedNode<IGXUTEXTLINE>();
  int IsLinked();
  struct IGXUTEXTLINE* Next();
  struct IGXUTEXTLINE* Next();
  struct IGXUTEXTLINE* Prev();
  struct IGXUTEXTLINE* Prev();
  struct IGXUTEXTLINE* RawNext();
  struct IGXUTEXTLINE* RawNext();
  void Unlink();
  void TSLinkedNode<IGXUTEXTLINE>(class TSLinkedNode<IGXUTEXTLINE>&);
  void TSLinkedNode<IGXUTEXTLINE>();
  class TSLinkedNode<IGXUTEXTLINE>& operator=(class TSLinkedNode<IGXUTEXTLINE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CGxStringBatch> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CGxStringBatch> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<CGxStringBatch>();
  int IsLinked();
  struct CGxStringBatch* Next();
  struct CGxStringBatch* Next();
  struct CGxStringBatch* Prev();
  struct CGxStringBatch* Prev();
  struct CGxStringBatch* RawNext();
  struct CGxStringBatch* RawNext();
  void Unlink();
  void TSLinkedNode<CGxStringBatch>(class TSLinkedNode<CGxStringBatch>&);
  void TSLinkedNode<CGxStringBatch>();
  class TSLinkedNode<CGxStringBatch>& operator=(class TSLinkedNode<CGxStringBatch>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<DBCACHECALLBACK> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<DBCACHECALLBACK> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<DBCACHECALLBACK>::~TSLinkedNode<DBCACHECALLBACK>();
  int IsLinked();
  struct DBCACHECALLBACK* Next();
  struct DBCACHECALLBACK* Next();
  struct DBCACHECALLBACK* Prev();
  struct DBCACHECALLBACK* Prev();
  struct DBCACHECALLBACK* RawNext();
  struct DBCACHECALLBACK* RawNext();
  void Unlink();
  void TSLinkedNode<DBCACHECALLBACK>(class TSLinkedNode<DBCACHECALLBACK>&);
  void TSLinkedNode<DBCACHECALLBACK>::TSLinkedNode<DBCACHECALLBACK>();
  class TSLinkedNode<DBCACHECALLBACK>& operator=(class TSLinkedNode<DBCACHECALLBACK>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<BFSNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<BFSNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<BFSNODE>::~TSLinkedNode<BFSNODE>();
  int IsLinked();
  struct BFSNODE* Next();
  struct BFSNODE* Next();
  struct BFSNODE* Prev();
  struct BFSNODE* Prev();
  struct BFSNODE* RawNext();
  struct BFSNODE* RawNext();
  void Unlink();
  void TSLinkedNode<BFSNODE>(class TSLinkedNode<BFSNODE>&);
  void TSLinkedNode<BFSNODE>();
  class TSLinkedNode<BFSNODE>& operator=(class TSLinkedNode<BFSNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<CameraShake> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<CameraShake> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<CameraShake>::~TSLinkedNode<CameraShake>();
  int IsLinked();
  struct CameraShake* Next();
  struct CameraShake* Next();
  struct CameraShake* Prev();
  struct CameraShake* Prev();
  struct CameraShake* RawNext();
  struct CameraShake* RawNext();
  void Unlink();
  void TSLinkedNode<CameraShake>(class TSLinkedNode<CameraShake>&);
  void TSLinkedNode<CameraShake>();
  class TSLinkedNode<CameraShake>& operator=(class TSLinkedNode<CameraShake>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<DIRTYFACE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<DIRTYFACE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<DIRTYFACE>::~TSLinkedNode<DIRTYFACE>();
  int IsLinked();
  struct DIRTYFACE* Next();
  struct DIRTYFACE* Next();
  struct DIRTYFACE* Prev();
  struct DIRTYFACE* Prev();
  struct DIRTYFACE* RawNext();
  struct DIRTYFACE* RawNext();
  void Unlink();
  void TSLinkedNode<DIRTYFACE>(class TSLinkedNode<DIRTYFACE>&);
  void TSLinkedNode<DIRTYFACE>();
  class TSLinkedNode<DIRTYFACE>& operator=(class TSLinkedNode<DIRTYFACE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<PENDINGUSERLIST> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<PENDINGUSERLIST> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<PENDINGUSERLIST>::~TSLinkedNode<PENDINGUSERLIST>();
  int IsLinked();
  struct PENDINGUSERLIST* Next();
  struct PENDINGUSERLIST* Next();
  struct PENDINGUSERLIST* Prev();
  struct PENDINGUSERLIST* Prev();
  struct PENDINGUSERLIST* RawNext();
  struct PENDINGUSERLIST* RawNext();
  void Unlink();
  void TSLinkedNode<PENDINGUSERLIST>(class TSLinkedNode<PENDINGUSERLIST>&);
  void TSLinkedNode<PENDINGUSERLIST>();
  class TSLinkedNode<PENDINGUSERLIST>& operator=(class TSLinkedNode<PENDINGUSERLIST>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<PENDINGCHAT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<PENDINGCHAT> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<PENDINGCHAT>::~TSLinkedNode<PENDINGCHAT>();
  int IsLinked();
  struct PENDINGCHAT* Next();
  struct PENDINGCHAT* Next();
  struct PENDINGCHAT* Prev();
  struct PENDINGCHAT* Prev();
  struct PENDINGCHAT* RawNext();
  struct PENDINGCHAT* RawNext();
  void Unlink();
  void TSLinkedNode<PENDINGCHAT>(class TSLinkedNode<PENDINGCHAT>&);
  void TSLinkedNode<PENDINGCHAT>();
  class TSLinkedNode<PENDINGCHAT>& operator=(class TSLinkedNode<PENDINGCHAT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<ProfileInternal::STRINGBLOCK> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<ProfileInternal::STRINGBLOCK> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<ProfileInternal::STRINGBLOCK>::~TSLinkedNode<ProfileInternal::STRINGBLOCK>();
  int IsLinked();
  struct ProfileInternal::STRINGBLOCK* Next();
  struct ProfileInternal::STRINGBLOCK* Next();
  struct ProfileInternal::STRINGBLOCK* Prev();
  struct ProfileInternal::STRINGBLOCK* Prev();
  struct ProfileInternal::STRINGBLOCK* RawNext();
  struct ProfileInternal::STRINGBLOCK* RawNext();
  void Unlink();
  void TSLinkedNode<ProfileInternal::STRINGBLOCK>(class TSLinkedNode<ProfileInternal::STRINGBLOCK>&);
  void TSLinkedNode<ProfileInternal::STRINGBLOCK>();
  class TSLinkedNode<ProfileInternal::STRINGBLOCK>& operator=(class TSLinkedNode<ProfileInternal::STRINGBLOCK>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<OsNet::TCPHOSTADDRINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<OsNet::TCPHOSTADDRINFO> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<OsNet::TCPHOSTADDRINFO>::~TSLinkedNode<OsNet::TCPHOSTADDRINFO>();
  int IsLinked();
  struct OsNet::TCPHOSTADDRINFO* Next();
  struct OsNet::TCPHOSTADDRINFO* Next();
  struct OsNet::TCPHOSTADDRINFO* Prev();
  struct OsNet::TCPHOSTADDRINFO* Prev();
  struct OsNet::TCPHOSTADDRINFO* RawNext();
  struct OsNet::TCPHOSTADDRINFO* RawNext();
  void Unlink();
  void TSLinkedNode<OsNet::TCPHOSTADDRINFO>(class TSLinkedNode<OsNet::TCPHOSTADDRINFO>&);
  void TSLinkedNode<OsNet::TCPHOSTADDRINFO>();
  class TSLinkedNode<OsNet::TCPHOSTADDRINFO>& operator=(class TSLinkedNode<OsNet::TCPHOSTADDRINFO>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<OsNet::INPUT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<OsNet::INPUT> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<OsNet::INPUT>::~TSLinkedNode<OsNet::INPUT>();
  int IsLinked();
  struct OsNet::INPUT* Next();
  struct OsNet::INPUT* Next();
  struct OsNet::INPUT* Prev();
  struct OsNet::INPUT* Prev();
  struct OsNet::INPUT* RawNext();
  struct OsNet::INPUT* RawNext();
  void Unlink();
  void TSLinkedNode<OsNet::INPUT>(class TSLinkedNode<OsNet::INPUT>&);
  void TSLinkedNode<OsNet::INPUT>();
  class TSLinkedNode<OsNet::INPUT>& operator=(class TSLinkedNode<OsNet::INPUT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<OsNet::OUTPUT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<OsNet::OUTPUT> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<OsNet::OUTPUT>::~TSLinkedNode<OsNet::OUTPUT>();
  int IsLinked();
  struct OsNet::OUTPUT* Next();
  struct OsNet::OUTPUT* Next();
  struct OsNet::OUTPUT* Prev();
  struct OsNet::OUTPUT* Prev();
  struct OsNet::OUTPUT* RawNext();
  struct OsNet::OUTPUT* RawNext();
  void Unlink();
  void TSLinkedNode<OsNet::OUTPUT>(class TSLinkedNode<OsNet::OUTPUT>&);
  void TSLinkedNode<OsNet::OUTPUT>();
  class TSLinkedNode<OsNet::OUTPUT>& operator=(class TSLinkedNode<OsNet::OUTPUT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<LINKUNIQUE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<LINKUNIQUE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<LINKUNIQUE>::~TSLinkedNode<LINKUNIQUE>();
  int IsLinked();
  struct LINKUNIQUE* Next();
  struct LINKUNIQUE* Next();
  struct LINKUNIQUE* Prev();
  struct LINKUNIQUE* Prev();
  struct LINKUNIQUE* RawNext();
  struct LINKUNIQUE* RawNext();
  void Unlink();
  void TSLinkedNode<LINKUNIQUE>(class TSLinkedNode<LINKUNIQUE>&);
  void TSLinkedNode<LINKUNIQUE>::TSLinkedNode<LINKUNIQUE>();
  class TSLinkedNode<LINKUNIQUE>& operator=(class TSLinkedNode<LINKUNIQUE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<SIMPLEFRAMENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<SIMPLEFRAMENODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<SIMPLEFRAMENODE>::~TSLinkedNode<SIMPLEFRAMENODE>();
  int IsLinked();
  struct SIMPLEFRAMENODE* Next();
  struct SIMPLEFRAMENODE* Next();
  struct SIMPLEFRAMENODE* Prev();
  struct SIMPLEFRAMENODE* Prev();
  struct SIMPLEFRAMENODE* RawNext();
  struct SIMPLEFRAMENODE* RawNext();
  void Unlink();
  void TSLinkedNode<SIMPLEFRAMENODE>(class TSLinkedNode<SIMPLEFRAMENODE>&);
  void TSLinkedNode<SIMPLEFRAMENODE>();
  class TSLinkedNode<SIMPLEFRAMENODE>& operator=(class TSLinkedNode<SIMPLEFRAMENODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<REGIONNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<REGIONNODE> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<REGIONNODE>::~TSLinkedNode<REGIONNODE>();
  int IsLinked();
  struct REGIONNODE* Next();
  struct REGIONNODE* Next();
  struct REGIONNODE* Prev();
  struct REGIONNODE* Prev();
  struct REGIONNODE* RawNext();
  struct REGIONNODE* RawNext();
  void Unlink();
  void TSLinkedNode<REGIONNODE>(class TSLinkedNode<REGIONNODE>&);
  void TSLinkedNode<REGIONNODE>();
  class TSLinkedNode<REGIONNODE>& operator=(class TSLinkedNode<REGIONNODE>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<EvtContext> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<EvtContext> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<EvtContext>();
  int IsLinked();
  struct EvtContext* Next();
  struct EvtContext* Next();
  struct EvtContext* Prev();
  struct EvtContext* Prev();
  struct EvtContext* RawNext();
  struct EvtContext* RawNext();
  void Unlink();
  void TSLinkedNode<EvtContext>(class TSLinkedNode<EvtContext>&);
  void TSLinkedNode<EvtContext>::TSLinkedNode<EvtContext>();
  class TSLinkedNode<EvtContext>& operator=(class TSLinkedNode<EvtContext>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<EventReg::EVENTDISPATCHREG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<EventReg::EVENTDISPATCHREG> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSLinkedNode<EventReg::EVENTDISPATCHREG>::~TSLinkedNode<EventReg::EVENTDISPATCHREG>();
  int IsLinked();
  struct EventReg::EVENTDISPATCHREG* Next();
  struct EventReg::EVENTDISPATCHREG* Next();
  struct EventReg::EVENTDISPATCHREG* Prev();
  struct EventReg::EVENTDISPATCHREG* Prev();
  struct EventReg::EVENTDISPATCHREG* RawNext();
  struct EventReg::EVENTDISPATCHREG* RawNext();
  void Unlink();
  void TSLinkedNode<EventReg::EVENTDISPATCHREG>(class TSLinkedNode<EventReg::EVENTDISPATCHREG>&);
  void TSLinkedNode<EventReg::EVENTDISPATCHREG>();
  class TSLinkedNode<EventReg::EVENTDISPATCHREG>& operator=(class TSLinkedNode<EventReg::EVENTDISPATCHREG>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSLinkedNode<EventReg::EVENTCALLBACKREG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x8|*/ class TSLink<EventReg::EVENTCALLBACKREG> m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ~TSLinkedNode<EventReg::EVENTCALLBACKREG>();
  int IsLinked();
  struct EventReg::EVENTCALLBACKREG* Next();
  struct EventReg::EVENTCALLBACKREG* Next();
  struct EventReg::EVENTCALLBACKREG* Prev();
  struct EventReg::EVENTCALLBACKREG* Prev();
  struct EventReg::EVENTCALLBACKREG* RawNext();
  struct EventReg::EVENTCALLBACKREG* RawNext();
  void Unlink();
  void TSLinkedNode<EventReg::EVENTCALLBACKREG>(class TSLinkedNode<EventReg::EVENTCALLBACKREG>&);
  void TSLinkedNode<EventReg::EVENTCALLBACKREG>();
  class TSLinkedNode<EventReg::EVENTCALLBACKREG>& operator=(class TSLinkedNode<EventReg::EVENTCALLBACKREG>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

}

{ // TSGetLink ( wowae )

class TSGetLink<HANDLER> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<HANDLER>* __fastcall TSGetLink<HANDLER>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<HANDLER>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<ASYNCREAD> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<ASYNCREAD>* __fastcall TSGetLink<ASYNCREAD>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<ASYNCREAD>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<CMDDEF> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<CMDDEF>* __fastcall TSGetLink<CMDDEF>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<CMDDEF>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<HUFFNODE> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<HUFFNODE>* __fastcall TSGetLink<HUFFNODE>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<HUFFNODE>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<WNDREC> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<WNDREC>* __fastcall TSGetLink<WNDREC>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<WNDREC>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<Storm::SFile::FILEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<Storm::SFile::FILEREC>* __fastcall TSGetLink<Storm::SFile::FILEREC>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<Storm::SFile::FILEREC>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<Storm::SFile::ARCHIVEREC> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<Storm::SFile::ARCHIVEREC>* __fastcall TSGetLink<Storm::SFile::ARCHIVEREC>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<Storm::SFile::ARCHIVEREC>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<Storm::SFile::AUDIOSTREAM> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<Storm::SFile::AUDIOSTREAM>* __fastcall TSGetLink<Storm::SFile::AUDIOSTREAM>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<Storm::SFile::AUDIOSTREAM>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<EVENTREC> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<EVENTREC>* __fastcall TSGetLink<EVENTREC>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<EVENTREC>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<REQUEST> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<REQUEST>* __fastcall TSGetLink<REQUEST>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<REQUEST>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<BREAKCMD> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<BREAKCMD>* __fastcall TSGetLink<BREAKCMD>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<BREAKCMD>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetLink<ZipFileArchive> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<ZipFileArchive>* __fastcall TSGetLink<ZipFileArchive>::Link(/*<register ecx>*/ /*|0x4|*/ class TSLinkedNode<ZipFileArchive>* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

}

{ // TSGetExplicitLink ( wowae )

class TSGetExplicitLink<FILEMAP> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<FILEMAP>* __fastcall TSGetExplicitLink<FILEMAP>::Link(/*<register ecx>*/ /*|0x4|*/ void* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >* __fastcall TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >::Link(/*<register ecx>*/ /*|0x4|*/ void* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetExplicitLink<RGN> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<RGN>* __fastcall TSGetExplicitLink<RGN>::Link(/*<register ecx>*/ /*|0x4|*/ void* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

class TSGetExplicitLink<ZipFileDirEntry> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TSLink<ZipFileDirEntry>* __fastcall TSGetExplicitLink<ZipFileDirEntry>::Link(/*<register ecx>*/ /*|0x4|*/ void* nodeptr, /*<register edx>*/ /*|0x4|*/ int linkoffset);

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x1>

}

{ // TSList ( wowae{кроме Combine()} )

class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::TCPLISTEN> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >&);
  void InitializeTerminator();
  class TSLink<OsNet::TCPLISTEN>* Link(struct OsNet::TCPLISTEN*);
  void SetLinkOffset(int);
  void TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >(int);
  void TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >(class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >&);
  void TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >();
  void ~TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >();
  class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >& operator=(class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >*, unsigned long, struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* DeleteNode(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* Head();
  struct OsNet::TCPLISTEN* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::TCPLISTEN*);
  void LinkNode(struct OsNet::TCPLISTEN*, unsigned long, struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::TCPLISTEN* Next(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* Next(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* Prev(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* Prev(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* RawNext(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* RawNext(struct OsNet::TCPLISTEN*);
  struct OsNet::TCPLISTEN* Tail();
  struct OsNet::TCPLISTEN* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OsNet::TCPLISTEN*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::TCPACCEPT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >&);
  void InitializeTerminator();
  class TSLink<OsNet::TCPACCEPT>* Link(struct OsNet::TCPACCEPT*);
  void SetLinkOffset(int);
  void TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >(int);
  void TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >(class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >&);
  void TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >();
  void ~TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >();
  class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >& operator=(class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::TCPACCEPT,TSGetLink<OsNet::TCPACCEPT> >*, unsigned long, struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* DeleteNode(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* Head();
  struct OsNet::TCPACCEPT* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::TCPACCEPT*);
  void LinkNode(struct OsNet::TCPACCEPT*, unsigned long, struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::TCPACCEPT* Next(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* Next(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* Prev(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* Prev(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* RawNext(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* RawNext(struct OsNet::TCPACCEPT*);
  struct OsNet::TCPACCEPT* Tail();
  struct OsNet::TCPACCEPT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OsNet::TCPACCEPT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::INPUT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >&);
  void InitializeTerminator();
  class TSLink<OsNet::INPUT>* Link(struct OsNet::INPUT*);
  void SetLinkOffset(int);
  void TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >(int);
  void TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >(class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >&);
  void TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >();
  void ~TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >();
  class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >& operator=(class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::INPUT,TSGetLink<OsNet::INPUT> >*, unsigned long, struct OsNet::INPUT*);
  struct OsNet::INPUT* DeleteNode(struct OsNet::INPUT*);
  struct OsNet::INPUT* Head();
  struct OsNet::INPUT* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::INPUT*);
  void LinkNode(struct OsNet::INPUT*, unsigned long, struct OsNet::INPUT*);
  struct OsNet::INPUT* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::INPUT* Next(struct OsNet::INPUT*);
  struct OsNet::INPUT* Next(struct OsNet::INPUT*);
  struct OsNet::INPUT* Prev(struct OsNet::INPUT*);
  struct OsNet::INPUT* Prev(struct OsNet::INPUT*);
  struct OsNet::INPUT* RawNext(struct OsNet::INPUT*);
  struct OsNet::INPUT* RawNext(struct OsNet::INPUT*);
  struct OsNet::INPUT* Tail();
  struct OsNet::INPUT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OsNet::INPUT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::OUTPUT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >&);
  void InitializeTerminator();
  class TSLink<OsNet::OUTPUT>* Link(struct OsNet::OUTPUT*);
  void SetLinkOffset(int);
  void TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >(int);
  void TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >(class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >&);
  void TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >();
  void ~TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >();
  class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >& operator=(class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::OUTPUT,TSGetLink<OsNet::OUTPUT> >*, unsigned long, struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* DeleteNode(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* Head();
  struct OsNet::OUTPUT* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::OUTPUT*);
  void LinkNode(struct OsNet::OUTPUT*, unsigned long, struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::OUTPUT* Next(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* Next(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* Prev(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* Prev(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* RawNext(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* RawNext(struct OsNet::OUTPUT*);
  struct OsNet::OUTPUT* Tail();
  struct OsNet::OUTPUT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OsNet::OUTPUT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<NETEVENTQUEUENODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >&);
  void InitializeTerminator();
  class TSLink<NETEVENTQUEUENODE>* Link(struct NETEVENTQUEUENODE*);
  void SetLinkOffset(int);
  void TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >(int);
  void TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >(class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >&);
  void TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >();
  void ~TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >();
  class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >& operator=(class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<NETEVENTQUEUENODE,TSGetLink<NETEVENTQUEUENODE> >*, unsigned long, struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* DeleteNode(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* Head();
  struct NETEVENTQUEUENODE* Head();
  int IsEmpty();
  int IsLinked(struct NETEVENTQUEUENODE*);
  void LinkNode(struct NETEVENTQUEUENODE*, unsigned long, struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct NETEVENTQUEUENODE* Next(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* Next(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* Prev(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* Prev(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* RawNext(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* RawNext(struct NETEVENTQUEUENODE*);
  struct NETEVENTQUEUENODE* Tail();
  struct NETEVENTQUEUENODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct NETEVENTQUEUENODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WowConnection,TSGetExplicitLink<WowConnection> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WowConnection> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<WowConnection,TSGetExplicitLink<WowConnection> >&);
  void InitializeTerminator();
  class TSLink<WowConnection>* Link(class WowConnection*);
  void SetLinkOffset(int);
  void TSList<WowConnection,TSGetExplicitLink<WowConnection> >(int);
  void TSList<WowConnection,TSGetExplicitLink<WowConnection> >(class TSList<WowConnection,TSGetExplicitLink<WowConnection> >&);
  void TSList<WowConnection,TSGetExplicitLink<WowConnection> >();
  void ~TSList<WowConnection,TSGetExplicitLink<WowConnection> >();
  class TSList<WowConnection,TSGetExplicitLink<WowConnection> >& operator=(class TSList<WowConnection,TSGetExplicitLink<WowConnection> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WowConnection,TSGetExplicitLink<WowConnection> >*, unsigned long, class WowConnection*);
  class WowConnection* DeleteNode(class WowConnection*);
  class WowConnection* Head();
  class WowConnection* Head();
  int IsEmpty();
  int IsLinked(class WowConnection*);
  void LinkNode(class WowConnection*, unsigned long, class WowConnection*);
  class WowConnection* NewNode(unsigned long, unsigned long, unsigned long);
  class WowConnection* Next(class WowConnection*);
  class WowConnection* Next(class WowConnection*);
  class WowConnection* Prev(class WowConnection*);
  class WowConnection* Prev(class WowConnection*);
  class WowConnection* RawNext(class WowConnection*);
  class WowConnection* RawNext(class WowConnection*);
  class WowConnection* Tail();
  class WowConnection* Tail();
  void UnlinkAll();
  void UnlinkNode(class WowConnection*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WowConnection::SENDNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >&);
  void InitializeTerminator();
  class TSLink<WowConnection::SENDNODE>* Link(struct WowConnection::SENDNODE*);
  void SetLinkOffset(int);
  void TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >(int);
  void TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >(class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >&);
  void TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >();
  void ~TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >();
  class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >& operator=(class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WowConnection::SENDNODE,TSGetLink<WowConnection::SENDNODE> >*, unsigned long, struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* DeleteNode(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* Head();
  struct WowConnection::SENDNODE* Head();
  int IsEmpty();
  int IsLinked(struct WowConnection::SENDNODE*);
  void LinkNode(struct WowConnection::SENDNODE*, unsigned long, struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct WowConnection::SENDNODE* Next(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* Next(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* Prev(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* Prev(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* RawNext(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* RawNext(struct WowConnection::SENDNODE*);
  struct WowConnection::SENDNODE* Tail();
  struct WowConnection::SENDNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct WowConnection::SENDNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EventReg::EVENTDISPATCHREG> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >&);
  void InitializeTerminator();
  class TSLink<EventReg::EVENTDISPATCHREG>* Link(struct EventReg::EVENTDISPATCHREG*);
  void SetLinkOffset(int);
  void TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >(int);
  void TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >(class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >&);
  void TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >();
  void ~TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >();
  class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >& operator=(class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EventReg::EVENTDISPATCHREG,TSGetLink<EventReg::EVENTDISPATCHREG> >*, unsigned long, struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* DeleteNode(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* Head();
  struct EventReg::EVENTDISPATCHREG* Head();
  int IsEmpty();
  int IsLinked(struct EventReg::EVENTDISPATCHREG*);
  void LinkNode(struct EventReg::EVENTDISPATCHREG*, unsigned long, struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* NewNode(unsigned long, unsigned long, unsigned long);
  struct EventReg::EVENTDISPATCHREG* Next(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* Next(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* Prev(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* Prev(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* RawNext(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* RawNext(struct EventReg::EVENTDISPATCHREG*);
  struct EventReg::EVENTDISPATCHREG* Tail();
  struct EventReg::EVENTDISPATCHREG* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EventReg::EVENTDISPATCHREG*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EventReg::EVENTCALLBACKREG> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >&);
  void InitializeTerminator();
  class TSLink<EventReg::EVENTCALLBACKREG>* Link(struct EventReg::EVENTCALLBACKREG*);
  void SetLinkOffset(int);
  void TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >(int);
  void TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >(class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >&);
  void TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >();
  void ~TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >();
  class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >& operator=(class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EventReg::EVENTCALLBACKREG,TSGetLink<EventReg::EVENTCALLBACKREG> >*, unsigned long, struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* DeleteNode(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* Head();
  struct EventReg::EVENTCALLBACKREG* Head();
  int IsEmpty();
  int IsLinked(struct EventReg::EVENTCALLBACKREG*);
  void LinkNode(struct EventReg::EVENTCALLBACKREG*, unsigned long, struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* NewNode(unsigned long, unsigned long, unsigned long);
  struct EventReg::EVENTCALLBACKREG* Next(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* Next(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* Prev(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* Prev(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* RawNext(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* RawNext(struct EventReg::EVENTCALLBACKREG*);
  struct EventReg::EVENTCALLBACKREG* Tail();
  struct EventReg::EVENTCALLBACKREG* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EventReg::EVENTCALLBACKREG*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SWING,TSGetLink<SWING> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SWING> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SWING,TSGetLink<SWING> >&);
  void InitializeTerminator();
  class TSLink<SWING>* Link(struct SWING*);
  void SetLinkOffset(int);
  void TSList<SWING,TSGetLink<SWING> >(int);
  void TSList<SWING,TSGetLink<SWING> >(class TSList<SWING,TSGetLink<SWING> >&);
  void TSList<SWING,TSGetLink<SWING> >();
  void ~TSList<SWING,TSGetLink<SWING> >();
  class TSList<SWING,TSGetLink<SWING> >& operator=(class TSList<SWING,TSGetLink<SWING> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SWING,TSGetLink<SWING> >*, unsigned long, struct SWING*);
  struct SWING* DeleteNode(struct SWING*);
  struct SWING* Head();
  struct SWING* Head();
  int IsEmpty();
  int IsLinked(struct SWING*);
  void LinkNode(struct SWING*, unsigned long, struct SWING*);
  struct SWING* NewNode(unsigned long, unsigned long, unsigned long);
  struct SWING* Next(struct SWING*);
  struct SWING* Next(struct SWING*);
  struct SWING* Prev(struct SWING*);
  struct SWING* Prev(struct SWING*);
  struct SWING* RawNext(struct SWING*);
  struct SWING* RawNext(struct SWING*);
  struct SWING* Tail();
  struct SWING* Tail();
  void UnlinkAll();
  void UnlinkNode(struct SWING*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CLayoutFrame::FRAMENODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >&);
  void InitializeTerminator();
  class TSLink<CLayoutFrame::FRAMENODE>* Link(struct CLayoutFrame::FRAMENODE*);
  void SetLinkOffset(int);
  void TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >(int);
  void TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >(class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >&);
  void TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >();
  void ~TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >();
  class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >& operator=(class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CLayoutFrame::FRAMENODE,TSGetLink<CLayoutFrame::FRAMENODE> >*, unsigned long, struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* DeleteNode(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* Head();
  struct CLayoutFrame::FRAMENODE* Head();
  int IsEmpty();
  int IsLinked(struct CLayoutFrame::FRAMENODE*);
  void LinkNode(struct CLayoutFrame::FRAMENODE*, unsigned long, struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct CLayoutFrame::FRAMENODE* Next(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* Next(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* Prev(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* Prev(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* RawNext(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* RawNext(struct CLayoutFrame::FRAMENODE*);
  struct CLayoutFrame::FRAMENODE* Tail();
  struct CLayoutFrame::FRAMENODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CLayoutFrame::FRAMENODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<RENDERCALLBACKNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >&);
  void InitializeTerminator();
  class TSLink<RENDERCALLBACKNODE>* Link(struct RENDERCALLBACKNODE*);
  void SetLinkOffset(int);
  void TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >(int);
  void TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >(class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >&);
  void TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >();
  void ~TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >();
  class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >& operator=(class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<RENDERCALLBACKNODE,TSGetLink<RENDERCALLBACKNODE> >*, unsigned long, struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* DeleteNode(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* Head();
  struct RENDERCALLBACKNODE* Head();
  int IsEmpty();
  int IsLinked(struct RENDERCALLBACKNODE*);
  void LinkNode(struct RENDERCALLBACKNODE*, unsigned long, struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct RENDERCALLBACKNODE* Next(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* Next(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* Prev(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* Prev(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* RawNext(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* RawNext(struct RENDERCALLBACKNODE*);
  struct RENDERCALLBACKNODE* Tail();
  struct RENDERCALLBACKNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct RENDERCALLBACKNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<LightningObject,TSGetLink<LightningObject> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<LightningObject> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<LightningObject,TSGetLink<LightningObject> >&);
  void InitializeTerminator();
  class TSLink<LightningObject>* Link(struct LightningObject*);
  void SetLinkOffset(int);
  void TSList<LightningObject,TSGetLink<LightningObject> >(int);
  void TSList<LightningObject,TSGetLink<LightningObject> >(class TSList<LightningObject,TSGetLink<LightningObject> >&);
  void TSList<LightningObject,TSGetLink<LightningObject> >();
  void ~TSList<LightningObject,TSGetLink<LightningObject> >();
  class TSList<LightningObject,TSGetLink<LightningObject> >& operator=(class TSList<LightningObject,TSGetLink<LightningObject> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<LightningObject,TSGetLink<LightningObject> >*, unsigned long, struct LightningObject*);
  struct LightningObject* DeleteNode(struct LightningObject*);
  struct LightningObject* Head();
  struct LightningObject* Head();
  int IsEmpty();
  int IsLinked(struct LightningObject*);
  void TSList<LightningObject,TSGetLink<LightningObject> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct LightningObject* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct LightningObject* existingptr);
  struct LightningObject* NewNode(unsigned long, unsigned long, unsigned long);
  struct LightningObject* Next(struct LightningObject*);
  struct LightningObject* Next(struct LightningObject*);
  struct LightningObject* Prev(struct LightningObject*);
  struct LightningObject* Prev(struct LightningObject*);
  struct LightningObject* RawNext(struct LightningObject*);
  struct LightningObject* RawNext(struct LightningObject*);
  struct LightningObject* Tail();
  struct LightningObject* Tail();
  void UnlinkAll();
  void UnlinkNode(struct LightningObject*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FishingLineObject,TSGetLink<FishingLineObject> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FishingLineObject> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FishingLineObject,TSGetLink<FishingLineObject> >&);
  void InitializeTerminator();
  class TSLink<FishingLineObject>* Link(struct FishingLineObject*);
  void SetLinkOffset(int);
  void TSList<FishingLineObject,TSGetLink<FishingLineObject> >(int);
  void TSList<FishingLineObject,TSGetLink<FishingLineObject> >(class TSList<FishingLineObject,TSGetLink<FishingLineObject> >&);
  void TSList<FishingLineObject,TSGetLink<FishingLineObject> >();
  void ~TSList<FishingLineObject,TSGetLink<FishingLineObject> >();
  class TSList<FishingLineObject,TSGetLink<FishingLineObject> >& operator=(class TSList<FishingLineObject,TSGetLink<FishingLineObject> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<FishingLineObject,TSGetLink<FishingLineObject> >*, unsigned long, struct FishingLineObject*);
  struct FishingLineObject* DeleteNode(struct FishingLineObject*);
  struct FishingLineObject* Head();
  struct FishingLineObject* Head();
  int IsEmpty();
  int IsLinked(struct FishingLineObject*);
  void LinkNode(struct FishingLineObject*, unsigned long, struct FishingLineObject*);
  struct FishingLineObject* NewNode(unsigned long, unsigned long, unsigned long);
  struct FishingLineObject* Next(struct FishingLineObject*);
  struct FishingLineObject* Next(struct FishingLineObject*);
  struct FishingLineObject* Prev(struct FishingLineObject*);
  struct FishingLineObject* Prev(struct FishingLineObject*);
  struct FishingLineObject* RawNext(struct FishingLineObject*);
  struct FishingLineObject* RawNext(struct FishingLineObject*);
  struct FishingLineObject* Tail();
  struct FishingLineObject* Tail();
  void UnlinkAll();
  void UnlinkNode(struct FishingLineObject*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BlizzardObject::Shard> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >&);
  void InitializeTerminator();
  class TSLink<BlizzardObject::Shard>* Link(struct BlizzardObject::Shard*);
  void SetLinkOffset(int);
  void TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >(int);
  void TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >(class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >&);
  void TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >::TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >();
  void ~TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >();
  class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >& operator=(class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >*, unsigned long, struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* DeleteNode(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* Head();
  struct BlizzardObject::Shard* Head();
  int IsEmpty();
  int IsLinked(struct BlizzardObject::Shard*);
  void TSList<BlizzardObject::Shard,TSGetLink<BlizzardObject::Shard> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BlizzardObject::Shard* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct BlizzardObject::Shard* existingptr);
  struct BlizzardObject::Shard* NewNode(unsigned long, unsigned long, unsigned long);
  struct BlizzardObject::Shard* Next(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* Next(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* Prev(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* Prev(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* RawNext(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* RawNext(struct BlizzardObject::Shard*);
  struct BlizzardObject::Shard* Tail();
  struct BlizzardObject::Shard* Tail();
  void UnlinkAll();
  void UnlinkNode(struct BlizzardObject::Shard*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BlizzardObject,TSGetLink<BlizzardObject> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BlizzardObject> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<BlizzardObject,TSGetLink<BlizzardObject> >&);
  void InitializeTerminator();
  class TSLink<BlizzardObject>* Link(struct BlizzardObject*);
  void SetLinkOffset(int);
  void TSList<BlizzardObject,TSGetLink<BlizzardObject> >(int);
  void TSList<BlizzardObject,TSGetLink<BlizzardObject> >(class TSList<BlizzardObject,TSGetLink<BlizzardObject> >&);
  void TSList<BlizzardObject,TSGetLink<BlizzardObject> >();
  void ~TSList<BlizzardObject,TSGetLink<BlizzardObject> >();
  class TSList<BlizzardObject,TSGetLink<BlizzardObject> >& operator=(class TSList<BlizzardObject,TSGetLink<BlizzardObject> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<BlizzardObject,TSGetLink<BlizzardObject> >*, unsigned long, struct BlizzardObject*);
  struct BlizzardObject* DeleteNode(struct BlizzardObject*);
  struct BlizzardObject* Head();
  struct BlizzardObject* Head();
  int IsEmpty();
  int IsLinked(struct BlizzardObject*);
  void TSList<BlizzardObject,TSGetLink<BlizzardObject> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BlizzardObject* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct BlizzardObject* existingptr);
  struct BlizzardObject* NewNode(unsigned long, unsigned long, unsigned long);
  struct BlizzardObject* Next(struct BlizzardObject*);
  struct BlizzardObject* Next(struct BlizzardObject*);
  struct BlizzardObject* Prev(struct BlizzardObject*);
  struct BlizzardObject* Prev(struct BlizzardObject*);
  struct BlizzardObject* RawNext(struct BlizzardObject*);
  struct BlizzardObject* RawNext(struct BlizzardObject*);
  struct BlizzardObject* Tail();
  struct BlizzardObject* Tail();
  void UnlinkAll();
  void UnlinkNode(struct BlizzardObject*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMCOOLDOWNHASHNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >&);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::InitializeTerminator();
  class TSLink<ITEMCOOLDOWNHASHNODE>* TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMCOOLDOWNHASHNODE* ptr);
  void SetLinkOffset(int);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >(int);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >(class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >&);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >();
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::~TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >();
  class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >& operator=(class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >&);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >*, unsigned long, struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* DeleteNode(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Head();
  struct ITEMCOOLDOWNHASHNODE* Head();
  int IsEmpty();
  int IsLinked(struct ITEMCOOLDOWNHASHNODE*);
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMCOOLDOWNHASHNODE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ITEMCOOLDOWNHASHNODE* existingptr);
  struct ITEMCOOLDOWNHASHNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct ITEMCOOLDOWNHASHNODE* Next(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Next(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Prev(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Prev(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* RawNext(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* RawNext(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Tail();
  struct ITEMCOOLDOWNHASHNODE* Tail();
  void TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >::UnlinkAll();
  void UnlinkNode(struct ITEMCOOLDOWNHASHNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SPELLHISTORY> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >&);
  void InitializeTerminator();
  class TSLink<SPELLHISTORY>* Link(struct SPELLHISTORY*);
  void SetLinkOffset(int);
  void TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >(int);
  void TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >(class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >&);
  void TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >();
  void ~TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >();
  class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >& operator=(class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >*, unsigned long, struct SPELLHISTORY*);
  struct SPELLHISTORY* DeleteNode(struct SPELLHISTORY*);
  struct SPELLHISTORY* Head();
  struct SPELLHISTORY* Head();
  int IsEmpty();
  int IsLinked(struct SPELLHISTORY*);
  void TSList<SPELLHISTORY,TSGetLink<SPELLHISTORY> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SPELLHISTORY* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SPELLHISTORY* existingptr);
  struct SPELLHISTORY* NewNode(unsigned long, unsigned long, unsigned long);
  struct SPELLHISTORY* Next(struct SPELLHISTORY*);
  struct SPELLHISTORY* Next(struct SPELLHISTORY*);
  struct SPELLHISTORY* Prev(struct SPELLHISTORY*);
  struct SPELLHISTORY* Prev(struct SPELLHISTORY*);
  struct SPELLHISTORY* RawNext(struct SPELLHISTORY*);
  struct SPELLHISTORY* RawNext(struct SPELLHISTORY*);
  struct SPELLHISTORY* Tail();
  struct SPELLHISTORY* Tail();
  void UnlinkAll();
  void UnlinkNode(struct SPELLHISTORY*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PLAYERNAMEDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >&);
  void InitializeTerminator();
  class TSLink<PLAYERNAMEDESC>* Link(class PLAYERNAMEDESC*);
  void SetLinkOffset(int);
  void TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >(int);
  void TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >(class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >&);
  void TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >();
  void ~TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >();
  class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >& operator=(class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >*, unsigned long, class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* DeleteNode(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* Head();
  class PLAYERNAMEDESC* Head();
  int IsEmpty();
  int IsLinked(class PLAYERNAMEDESC*);
  void LinkNode(class PLAYERNAMEDESC*, unsigned long, class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* NewNode(unsigned long, unsigned long, unsigned long);
  class PLAYERNAMEDESC* Next(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* Next(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* Prev(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* Prev(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* RawNext(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* RawNext(class PLAYERNAMEDESC*);
  class PLAYERNAMEDESC* Tail();
  class PLAYERNAMEDESC* Tail();
  void UnlinkAll();
  void UnlinkNode(class PLAYERNAMEDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WORLDTEXTSTRING> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >&);
  void InitializeTerminator();
  class TSLink<WORLDTEXTSTRING>* Link(struct WORLDTEXTSTRING*);
  void SetLinkOffset(int);
  void TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >(int);
  void TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >(class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >&);
  void TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >();
  void ~TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >();
  class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >& operator=(class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >*, unsigned long, struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* DeleteNode(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* Head();
  struct WORLDTEXTSTRING* Head();
  int IsEmpty();
  int IsLinked(struct WORLDTEXTSTRING*);
  void LinkNode(struct WORLDTEXTSTRING*, unsigned long, struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* NewNode(unsigned long, unsigned long, unsigned long);
  struct WORLDTEXTSTRING* Next(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* Next(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* Prev(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* Prev(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* RawNext(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* RawNext(struct WORLDTEXTSTRING*);
  struct WORLDTEXTSTRING* Tail();
  struct WORLDTEXTSTRING* Tail();
  void UnlinkAll();
  void UnlinkNode(struct WORLDTEXTSTRING*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<MINIMAPMD5NAME> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >&);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::InitializeTerminator();
  class TSLink<MINIMAPMD5NAME>* TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct MINIMAPMD5NAME* ptr);
  void SetLinkOffset(int);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >(int);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >(class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >&);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >();
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::~TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >();
  class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >& operator=(class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >&);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >*, unsigned long, struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* DeleteNode(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Head();
  struct MINIMAPMD5NAME* Head();
  int IsEmpty();
  int IsLinked(struct MINIMAPMD5NAME*);
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct MINIMAPMD5NAME* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct MINIMAPMD5NAME* existingptr);
  struct MINIMAPMD5NAME* NewNode(unsigned long, unsigned long, unsigned long);
  struct MINIMAPMD5NAME* Next(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Next(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Prev(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Prev(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* RawNext(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* RawNext(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Tail();
  struct MINIMAPMD5NAME* Tail();
  void TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >::UnlinkAll();
  void UnlinkNode(struct MINIMAPMD5NAME*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<AREAHASHOBJECT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >&);
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::InitializeTerminator();
  class TSLink<AREAHASHOBJECT>* TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct AREAHASHOBJECT* ptr);
  void SetLinkOffset(int);
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >(int);
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >(class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >&);
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >();
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::~TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >();
  class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >& operator=(class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >*, unsigned long, struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* DeleteNode(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Head();
  struct AREAHASHOBJECT* Head();
  int IsEmpty();
  int IsLinked(struct AREAHASHOBJECT*);
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct AREAHASHOBJECT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct AREAHASHOBJECT* existingptr);
  struct AREAHASHOBJECT* NewNode(unsigned long, unsigned long, unsigned long);
  struct AREAHASHOBJECT* Next(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Next(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Prev(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Prev(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* RawNext(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* RawNext(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Tail();
  struct AREAHASHOBJECT* Tail();
  void TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >::UnlinkAll();
  void UnlinkNode(struct AREAHASHOBJECT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapAreaLow> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >&);
  void TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >::InitializeTerminator();
  class TSLink<CMapAreaLow>* TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapAreaLow* ptr);
  void SetLinkOffset(int);
  void TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >(int);
  void TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >(class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >&);
  void TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >();
  void ~TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >();
  class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >& operator=(class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >*, unsigned long, class CMapAreaLow*);
  class CMapAreaLow* DeleteNode(class CMapAreaLow*);
  class CMapAreaLow* Head();
  class CMapAreaLow* Head();
  int IsEmpty();
  int IsLinked(class CMapAreaLow*);
  void LinkNode(class CMapAreaLow*, unsigned long, class CMapAreaLow*);
  class CMapAreaLow* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapAreaLow* Next(class CMapAreaLow*);
  class CMapAreaLow* Next(class CMapAreaLow*);
  class CMapAreaLow* Prev(class CMapAreaLow*);
  class CMapAreaLow* Prev(class CMapAreaLow*);
  class CMapAreaLow* RawNext(class CMapAreaLow*);
  class CMapAreaLow* RawNext(class CMapAreaLow*);
  class CMapAreaLow* Tail();
  class CMapAreaLow* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapAreaLow*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CWFrustum> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >&);
  void TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >::InitializeTerminator();
  class TSLink<CWFrustum>* TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWFrustum* ptr);
  void SetLinkOffset(int);
  void TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >(int);
  void TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >(class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >&);
  void TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >();
  void ~TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >();
  class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >& operator=(class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >*, unsigned long, class CWFrustum*);
  class CWFrustum* DeleteNode(class CWFrustum*);
  class CWFrustum* Head();
  class CWFrustum* Head();
  int IsEmpty();
  int IsLinked(class CWFrustum*);
  void TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CWFrustum* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CWFrustum* existingptr);
  class CWFrustum* NewNode(unsigned long, unsigned long, unsigned long);
  class CWFrustum* Next(class CWFrustum*);
  class CWFrustum* Next(class CWFrustum*);
  class CWFrustum* Prev(class CWFrustum*);
  class CWFrustum* Prev(class CWFrustum*);
  class CWFrustum* RawNext(class CWFrustum*);
  class CWFrustum* RawNext(class CWFrustum*);
  class CWFrustum* Tail();
  class CWFrustum* Tail();
  void UnlinkAll();
  void UnlinkNode(class CWFrustum*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WaterRadWave,TSGetLink<WaterRadWave> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WaterRadWave> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<WaterRadWave,TSGetLink<WaterRadWave> >&);
  void InitializeTerminator();
  class TSLink<WaterRadWave>* Link(struct WaterRadWave*);
  void SetLinkOffset(int);
  void TSList<WaterRadWave,TSGetLink<WaterRadWave> >(int);
  void TSList<WaterRadWave,TSGetLink<WaterRadWave> >(class TSList<WaterRadWave,TSGetLink<WaterRadWave> >&);
  void TSList<WaterRadWave,TSGetLink<WaterRadWave> >();
  void ~TSList<WaterRadWave,TSGetLink<WaterRadWave> >();
  class TSList<WaterRadWave,TSGetLink<WaterRadWave> >& operator=(class TSList<WaterRadWave,TSGetLink<WaterRadWave> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WaterRadWave,TSGetLink<WaterRadWave> >*, unsigned long, struct WaterRadWave*);
  struct WaterRadWave* DeleteNode(struct WaterRadWave*);
  struct WaterRadWave* Head();
  struct WaterRadWave* Head();
  int IsEmpty();
  int IsLinked(struct WaterRadWave*);
  void TSList<WaterRadWave,TSGetLink<WaterRadWave> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WaterRadWave* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct WaterRadWave* existingptr);
  struct WaterRadWave* NewNode(unsigned long, unsigned long, unsigned long);
  struct WaterRadWave* Next(struct WaterRadWave*);
  struct WaterRadWave* Next(struct WaterRadWave*);
  struct WaterRadWave* Prev(struct WaterRadWave*);
  struct WaterRadWave* Prev(struct WaterRadWave*);
  struct WaterRadWave* RawNext(struct WaterRadWave*);
  struct WaterRadWave* RawNext(struct WaterRadWave*);
  struct WaterRadWave* Tail();
  struct WaterRadWave* Tail();
  void UnlinkAll();
  void UnlinkNode(struct WaterRadWave*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObjDef> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >&);
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >::InitializeTerminator();
  class TSLink<CMapObjDef>* TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* ptr);
  void SetLinkOffset(int);
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >(int);
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >(class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >&);
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >();
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >::~TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >();
  class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >& operator=(class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >*, unsigned long, class CMapObjDef*);
  class CMapObjDef* DeleteNode(class CMapObjDef*);
  class CMapObjDef* Head();
  class CMapObjDef* Head();
  int IsEmpty();
  int IsLinked(class CMapObjDef*);
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObjDef* existingptr);
  class CMapObjDef* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapObjDef* Next(class CMapObjDef*);
  class CMapObjDef* Next(class CMapObjDef*);
  class CMapObjDef* Prev(class CMapObjDef*);
  class CMapObjDef* Prev(class CMapObjDef*);
  class CMapObjDef* RawNext(class CMapObjDef*);
  class CMapObjDef* RawNext(class CMapObjDef*);
  class CMapObjDef* Tail();
  class CMapObjDef* Tail();
  void TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >::UnlinkAll();
  void UnlinkNode(class CMapObjDef*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CChunkTex,TSGetLink<CChunkTex> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CChunkTex> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CChunkTex,TSGetLink<CChunkTex> >&);
  void InitializeTerminator();
  class TSLink<CChunkTex>* Link(struct CChunkTex*);
  void SetLinkOffset(int);
  void TSList<CChunkTex,TSGetLink<CChunkTex> >(int);
  void TSList<CChunkTex,TSGetLink<CChunkTex> >(class TSList<CChunkTex,TSGetLink<CChunkTex> >&);
  void TSList<CChunkTex,TSGetLink<CChunkTex> >();
  void ~TSList<CChunkTex,TSGetLink<CChunkTex> >();
  class TSList<CChunkTex,TSGetLink<CChunkTex> >& operator=(class TSList<CChunkTex,TSGetLink<CChunkTex> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CChunkTex,TSGetLink<CChunkTex> >*, unsigned long, struct CChunkTex*);
  struct CChunkTex* DeleteNode(struct CChunkTex*);
  struct CChunkTex* Head();
  struct CChunkTex* Head();
  int IsEmpty();
  int IsLinked(struct CChunkTex*);
  void LinkNode(struct CChunkTex*, unsigned long, struct CChunkTex*);
  struct CChunkTex* NewNode(unsigned long, unsigned long, unsigned long);
  struct CChunkTex* Next(struct CChunkTex*);
  struct CChunkTex* Next(struct CChunkTex*);
  struct CChunkTex* Prev(struct CChunkTex*);
  struct CChunkTex* Prev(struct CChunkTex*);
  struct CChunkTex* RawNext(struct CChunkTex*);
  struct CChunkTex* RawNext(struct CChunkTex*);
  struct CChunkTex* Tail();
  struct CChunkTex* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CChunkTex*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CChunkLayer,TSGetLink<CChunkLayer> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CChunkLayer> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CChunkLayer,TSGetLink<CChunkLayer> >&);
  void InitializeTerminator();
  class TSLink<CChunkLayer>* Link(struct CChunkLayer*);
  void SetLinkOffset(int);
  void TSList<CChunkLayer,TSGetLink<CChunkLayer> >(int);
  void TSList<CChunkLayer,TSGetLink<CChunkLayer> >(class TSList<CChunkLayer,TSGetLink<CChunkLayer> >&);
  void TSList<CChunkLayer,TSGetLink<CChunkLayer> >();
  void ~TSList<CChunkLayer,TSGetLink<CChunkLayer> >();
  class TSList<CChunkLayer,TSGetLink<CChunkLayer> >& operator=(class TSList<CChunkLayer,TSGetLink<CChunkLayer> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CChunkLayer,TSGetLink<CChunkLayer> >*, unsigned long, struct CChunkLayer*);
  struct CChunkLayer* DeleteNode(struct CChunkLayer*);
  struct CChunkLayer* Head();
  struct CChunkLayer* Head();
  int IsEmpty();
  int IsLinked(struct CChunkLayer*);
  void LinkNode(struct CChunkLayer*, unsigned long, struct CChunkLayer*);
  struct CChunkLayer* NewNode(unsigned long, unsigned long, unsigned long);
  struct CChunkLayer* Next(struct CChunkLayer*);
  struct CChunkLayer* Next(struct CChunkLayer*);
  struct CChunkLayer* Prev(struct CChunkLayer*);
  struct CChunkLayer* Prev(struct CChunkLayer*);
  struct CChunkLayer* RawNext(struct CChunkLayer*);
  struct CChunkLayer* RawNext(struct CChunkLayer*);
  struct CChunkLayer* Tail();
  struct CChunkLayer* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CChunkLayer*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapDoodadDef> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >&);
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::InitializeTerminator();
  class TSLink<CMapDoodadDef>* TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapDoodadDef* ptr);
  void SetLinkOffset(int);
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >(int);
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >(class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >&);
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >();
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::~TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >();
  class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >& operator=(class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >*, unsigned long, class CMapDoodadDef*);
  class CMapDoodadDef* DeleteNode(class CMapDoodadDef*);
  class CMapDoodadDef* Head();
  class CMapDoodadDef* Head();
  int IsEmpty();
  int IsLinked(class CMapDoodadDef*);
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapDoodadDef* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapDoodadDef* existingptr);
  class CMapDoodadDef* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapDoodadDef* Next(class CMapDoodadDef*);
  class CMapDoodadDef* Next(class CMapDoodadDef*);
  class CMapDoodadDef* Prev(class CMapDoodadDef*);
  class CMapDoodadDef* Prev(class CMapDoodadDef*);
  class CMapDoodadDef* RawNext(class CMapDoodadDef*);
  class CMapDoodadDef* RawNext(class CMapDoodadDef*);
  class CMapDoodadDef* Tail();
  class CMapDoodadDef* Tail();
  void TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >::UnlinkAll();
  void UnlinkNode(class CMapDoodadDef*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CChunkLiquid> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >&);
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >::InitializeTerminator();
  class TSLink<CChunkLiquid>* TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CChunkLiquid* ptr);
  void SetLinkOffset(int);
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >(int);
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >(class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >&);
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >();
  void ~TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >();
  class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >& operator=(class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >*, unsigned long, class CChunkLiquid*);
  class CChunkLiquid* DeleteNode(class CChunkLiquid*);
  class CChunkLiquid* Head();
  class CChunkLiquid* Head();
  int IsEmpty();
  int IsLinked(class CChunkLiquid*);
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CChunkLiquid* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CChunkLiquid* existingptr);
  class CChunkLiquid* NewNode(unsigned long, unsigned long, unsigned long);
  class CChunkLiquid* Next(class CChunkLiquid*);
  class CChunkLiquid* Next(class CChunkLiquid*);
  class CChunkLiquid* Prev(class CChunkLiquid*);
  class CChunkLiquid* Prev(class CChunkLiquid*);
  class CChunkLiquid* RawNext(class CChunkLiquid*);
  class CChunkLiquid* RawNext(class CChunkLiquid*);
  class CChunkLiquid* Tail();
  class CChunkLiquid* Tail();
  void TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >::UnlinkAll();
  void UnlinkNode(class CChunkLiquid*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapChunk> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >&);
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >::InitializeTerminator();
  class TSLink<CMapChunk>* TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapChunk* ptr);
  void SetLinkOffset(int);
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >(int);
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >(class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >&);
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >::TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >();
  void ~TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >();
  class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >& operator=(class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >*, unsigned long, class CMapChunk*);
  class CMapChunk* DeleteNode(class CMapChunk*);
  class CMapChunk* Head();
  class CMapChunk* Head();
  int IsEmpty();
  int IsLinked(class CMapChunk*);
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapChunk* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapChunk* existingptr);
  class CMapChunk* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapChunk* Next(class CMapChunk*);
  class CMapChunk* Next(class CMapChunk*);
  class CMapChunk* Prev(class CMapChunk*);
  class CMapChunk* Prev(class CMapChunk*);
  class CMapChunk* RawNext(class CMapChunk*);
  class CMapChunk* RawNext(class CMapChunk*);
  class CMapChunk* Tail();
  class CMapChunk* Tail();
  void TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >::UnlinkAll();
  void UnlinkNode(class CMapChunk*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapArea,TSGetExplicitLink<CMapArea> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapArea> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapArea,TSGetExplicitLink<CMapArea> >&);
  void InitializeTerminator();
  class TSLink<CMapArea>* Link(class CMapArea*);
  void SetLinkOffset(int);
  void TSList<CMapArea,TSGetExplicitLink<CMapArea> >(int);
  void TSList<CMapArea,TSGetExplicitLink<CMapArea> >(class TSList<CMapArea,TSGetExplicitLink<CMapArea> >&);
  void TSList<CMapArea,TSGetExplicitLink<CMapArea> >();
  void ~TSList<CMapArea,TSGetExplicitLink<CMapArea> >();
  class TSList<CMapArea,TSGetExplicitLink<CMapArea> >& operator=(class TSList<CMapArea,TSGetExplicitLink<CMapArea> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapArea,TSGetExplicitLink<CMapArea> >*, unsigned long, class CMapArea*);
  class CMapArea* DeleteNode(class CMapArea*);
  class CMapArea* Head();
  class CMapArea* Head();
  int IsEmpty();
  int IsLinked(class CMapArea*);
  void LinkNode(class CMapArea*, unsigned long, class CMapArea*);
  class CMapArea* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapArea* Next(class CMapArea*);
  class CMapArea* Next(class CMapArea*);
  class CMapArea* Prev(class CMapArea*);
  class CMapArea* Prev(class CMapArea*);
  class CMapArea* RawNext(class CMapArea*);
  class CMapArea* RawNext(class CMapArea*);
  class CMapArea* Tail();
  class CMapArea* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapArea*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObjDefGroup> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >&);
  void TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >::InitializeTerminator();
  class TSLink<CMapObjDefGroup>* TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDefGroup* ptr);
  void SetLinkOffset(int);
  void TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >(int);
  void TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >(class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >&);
  void TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >::TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >();
  void ~TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >();
  class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >& operator=(class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >*, unsigned long, class CMapObjDefGroup*);
  class CMapObjDefGroup* DeleteNode(class CMapObjDefGroup*);
  class CMapObjDefGroup* Head();
  class CMapObjDefGroup* Head();
  int IsEmpty();
  int IsLinked(class CMapObjDefGroup*);
  void LinkNode(class CMapObjDefGroup*, unsigned long, class CMapObjDefGroup*);
  class CMapObjDefGroup* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapObjDefGroup* Next(class CMapObjDefGroup*);
  class CMapObjDefGroup* Next(class CMapObjDefGroup*);
  class CMapObjDefGroup* Prev(class CMapObjDefGroup*);
  class CMapObjDefGroup* Prev(class CMapObjDefGroup*);
  class CMapObjDefGroup* RawNext(class CMapObjDefGroup*);
  class CMapObjDefGroup* RawNext(class CMapObjDefGroup*);
  class CMapObjDefGroup* Tail();
  class CMapObjDefGroup* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapObjDefGroup*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapEntity> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >&);
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >::InitializeTerminator();
  class TSLink<CMapEntity>* TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMapEntity* ptr);
  void SetLinkOffset(int);
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >(int);
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >(class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >&);
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >::TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >();
  void ~TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >();
  class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >& operator=(class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >*, unsigned long, struct CMapEntity*);
  struct CMapEntity* DeleteNode(struct CMapEntity*);
  struct CMapEntity* Head();
  struct CMapEntity* Head();
  int IsEmpty();
  int IsLinked(struct CMapEntity*);
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMapEntity* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CMapEntity* existingptr);
  struct CMapEntity* NewNode(unsigned long, unsigned long, unsigned long);
  struct CMapEntity* Next(struct CMapEntity*);
  struct CMapEntity* Next(struct CMapEntity*);
  struct CMapEntity* Prev(struct CMapEntity*);
  struct CMapEntity* Prev(struct CMapEntity*);
  struct CMapEntity* RawNext(struct CMapEntity*);
  struct CMapEntity* RawNext(struct CMapEntity*);
  struct CMapEntity* Tail();
  struct CMapEntity* Tail();
  void TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >::UnlinkAll();
  void UnlinkNode(struct CMapEntity*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObjGroup> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >&);
  void InitializeTerminator();
  class TSLink<CMapObjGroup>* Link(class CMapObjGroup*);
  void SetLinkOffset(int);
  void TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >(int);
  void TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >(class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >&);
  void TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >();
  void ~TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >();
  class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >& operator=(class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >&);
  void ChangeLinkOffset(int);
  void TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >::Clear();
  void Combine(class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >*, unsigned long, class CMapObjGroup*);
  class CMapObjGroup* DeleteNode(class CMapObjGroup*);
  class CMapObjGroup* Head();
  class CMapObjGroup* Head();
  int IsEmpty();
  int IsLinked(class CMapObjGroup*);
  void LinkNode(class CMapObjGroup*, unsigned long, class CMapObjGroup*);
  class CMapObjGroup* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapObjGroup* Next(class CMapObjGroup*);
  class CMapObjGroup* Next(class CMapObjGroup*);
  class CMapObjGroup* Prev(class CMapObjGroup*);
  class CMapObjGroup* Prev(class CMapObjGroup*);
  class CMapObjGroup* RawNext(class CMapObjGroup*);
  class CMapObjGroup* RawNext(class CMapObjGroup*);
  class CMapObjGroup* Tail();
  class CMapObjGroup* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapObjGroup*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapObj,TSGetExplicitLink<CMapObj> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObj> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapObj,TSGetExplicitLink<CMapObj> >&);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::InitializeTerminator();
  class TSLink<CMapObj>* TSList<CMapObj,TSGetExplicitLink<CMapObj> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObj* ptr);
  void SetLinkOffset(int);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >(int);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >(class TSList<CMapObj,TSGetExplicitLink<CMapObj> >&);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >();
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::~TSList<CMapObj,TSGetExplicitLink<CMapObj> >();
  class TSList<CMapObj,TSGetExplicitLink<CMapObj> >& operator=(class TSList<CMapObj,TSGetExplicitLink<CMapObj> >&);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::Clear();
  void Combine(class TSList<CMapObj,TSGetExplicitLink<CMapObj> >*, unsigned long, class CMapObj*);
  class CMapObj* DeleteNode(class CMapObj*);
  class CMapObj* Head();
  class CMapObj* Head();
  int IsEmpty();
  int IsLinked(class CMapObj*);
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObj* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapObj* existingptr);
  class CMapObj* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapObj* Next(class CMapObj*);
  class CMapObj* Next(class CMapObj*);
  class CMapObj* Prev(class CMapObj*);
  class CMapObj* Prev(class CMapObj*);
  class CMapObj* RawNext(class CMapObj*);
  class CMapObj* RawNext(class CMapObj*);
  class CMapObj* Tail();
  class CMapObj* Tail();
  void TSList<CMapObj,TSGetExplicitLink<CMapObj> >::UnlinkAll();
  void UnlinkNode(class CMapObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapBaseObjLink> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >&);
  void TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >::InitializeTerminator();
  class TSLink<CMapBaseObjLink>* TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapBaseObjLink* ptr);
  void SetLinkOffset(int);
  void TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >(int);
  void TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >(class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >&);
  void TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >();
  void ~TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >();
  class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >& operator=(class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >*, unsigned long, class CMapBaseObjLink*);
  class CMapBaseObjLink* DeleteNode(class CMapBaseObjLink*);
  class CMapBaseObjLink* Head();
  class CMapBaseObjLink* Head();
  int IsEmpty();
  int IsLinked(class CMapBaseObjLink*);
  void LinkNode(class CMapBaseObjLink*, unsigned long, class CMapBaseObjLink*);
  class CMapBaseObjLink* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapBaseObjLink* Next(class CMapBaseObjLink*);
  class CMapBaseObjLink* Next(class CMapBaseObjLink*);
  class CMapBaseObjLink* Prev(class CMapBaseObjLink*);
  class CMapBaseObjLink* Prev(class CMapBaseObjLink*);
  class CMapBaseObjLink* RawNext(class CMapBaseObjLink*);
  class CMapBaseObjLink* RawNext(class CMapBaseObjLink*);
  class CMapBaseObjLink* Tail();
  class CMapBaseObjLink* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapBaseObjLink*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapSoundEmitter> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >&);
  void InitializeTerminator();
  class TSLink<CMapSoundEmitter>* TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapSoundEmitter* ptr);
  void SetLinkOffset(int);
  void TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >(int);
  void TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >(class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >&);
  void TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >::TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >();
  void ~TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >();
  class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >& operator=(class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >*, unsigned long, class CMapSoundEmitter*);
  class CMapSoundEmitter* DeleteNode(class CMapSoundEmitter*);
  class CMapSoundEmitter* Head();
  class CMapSoundEmitter* Head();
  int IsEmpty();
  int IsLinked(class CMapSoundEmitter*);
  void LinkNode(class CMapSoundEmitter*, unsigned long, class CMapSoundEmitter*);
  class CMapSoundEmitter* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapSoundEmitter* Next(class CMapSoundEmitter*);
  class CMapSoundEmitter* Next(class CMapSoundEmitter*);
  class CMapSoundEmitter* Prev(class CMapSoundEmitter*);
  class CMapSoundEmitter* Prev(class CMapSoundEmitter*);
  class CMapSoundEmitter* RawNext(class CMapSoundEmitter*);
  class CMapSoundEmitter* RawNext(class CMapSoundEmitter*);
  class CMapSoundEmitter* Tail();
  class CMapSoundEmitter* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapSoundEmitter*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapLight,TSGetExplicitLink<CMapLight> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapLight> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapLight,TSGetExplicitLink<CMapLight> >&);
  void InitializeTerminator();
  class TSLink<CMapLight>* Link(class CMapLight*);
  void SetLinkOffset(int);
  void TSList<CMapLight,TSGetExplicitLink<CMapLight> >(int);
  void TSList<CMapLight,TSGetExplicitLink<CMapLight> >(class TSList<CMapLight,TSGetExplicitLink<CMapLight> >&);
  void TSList<CMapLight,TSGetExplicitLink<CMapLight> >();
  void ~TSList<CMapLight,TSGetExplicitLink<CMapLight> >();
  class TSList<CMapLight,TSGetExplicitLink<CMapLight> >& operator=(class TSList<CMapLight,TSGetExplicitLink<CMapLight> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapLight,TSGetExplicitLink<CMapLight> >*, unsigned long, class CMapLight*);
  class CMapLight* DeleteNode(class CMapLight*);
  class CMapLight* Head();
  class CMapLight* Head();
  int IsEmpty();
  int IsLinked(class CMapLight*);
  void LinkNode(class CMapLight*, unsigned long, class CMapLight*);
  class CMapLight* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapLight* Next(class CMapLight*);
  class CMapLight* Next(class CMapLight*);
  class CMapLight* Prev(class CMapLight*);
  class CMapLight* Prev(class CMapLight*);
  class CMapLight* RawNext(class CMapLight*);
  class CMapLight* RawNext(class CMapLight*);
  class CMapLight* Tail();
  class CMapLight* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapLight*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CDetailDoodadInst> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >&);
  void InitializeTerminator();
  class TSLink<CDetailDoodadInst>* Link(class CDetailDoodadInst*);
  void SetLinkOffset(int);
  void TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >(int);
  void TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >(class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >&);
  void TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >();
  void ~TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >();
  class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >& operator=(class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >*, unsigned long, class CDetailDoodadInst*);
  class CDetailDoodadInst* DeleteNode(class CDetailDoodadInst*);
  class CDetailDoodadInst* Head();
  class CDetailDoodadInst* Head();
  int IsEmpty();
  int IsLinked(class CDetailDoodadInst*);
  void LinkNode(class CDetailDoodadInst*, unsigned long, class CDetailDoodadInst*);
  class CDetailDoodadInst* NewNode(unsigned long, unsigned long, unsigned long);
  class CDetailDoodadInst* Next(class CDetailDoodadInst*);
  class CDetailDoodadInst* Next(class CDetailDoodadInst*);
  class CDetailDoodadInst* Prev(class CDetailDoodadInst*);
  class CDetailDoodadInst* Prev(class CDetailDoodadInst*);
  class CDetailDoodadInst* RawNext(class CDetailDoodadInst*);
  class CDetailDoodadInst* RawNext(class CDetailDoodadInst*);
  class CDetailDoodadInst* Tail();
  class CDetailDoodadInst* Tail();
  void UnlinkAll();
  void UnlinkNode(class CDetailDoodadInst*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CDetailDoodadGeom> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >&);
  void InitializeTerminator();
  class TSLink<CDetailDoodadGeom>* Link(class CDetailDoodadGeom*);
  void SetLinkOffset(int);
  void TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >(int);
  void TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >(class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >&);
  void TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >();
  void ~TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >();
  class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >& operator=(class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >*, unsigned long, class CDetailDoodadGeom*);
  class CDetailDoodadGeom* DeleteNode(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* Head();
  class CDetailDoodadGeom* Head();
  int IsEmpty();
  int IsLinked(class CDetailDoodadGeom*);
  void LinkNode(class CDetailDoodadGeom*, unsigned long, class CDetailDoodadGeom*);
  class CDetailDoodadGeom* NewNode(unsigned long, unsigned long, unsigned long);
  class CDetailDoodadGeom* Next(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* Next(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* Prev(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* Prev(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* RawNext(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* RawNext(class CDetailDoodadGeom*);
  class CDetailDoodadGeom* Tail();
  class CDetailDoodadGeom* Tail();
  void UnlinkAll();
  void UnlinkNode(class CDetailDoodadGeom*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapCacheLight> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >&);
  void TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >::InitializeTerminator();
  class TSLink<CMapCacheLight>* Link(class CMapCacheLight*);
  void SetLinkOffset(int);
  void TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >(int);
  void TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >(class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >&);
  void TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >::TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >();
  void ~TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >();
  class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >& operator=(class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >*, unsigned long, class CMapCacheLight*);
  class CMapCacheLight* DeleteNode(class CMapCacheLight*);
  class CMapCacheLight* Head();
  class CMapCacheLight* Head();
  int IsEmpty();
  int IsLinked(class CMapCacheLight*);
  void TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapCacheLight* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CMapCacheLight* existingptr);
  class CMapCacheLight* NewNode(unsigned long, unsigned long, unsigned long);
  class CMapCacheLight* Next(class CMapCacheLight*);
  class CMapCacheLight* Next(class CMapCacheLight*);
  class CMapCacheLight* Prev(class CMapCacheLight*);
  class CMapCacheLight* Prev(class CMapCacheLight*);
  class CMapCacheLight* RawNext(class CMapCacheLight*);
  class CMapCacheLight* RawNext(class CMapCacheLight*);
  class CMapCacheLight* Tail();
  class CMapCacheLight* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMapCacheLight*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSimpleDoodad> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >&);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::InitializeTerminator();
  class TSLink<CSimpleDoodad>* TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSimpleDoodad* ptr);
  void SetLinkOffset(int);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >(int);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >(class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >&);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >();
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::~TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >();
  class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >& operator=(class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >&);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >*, unsigned long, struct CSimpleDoodad*);
  struct CSimpleDoodad* DeleteNode(struct CSimpleDoodad*);
  struct CSimpleDoodad* Head();
  struct CSimpleDoodad* Head();
  int IsEmpty();
  int IsLinked(struct CSimpleDoodad*);
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSimpleDoodad* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CSimpleDoodad* existingptr);
  struct CSimpleDoodad* NewNode(unsigned long, unsigned long, unsigned long);
  struct CSimpleDoodad* Next(struct CSimpleDoodad*);
  struct CSimpleDoodad* Next(struct CSimpleDoodad*);
  struct CSimpleDoodad* Prev(struct CSimpleDoodad*);
  struct CSimpleDoodad* Prev(struct CSimpleDoodad*);
  struct CSimpleDoodad* RawNext(struct CSimpleDoodad*);
  struct CSimpleDoodad* RawNext(struct CSimpleDoodad*);
  struct CSimpleDoodad* Tail();
  struct CSimpleDoodad* Tail();
  void TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >::UnlinkAll();
  void UnlinkNode(struct CSimpleDoodad*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<HANDLER,TSGetLink<HANDLER> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<HANDLER> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<HANDLER,TSGetLink<HANDLER> >::Constructor();
  void CopyConstructor(class TSList<HANDLER,TSGetLink<HANDLER> >&);
  void TSList<HANDLER,TSGetLink<HANDLER> >::InitializeTerminator();
  class TSLink<HANDLER>* TSList<HANDLER,TSGetLink<HANDLER> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr);
  void SetLinkOffset(int);
  void TSList<HANDLER,TSGetLink<HANDLER> >(int);
  void TSList<HANDLER,TSGetLink<HANDLER> >(class TSList<HANDLER,TSGetLink<HANDLER> >&);
  void TSList<HANDLER,TSGetLink<HANDLER> >::TSList<HANDLER,TSGetLink<HANDLER> >();
  void TSList<HANDLER,TSGetLink<HANDLER> >::~TSList<HANDLER,TSGetLink<HANDLER> >();
  class TSList<HANDLER,TSGetLink<HANDLER> >& operator=(class TSList<HANDLER,TSGetLink<HANDLER> >&);
  void ChangeLinkOffset(int);
  void TSList<HANDLER,TSGetLink<HANDLER> >::Clear();
  void Combine(class TSList<HANDLER,TSGetLink<HANDLER> >*, unsigned long, struct HANDLER*);
  struct HANDLER* DeleteNode(struct HANDLER*);
  struct HANDLER* Head();
  struct HANDLER* TSList<HANDLER,TSGetLink<HANDLER> >::Head();
  int IsEmpty();
  int IsLinked(struct HANDLER*);
  void TSList<HANDLER,TSGetLink<HANDLER> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HANDLER* existingptr);
  struct HANDLER* NewNode(unsigned long, unsigned long, unsigned long);
  struct HANDLER* Next(struct HANDLER*);
  struct HANDLER* TSList<HANDLER,TSGetLink<HANDLER> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr);
  struct HANDLER* Prev(struct HANDLER*);
  struct HANDLER* Prev(struct HANDLER*);
  struct HANDLER* RawNext(struct HANDLER*);
  struct HANDLER* TSList<HANDLER,TSGetLink<HANDLER> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr);
  struct HANDLER* Tail();
  struct HANDLER* Tail();
  void TSList<HANDLER,TSGetLink<HANDLER> >::UnlinkAll();
  void TSList<HANDLER,TSGetLink<HANDLER> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FILEMAP> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::Constructor();
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::CopyConstructor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >& source);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::InitializeTerminator();
  class TSLink<FILEMAP>* TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FILEMAP* ptr);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::SetLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >(int);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >& source);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >();
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::~TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >();
  class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >& operator=(class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >&);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >*, unsigned long, struct FILEMAP*);
  struct FILEMAP* DeleteNode(struct FILEMAP*);
  struct FILEMAP* Head();
  struct FILEMAP* TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::Head();
  int IsEmpty();
  int IsLinked(struct FILEMAP*);
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FILEMAP* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct FILEMAP* existingptr);
  struct FILEMAP* TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct FILEMAP* Next(struct FILEMAP*);
  struct FILEMAP* Next(struct FILEMAP*);
  struct FILEMAP* Prev(struct FILEMAP*);
  struct FILEMAP* Prev(struct FILEMAP*);
  struct FILEMAP* RawNext(struct FILEMAP*);
  struct FILEMAP* TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FILEMAP* ptr);
  struct FILEMAP* Tail();
  struct FILEMAP* Tail();
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::UnlinkAll();
  void TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FILEMAP* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ASYNCREAD> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::Constructor();
  void CopyConstructor(class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >&);
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::InitializeTerminator();
  class TSLink<ASYNCREAD>* TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ASYNCREAD* ptr);
  void SetLinkOffset(int);
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >(int);
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >(class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >&);
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >();
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::~TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >();
  class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >& operator=(class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >*, unsigned long, class ASYNCREAD*);
  class ASYNCREAD* DeleteNode(class ASYNCREAD*);
  class ASYNCREAD* Head();
  class ASYNCREAD* TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::Head();
  int IsEmpty();
  int IsLinked(class ASYNCREAD*);
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ASYNCREAD* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class ASYNCREAD* existingptr);
  class ASYNCREAD* TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class ASYNCREAD* Next(class ASYNCREAD*);
  class ASYNCREAD* Next(class ASYNCREAD*);
  class ASYNCREAD* Prev(class ASYNCREAD*);
  class ASYNCREAD* Prev(class ASYNCREAD*);
  class ASYNCREAD* RawNext(class ASYNCREAD*);
  class ASYNCREAD* RawNext(class ASYNCREAD*);
  class ASYNCREAD* Tail();
  class ASYNCREAD* Tail();
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::UnlinkAll();
  void TSList<ASYNCREAD,TSGetLink<ASYNCREAD> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ASYNCREAD* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMDDEF,TSGetLink<CMDDEF> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMDDEF> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::Constructor();
  void CopyConstructor(class TSList<CMDDEF,TSGetLink<CMDDEF> >&);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::InitializeTerminator();
  class TSLink<CMDDEF>* TSList<CMDDEF,TSGetLink<CMDDEF> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMDDEF* ptr);
  void SetLinkOffset(int);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >(int);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >(class TSList<CMDDEF,TSGetLink<CMDDEF> >&);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::TSList<CMDDEF,TSGetLink<CMDDEF> >();
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::~TSList<CMDDEF,TSGetLink<CMDDEF> >();
  class TSList<CMDDEF,TSGetLink<CMDDEF> >& operator=(class TSList<CMDDEF,TSGetLink<CMDDEF> >&);
  void ChangeLinkOffset(int);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::Clear();
  void Combine(class TSList<CMDDEF,TSGetLink<CMDDEF> >*, unsigned long, struct CMDDEF*);
  struct CMDDEF* DeleteNode(struct CMDDEF*);
  struct CMDDEF* Head();
  struct CMDDEF* TSList<CMDDEF,TSGetLink<CMDDEF> >::Head();
  int IsEmpty();
  int IsLinked(struct CMDDEF*);
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMDDEF* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CMDDEF* existingptr);
  struct CMDDEF* TSList<CMDDEF,TSGetLink<CMDDEF> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct CMDDEF* Next(struct CMDDEF*);
  struct CMDDEF* Next(struct CMDDEF*);
  struct CMDDEF* Prev(struct CMDDEF*);
  struct CMDDEF* Prev(struct CMDDEF*);
  struct CMDDEF* RawNext(struct CMDDEF*);
  struct CMDDEF* TSList<CMDDEF,TSGetLink<CMDDEF> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMDDEF* ptr);
  struct CMDDEF* Tail();
  struct CMDDEF* Tail();
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::UnlinkAll();
  void TSList<CMDDEF,TSGetLink<CMDDEF> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMDDEF* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> >* TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<RGN,HASHKEY_NONE>* ptr);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::SetLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >(int);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >(class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >();
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::~TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >();
  class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >& operator=(class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >&);
  void ChangeLinkOffset(int);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::Clear();
  void Combine(class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >*, unsigned long, class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* DeleteNode(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Head();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<RGN,HASHKEY_NONE>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<RGN,HASHKEY_NONE>* existingptr);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Next(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Next(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Prev(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Prev(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<RGN,HASHKEY_NONE>*);
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Tail();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>* Tail();
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::UnlinkAll();
  void TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<RGN,HASHKEY_NONE>* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<RGN,TSGetExplicitLink<RGN> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<RGN> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<RGN,TSGetExplicitLink<RGN> >::Constructor();
  void TSList<RGN,TSGetExplicitLink<RGN> >::CopyConstructor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<RGN,TSGetExplicitLink<RGN> >& source);
  void TSList<RGN,TSGetExplicitLink<RGN> >::InitializeTerminator();
  class TSLink<RGN>* TSList<RGN,TSGetExplicitLink<RGN> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  void TSList<RGN,TSGetExplicitLink<RGN> >::SetLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<RGN,TSGetExplicitLink<RGN> >(int);
  void TSList<RGN,TSGetExplicitLink<RGN> >::TSList<RGN,TSGetExplicitLink<RGN> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<RGN,TSGetExplicitLink<RGN> >& source);
  void TSList<RGN,TSGetExplicitLink<RGN> >::TSList<RGN,TSGetExplicitLink<RGN> >();
  void TSList<RGN,TSGetExplicitLink<RGN> >::~TSList<RGN,TSGetExplicitLink<RGN> >();
  class TSList<RGN,TSGetExplicitLink<RGN> >& operator=(class TSList<RGN,TSGetExplicitLink<RGN> >&);
  void TSList<RGN,TSGetExplicitLink<RGN> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<RGN,TSGetExplicitLink<RGN> >::Clear();
  void Combine(class TSList<RGN,TSGetExplicitLink<RGN> >*, unsigned long, struct RGN*);
  struct RGN* DeleteNode(struct RGN*);
  struct RGN* Head();
  struct RGN* TSList<RGN,TSGetExplicitLink<RGN> >::Head();
  int IsEmpty();
  int IsLinked(struct RGN*);
  void TSList<RGN,TSGetExplicitLink<RGN> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct RGN* existingptr);
  struct RGN* TSList<RGN,TSGetExplicitLink<RGN> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct RGN* Next(struct RGN*);
  struct RGN* Next(struct RGN*);
  struct RGN* Prev(struct RGN*);
  struct RGN* Prev(struct RGN*);
  struct RGN* RawNext(struct RGN*);
  struct RGN* TSList<RGN,TSGetExplicitLink<RGN> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  struct RGN* Tail();
  struct RGN* Tail();
  void TSList<RGN,TSGetExplicitLink<RGN> >::UnlinkAll();
  void TSList<RGN,TSGetExplicitLink<RGN> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<HUFFNODE,TSGetLink<HUFFNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<HUFFNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::Constructor();
  void CopyConstructor(class TSList<HUFFNODE,TSGetLink<HUFFNODE> >&);
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::InitializeTerminator();
  class TSLink<HUFFNODE>* TSList<HUFFNODE,TSGetLink<HUFFNODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HUFFNODE* ptr);
  void SetLinkOffset(int);
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >(int);
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >(class TSList<HUFFNODE,TSGetLink<HUFFNODE> >&);
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::TSList<HUFFNODE,TSGetLink<HUFFNODE> >();
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::~TSList<HUFFNODE,TSGetLink<HUFFNODE> >();
  class TSList<HUFFNODE,TSGetLink<HUFFNODE> >& operator=(class TSList<HUFFNODE,TSGetLink<HUFFNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<HUFFNODE,TSGetLink<HUFFNODE> >*, unsigned long, struct HUFFNODE*);
  struct HUFFNODE* DeleteNode(struct HUFFNODE*);
  struct HUFFNODE* Head();
  struct HUFFNODE* TSList<HUFFNODE,TSGetLink<HUFFNODE> >::Head();
  int IsEmpty();
  int IsLinked(struct HUFFNODE*);
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HUFFNODE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct HUFFNODE* existingptr);
  struct HUFFNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct HUFFNODE* Next(struct HUFFNODE*);
  struct HUFFNODE* Next(struct HUFFNODE*);
  struct HUFFNODE* Prev(struct HUFFNODE*);
  struct HUFFNODE* Prev(struct HUFFNODE*);
  struct HUFFNODE* RawNext(struct HUFFNODE*);
  struct HUFFNODE* RawNext(struct HUFFNODE*);
  struct HUFFNODE* Tail();
  struct HUFFNODE* TSList<HUFFNODE,TSGetLink<HUFFNODE> >::Tail();
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::UnlinkAll();
  void TSList<HUFFNODE,TSGetLink<HUFFNODE> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HUFFNODE* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WNDREC,TSGetLink<WNDREC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WNDREC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<WNDREC,TSGetLink<WNDREC> >::Constructor();
  void CopyConstructor(class TSList<WNDREC,TSGetLink<WNDREC> >&);
  void TSList<WNDREC,TSGetLink<WNDREC> >::InitializeTerminator();
  class TSLink<WNDREC>* TSList<WNDREC,TSGetLink<WNDREC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr);
  void SetLinkOffset(int);
  void TSList<WNDREC,TSGetLink<WNDREC> >(int);
  void TSList<WNDREC,TSGetLink<WNDREC> >(class TSList<WNDREC,TSGetLink<WNDREC> >&);
  void TSList<WNDREC,TSGetLink<WNDREC> >::TSList<WNDREC,TSGetLink<WNDREC> >();
  void TSList<WNDREC,TSGetLink<WNDREC> >::~TSList<WNDREC,TSGetLink<WNDREC> >();
  class TSList<WNDREC,TSGetLink<WNDREC> >& operator=(class TSList<WNDREC,TSGetLink<WNDREC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WNDREC,TSGetLink<WNDREC> >*, unsigned long, struct WNDREC*);
  struct WNDREC* TSList<WNDREC,TSGetLink<WNDREC> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr);
  struct WNDREC* Head();
  struct WNDREC* TSList<WNDREC,TSGetLink<WNDREC> >::Head();
  int TSList<WNDREC,TSGetLink<WNDREC> >::IsEmpty();
  int IsLinked(struct WNDREC*);
  void TSList<WNDREC,TSGetLink<WNDREC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct WNDREC* existingptr);
  struct WNDREC* TSList<WNDREC,TSGetLink<WNDREC> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct WNDREC* Next(struct WNDREC*);
  struct WNDREC* TSList<WNDREC,TSGetLink<WNDREC> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr);
  struct WNDREC* Prev(struct WNDREC*);
  struct WNDREC* Prev(struct WNDREC*);
  struct WNDREC* RawNext(struct WNDREC*);
  struct WNDREC* TSList<WNDREC,TSGetLink<WNDREC> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr);
  struct WNDREC* Tail();
  struct WNDREC* Tail();
  void TSList<WNDREC,TSGetLink<WNDREC> >::UnlinkAll();
  void TSList<WNDREC,TSGetLink<WNDREC> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WNDREC* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<Storm::SFile::FILEREC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::Constructor();
  void CopyConstructor(class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >&);
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::InitializeTerminator();
  class TSLink<Storm::SFile::FILEREC>* TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* ptr);
  void SetLinkOffset(int);
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >(int);
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >(class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >&);
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >();
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::~TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >();
  class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >& operator=(class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >*, unsigned long, struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* DeleteNode(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* Head();
  struct Storm::SFile::FILEREC* TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::Head();
  int IsEmpty();
  int IsLinked(struct Storm::SFile::FILEREC*);
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* existingptr);
  struct Storm::SFile::FILEREC* TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct Storm::SFile::FILEREC* Next(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* Next(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* Prev(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* Prev(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* RawNext(struct Storm::SFile::FILEREC*);
  struct Storm::SFile::FILEREC* TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* ptr);
  struct Storm::SFile::FILEREC* Tail();
  struct Storm::SFile::FILEREC* Tail();
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::UnlinkAll();
  void TSList<Storm::SFile::FILEREC,TSGetLink<Storm::SFile::FILEREC> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::FILEREC* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<Storm::SFile::ARCHIVEREC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::Constructor();
  void CopyConstructor(class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >&);
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::InitializeTerminator();
  class TSLink<Storm::SFile::ARCHIVEREC>* TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* ptr);
  void SetLinkOffset(int);
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >(int);
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >(class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >&);
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >();
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::~TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >();
  class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >& operator=(class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >*, unsigned long, struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* DeleteNode(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* Head();
  struct Storm::SFile::ARCHIVEREC* TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::Head();
  int TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::IsEmpty();
  int IsLinked(struct Storm::SFile::ARCHIVEREC*);
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* existingptr);
  struct Storm::SFile::ARCHIVEREC* TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct Storm::SFile::ARCHIVEREC* Next(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* Next(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* Prev(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* Prev(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* RawNext(struct Storm::SFile::ARCHIVEREC*);
  struct Storm::SFile::ARCHIVEREC* TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* ptr);
  struct Storm::SFile::ARCHIVEREC* Tail();
  struct Storm::SFile::ARCHIVEREC* Tail();
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::UnlinkAll();
  void TSList<Storm::SFile::ARCHIVEREC,TSGetLink<Storm::SFile::ARCHIVEREC> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::ARCHIVEREC* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<Storm::SFile::AUDIOSTREAM> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::Constructor();
  void CopyConstructor(class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >&);
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::InitializeTerminator();
  class TSLink<Storm::SFile::AUDIOSTREAM>* TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* ptr);
  void SetLinkOffset(int);
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >(int);
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >(class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >&);
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >();
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::~TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >();
  class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >& operator=(class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >*, unsigned long, struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* DeleteNode(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* Head();
  struct Storm::SFile::AUDIOSTREAM* TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::Head();
  int TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::IsEmpty();
  int IsLinked(struct Storm::SFile::AUDIOSTREAM*);
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* existingptr);
  struct Storm::SFile::AUDIOSTREAM* TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct Storm::SFile::AUDIOSTREAM* Next(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* Next(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* Prev(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* Prev(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* RawNext(struct Storm::SFile::AUDIOSTREAM*);
  struct Storm::SFile::AUDIOSTREAM* TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* ptr);
  struct Storm::SFile::AUDIOSTREAM* Tail();
  struct Storm::SFile::AUDIOSTREAM* Tail();
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::UnlinkAll();
  void TSList<Storm::SFile::AUDIOSTREAM,TSGetLink<Storm::SFile::AUDIOSTREAM> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct Storm::SFile::AUDIOSTREAM* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EVENTREC,TSGetLink<EVENTREC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EVENTREC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::Constructor();
  void CopyConstructor(class TSList<EVENTREC,TSGetLink<EVENTREC> >&);
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::InitializeTerminator();
  class TSLink<EVENTREC>* TSList<EVENTREC,TSGetLink<EVENTREC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENTREC* ptr);
  void SetLinkOffset(int);
  void TSList<EVENTREC,TSGetLink<EVENTREC> >(int);
  void TSList<EVENTREC,TSGetLink<EVENTREC> >(class TSList<EVENTREC,TSGetLink<EVENTREC> >&);
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::TSList<EVENTREC,TSGetLink<EVENTREC> >();
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::~TSList<EVENTREC,TSGetLink<EVENTREC> >();
  class TSList<EVENTREC,TSGetLink<EVENTREC> >& operator=(class TSList<EVENTREC,TSGetLink<EVENTREC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EVENTREC,TSGetLink<EVENTREC> >*, unsigned long, struct EVENTREC*);
  struct EVENTREC* TSList<EVENTREC,TSGetLink<EVENTREC> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENTREC* ptr);
  struct EVENTREC* Head();
  struct EVENTREC* TSList<EVENTREC,TSGetLink<EVENTREC> >::Head();
  int IsEmpty();
  int IsLinked(struct EVENTREC*);
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENTREC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct EVENTREC* existingptr);
  struct EVENTREC* TSList<EVENTREC,TSGetLink<EVENTREC> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct EVENTREC* Next(struct EVENTREC*);
  struct EVENTREC* TSList<EVENTREC,TSGetLink<EVENTREC> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENTREC* ptr);
  struct EVENTREC* Prev(struct EVENTREC*);
  struct EVENTREC* Prev(struct EVENTREC*);
  struct EVENTREC* RawNext(struct EVENTREC*);
  struct EVENTREC* RawNext(struct EVENTREC*);
  struct EVENTREC* Tail();
  struct EVENTREC* Tail();
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::UnlinkAll();
  void TSList<EVENTREC,TSGetLink<EVENTREC> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EVENTREC* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<REQUEST,TSGetLink<REQUEST> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<REQUEST> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<REQUEST,TSGetLink<REQUEST> >::Constructor();
  void CopyConstructor(class TSList<REQUEST,TSGetLink<REQUEST> >&);
  void TSList<REQUEST,TSGetLink<REQUEST> >::InitializeTerminator();
  class TSLink<REQUEST>* TSList<REQUEST,TSGetLink<REQUEST> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr);
  void SetLinkOffset(int);
  void TSList<REQUEST,TSGetLink<REQUEST> >(int);
  void TSList<REQUEST,TSGetLink<REQUEST> >(class TSList<REQUEST,TSGetLink<REQUEST> >&);
  void TSList<REQUEST,TSGetLink<REQUEST> >::TSList<REQUEST,TSGetLink<REQUEST> >();
  void TSList<REQUEST,TSGetLink<REQUEST> >::~TSList<REQUEST,TSGetLink<REQUEST> >();
  class TSList<REQUEST,TSGetLink<REQUEST> >& operator=(class TSList<REQUEST,TSGetLink<REQUEST> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<REQUEST,TSGetLink<REQUEST> >*, unsigned long, struct REQUEST*);
  struct REQUEST* TSList<REQUEST,TSGetLink<REQUEST> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr);
  struct REQUEST* Head();
  struct REQUEST* TSList<REQUEST,TSGetLink<REQUEST> >::Head();
  int TSList<REQUEST,TSGetLink<REQUEST> >::IsEmpty();
  int IsLinked(struct REQUEST*);
  void TSList<REQUEST,TSGetLink<REQUEST> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct REQUEST* existingptr);
  struct REQUEST* TSList<REQUEST,TSGetLink<REQUEST> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct REQUEST* Next(struct REQUEST*);
  struct REQUEST* TSList<REQUEST,TSGetLink<REQUEST> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr);
  struct REQUEST* Prev(struct REQUEST*);
  struct REQUEST* Prev(struct REQUEST*);
  struct REQUEST* RawNext(struct REQUEST*);
  struct REQUEST* TSList<REQUEST,TSGetLink<REQUEST> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr);
  struct REQUEST* Tail();
  struct REQUEST* Tail();
  void TSList<REQUEST,TSGetLink<REQUEST> >::UnlinkAll();
  void TSList<REQUEST,TSGetLink<REQUEST> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REQUEST* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BREAKCMD,TSGetLink<BREAKCMD> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BREAKCMD> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::Constructor();
  void CopyConstructor(class TSList<BREAKCMD,TSGetLink<BREAKCMD> >&);
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::InitializeTerminator();
  class TSLink<BREAKCMD>* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr);
  void SetLinkOffset(int);
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >(int);
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >(class TSList<BREAKCMD,TSGetLink<BREAKCMD> >&);
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::TSList<BREAKCMD,TSGetLink<BREAKCMD> >();
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::~TSList<BREAKCMD,TSGetLink<BREAKCMD> >();
  class TSList<BREAKCMD,TSGetLink<BREAKCMD> >& operator=(class TSList<BREAKCMD,TSGetLink<BREAKCMD> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<BREAKCMD,TSGetLink<BREAKCMD> >*, unsigned long, struct BREAKCMD*);
  struct BREAKCMD* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr);
  struct BREAKCMD* Head();
  struct BREAKCMD* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::Head();
  int IsEmpty();
  int IsLinked(struct BREAKCMD*);
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct BREAKCMD* existingptr);
  struct BREAKCMD* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct BREAKCMD* Next(struct BREAKCMD*);
  struct BREAKCMD* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr);
  struct BREAKCMD* Prev(struct BREAKCMD*);
  struct BREAKCMD* Prev(struct BREAKCMD*);
  struct BREAKCMD* RawNext(struct BREAKCMD*);
  struct BREAKCMD* TSList<BREAKCMD,TSGetLink<BREAKCMD> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr);
  struct BREAKCMD* Tail();
  struct BREAKCMD* Tail();
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::UnlinkAll();
  void TSList<BREAKCMD,TSGetLink<BREAKCMD> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BREAKCMD* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ZipFileDirEntry> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::Constructor();
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::CopyConstructor(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >& source);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::InitializeTerminator();
  class TSLink<ZipFileDirEntry>* TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::SetLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >(int);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >& source);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >();
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::~TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >();
  class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >& operator=(class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >&);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >*, unsigned long, struct ZipFileDirEntry*);
  struct ZipFileDirEntry* DeleteNode(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* Head();
  struct ZipFileDirEntry* TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::Head();
  int IsEmpty();
  int IsLinked(struct ZipFileDirEntry*);
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ZipFileDirEntry* existingptr);
  struct ZipFileDirEntry* TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct ZipFileDirEntry* Next(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* Prev(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* Prev(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* RawNext(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* Tail();
  struct ZipFileDirEntry* Tail();
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::UnlinkAll();
  void TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ZipFileArchive> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::Constructor();
  void CopyConstructor(class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >&);
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::InitializeTerminator();
  class TSLink<ZipFileArchive>* TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileArchive* ptr);
  void SetLinkOffset(int);
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >(int);
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >(class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >&);
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >();
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::~TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >();
  class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >& operator=(class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >*, unsigned long, struct ZipFileArchive*);
  struct ZipFileArchive* TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileArchive* ptr);
  struct ZipFileArchive* Head();
  struct ZipFileArchive* TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::Head();
  int IsEmpty();
  int IsLinked(struct ZipFileArchive*);
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileArchive* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ZipFileArchive* existingptr);
  struct ZipFileArchive* TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct ZipFileArchive* Next(struct ZipFileArchive*);
  struct ZipFileArchive* TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileArchive* ptr);
  struct ZipFileArchive* Prev(struct ZipFileArchive*);
  struct ZipFileArchive* Prev(struct ZipFileArchive*);
  struct ZipFileArchive* RawNext(struct ZipFileArchive*);
  struct ZipFileArchive* RawNext(struct ZipFileArchive*);
  struct ZipFileArchive* Tail();
  struct ZipFileArchive* Tail();
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::UnlinkAll();
  void TSList<ZipFileArchive,TSGetLink<ZipFileArchive> >::UnlinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileArchive* ptr);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TIMESTAMPSTRUCT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >&);
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::InitializeTerminator();
  class TSLink<TIMESTAMPSTRUCT>* TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TIMESTAMPSTRUCT* ptr);
  void SetLinkOffset(int);
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >(int);
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >(class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >&);
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >();
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::~TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >();
  class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >& operator=(class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >*, unsigned long, struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* DeleteNode(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Head();
  struct TIMESTAMPSTRUCT* Head();
  int IsEmpty();
  int IsLinked(struct TIMESTAMPSTRUCT*);
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TIMESTAMPSTRUCT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct TIMESTAMPSTRUCT* existingptr);
  struct TIMESTAMPSTRUCT* NewNode(unsigned long, unsigned long, unsigned long);
  struct TIMESTAMPSTRUCT* Next(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Next(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Prev(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Prev(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* RawNext(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* RawNext(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Tail();
  struct TIMESTAMPSTRUCT* Tail();
  void TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >::UnlinkAll();
  void UnlinkNode(struct TIMESTAMPSTRUCT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<GAMETIMECBSTRUCT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >&);
  void InitializeTerminator();
  class TSLink<GAMETIMECBSTRUCT>* TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct GAMETIMECBSTRUCT* ptr);
  void SetLinkOffset(int);
  void TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >(int);
  void TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >(class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >&);
  void TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >();
  void ~TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >();
  class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >& operator=(class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<GAMETIMECBSTRUCT,TSGetLink<GAMETIMECBSTRUCT> >*, unsigned long, struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* DeleteNode(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* Head();
  struct GAMETIMECBSTRUCT* Head();
  int IsEmpty();
  int IsLinked(struct GAMETIMECBSTRUCT*);
  void LinkNode(struct GAMETIMECBSTRUCT*, unsigned long, struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* NewNode(unsigned long, unsigned long, unsigned long);
  struct GAMETIMECBSTRUCT* Next(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* Next(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* Prev(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* Prev(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* RawNext(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* RawNext(struct GAMETIMECBSTRUCT*);
  struct GAMETIMECBSTRUCT* Tail();
  struct GAMETIMECBSTRUCT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct GAMETIMECBSTRUCT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CONSOLELINE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >&);
  void InitializeTerminator();
  class TSLink<CONSOLELINE>* Link(struct CONSOLELINE*);
  void SetLinkOffset(int);
  void TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >(int);
  void TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >(class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >&);
  void TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >();
  void ~TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >();
  class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >& operator=(class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CONSOLELINE,TSGetLink<CONSOLELINE> >*, unsigned long, struct CONSOLELINE*);
  struct CONSOLELINE* DeleteNode(struct CONSOLELINE*);
  struct CONSOLELINE* Head();
  struct CONSOLELINE* Head();
  int IsEmpty();
  int IsLinked(struct CONSOLELINE*);
  void LinkNode(struct CONSOLELINE*, unsigned long, struct CONSOLELINE*);
  struct CONSOLELINE* NewNode(unsigned long, unsigned long, unsigned long);
  struct CONSOLELINE* Next(struct CONSOLELINE*);
  struct CONSOLELINE* Next(struct CONSOLELINE*);
  struct CONSOLELINE* Prev(struct CONSOLELINE*);
  struct CONSOLELINE* Prev(struct CONSOLELINE*);
  struct CONSOLELINE* RawNext(struct CONSOLELINE*);
  struct CONSOLELINE* RawNext(struct CONSOLELINE*);
  struct CONSOLELINE* Tail();
  struct CONSOLELINE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CONSOLELINE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CVar,TSGetExplicitLink<CVar> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CVar> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CVar,TSGetExplicitLink<CVar> >&);
  void TSList<CVar,TSGetExplicitLink<CVar> >::InitializeTerminator();
  class TSLink<CVar>* TSList<CVar,TSGetExplicitLink<CVar> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CVar* ptr);
  void SetLinkOffset(int);
  void TSList<CVar,TSGetExplicitLink<CVar> >(int);
  void TSList<CVar,TSGetExplicitLink<CVar> >(class TSList<CVar,TSGetExplicitLink<CVar> >&);
  void TSList<CVar,TSGetExplicitLink<CVar> >::TSList<CVar,TSGetExplicitLink<CVar> >();
  void TSList<CVar,TSGetExplicitLink<CVar> >::~TSList<CVar,TSGetExplicitLink<CVar> >();
  class TSList<CVar,TSGetExplicitLink<CVar> >& operator=(class TSList<CVar,TSGetExplicitLink<CVar> >&);
  void TSList<CVar,TSGetExplicitLink<CVar> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<CVar,TSGetExplicitLink<CVar> >*, unsigned long, struct CVar*);
  struct CVar* DeleteNode(struct CVar*);
  struct CVar* Head();
  struct CVar* Head();
  int IsEmpty();
  int IsLinked(struct CVar*);
  void TSList<CVar,TSGetExplicitLink<CVar> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CVar* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CVar* existingptr);
  struct CVar* NewNode(unsigned long, unsigned long, unsigned long);
  struct CVar* Next(struct CVar*);
  struct CVar* Next(struct CVar*);
  struct CVar* Prev(struct CVar*);
  struct CVar* Prev(struct CVar*);
  struct CVar* RawNext(struct CVar*);
  struct CVar* RawNext(struct CVar*);
  struct CVar* Tail();
  struct CVar* Tail();
  void TSList<CVar,TSGetExplicitLink<CVar> >::UnlinkAll();
  void UnlinkNode(struct CVar*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CONSOLECOMMAND> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >&);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::InitializeTerminator();
  class TSLink<CONSOLECOMMAND>* TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CONSOLECOMMAND* ptr);
  void SetLinkOffset(int);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >(int);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >(class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >&);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >();
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::~TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >();
  class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >& operator=(class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >&);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >*, unsigned long, struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* DeleteNode(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Head();
  struct CONSOLECOMMAND* Head();
  int IsEmpty();
  int IsLinked(struct CONSOLECOMMAND*);
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CONSOLECOMMAND* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CONSOLECOMMAND* existingptr);
  struct CONSOLECOMMAND* NewNode(unsigned long, unsigned long, unsigned long);
  struct CONSOLECOMMAND* Next(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Next(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Prev(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Prev(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* RawNext(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* RawNext(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Tail();
  struct CONSOLECOMMAND* Tail();
  void TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >::UnlinkAll();
  void UnlinkNode(struct CONSOLECOMMAND*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<INVENTORYART> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >&);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::InitializeTerminator();
  class TSLink<INVENTORYART>* TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct INVENTORYART* ptr);
  void SetLinkOffset(int);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >(int);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >(class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >&);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >();
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::~TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >();
  class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >& operator=(class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >&);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >*, unsigned long, struct INVENTORYART*);
  struct INVENTORYART* DeleteNode(struct INVENTORYART*);
  struct INVENTORYART* Head();
  struct INVENTORYART* Head();
  int IsEmpty();
  int IsLinked(struct INVENTORYART*);
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct INVENTORYART* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct INVENTORYART* existingptr);
  struct INVENTORYART* NewNode(unsigned long, unsigned long, unsigned long);
  struct INVENTORYART* Next(struct INVENTORYART*);
  struct INVENTORYART* Next(struct INVENTORYART*);
  struct INVENTORYART* Prev(struct INVENTORYART*);
  struct INVENTORYART* Prev(struct INVENTORYART*);
  struct INVENTORYART* RawNext(struct INVENTORYART*);
  struct INVENTORYART* RawNext(struct INVENTORYART*);
  struct INVENTORYART* Tail();
  struct INVENTORYART* Tail();
  void TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >::UnlinkAll();
  void UnlinkNode(struct INVENTORYART*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMEXPIRATION> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >&);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::InitializeTerminator();
  class TSLink<ITEMEXPIRATION>* TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMEXPIRATION* ptr);
  void SetLinkOffset(int);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >(int);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >(class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >&);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >();
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::~TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >();
  class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >& operator=(class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >&);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >*, unsigned long, struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* DeleteNode(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Head();
  struct ITEMEXPIRATION* Head();
  int IsEmpty();
  int IsLinked(struct ITEMEXPIRATION*);
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMEXPIRATION* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ITEMEXPIRATION* existingptr);
  struct ITEMEXPIRATION* NewNode(unsigned long, unsigned long, unsigned long);
  struct ITEMEXPIRATION* Next(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Next(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Prev(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Prev(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* RawNext(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* RawNext(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Tail();
  struct ITEMEXPIRATION* Tail();
  void TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >::UnlinkAll();
  void UnlinkNode(struct ITEMEXPIRATION*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TRADESKILLLINE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >&);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::InitializeTerminator();
  class TSLink<TRADESKILLLINE>* TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TRADESKILLLINE* ptr);
  void SetLinkOffset(int);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >(int);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >(class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >&);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >();
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::~TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >();
  class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >& operator=(class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >&);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >*, unsigned long, struct TRADESKILLLINE*);
  struct TRADESKILLLINE* DeleteNode(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Head();
  struct TRADESKILLLINE* Head();
  int IsEmpty();
  int IsLinked(struct TRADESKILLLINE*);
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TRADESKILLLINE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct TRADESKILLLINE* existingptr);
  struct TRADESKILLLINE* NewNode(unsigned long, unsigned long, unsigned long);
  struct TRADESKILLLINE* Next(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Next(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Prev(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Prev(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* RawNext(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* RawNext(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Tail();
  struct TRADESKILLLINE* Tail();
  void TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >::UnlinkAll();
  void UnlinkNode(struct TRADESKILLLINE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DEFERREDSPELLMISS> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >&);
  void InitializeTerminator();
  class TSLink<DEFERREDSPELLMISS>* Link(struct DEFERREDSPELLMISS*);
  void SetLinkOffset(int);
  void TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >(int);
  void TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >(class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >&);
  void TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >();
  void ~TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >();
  class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >& operator=(class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DEFERREDSPELLMISS,TSGetLink<DEFERREDSPELLMISS> >*, unsigned long, struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* DeleteNode(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* Head();
  struct DEFERREDSPELLMISS* Head();
  int IsEmpty();
  int IsLinked(struct DEFERREDSPELLMISS*);
  void LinkNode(struct DEFERREDSPELLMISS*, unsigned long, struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* NewNode(unsigned long, unsigned long, unsigned long);
  struct DEFERREDSPELLMISS* Next(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* Next(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* Prev(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* Prev(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* RawNext(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* RawNext(struct DEFERREDSPELLMISS*);
  struct DEFERREDSPELLMISS* Tail();
  struct DEFERREDSPELLMISS* Tail();
  void UnlinkAll();
  void UnlinkNode(struct DEFERREDSPELLMISS*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DEFERREDDAMAGE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >&);
  void InitializeTerminator();
  class TSLink<DEFERREDDAMAGE>* Link(struct DEFERREDDAMAGE*);
  void SetLinkOffset(int);
  void TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >(int);
  void TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >(class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >&);
  void TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >();
  void ~TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >();
  class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >& operator=(class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DEFERREDDAMAGE,TSGetLink<DEFERREDDAMAGE> >*, unsigned long, struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* DeleteNode(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* Head();
  struct DEFERREDDAMAGE* Head();
  int IsEmpty();
  int IsLinked(struct DEFERREDDAMAGE*);
  void LinkNode(struct DEFERREDDAMAGE*, unsigned long, struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* NewNode(unsigned long, unsigned long, unsigned long);
  struct DEFERREDDAMAGE* Next(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* Next(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* Prev(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* Prev(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* RawNext(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* RawNext(struct DEFERREDDAMAGE*);
  struct DEFERREDDAMAGE* Tail();
  struct DEFERREDDAMAGE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct DEFERREDDAMAGE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMovementData,TSGetExplicitLink<CMovementData> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMovementData> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMovementData,TSGetExplicitLink<CMovementData> >&);
  void TSList<CMovementData,TSGetExplicitLink<CMovementData> >::InitializeTerminator();
  class TSLink<CMovementData>* Link(class CMovementData*);
  void SetLinkOffset(int);
  void TSList<CMovementData,TSGetExplicitLink<CMovementData> >(int);
  void TSList<CMovementData,TSGetExplicitLink<CMovementData> >(class TSList<CMovementData,TSGetExplicitLink<CMovementData> >&);
  void TSList<CMovementData,TSGetExplicitLink<CMovementData> >();
  void ~TSList<CMovementData,TSGetExplicitLink<CMovementData> >();
  class TSList<CMovementData,TSGetExplicitLink<CMovementData> >& operator=(class TSList<CMovementData,TSGetExplicitLink<CMovementData> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMovementData,TSGetExplicitLink<CMovementData> >*, unsigned long, class CMovementData*);
  class CMovementData* DeleteNode(class CMovementData*);
  class CMovementData* Head();
  class CMovementData* Head();
  int IsEmpty();
  int IsLinked(class CMovementData*);
  void LinkNode(class CMovementData*, unsigned long, class CMovementData*);
  class CMovementData* NewNode(unsigned long, unsigned long, unsigned long);
  class CMovementData* Next(class CMovementData*);
  class CMovementData* Next(class CMovementData*);
  class CMovementData* Prev(class CMovementData*);
  class CMovementData* Prev(class CMovementData*);
  class CMovementData* RawNext(class CMovementData*);
  class CMovementData* RawNext(class CMovementData*);
  class CMovementData* Tail();
  class CMovementData* Tail();
  void UnlinkAll();
  void UnlinkNode(class CMovementData*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<IMPACTEFFECTDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >&);
  void InitializeTerminator();
  class TSLink<IMPACTEFFECTDESC>* TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct IMPACTEFFECTDESC* ptr);
  void SetLinkOffset(int);
  void TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >(int);
  void TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >(class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >&);
  void TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >();
  void ~TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >();
  class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >& operator=(class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<IMPACTEFFECTDESC,TSGetLink<IMPACTEFFECTDESC> >*, unsigned long, struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* DeleteNode(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* Head();
  struct IMPACTEFFECTDESC* Head();
  int IsEmpty();
  int IsLinked(struct IMPACTEFFECTDESC*);
  void LinkNode(struct IMPACTEFFECTDESC*, unsigned long, struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct IMPACTEFFECTDESC* Next(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* Next(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* Prev(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* Prev(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* RawNext(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* RawNext(struct IMPACTEFFECTDESC*);
  struct IMPACTEFFECTDESC* Tail();
  struct IMPACTEFFECTDESC* Tail();
  void UnlinkAll();
  void UnlinkNode(struct IMPACTEFFECTDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ANIMQUEUENODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >&);
  void InitializeTerminator();
  class TSLink<ANIMQUEUENODE>* TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMQUEUENODE* ptr);
  void SetLinkOffset(int);
  void TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >(int);
  void TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >(class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >&);
  void TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >();
  void ~TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >();
  class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >& operator=(class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ANIMQUEUENODE,TSGetLink<ANIMQUEUENODE> >*, unsigned long, struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* DeleteNode(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* Head();
  struct ANIMQUEUENODE* Head();
  int IsEmpty();
  int IsLinked(struct ANIMQUEUENODE*);
  void LinkNode(struct ANIMQUEUENODE*, unsigned long, struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct ANIMQUEUENODE* Next(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* Next(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* Prev(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* Prev(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* RawNext(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* RawNext(struct ANIMQUEUENODE*);
  struct ANIMQUEUENODE* Tail();
  struct ANIMQUEUENODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct ANIMQUEUENODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ACTIVEAURAINFO> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >&);
  void InitializeTerminator();
  class TSLink<ACTIVEAURAINFO>* TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ACTIVEAURAINFO* ptr);
  void SetLinkOffset(int);
  void TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >(int);
  void TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >(class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >&);
  void TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >();
  void ~TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >();
  class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >& operator=(class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ACTIVEAURAINFO,TSGetLink<ACTIVEAURAINFO> >*, unsigned long, struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* DeleteNode(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* Head();
  struct ACTIVEAURAINFO* Head();
  int IsEmpty();
  int IsLinked(struct ACTIVEAURAINFO*);
  void LinkNode(struct ACTIVEAURAINFO*, unsigned long, struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* NewNode(unsigned long, unsigned long, unsigned long);
  struct ACTIVEAURAINFO* Next(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* Next(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* Prev(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* Prev(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* RawNext(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* RawNext(struct ACTIVEAURAINFO*);
  struct ACTIVEAURAINFO* Tail();
  struct ACTIVEAURAINFO* Tail();
  void UnlinkAll();
  void UnlinkNode(struct ACTIVEAURAINFO*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<AuraDecayNode> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >&);
  void InitializeTerminator();
  class TSLink<AuraDecayNode>* Link(struct AuraDecayNode*);
  void SetLinkOffset(int);
  void TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >(int);
  void TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >(class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >&);
  void TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >();
  void ~TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >();
  class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >& operator=(class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<AuraDecayNode,TSGetLink<AuraDecayNode> >*, unsigned long, struct AuraDecayNode*);
  struct AuraDecayNode* DeleteNode(struct AuraDecayNode*);
  struct AuraDecayNode* Head();
  struct AuraDecayNode* Head();
  int IsEmpty();
  int IsLinked(struct AuraDecayNode*);
  void LinkNode(struct AuraDecayNode*, unsigned long, struct AuraDecayNode*);
  struct AuraDecayNode* NewNode(unsigned long, unsigned long, unsigned long);
  struct AuraDecayNode* Next(struct AuraDecayNode*);
  struct AuraDecayNode* Next(struct AuraDecayNode*);
  struct AuraDecayNode* Prev(struct AuraDecayNode*);
  struct AuraDecayNode* Prev(struct AuraDecayNode*);
  struct AuraDecayNode* RawNext(struct AuraDecayNode*);
  struct AuraDecayNode* RawNext(struct AuraDecayNode*);
  struct AuraDecayNode* Tail();
  struct AuraDecayNode* Tail();
  void UnlinkAll();
  void UnlinkNode(struct AuraDecayNode*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BLOODSPLATNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >&);
  void InitializeTerminator();
  class TSLink<BLOODSPLATNODE>* TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BLOODSPLATNODE* ptr);
  void SetLinkOffset(int);
  void TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >(int);
  void TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >(class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >&);
  void TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >();
  void ~TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >();
  class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >& operator=(class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<BLOODSPLATNODE,TSGetLink<BLOODSPLATNODE> >*, unsigned long, struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* DeleteNode(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* Head();
  struct BLOODSPLATNODE* Head();
  int IsEmpty();
  int IsLinked(struct BLOODSPLATNODE*);
  void LinkNode(struct BLOODSPLATNODE*, unsigned long, struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct BLOODSPLATNODE* Next(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* Next(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* Prev(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* Prev(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* RawNext(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* RawNext(struct BLOODSPLATNODE*);
  struct BLOODSPLATNODE* Tail();
  struct BLOODSPLATNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct BLOODSPLATNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SPELLEFFECTDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >&);
  void InitializeTerminator();
  class TSLink<SPELLEFFECTDESC>* Link(struct SPELLEFFECTDESC*);
  void SetLinkOffset(int);
  void TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >(int);
  void TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >(class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >&);
  void TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >();
  void ~TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >();
  class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >& operator=(class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >*, unsigned long, struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* DeleteNode(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* Head();
  struct SPELLEFFECTDESC* Head();
  int IsEmpty();
  int IsLinked(struct SPELLEFFECTDESC*);
  void LinkNode(struct SPELLEFFECTDESC*, unsigned long, struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct SPELLEFFECTDESC* Next(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* Next(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* Prev(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* Prev(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* RawNext(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* RawNext(struct SPELLEFFECTDESC*);
  struct SPELLEFFECTDESC* Tail();
  struct SPELLEFFECTDESC* Tail();
  void TSList<SPELLEFFECTDESC,TSGetLink<SPELLEFFECTDESC> >::UnlinkAll();
  void UnlinkNode(struct SPELLEFFECTDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FREENAMEPLATE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >&);
  void InitializeTerminator();
  class TSLink<FREENAMEPLATE>* Link(struct FREENAMEPLATE*);
  void SetLinkOffset(int);
  void TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >(int);
  void TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >(class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >&);
  void TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >();
  void ~TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >();
  class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >& operator=(class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<FREENAMEPLATE,TSGetLink<FREENAMEPLATE> >*, unsigned long, struct FREENAMEPLATE*);
  struct FREENAMEPLATE* DeleteNode(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* Head();
  struct FREENAMEPLATE* Head();
  int IsEmpty();
  int IsLinked(struct FREENAMEPLATE*);
  void LinkNode(struct FREENAMEPLATE*, unsigned long, struct FREENAMEPLATE*);
  struct FREENAMEPLATE* NewNode(unsigned long, unsigned long, unsigned long);
  struct FREENAMEPLATE* Next(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* Next(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* Prev(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* Prev(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* RawNext(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* RawNext(struct FREENAMEPLATE*);
  struct FREENAMEPLATE* Tail();
  struct FREENAMEPLATE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct FREENAMEPLATE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<NAMEPLATEDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >&);
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::InitializeTerminator();
  class TSLink<NAMEPLATEDESC>* TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct NAMEPLATEDESC* ptr);
  void SetLinkOffset(int);
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >(int);
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >(class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >&);
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >();
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::~TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >();
  class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >& operator=(class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >*, unsigned long, struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* DeleteNode(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Head();
  struct NAMEPLATEDESC* Head();
  int IsEmpty();
  int IsLinked(struct NAMEPLATEDESC*);
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct NAMEPLATEDESC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct NAMEPLATEDESC* existingptr);
  struct NAMEPLATEDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct NAMEPLATEDESC* Next(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Next(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Prev(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Prev(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* RawNext(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* RawNext(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Tail();
  struct NAMEPLATEDESC* Tail();
  void TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >::UnlinkAll();
  void UnlinkNode(struct NAMEPLATEDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGGameObject_C> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >&);
  void InitializeTerminator();
  class TSLink<CGGameObject_C>* Link(class CGGameObject_C*);
  void SetLinkOffset(int);
  void TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >(int);
  void TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >(class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >&);
  void TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >();
  void ~TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >();
  class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >& operator=(class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >*, unsigned long, class CGGameObject_C*);
  class CGGameObject_C* DeleteNode(class CGGameObject_C*);
  class CGGameObject_C* Head();
  class CGGameObject_C* Head();
  int IsEmpty();
  int IsLinked(class CGGameObject_C*);
  void LinkNode(class CGGameObject_C*, unsigned long, class CGGameObject_C*);
  class CGGameObject_C* NewNode(unsigned long, unsigned long, unsigned long);
  class CGGameObject_C* Next(class CGGameObject_C*);
  class CGGameObject_C* Next(class CGGameObject_C*);
  class CGGameObject_C* Prev(class CGGameObject_C*);
  class CGGameObject_C* Prev(class CGGameObject_C*);
  class CGGameObject_C* RawNext(class CGGameObject_C*);
  class CGGameObject_C* RawNext(class CGGameObject_C*);
  class CGGameObject_C* Tail();
  class CGGameObject_C* Tail();
  void UnlinkAll();
  void UnlinkNode(class CGGameObject_C*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITONESHOTEFFECTDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >&);
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::InitializeTerminator();
  class TSLink<UNITONESHOTEFFECTDESC>* TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITONESHOTEFFECTDESC* ptr);
  void SetLinkOffset(int);
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >(int);
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >(class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >&);
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >();
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::~TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >();
  class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >& operator=(class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >*, unsigned long, struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* DeleteNode(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Head();
  struct UNITONESHOTEFFECTDESC* Head();
  int IsEmpty();
  int IsLinked(struct UNITONESHOTEFFECTDESC*);
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITONESHOTEFFECTDESC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct UNITONESHOTEFFECTDESC* existingptr);
  struct UNITONESHOTEFFECTDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct UNITONESHOTEFFECTDESC* Next(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Next(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Prev(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Prev(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* RawNext(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* RawNext(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Tail();
  struct UNITONESHOTEFFECTDESC* Tail();
  void TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >::UnlinkAll();
  void UnlinkNode(struct UNITONESHOTEFFECTDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ONESHOTEFFECTNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >&);
  void InitializeTerminator();
  class TSLink<ONESHOTEFFECTNODE>* Link(class ONESHOTEFFECTNODE*);
  void SetLinkOffset(int);
  void TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >(int);
  void TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >(class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >&);
  void TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >();
  void ~TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >();
  class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >& operator=(class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >*, unsigned long, class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* DeleteNode(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* Head();
  class ONESHOTEFFECTNODE* Head();
  int IsEmpty();
  int IsLinked(class ONESHOTEFFECTNODE*);
  void TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ONESHOTEFFECTNODE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class ONESHOTEFFECTNODE* existingptr);
  class ONESHOTEFFECTNODE* NewNode(unsigned long, unsigned long, unsigned long);
  class ONESHOTEFFECTNODE* Next(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* Next(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* Prev(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* Prev(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* RawNext(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* RawNext(class ONESHOTEFFECTNODE*);
  class ONESHOTEFFECTNODE* Tail();
  class ONESHOTEFFECTNODE* Tail();
  void TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >::UnlinkAll();
  void UnlinkNode(class ONESHOTEFFECTNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<MISSILENODE,TSGetLink<MISSILENODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<MISSILENODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<MISSILENODE,TSGetLink<MISSILENODE> >&);
  void InitializeTerminator();
  class TSLink<MISSILENODE>* Link(struct MISSILENODE*);
  void SetLinkOffset(int);
  void TSList<MISSILENODE,TSGetLink<MISSILENODE> >(int);
  void TSList<MISSILENODE,TSGetLink<MISSILENODE> >(class TSList<MISSILENODE,TSGetLink<MISSILENODE> >&);
  void TSList<MISSILENODE,TSGetLink<MISSILENODE> >();
  void ~TSList<MISSILENODE,TSGetLink<MISSILENODE> >();
  class TSList<MISSILENODE,TSGetLink<MISSILENODE> >& operator=(class TSList<MISSILENODE,TSGetLink<MISSILENODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<MISSILENODE,TSGetLink<MISSILENODE> >*, unsigned long, struct MISSILENODE*);
  struct MISSILENODE* DeleteNode(struct MISSILENODE*);
  struct MISSILENODE* Head();
  struct MISSILENODE* Head();
  int IsEmpty();
  int IsLinked(struct MISSILENODE*);
  void LinkNode(struct MISSILENODE*, unsigned long, struct MISSILENODE*);
  struct MISSILENODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct MISSILENODE* Next(struct MISSILENODE*);
  struct MISSILENODE* Next(struct MISSILENODE*);
  struct MISSILENODE* Prev(struct MISSILENODE*);
  struct MISSILENODE* Prev(struct MISSILENODE*);
  struct MISSILENODE* RawNext(struct MISSILENODE*);
  struct MISSILENODE* RawNext(struct MISSILENODE*);
  struct MISSILENODE* Tail();
  struct MISSILENODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct MISSILENODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ONESHOTSTANDALONEEFFECTNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >&);
  void InitializeTerminator();
  class TSLink<ONESHOTSTANDALONEEFFECTNODE>* Link(class ONESHOTSTANDALONEEFFECTNODE*);
  void SetLinkOffset(int);
  void TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >(int);
  void TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >(class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >&);
  void TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >();
  void ~TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >();
  class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >& operator=(class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >*, unsigned long, class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* DeleteNode(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* Head();
  class ONESHOTSTANDALONEEFFECTNODE* Head();
  int IsEmpty();
  int IsLinked(class ONESHOTSTANDALONEEFFECTNODE*);
  void LinkNode(class ONESHOTSTANDALONEEFFECTNODE*, unsigned long, class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* NewNode(unsigned long, unsigned long, unsigned long);
  class ONESHOTSTANDALONEEFFECTNODE* Next(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* Next(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* Prev(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* Prev(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* RawNext(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* RawNext(class ONESHOTSTANDALONEEFFECTNODE*);
  class ONESHOTSTANDALONEEFFECTNODE* Tail();
  class ONESHOTSTANDALONEEFFECTNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(class ONESHOTSTANDALONEEFFECTNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CHUNKDATA> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >&);
  void InitializeTerminator();
  class TSLink<CHUNKDATA>* Link(struct CHUNKDATA*);
  void SetLinkOffset(int);
  void TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >(int);
  void TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >(class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >&);
  void TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >();
  void TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >::~TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >();
  class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >& operator=(class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >*, unsigned long, struct CHUNKDATA*);
  struct CHUNKDATA* DeleteNode(struct CHUNKDATA*);
  struct CHUNKDATA* Head();
  struct CHUNKDATA* Head();
  int IsEmpty();
  int IsLinked(struct CHUNKDATA*);
  void LinkNode(struct CHUNKDATA*, unsigned long, struct CHUNKDATA*);
  struct CHUNKDATA* NewNode(unsigned long, unsigned long, unsigned long);
  struct CHUNKDATA* Next(struct CHUNKDATA*);
  struct CHUNKDATA* Next(struct CHUNKDATA*);
  struct CHUNKDATA* Prev(struct CHUNKDATA*);
  struct CHUNKDATA* Prev(struct CHUNKDATA*);
  struct CHUNKDATA* RawNext(struct CHUNKDATA*);
  struct CHUNKDATA* RawNext(struct CHUNKDATA*);
  struct CHUNKDATA* Tail();
  struct CHUNKDATA* Tail();
  void TSList<CHUNKDATA,TSGetLink<CHUNKDATA> >::UnlinkAll();
  void UnlinkNode(struct CHUNKDATA*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SPLATDATA> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >&);
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >::InitializeTerminator();
  class TSLink<SPLATDATA>* Link(struct SPLATDATA*);
  void SetLinkOffset(int);
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >(int);
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >(class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >&);
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >();
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >::~TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >();
  class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >& operator=(class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >*, unsigned long, struct SPLATDATA*);
  struct SPLATDATA* DeleteNode(struct SPLATDATA*);
  struct SPLATDATA* Head();
  struct SPLATDATA* Head();
  int IsEmpty();
  int IsLinked(struct SPLATDATA*);
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SPLATDATA* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SPLATDATA* existingptr);
  struct SPLATDATA* NewNode(unsigned long, unsigned long, unsigned long);
  struct SPLATDATA* Next(struct SPLATDATA*);
  struct SPLATDATA* Next(struct SPLATDATA*);
  struct SPLATDATA* Prev(struct SPLATDATA*);
  struct SPLATDATA* Prev(struct SPLATDATA*);
  struct SPLATDATA* RawNext(struct SPLATDATA*);
  struct SPLATDATA* RawNext(struct SPLATDATA*);
  struct SPLATDATA* Tail();
  struct SPLATDATA* Tail();
  void TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >::UnlinkAll();
  void UnlinkNode(struct SPLATDATA*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >&);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::InitializeTerminator();
  class TSLink<UNITHASHOBJ>* TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >(int);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >(class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >&);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >();
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::~TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >();
  class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >& operator=(class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >&);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >*, unsigned long, struct UNITHASHOBJ*);
  struct UNITHASHOBJ* DeleteNode(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Head();
  struct UNITHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct UNITHASHOBJ*);
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct UNITHASHOBJ* existingptr);
  struct UNITHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct UNITHASHOBJ* Next(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Next(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Prev(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Prev(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* RawNext(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* RawNext(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Tail();
  struct UNITHASHOBJ* Tail();
  void TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct UNITHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ANIMKIT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >&);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::InitializeTerminator();
  class TSLink<ANIMKIT>* TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMKIT* ptr);
  void SetLinkOffset(int);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >(int);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >(class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >&);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >();
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::~TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >();
  class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >& operator=(class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >&);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >*, unsigned long, struct ANIMKIT*);
  struct ANIMKIT* DeleteNode(struct ANIMKIT*);
  struct ANIMKIT* Head();
  struct ANIMKIT* Head();
  int IsEmpty();
  int IsLinked(struct ANIMKIT*);
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMKIT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ANIMKIT* existingptr);
  struct ANIMKIT* NewNode(unsigned long, unsigned long, unsigned long);
  struct ANIMKIT* Next(struct ANIMKIT*);
  struct ANIMKIT* Next(struct ANIMKIT*);
  struct ANIMKIT* Prev(struct ANIMKIT*);
  struct ANIMKIT* Prev(struct ANIMKIT*);
  struct ANIMKIT* RawNext(struct ANIMKIT*);
  struct ANIMKIT* RawNext(struct ANIMKIT*);
  struct ANIMKIT* Tail();
  struct ANIMKIT* Tail();
  void TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >::UnlinkAll();
  void UnlinkNode(struct ANIMKIT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >&);
  void TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> >* TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >(int);
  void TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >(class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >&);
  void TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >();
  void ~TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >();
  class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >& operator=(class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >*, unsigned long, class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* DeleteNode(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Head();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  void TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* existingptr);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Next(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Next(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Prev(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Prev(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* RawNext(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* RawNext(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Tail();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CLightList,TSGetExplicitLink<CLightList> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CLightList> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CLightList,TSGetExplicitLink<CLightList> >&);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::InitializeTerminator();
  class TSLink<CLightList>* TSList<CLightList,TSGetExplicitLink<CLightList> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLightList* ptr);
  void SetLinkOffset(int);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >(int);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >(class TSList<CLightList,TSGetExplicitLink<CLightList> >&);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::TSList<CLightList,TSGetExplicitLink<CLightList> >();
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::~TSList<CLightList,TSGetExplicitLink<CLightList> >();
  class TSList<CLightList,TSGetExplicitLink<CLightList> >& operator=(class TSList<CLightList,TSGetExplicitLink<CLightList> >&);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::Clear();
  void Combine(class TSList<CLightList,TSGetExplicitLink<CLightList> >*, unsigned long, struct CLightList*);
  struct CLightList* DeleteNode(struct CLightList*);
  struct CLightList* Head();
  struct CLightList* Head();
  int IsEmpty();
  int IsLinked(struct CLightList*);
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLightList* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CLightList* existingptr);
  struct CLightList* NewNode(unsigned long, unsigned long, unsigned long);
  struct CLightList* Next(struct CLightList*);
  struct CLightList* Next(struct CLightList*);
  struct CLightList* Prev(struct CLightList*);
  struct CLightList* Prev(struct CLightList*);
  struct CLightList* RawNext(struct CLightList*);
  struct CLightList* RawNext(struct CLightList*);
  struct CLightList* Tail();
  struct CLightList* Tail();
  void TSList<CLightList,TSGetExplicitLink<CLightList> >::UnlinkAll();
  void UnlinkNode(struct CLightList*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxuLightLink> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >&);
  void InitializeTerminator();
  class TSLink<CGxuLightLink>* TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxuLightLink* ptr);
  void SetLinkOffset(int);
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >(int);
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >(class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >&);
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >();
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >::~TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >();
  class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >& operator=(class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >*, unsigned long, class CGxuLightLink*);
  class CGxuLightLink* DeleteNode(class CGxuLightLink*);
  class CGxuLightLink* Head();
  class CGxuLightLink* Head();
  int IsEmpty();
  int IsLinked(class CGxuLightLink*);
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxuLightLink* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGxuLightLink* existingptr);
  class CGxuLightLink* TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class CGxuLightLink* Next(class CGxuLightLink*);
  class CGxuLightLink* Next(class CGxuLightLink*);
  class CGxuLightLink* Prev(class CGxuLightLink*);
  class CGxuLightLink* Prev(class CGxuLightLink*);
  class CGxuLightLink* RawNext(class CGxuLightLink*);
  class CGxuLightLink* RawNext(class CGxuLightLink*);
  class CGxuLightLink* Tail();
  class CGxuLightLink* Tail();
  void TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >::UnlinkAll();
  void UnlinkNode(class CGxuLightLink*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxuLight,TSGetLink<CGxuLight> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxuLight> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxuLight,TSGetLink<CGxuLight> >&);
  void InitializeTerminator();
  class TSLink<CGxuLight>* Link(struct CGxuLight*);
  void SetLinkOffset(int);
  void TSList<CGxuLight,TSGetLink<CGxuLight> >(int);
  void TSList<CGxuLight,TSGetLink<CGxuLight> >(class TSList<CGxuLight,TSGetLink<CGxuLight> >&);
  void TSList<CGxuLight,TSGetLink<CGxuLight> >();
  void ~TSList<CGxuLight,TSGetLink<CGxuLight> >();
  class TSList<CGxuLight,TSGetLink<CGxuLight> >& operator=(class TSList<CGxuLight,TSGetLink<CGxuLight> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxuLight,TSGetLink<CGxuLight> >*, unsigned long, struct CGxuLight*);
  struct CGxuLight* DeleteNode(struct CGxuLight*);
  struct CGxuLight* Head();
  struct CGxuLight* Head();
  int IsEmpty();
  int IsLinked(struct CGxuLight*);
  void TSList<CGxuLight,TSGetLink<CGxuLight> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxuLight* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CGxuLight* existingptr);
  struct CGxuLight* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxuLight* Next(struct CGxuLight*);
  struct CGxuLight* Next(struct CGxuLight*);
  struct CGxuLight* Prev(struct CGxuLight*);
  struct CGxuLight* Prev(struct CGxuLight*);
  struct CGxuLight* RawNext(struct CGxuLight*);
  struct CGxuLight* RawNext(struct CGxuLight*);
  struct CGxuLight* Tail();
  struct CGxuLight* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxuLight*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxStringBatch> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >&);
  void InitializeTerminator();
  class TSLink<CGxStringBatch>* Link(struct CGxStringBatch*);
  void SetLinkOffset(int);
  void TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >(int);
  void TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >(class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >&);
  void TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >();
  void ~TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >();
  class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >& operator=(class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxStringBatch,TSGetLink<CGxStringBatch> >*, unsigned long, struct CGxStringBatch*);
  struct CGxStringBatch* DeleteNode(struct CGxStringBatch*);
  struct CGxStringBatch* Head();
  struct CGxStringBatch* Head();
  int IsEmpty();
  int IsLinked(struct CGxStringBatch*);
  void LinkNode(struct CGxStringBatch*, unsigned long, struct CGxStringBatch*);
  struct CGxStringBatch* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxStringBatch* Next(struct CGxStringBatch*);
  struct CGxStringBatch* Next(struct CGxStringBatch*);
  struct CGxStringBatch* Prev(struct CGxStringBatch*);
  struct CGxStringBatch* Prev(struct CGxStringBatch*);
  struct CGxStringBatch* RawNext(struct CGxStringBatch*);
  struct CGxStringBatch* RawNext(struct CGxStringBatch*);
  struct CGxStringBatch* Tail();
  struct CGxStringBatch* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxStringBatch*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxFont,TSGetLink<CGxFont> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxFont> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxFont,TSGetLink<CGxFont> >&);
  void InitializeTerminator();
  class TSLink<CGxFont>* Link(struct CGxFont*);
  void SetLinkOffset(int);
  void TSList<CGxFont,TSGetLink<CGxFont> >(int);
  void TSList<CGxFont,TSGetLink<CGxFont> >(class TSList<CGxFont,TSGetLink<CGxFont> >&);
  void TSList<CGxFont,TSGetLink<CGxFont> >();
  void ~TSList<CGxFont,TSGetLink<CGxFont> >();
  class TSList<CGxFont,TSGetLink<CGxFont> >& operator=(class TSList<CGxFont,TSGetLink<CGxFont> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxFont,TSGetLink<CGxFont> >*, unsigned long, struct CGxFont*);
  struct CGxFont* DeleteNode(struct CGxFont*);
  struct CGxFont* Head();
  struct CGxFont* Head();
  int IsEmpty();
  int IsLinked(struct CGxFont*);
  void LinkNode(struct CGxFont*, unsigned long, struct CGxFont*);
  struct CGxFont* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxFont* Next(struct CGxFont*);
  struct CGxFont* Next(struct CGxFont*);
  struct CGxFont* Prev(struct CGxFont*);
  struct CGxFont* Prev(struct CGxFont*);
  struct CGxFont* RawNext(struct CGxFont*);
  struct CGxFont* RawNext(struct CGxFont*);
  struct CGxFont* Tail();
  struct CGxFont* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxFont*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BATCHEDRENDERFONTDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >&);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::InitializeTerminator();
  class TSLink<BATCHEDRENDERFONTDESC>* TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BATCHEDRENDERFONTDESC* ptr);
  void SetLinkOffset(int);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >(int);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >(class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >&);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >();
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::~TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >();
  class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >& operator=(class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >&);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >*, unsigned long, struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* DeleteNode(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Head();
  struct BATCHEDRENDERFONTDESC* Head();
  int IsEmpty();
  int IsLinked(struct BATCHEDRENDERFONTDESC*);
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BATCHEDRENDERFONTDESC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct BATCHEDRENDERFONTDESC* existingptr);
  struct BATCHEDRENDERFONTDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct BATCHEDRENDERFONTDESC* Next(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Next(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Prev(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Prev(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* RawNext(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* RawNext(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Tail();
  struct BATCHEDRENDERFONTDESC* Tail();
  void TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >::UnlinkAll();
  void UnlinkNode(struct BATCHEDRENDERFONTDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KERNNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >&);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::InitializeTerminator();
  class TSLink<KERNNODE>* TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KERNNODE* ptr);
  void SetLinkOffset(int);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >(int);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >(class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >&);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >();
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::~TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >();
  class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >& operator=(class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >&);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >*, unsigned long, struct KERNNODE*);
  struct KERNNODE* DeleteNode(struct KERNNODE*);
  struct KERNNODE* Head();
  struct KERNNODE* Head();
  int IsEmpty();
  int IsLinked(struct KERNNODE*);
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KERNNODE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct KERNNODE* existingptr);
  struct KERNNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct KERNNODE* Next(struct KERNNODE*);
  struct KERNNODE* Next(struct KERNNODE*);
  struct KERNNODE* Prev(struct KERNNODE*);
  struct KERNNODE* Prev(struct KERNNODE*);
  struct KERNNODE* RawNext(struct KERNNODE*);
  struct KERNNODE* RawNext(struct KERNNODE*);
  struct KERNNODE* Tail();
  struct KERNNODE* Tail();
  void TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >::UnlinkAll();
  void UnlinkNode(struct KERNNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<GLYPHBITMAPDATA> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >&);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::InitializeTerminator();
  class TSLink<GLYPHBITMAPDATA>* TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* ptr);
  void SetLinkOffset(int);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >(int);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >(class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >&);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >();
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::~TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >();
  class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >& operator=(class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >&);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >*, unsigned long, struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* DeleteNode(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Head();
  struct GLYPHBITMAPDATA* Head();
  int IsEmpty();
  int IsLinked(struct GLYPHBITMAPDATA*);
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* existingptr);
  struct GLYPHBITMAPDATA* NewNode(unsigned long, unsigned long, unsigned long);
  struct GLYPHBITMAPDATA* Next(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Next(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Prev(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Prev(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* RawNext(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* RawNext(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Tail();
  struct GLYPHBITMAPDATA* Tail();
  void TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >::UnlinkAll();
  void UnlinkNode(struct GLYPHBITMAPDATA*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxString,TSGetExplicitLink<CGxString> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxString> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxString,TSGetExplicitLink<CGxString> >&);
  void TSList<CGxString,TSGetExplicitLink<CGxString> >::InitializeTerminator();
  class TSLink<CGxString>* TSList<CGxString,TSGetExplicitLink<CGxString> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CGxString* ptr);
  void SetLinkOffset(int);
  void TSList<CGxString,TSGetExplicitLink<CGxString> >(int);
  void TSList<CGxString,TSGetExplicitLink<CGxString> >(class TSList<CGxString,TSGetExplicitLink<CGxString> >&);
  void TSList<CGxString,TSGetExplicitLink<CGxString> >();
  void ~TSList<CGxString,TSGetExplicitLink<CGxString> >();
  class TSList<CGxString,TSGetExplicitLink<CGxString> >& operator=(class TSList<CGxString,TSGetExplicitLink<CGxString> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxString,TSGetExplicitLink<CGxString> >*, unsigned long, struct CGxString*);
  struct CGxString* DeleteNode(struct CGxString*);
  struct CGxString* Head();
  struct CGxString* Head();
  int IsEmpty();
  int IsLinked(struct CGxString*);
  void LinkNode(struct CGxString*, unsigned long, struct CGxString*);
  struct CGxString* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxString* Next(struct CGxString*);
  struct CGxString* Next(struct CGxString*);
  struct CGxString* Prev(struct CGxString*);
  struct CGxString* Prev(struct CGxString*);
  struct CGxString* RawNext(struct CGxString*);
  struct CGxString* RawNext(struct CGxString*);
  struct CGxString* Tail();
  struct CGxString* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxString*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CHARCODEDESC> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >&);
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::InitializeTerminator();
  class TSLink<CHARCODEDESC>* TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHARCODEDESC* ptr);
  void SetLinkOffset(int);
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >(int);
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >(class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >&);
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >();
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::~TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >();
  class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >& operator=(class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >*, unsigned long, struct CHARCODEDESC*);
  struct CHARCODEDESC* DeleteNode(struct CHARCODEDESC*);
  struct CHARCODEDESC* Head();
  struct CHARCODEDESC* Head();
  int IsEmpty();
  int IsLinked(struct CHARCODEDESC*);
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHARCODEDESC* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CHARCODEDESC* existingptr);
  struct CHARCODEDESC* NewNode(unsigned long, unsigned long, unsigned long);
  struct CHARCODEDESC* Next(struct CHARCODEDESC*);
  struct CHARCODEDESC* Next(struct CHARCODEDESC*);
  struct CHARCODEDESC* Prev(struct CHARCODEDESC*);
  struct CHARCODEDESC* Prev(struct CHARCODEDESC*);
  struct CHARCODEDESC* RawNext(struct CHARCODEDESC*);
  struct CHARCODEDESC* RawNext(struct CHARCODEDESC*);
  struct CHARCODEDESC* Tail();
  struct CHARCODEDESC* Tail();
  void TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >::UnlinkAll();
  void UnlinkNode(struct CHARCODEDESC*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<STRINGVIEWMATRICES> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >&);
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::InitializeTerminator();
  class TSLink<STRINGVIEWMATRICES>* TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct STRINGVIEWMATRICES* ptr);
  void SetLinkOffset(int);
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >(int);
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >(class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >&);
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >();
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::~TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >();
  class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >& operator=(class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >*, unsigned long, struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* DeleteNode(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Head();
  struct STRINGVIEWMATRICES* Head();
  int IsEmpty();
  int IsLinked(struct STRINGVIEWMATRICES*);
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct STRINGVIEWMATRICES* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct STRINGVIEWMATRICES* existingptr);
  struct STRINGVIEWMATRICES* NewNode(unsigned long, unsigned long, unsigned long);
  struct STRINGVIEWMATRICES* Next(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Next(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Prev(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Prev(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* RawNext(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* RawNext(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Tail();
  struct STRINGVIEWMATRICES* Tail();
  void TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >::UnlinkAll();
  void UnlinkNode(struct STRINGVIEWMATRICES*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxString,TSGetLink<CGxString> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxString> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxString,TSGetLink<CGxString> >&);
  void InitializeTerminator();
  class TSLink<CGxString>* Link(struct CGxString*);
  void SetLinkOffset(int);
  void TSList<CGxString,TSGetLink<CGxString> >(int);
  void TSList<CGxString,TSGetLink<CGxString> >(class TSList<CGxString,TSGetLink<CGxString> >&);
  void TSList<CGxString,TSGetLink<CGxString> >();
  void ~TSList<CGxString,TSGetLink<CGxString> >();
  class TSList<CGxString,TSGetLink<CGxString> >& operator=(class TSList<CGxString,TSGetLink<CGxString> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxString,TSGetLink<CGxString> >*, unsigned long, struct CGxString*);
  struct CGxString* DeleteNode(struct CGxString*);
  struct CGxString* Head();
  struct CGxString* Head();
  int IsEmpty();
  int IsLinked(struct CGxString*);
  void LinkNode(struct CGxString*, unsigned long, struct CGxString*);
  struct CGxString* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxString* Next(struct CGxString*);
  struct CGxString* Next(struct CGxString*);
  struct CGxString* Prev(struct CGxString*);
  struct CGxString* Prev(struct CGxString*);
  struct CGxString* RawNext(struct CGxString*);
  struct CGxString* RawNext(struct CGxString*);
  struct CGxString* Tail();
  struct CGxString* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxString*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<IGXUTEXTLINE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >&);
  void InitializeTerminator();
  class TSLink<IGXUTEXTLINE>* Link(struct IGXUTEXTLINE*);
  void SetLinkOffset(int);
  void TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >(int);
  void TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >(class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >&);
  void TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >();
  void ~TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >();
  class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >& operator=(class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<IGXUTEXTLINE,TSGetLink<IGXUTEXTLINE> >*, unsigned long, struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* DeleteNode(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* Head();
  struct IGXUTEXTLINE* Head();
  int IsEmpty();
  int IsLinked(struct IGXUTEXTLINE*);
  void LinkNode(struct IGXUTEXTLINE*, unsigned long, struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* NewNode(unsigned long, unsigned long, unsigned long);
  struct IGXUTEXTLINE* Next(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* Next(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* Prev(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* Prev(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* RawNext(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* RawNext(struct IGXUTEXTLINE*);
  struct IGXUTEXTLINE* Tail();
  struct IGXUTEXTLINE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct IGXUTEXTLINE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TEXTLINETEXTURE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >&);
  void InitializeTerminator();
  class TSLink<TEXTLINETEXTURE>* Link(struct TEXTLINETEXTURE*);
  void SetLinkOffset(int);
  void TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >(int);
  void TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >(class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >&);
  void TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >();
  void ~TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >();
  class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >& operator=(class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >*, unsigned long, struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* DeleteNode(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* Head();
  struct TEXTLINETEXTURE* Head();
  int IsEmpty();
  int IsLinked(struct TEXTLINETEXTURE*);
  void TSList<TEXTLINETEXTURE,TSGetLink<TEXTLINETEXTURE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TEXTLINETEXTURE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct TEXTLINETEXTURE* existingptr);
  struct TEXTLINETEXTURE* NewNode(unsigned long, unsigned long, unsigned long);
  struct TEXTLINETEXTURE* Next(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* Next(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* Prev(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* Prev(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* RawNext(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* RawNext(struct TEXTLINETEXTURE*);
  struct TEXTLINETEXTURE* Tail();
  struct TEXTLINETEXTURE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct TEXTLINETEXTURE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FACEDATA> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >&);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::InitializeTerminator();
  class TSLink<FACEDATA>* TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FACEDATA* ptr);
  void SetLinkOffset(int);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >(int);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >(class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >&);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >();
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::~TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >();
  class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >& operator=(class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >&);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >*, unsigned long, struct FACEDATA*);
  struct FACEDATA* DeleteNode(struct FACEDATA*);
  struct FACEDATA* Head();
  struct FACEDATA* Head();
  int IsEmpty();
  int IsLinked(struct FACEDATA*);
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FACEDATA* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct FACEDATA* existingptr);
  struct FACEDATA* NewNode(unsigned long, unsigned long, unsigned long);
  struct FACEDATA* Next(struct FACEDATA*);
  struct FACEDATA* Next(struct FACEDATA*);
  struct FACEDATA* Prev(struct FACEDATA*);
  struct FACEDATA* Prev(struct FACEDATA*);
  struct FACEDATA* RawNext(struct FACEDATA*);
  struct FACEDATA* RawNext(struct FACEDATA*);
  struct FACEDATA* Tail();
  struct FACEDATA* Tail();
  void TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >::UnlinkAll();
  void UnlinkNode(struct FACEDATA*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >&);
  void InitializeTerminator();
  class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> >* TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >(int);
  void TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >(class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >&);
  void TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >();
  void TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >::~TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >();
  class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >& operator=(class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >*, unsigned long, class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* DeleteNode(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Head();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  void TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* existingptr);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Next(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Next(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Prev(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Prev(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* RawNext(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* RawNext(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Tail();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxVertexShader> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >&);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::InitializeTerminator();
  class TSLink<CGxVertexShader>* TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader* ptr);
  void SetLinkOffset(int);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >(int);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >(class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >&);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >();
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::~TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >();
  class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >& operator=(class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >&);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::Clear();
  void Combine(class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >*, unsigned long, class CGxVertexShader*);
  class CGxVertexShader* DeleteNode(class CGxVertexShader*);
  class CGxVertexShader* Head();
  class CGxVertexShader* Head();
  int IsEmpty();
  int IsLinked(class CGxVertexShader*);
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGxVertexShader* existingptr);
  class CGxVertexShader* NewNode(unsigned long, unsigned long, unsigned long);
  class CGxVertexShader* Next(class CGxVertexShader*);
  class CGxVertexShader* Next(class CGxVertexShader*);
  class CGxVertexShader* Prev(class CGxVertexShader*);
  class CGxVertexShader* Prev(class CGxVertexShader*);
  class CGxVertexShader* RawNext(class CGxVertexShader*);
  class CGxVertexShader* RawNext(class CGxVertexShader*);
  class CGxVertexShader* Tail();
  class CGxVertexShader* Tail();
  void TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >::UnlinkAll();
  void UnlinkNode(class CGxVertexShader*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >&);
  void InitializeTerminator();
  class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> >* TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >(int);
  void TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >(class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >&);
  void TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >();
  void TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >::~TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >();
  class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >& operator=(class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >*, unsigned long, class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* DeleteNode(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Head();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  void TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* existingptr);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Next(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Next(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Prev(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Prev(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* RawNext(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* RawNext(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Tail();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxPixelShader> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >&);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::InitializeTerminator();
  class TSLink<CGxPixelShader>* TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ptr);
  void SetLinkOffset(int);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >(int);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >(class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >&);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >();
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::~TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >();
  class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >& operator=(class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >&);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::Clear();
  void Combine(class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >*, unsigned long, class CGxPixelShader*);
  class CGxPixelShader* DeleteNode(class CGxPixelShader*);
  class CGxPixelShader* Head();
  class CGxPixelShader* Head();
  int IsEmpty();
  int IsLinked(class CGxPixelShader*);
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGxPixelShader* existingptr);
  class CGxPixelShader* NewNode(unsigned long, unsigned long, unsigned long);
  class CGxPixelShader* Next(class CGxPixelShader*);
  class CGxPixelShader* Next(class CGxPixelShader*);
  class CGxPixelShader* Prev(class CGxPixelShader*);
  class CGxPixelShader* Prev(class CGxPixelShader*);
  class CGxPixelShader* RawNext(class CGxPixelShader*);
  class CGxPixelShader* RawNext(class CGxPixelShader*);
  class CGxPixelShader* Tail();
  class CGxPixelShader* Tail();
  void TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >::UnlinkAll();
  void UnlinkNode(class CGxPixelShader*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxShaderParam> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >&);
  void TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >::InitializeTerminator();
  class TSLink<CGxShaderParam>* Link(class CGxShaderParam*);
  void SetLinkOffset(int);
  void TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >(int);
  void TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >::TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >& source);
  void TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >::TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >();
  void ~TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >();
  class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >& operator=(class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >*, unsigned long, class CGxShaderParam*);
  class CGxShaderParam* DeleteNode(class CGxShaderParam*);
  class CGxShaderParam* Head();
  class CGxShaderParam* Head();
  int IsEmpty();
  int IsLinked(class CGxShaderParam*);
  void TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxShaderParam* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGxShaderParam* existingptr);
  class CGxShaderParam* NewNode(unsigned long, unsigned long, unsigned long);
  class CGxShaderParam* Next(class CGxShaderParam*);
  class CGxShaderParam* Next(class CGxShaderParam*);
  class CGxShaderParam* Prev(class CGxShaderParam*);
  class CGxShaderParam* Prev(class CGxShaderParam*);
  class CGxShaderParam* RawNext(class CGxShaderParam*);
  class CGxShaderParam* RawNext(class CGxShaderParam*);
  class CGxShaderParam* Tail();
  class CGxShaderParam* Tail();
  void UnlinkAll();
  void UnlinkNode(class CGxShaderParam*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxBuf> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >&);
  void TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >::InitializeTerminator();
  class TSLink<CGxBuf>* Link(struct CGxBuf*);
  void SetLinkOffset(int);
  void TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >(int);
  void TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >(class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >&);
  void TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >();
  void TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >::~TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >();
  class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >& operator=(class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >*, unsigned long, struct CGxBuf*);
  struct CGxBuf* DeleteNode(struct CGxBuf*);
  struct CGxBuf* Head();
  struct CGxBuf* Head();
  int IsEmpty();
  int IsLinked(struct CGxBuf*);
  void LinkNode(struct CGxBuf*, unsigned long, struct CGxBuf*);
  struct CGxBuf* NewNode(unsigned long, unsigned long, unsigned long);
  struct CGxBuf* Next(struct CGxBuf*);
  struct CGxBuf* Next(struct CGxBuf*);
  struct CGxBuf* Prev(struct CGxBuf*);
  struct CGxBuf* Prev(struct CGxBuf*);
  struct CGxBuf* RawNext(struct CGxBuf*);
  struct CGxBuf* RawNext(struct CGxBuf*);
  struct CGxBuf* Tail();
  struct CGxBuf* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CGxBuf*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >();
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >::~TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >();
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >::~TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >&);
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH>* TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >(int);
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >(class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >&);
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >();
  void ~TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >();
  class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >& operator=(class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >*, unsigned long, struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* DeleteNode(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Head();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* existingptr);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Tail();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Tail();
  void TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >();
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >::~TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCACHECALLBACK> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >&);
  void InitializeTerminator();
  class TSLink<DBCACHECALLBACK>* TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCACHECALLBACK* ptr);
  void SetLinkOffset(int);
  void TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >(int);
  void TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >(class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >&);
  void TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >();
  void ~TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >();
  class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >& operator=(class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >*, unsigned long, struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* DeleteNode(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* Head();
  struct DBCACHECALLBACK* Head();
  int IsEmpty();
  int IsLinked(struct DBCACHECALLBACK*);
  void TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCACHECALLBACK* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCACHECALLBACK* existingptr);
  struct DBCACHECALLBACK* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCACHECALLBACK* Next(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* Next(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* Prev(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* Prev(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* RawNext(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* RawNext(struct DBCACHECALLBACK*);
  struct DBCACHECALLBACK* Tail();
  struct DBCACHECALLBACK* Tail();
  void TSList<DBCACHECALLBACK,TSGetLink<DBCACHECALLBACK> >::UnlinkAll();
  void UnlinkNode(struct DBCACHECALLBACK*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::InitializeTerminator();
  class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH>* TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  void SetLinkOffset(int);
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(int);
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >(class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  void ~TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >();
  class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >& operator=(class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >*, unsigned long, struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  int IsEmpty();
  int IsLinked(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* existingptr);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >::UnlinkAll();
  void UnlinkNode(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<NETCLIENTNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >&);
  void InitializeTerminator();
  class TSLink<NETCLIENTNODE>* Link(struct NETCLIENTNODE*);
  void SetLinkOffset(int);
  void TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >(int);
  void TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >(class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >&);
  void TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >();
  void ~TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >();
  class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >& operator=(class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<NETCLIENTNODE,TSGetLink<NETCLIENTNODE> >*, unsigned long, struct NETCLIENTNODE*);
  struct NETCLIENTNODE* DeleteNode(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* Head();
  struct NETCLIENTNODE* Head();
  int IsEmpty();
  int IsLinked(struct NETCLIENTNODE*);
  void LinkNode(struct NETCLIENTNODE*, unsigned long, struct NETCLIENTNODE*);
  struct NETCLIENTNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct NETCLIENTNODE* Next(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* Next(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* Prev(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* Prev(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* RawNext(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* RawNext(struct NETCLIENTNODE*);
  struct NETCLIENTNODE* Tail();
  struct NETCLIENTNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct NETCLIENTNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<BFSNODE,TSGetLink<BFSNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BFSNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<BFSNODE,TSGetLink<BFSNODE> >&);
  void InitializeTerminator();
  class TSLink<BFSNODE>* Link(struct BFSNODE*);
  void SetLinkOffset(int);
  void TSList<BFSNODE,TSGetLink<BFSNODE> >(int);
  void TSList<BFSNODE,TSGetLink<BFSNODE> >(class TSList<BFSNODE,TSGetLink<BFSNODE> >&);
  void TSList<BFSNODE,TSGetLink<BFSNODE> >();
  void ~TSList<BFSNODE,TSGetLink<BFSNODE> >();
  class TSList<BFSNODE,TSGetLink<BFSNODE> >& operator=(class TSList<BFSNODE,TSGetLink<BFSNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<BFSNODE,TSGetLink<BFSNODE> >*, unsigned long, struct BFSNODE*);
  struct BFSNODE* DeleteNode(struct BFSNODE*);
  struct BFSNODE* Head();
  struct BFSNODE* Head();
  int IsEmpty();
  int IsLinked(struct BFSNODE*);
  void LinkNode(struct BFSNODE*, unsigned long, struct BFSNODE*);
  struct BFSNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct BFSNODE* Next(struct BFSNODE*);
  struct BFSNODE* Next(struct BFSNODE*);
  struct BFSNODE* Prev(struct BFSNODE*);
  struct BFSNODE* Prev(struct BFSNODE*);
  struct BFSNODE* RawNext(struct BFSNODE*);
  struct BFSNODE* RawNext(struct BFSNODE*);
  struct BFSNODE* Tail();
  struct BFSNODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct BFSNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CameraShake,TSGetLink<CameraShake> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CameraShake> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CameraShake,TSGetLink<CameraShake> >&);
  void InitializeTerminator();
  class TSLink<CameraShake>* TSList<CameraShake,TSGetLink<CameraShake> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CameraShake* ptr);
  void SetLinkOffset(int);
  void TSList<CameraShake,TSGetLink<CameraShake> >(int);
  void TSList<CameraShake,TSGetLink<CameraShake> >(class TSList<CameraShake,TSGetLink<CameraShake> >&);
  void TSList<CameraShake,TSGetLink<CameraShake> >();
  void ~TSList<CameraShake,TSGetLink<CameraShake> >();
  class TSList<CameraShake,TSGetLink<CameraShake> >& operator=(class TSList<CameraShake,TSGetLink<CameraShake> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CameraShake,TSGetLink<CameraShake> >*, unsigned long, struct CameraShake*);
  struct CameraShake* DeleteNode(struct CameraShake*);
  struct CameraShake* Head();
  struct CameraShake* Head();
  int IsEmpty();
  int IsLinked(struct CameraShake*);
  void LinkNode(struct CameraShake*, unsigned long, struct CameraShake*);
  struct CameraShake* NewNode(unsigned long, unsigned long, unsigned long);
  struct CameraShake* Next(struct CameraShake*);
  struct CameraShake* Next(struct CameraShake*);
  struct CameraShake* Prev(struct CameraShake*);
  struct CameraShake* Prev(struct CameraShake*);
  struct CameraShake* RawNext(struct CameraShake*);
  struct CameraShake* RawNext(struct CameraShake*);
  struct CameraShake* Tail();
  struct CameraShake* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CameraShake*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CACHEENTRY> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >&);
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >::InitializeTerminator();
  class TSLink<CACHEENTRY>* TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CACHEENTRY* ptr);
  void SetLinkOffset(int);
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >(int);
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >(class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >&);
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >();
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >::~TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >();
  class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >& operator=(class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >*, unsigned long, struct CACHEENTRY*);
  struct CACHEENTRY* DeleteNode(struct CACHEENTRY*);
  struct CACHEENTRY* Head();
  struct CACHEENTRY* Head();
  int IsEmpty();
  int IsLinked(struct CACHEENTRY*);
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CACHEENTRY* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CACHEENTRY* existingptr);
  struct CACHEENTRY* NewNode(unsigned long, unsigned long, unsigned long);
  struct CACHEENTRY* Next(struct CACHEENTRY*);
  struct CACHEENTRY* Next(struct CACHEENTRY*);
  struct CACHEENTRY* Prev(struct CACHEENTRY*);
  struct CACHEENTRY* Prev(struct CACHEENTRY*);
  struct CACHEENTRY* RawNext(struct CACHEENTRY*);
  struct CACHEENTRY* RawNext(struct CACHEENTRY*);
  struct CACHEENTRY* Tail();
  struct CACHEENTRY* Tail();
  void TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >::UnlinkAll();
  void UnlinkNode(struct CACHEENTRY*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMPORTRAIT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >&);
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >::InitializeTerminator();
  class TSLink<ITEMPORTRAIT>* TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMPORTRAIT* ptr);
  void SetLinkOffset(int);
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >(int);
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >(class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >&);
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >();
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >::~TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >();
  class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >& operator=(class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >*, unsigned long, struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* DeleteNode(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Head();
  struct ITEMPORTRAIT* Head();
  int IsEmpty();
  int IsLinked(struct ITEMPORTRAIT*);
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMPORTRAIT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ITEMPORTRAIT* existingptr);
  struct ITEMPORTRAIT* NewNode(unsigned long, unsigned long, unsigned long);
  struct ITEMPORTRAIT* Next(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Next(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Prev(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Prev(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* RawNext(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* RawNext(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Tail();
  struct ITEMPORTRAIT* Tail();
  void TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >::UnlinkAll();
  void UnlinkNode(struct ITEMPORTRAIT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITPORTRAIT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >&);
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >::InitializeTerminator();
  class TSLink<UNITPORTRAIT>* TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITPORTRAIT* ptr);
  void SetLinkOffset(int);
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >(int);
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >(class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >&);
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >();
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >::~TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >();
  class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >& operator=(class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >*, unsigned long, struct UNITPORTRAIT*);
  struct UNITPORTRAIT* DeleteNode(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Head();
  struct UNITPORTRAIT* Head();
  int IsEmpty();
  int IsLinked(struct UNITPORTRAIT*);
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITPORTRAIT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct UNITPORTRAIT* existingptr);
  struct UNITPORTRAIT* NewNode(unsigned long, unsigned long, unsigned long);
  struct UNITPORTRAIT* Next(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Next(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Prev(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Prev(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* RawNext(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* RawNext(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Tail();
  struct UNITPORTRAIT* Tail();
  void TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >::UnlinkAll();
  void UnlinkNode(struct UNITPORTRAIT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PLAYERPORTRAIT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >&);
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >::InitializeTerminator();
  class TSLink<PLAYERPORTRAIT>* TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PLAYERPORTRAIT* ptr);
  void SetLinkOffset(int);
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >(int);
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >(class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >&);
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >();
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >::~TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >();
  class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >& operator=(class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >*, unsigned long, struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* DeleteNode(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Head();
  struct PLAYERPORTRAIT* Head();
  int IsEmpty();
  int IsLinked(struct PLAYERPORTRAIT*);
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PLAYERPORTRAIT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct PLAYERPORTRAIT* existingptr);
  struct PLAYERPORTRAIT* NewNode(unsigned long, unsigned long, unsigned long);
  struct PLAYERPORTRAIT* Next(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Next(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Prev(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Prev(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* RawNext(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* RawNext(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Tail();
  struct PLAYERPORTRAIT* Tail();
  void TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >::UnlinkAll();
  void UnlinkNode(struct PLAYERPORTRAIT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DIRTYFACE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >&);
  void InitializeTerminator();
  class TSLink<DIRTYFACE>* Link(struct DIRTYFACE*);
  void SetLinkOffset(int);
  void TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >(int);
  void TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >(class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >&);
  void TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >();
  void ~TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >();
  class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >& operator=(class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >*, unsigned long, struct DIRTYFACE*);
  struct DIRTYFACE* DeleteNode(struct DIRTYFACE*);
  struct DIRTYFACE* Head();
  struct DIRTYFACE* Head();
  int IsEmpty();
  int IsLinked(struct DIRTYFACE*);
  void TSList<DIRTYFACE,TSGetLink<DIRTYFACE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DIRTYFACE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct DIRTYFACE* existingptr);
  struct DIRTYFACE* NewNode(unsigned long, unsigned long, unsigned long);
  struct DIRTYFACE* Next(struct DIRTYFACE*);
  struct DIRTYFACE* Next(struct DIRTYFACE*);
  struct DIRTYFACE* Prev(struct DIRTYFACE*);
  struct DIRTYFACE* Prev(struct DIRTYFACE*);
  struct DIRTYFACE* RawNext(struct DIRTYFACE*);
  struct DIRTYFACE* RawNext(struct DIRTYFACE*);
  struct DIRTYFACE* Tail();
  struct DIRTYFACE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct DIRTYFACE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WORDLIST> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >&);
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::InitializeTerminator();
  class TSLink<WORDLIST>* TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WORDLIST* ptr);
  void SetLinkOffset(int);
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >(int);
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >(class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >&);
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >();
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::~TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >();
  class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >& operator=(class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >*, unsigned long, struct WORDLIST*);
  struct WORDLIST* DeleteNode(struct WORDLIST*);
  struct WORDLIST* Head();
  struct WORDLIST* Head();
  int IsEmpty();
  int IsLinked(struct WORDLIST*);
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WORDLIST* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct WORDLIST* existingptr);
  struct WORDLIST* NewNode(unsigned long, unsigned long, unsigned long);
  struct WORDLIST* Next(struct WORDLIST*);
  struct WORDLIST* Next(struct WORDLIST*);
  struct WORDLIST* Prev(struct WORDLIST*);
  struct WORDLIST* Prev(struct WORDLIST*);
  struct WORDLIST* RawNext(struct WORDLIST*);
  struct WORDLIST* RawNext(struct WORDLIST*);
  struct WORDLIST* Tail();
  struct WORDLIST* Tail();
  void TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >::UnlinkAll();
  void UnlinkNode(struct WORDLIST*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PENDINGUSERLIST> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >&);
  void InitializeTerminator();
  class TSLink<PENDINGUSERLIST>* TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PENDINGUSERLIST* ptr);
  void SetLinkOffset(int);
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >(int);
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >(class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >&);
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >::TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >();
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >::~TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >();
  class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >& operator=(class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >&);
  void ChangeLinkOffset(int);
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >::Clear();
  void Combine(class TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >*, unsigned long, struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* DeleteNode(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* Head();
  struct PENDINGUSERLIST* Head();
  int IsEmpty();
  int IsLinked(struct PENDINGUSERLIST*);
  void LinkNode(struct PENDINGUSERLIST*, unsigned long, struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* NewNode(unsigned long, unsigned long, unsigned long);
  struct PENDINGUSERLIST* Next(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* Next(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* Prev(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* Prev(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* RawNext(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* RawNext(struct PENDINGUSERLIST*);
  struct PENDINGUSERLIST* Tail();
  struct PENDINGUSERLIST* Tail();
  void TSList<PENDINGUSERLIST,TSGetLink<PENDINGUSERLIST> >::UnlinkAll();
  void UnlinkNode(struct PENDINGUSERLIST*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PENDINGTEXTEMOTE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >&);
  void InitializeTerminator();
  class TSLink<PENDINGTEXTEMOTE>* Link(struct PENDINGTEXTEMOTE*);
  void SetLinkOffset(int);
  void TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >(int);
  void TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >(class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >&);
  void TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >();
  void ~TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >();
  class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >& operator=(class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<PENDINGTEXTEMOTE,TSGetLink<PENDINGTEXTEMOTE> >*, unsigned long, struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* DeleteNode(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* Head();
  struct PENDINGTEXTEMOTE* Head();
  int IsEmpty();
  int IsLinked(struct PENDINGTEXTEMOTE*);
  void LinkNode(struct PENDINGTEXTEMOTE*, unsigned long, struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* NewNode(unsigned long, unsigned long, unsigned long);
  struct PENDINGTEXTEMOTE* Next(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* Next(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* Prev(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* Prev(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* RawNext(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* RawNext(struct PENDINGTEXTEMOTE*);
  struct PENDINGTEXTEMOTE* Tail();
  struct PENDINGTEXTEMOTE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct PENDINGTEXTEMOTE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PENDINGCHAT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >&);
  void InitializeTerminator();
  class TSLink<PENDINGCHAT>* Link(struct PENDINGCHAT*);
  void SetLinkOffset(int);
  void TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >(int);
  void TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >(class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >&);
  void TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >();
  void ~TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >();
  class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >& operator=(class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<PENDINGCHAT,TSGetLink<PENDINGCHAT> >*, unsigned long, struct PENDINGCHAT*);
  struct PENDINGCHAT* DeleteNode(struct PENDINGCHAT*);
  struct PENDINGCHAT* Head();
  struct PENDINGCHAT* Head();
  int IsEmpty();
  int IsLinked(struct PENDINGCHAT*);
  void LinkNode(struct PENDINGCHAT*, unsigned long, struct PENDINGCHAT*);
  struct PENDINGCHAT* NewNode(unsigned long, unsigned long, unsigned long);
  struct PENDINGCHAT* Next(struct PENDINGCHAT*);
  struct PENDINGCHAT* Next(struct PENDINGCHAT*);
  struct PENDINGCHAT* Prev(struct PENDINGCHAT*);
  struct PENDINGCHAT* Prev(struct PENDINGCHAT*);
  struct PENDINGCHAT* RawNext(struct PENDINGCHAT*);
  struct PENDINGCHAT* RawNext(struct PENDINGCHAT*);
  struct PENDINGCHAT* Tail();
  struct PENDINGCHAT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct PENDINGCHAT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FADEOUTHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >&);
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::InitializeTerminator();
  class TSLink<FADEOUTHASHOBJ>* TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >(int);
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >(class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >&);
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >();
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::~TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >();
  class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >& operator=(class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >*, unsigned long, struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* DeleteNode(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Head();
  struct FADEOUTHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct FADEOUTHASHOBJ*);
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* existingptr);
  struct FADEOUTHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct FADEOUTHASHOBJ* Next(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Next(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Prev(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Prev(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* RawNext(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* RawNext(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Tail();
  struct FADEOUTHASHOBJ* Tail();
  void TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct FADEOUTHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CModelRecord,TSGetLink<CModelRecord> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CModelRecord> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CModelRecord,TSGetLink<CModelRecord> >&);
  void InitializeTerminator();
  class TSLink<CModelRecord>* Link(struct CModelRecord*);
  void SetLinkOffset(int);
  void TSList<CModelRecord,TSGetLink<CModelRecord> >(int);
  void TSList<CModelRecord,TSGetLink<CModelRecord> >(class TSList<CModelRecord,TSGetLink<CModelRecord> >&);
  void TSList<CModelRecord,TSGetLink<CModelRecord> >();
  void ~TSList<CModelRecord,TSGetLink<CModelRecord> >();
  class TSList<CModelRecord,TSGetLink<CModelRecord> >& operator=(class TSList<CModelRecord,TSGetLink<CModelRecord> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CModelRecord,TSGetLink<CModelRecord> >*, unsigned long, struct CModelRecord*);
  struct CModelRecord* DeleteNode(struct CModelRecord*);
  struct CModelRecord* Head();
  struct CModelRecord* Head();
  int IsEmpty();
  int IsLinked(struct CModelRecord*);
  void TSList<CModelRecord,TSGetLink<CModelRecord> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelRecord* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CModelRecord* existingptr);
  struct CModelRecord* NewNode(unsigned long, unsigned long, unsigned long);
  struct CModelRecord* Next(struct CModelRecord*);
  struct CModelRecord* Next(struct CModelRecord*);
  struct CModelRecord* Prev(struct CModelRecord*);
  struct CModelRecord* Prev(struct CModelRecord*);
  struct CModelRecord* RawNext(struct CModelRecord*);
  struct CModelRecord* RawNext(struct CModelRecord*);
  struct CModelRecord* Tail();
  struct CModelRecord* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CModelRecord*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KEYCOMMAND> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >&);
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::InitializeTerminator();
  class TSLink<KEYCOMMAND>* TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYCOMMAND* ptr);
  void SetLinkOffset(int);
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >(int);
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >(class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >&);
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >();
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::~TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >();
  class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >& operator=(class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >*, unsigned long, struct KEYCOMMAND*);
  struct KEYCOMMAND* DeleteNode(struct KEYCOMMAND*);
  struct KEYCOMMAND* Head();
  struct KEYCOMMAND* Head();
  int IsEmpty();
  int IsLinked(struct KEYCOMMAND*);
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYCOMMAND* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct KEYCOMMAND* existingptr);
  struct KEYCOMMAND* NewNode(unsigned long, unsigned long, unsigned long);
  struct KEYCOMMAND* Next(struct KEYCOMMAND*);
  struct KEYCOMMAND* Next(struct KEYCOMMAND*);
  struct KEYCOMMAND* Prev(struct KEYCOMMAND*);
  struct KEYCOMMAND* Prev(struct KEYCOMMAND*);
  struct KEYCOMMAND* RawNext(struct KEYCOMMAND*);
  struct KEYCOMMAND* RawNext(struct KEYCOMMAND*);
  struct KEYCOMMAND* Tail();
  struct KEYCOMMAND* Tail();
  void TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >::UnlinkAll();
  void UnlinkNode(struct KEYCOMMAND*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KEYBINDING> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >&);
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::InitializeTerminator();
  class TSLink<KEYBINDING>* TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYBINDING* ptr);
  void SetLinkOffset(int);
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >(int);
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >(class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >&);
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >();
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::~TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >();
  class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >& operator=(class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >*, unsigned long, struct KEYBINDING*);
  struct KEYBINDING* DeleteNode(struct KEYBINDING*);
  struct KEYBINDING* Head();
  struct KEYBINDING* Head();
  int IsEmpty();
  int IsLinked(struct KEYBINDING*);
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYBINDING* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct KEYBINDING* existingptr);
  struct KEYBINDING* NewNode(unsigned long, unsigned long, unsigned long);
  struct KEYBINDING* Next(struct KEYBINDING*);
  struct KEYBINDING* Next(struct KEYBINDING*);
  struct KEYBINDING* Prev(struct KEYBINDING*);
  struct KEYBINDING* Prev(struct KEYBINDING*);
  struct KEYBINDING* RawNext(struct KEYBINDING*);
  struct KEYBINDING* RawNext(struct KEYBINDING*);
  struct KEYBINDING* Tail();
  struct KEYBINDING* Tail();
  void TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >::UnlinkAll();
  void UnlinkNode(struct KEYBINDING*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FrameScriptObject_Variable> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >&);
  void InitializeTerminator();
  class TSLink<FrameScriptObject_Variable>* TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FrameScriptObject_Variable* ptr);
  void SetLinkOffset(int);
  void TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >(int);
  void TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >(class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >&);
  void TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >();
  void TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >::~TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >();
  class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >& operator=(class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >*, unsigned long, struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* DeleteNode(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Head();
  struct FrameScriptObject_Variable* Head();
  int IsEmpty();
  int IsLinked(struct FrameScriptObject_Variable*);
  void LinkNode(struct FrameScriptObject_Variable*, unsigned long, struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* NewNode(unsigned long, unsigned long, unsigned long);
  struct FrameScriptObject_Variable* Next(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Next(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Prev(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Prev(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* RawNext(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* RawNext(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Tail();
  struct FrameScriptObject_Variable* Tail();
  void UnlinkAll();
  void UnlinkNode(struct FrameScriptObject_Variable*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CPlayerMoveEvent> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >&);
  void InitializeTerminator();
  class TSLink<CPlayerMoveEvent>* TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CPlayerMoveEvent* ptr);
  void SetLinkOffset(int);
  void TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >(int);
  void TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >(class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >&);
  void TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >();
  void ~TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >();
  class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >& operator=(class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >*, unsigned long, struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* DeleteNode(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* Head();
  struct CPlayerMoveEvent* Head();
  int IsEmpty();
  int IsLinked(struct CPlayerMoveEvent*);
  void TSList<CPlayerMoveEvent,TSGetLink<CPlayerMoveEvent> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CPlayerMoveEvent* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CPlayerMoveEvent* existingptr);
  struct CPlayerMoveEvent* NewNode(unsigned long, unsigned long, unsigned long);
  struct CPlayerMoveEvent* Next(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* Next(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* Prev(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* Prev(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* RawNext(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* RawNext(struct CPlayerMoveEvent*);
  struct CPlayerMoveEvent* Tail();
  struct CPlayerMoveEvent* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CPlayerMoveEvent*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OBJHANDLERREQUEST> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >&);
  void TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >::InitializeTerminator();
  class TSLink<OBJHANDLERREQUEST>* TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OBJHANDLERREQUEST* ptr);
  void SetLinkOffset(int);
  void TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >(int);
  void TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >(class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >&);
  void TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >();
  void ~TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >();
  class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >& operator=(class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OBJHANDLERREQUEST,TSGetLink<OBJHANDLERREQUEST> >*, unsigned long, struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* DeleteNode(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* Head();
  struct OBJHANDLERREQUEST* Head();
  int IsEmpty();
  int IsLinked(struct OBJHANDLERREQUEST*);
  void LinkNode(struct OBJHANDLERREQUEST*, unsigned long, struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* NewNode(unsigned long, unsigned long, unsigned long);
  struct OBJHANDLERREQUEST* Next(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* Next(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* Prev(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* Prev(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* RawNext(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* RawNext(struct OBJHANDLERREQUEST*);
  struct OBJHANDLERREQUEST* Tail();
  struct OBJHANDLERREQUEST* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OBJHANDLERREQUEST*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<C_OBJECTHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >&);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::InitializeTerminator();
  class TSLink<C_OBJECTHASH>* TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct C_OBJECTHASH* ptr);
  void SetLinkOffset(int);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >(int);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >(class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >&);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >();
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::~TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >();
  class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >& operator=(class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >&);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >*, unsigned long, struct C_OBJECTHASH*);
  struct C_OBJECTHASH* DeleteNode(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Head();
  struct C_OBJECTHASH* Head();
  int IsEmpty();
  int IsLinked(struct C_OBJECTHASH*);
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct C_OBJECTHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct C_OBJECTHASH* existingptr);
  struct C_OBJECTHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct C_OBJECTHASH* Next(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Next(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Prev(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Prev(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* RawNext(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* RawNext(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Tail();
  struct C_OBJECTHASH* Tail();
  void TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >::UnlinkAll();
  void UnlinkNode(struct C_OBJECTHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMirrorHandler> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >&);
  void InitializeTerminator();
  class TSLink<CMirrorHandler>* Link(struct CMirrorHandler*);
  void SetLinkOffset(int);
  void TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >(int);
  void TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >(class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >&);
  void TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >();
  void ~TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >();
  class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >& operator=(class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >*, unsigned long, struct CMirrorHandler*);
  struct CMirrorHandler* DeleteNode(struct CMirrorHandler*);
  struct CMirrorHandler* Head();
  struct CMirrorHandler* Head();
  int IsEmpty();
  int IsLinked(struct CMirrorHandler*);
  void LinkNode(struct CMirrorHandler*, unsigned long, struct CMirrorHandler*);
  struct CMirrorHandler* NewNode(unsigned long, unsigned long, unsigned long);
  struct CMirrorHandler* Next(struct CMirrorHandler*);
  struct CMirrorHandler* Next(struct CMirrorHandler*);
  struct CMirrorHandler* Prev(struct CMirrorHandler*);
  struct CMirrorHandler* Prev(struct CMirrorHandler*);
  struct CMirrorHandler* RawNext(struct CMirrorHandler*);
  struct CMirrorHandler* RawNext(struct CMirrorHandler*);
  struct CMirrorHandler* Tail();
  struct CMirrorHandler* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CMirrorHandler*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMirrorHandler> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >&);
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >::InitializeTerminator();
  class TSLink<CMirrorHandler>* Link(struct CMirrorHandler*);
  void SetLinkOffset(int);
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >(int);
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >(class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >&);
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >();
  void ~TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >();
  class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >& operator=(class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >*, unsigned long, struct CMirrorHandler*);
  struct CMirrorHandler* DeleteNode(struct CMirrorHandler*);
  struct CMirrorHandler* Head();
  struct CMirrorHandler* Head();
  int IsEmpty();
  int IsLinked(struct CMirrorHandler*);
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CMirrorHandler* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CMirrorHandler* existingptr);
  struct CMirrorHandler* NewNode(unsigned long, unsigned long, unsigned long);
  struct CMirrorHandler* Next(struct CMirrorHandler*);
  struct CMirrorHandler* Next(struct CMirrorHandler*);
  struct CMirrorHandler* Prev(struct CMirrorHandler*);
  struct CMirrorHandler* Prev(struct CMirrorHandler*);
  struct CMirrorHandler* RawNext(struct CMirrorHandler*);
  struct CMirrorHandler* RawNext(struct CMirrorHandler*);
  struct CMirrorHandler* Tail();
  struct CMirrorHandler* Tail();
  void TSList<CMirrorHandler,TSGetLink<CMirrorHandler> >::UnlinkAll();
  void UnlinkNode(struct CMirrorHandler*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FOOTSTEPSNDCACHE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >&);
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >::InitializeTerminator();
  class TSLink<FOOTSTEPSNDCACHE>* TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FOOTSTEPSNDCACHE* ptr);
  void SetLinkOffset(int);
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >(int);
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >(class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >&);
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >();
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >::~TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >();
  class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >& operator=(class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >*, unsigned long, struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* DeleteNode(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Head();
  struct FOOTSTEPSNDCACHE* Head();
  int IsEmpty();
  int IsLinked(struct FOOTSTEPSNDCACHE*);
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FOOTSTEPSNDCACHE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct FOOTSTEPSNDCACHE* existingptr);
  struct FOOTSTEPSNDCACHE* NewNode(unsigned long, unsigned long, unsigned long);
  struct FOOTSTEPSNDCACHE* Next(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Next(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Prev(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Prev(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* RawNext(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* RawNext(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Tail();
  struct FOOTSTEPSNDCACHE* Tail();
  void TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >::UnlinkAll();
  void UnlinkNode(struct FOOTSTEPSNDCACHE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SOUNDDEFINITION> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >&);
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >::InitializeTerminator();
  class TSLink<SOUNDDEFINITION>* TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOUNDDEFINITION* ptr);
  void SetLinkOffset(int);
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >(int);
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >(class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >&);
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >();
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >::~TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >();
  class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >& operator=(class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >*, unsigned long, struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* DeleteNode(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Head();
  struct SOUNDDEFINITION* Head();
  int IsEmpty();
  int IsLinked(struct SOUNDDEFINITION*);
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOUNDDEFINITION* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SOUNDDEFINITION* existingptr);
  struct SOUNDDEFINITION* NewNode(unsigned long, unsigned long, unsigned long);
  struct SOUNDDEFINITION* Next(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Next(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Prev(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Prev(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* RawNext(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* RawNext(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Tail();
  struct SOUNDDEFINITION* Tail();
  void TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >::UnlinkAll();
  void UnlinkNode(struct SOUNDDEFINITION*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UISOUNDLOOKUP> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >&);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::InitializeTerminator();
  class TSLink<UISOUNDLOOKUP>* TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UISOUNDLOOKUP* ptr);
  void SetLinkOffset(int);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >(int);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >(class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >&);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >();
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::~TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >();
  class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >& operator=(class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >&);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >*, unsigned long, struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* DeleteNode(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Head();
  struct UISOUNDLOOKUP* Head();
  int IsEmpty();
  int IsLinked(struct UISOUNDLOOKUP*);
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UISOUNDLOOKUP* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct UISOUNDLOOKUP* existingptr);
  struct UISOUNDLOOKUP* NewNode(unsigned long, unsigned long, unsigned long);
  struct UISOUNDLOOKUP* Next(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Next(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Prev(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Prev(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* RawNext(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* RawNext(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Tail();
  struct UISOUNDLOOKUP* Tail();
  void TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >::UnlinkAll();
  void UnlinkNode(struct UISOUNDLOOKUP*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SHEATHSOUNDHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >&);
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >::InitializeTerminator();
  class TSLink<SHEATHSOUNDHASH>* TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SHEATHSOUNDHASH* ptr);
  void SetLinkOffset(int);
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >(int);
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >(class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >&);
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >();
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >::~TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >();
  class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >& operator=(class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >*, unsigned long, struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* DeleteNode(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Head();
  struct SHEATHSOUNDHASH* Head();
  int IsEmpty();
  int IsLinked(struct SHEATHSOUNDHASH*);
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SHEATHSOUNDHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SHEATHSOUNDHASH* existingptr);
  struct SHEATHSOUNDHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct SHEATHSOUNDHASH* Next(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Next(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Prev(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Prev(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* RawNext(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* RawNext(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Tail();
  struct SHEATHSOUNDHASH* Tail();
  void TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >::UnlinkAll();
  void UnlinkNode(struct SHEATHSOUNDHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OUTDOORSCHUNKHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >&);
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::InitializeTerminator();
  class TSLink<OUTDOORSCHUNKHASHOBJ>* TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >(int);
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >(class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >&);
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >();
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::~TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >();
  class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >& operator=(class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >*, unsigned long, struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* DeleteNode(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Head();
  struct OUTDOORSCHUNKHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct OUTDOORSCHUNKHASHOBJ*);
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ* existingptr);
  struct OUTDOORSCHUNKHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct OUTDOORSCHUNKHASHOBJ* Next(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Next(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Prev(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Prev(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* RawNext(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* RawNext(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Tail();
  struct OUTDOORSCHUNKHASHOBJ* Tail();
  void TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct OUTDOORSCHUNKHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CHUNKHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >&);
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::InitializeTerminator();
  class TSLink<CHUNKHASHOBJ>* TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHUNKHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >(int);
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >(class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >&);
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >();
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::~TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >();
  class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >& operator=(class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >*, unsigned long, struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* DeleteNode(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Head();
  struct CHUNKHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct CHUNKHASHOBJ*);
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHUNKHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CHUNKHASHOBJ* existingptr);
  struct CHUNKHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct CHUNKHASHOBJ* Next(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Next(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Prev(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Prev(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* RawNext(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* RawNext(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Tail();
  struct CHUNKHASHOBJ* Tail();
  void TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct CHUNKHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<MSGBUFFER> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >&);
  void InitializeTerminator();
  class TSLink<MSGBUFFER>* Link(struct MSGBUFFER*);
  void SetLinkOffset(int);
  void TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >(int);
  void TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >(class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >&);
  void TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >();
  void ~TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >();
  class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >& operator=(class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<MSGBUFFER,TSGetLink<MSGBUFFER> >*, unsigned long, struct MSGBUFFER*);
  struct MSGBUFFER* DeleteNode(struct MSGBUFFER*);
  struct MSGBUFFER* Head();
  struct MSGBUFFER* Head();
  int IsEmpty();
  int IsLinked(struct MSGBUFFER*);
  void LinkNode(struct MSGBUFFER*, unsigned long, struct MSGBUFFER*);
  struct MSGBUFFER* NewNode(unsigned long, unsigned long, unsigned long);
  struct MSGBUFFER* Next(struct MSGBUFFER*);
  struct MSGBUFFER* Next(struct MSGBUFFER*);
  struct MSGBUFFER* Prev(struct MSGBUFFER*);
  struct MSGBUFFER* Prev(struct MSGBUFFER*);
  struct MSGBUFFER* RawNext(struct MSGBUFFER*);
  struct MSGBUFFER* RawNext(struct MSGBUFFER*);
  struct MSGBUFFER* Tail();
  struct MSGBUFFER* Tail();
  void UnlinkAll();
  void UnlinkNode(struct MSGBUFFER*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> >* TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >(int);
  void TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >(class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >();
  void ~TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >();
  class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >& operator=(class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >*, unsigned long, class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* DeleteNode(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Head();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  void TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* existingptr);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Next(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Next(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Prev(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Prev(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Tail();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >&);
  void TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> >* TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >(int);
  void TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >(class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >&);
  void TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >();
  void ~TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >();
  class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >& operator=(class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >*, unsigned long, class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* DeleteNode(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Head();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  void TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* existingptr);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Next(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Next(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Prev(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Prev(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* RawNext(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* RawNext(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Tail();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSolidTextureHash> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >&);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::InitializeTerminator();
  class TSLink<CSolidTextureHash>* TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSolidTextureHash* ptr);
  void SetLinkOffset(int);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >(int);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >(class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >&);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >();
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::~TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >();
  class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >& operator=(class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >&);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::Clear();
  void Combine(class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >*, unsigned long, struct CSolidTextureHash*);
  struct CSolidTextureHash* DeleteNode(struct CSolidTextureHash*);
  struct CSolidTextureHash* Head();
  struct CSolidTextureHash* Head();
  int IsEmpty();
  int IsLinked(struct CSolidTextureHash*);
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSolidTextureHash* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CSolidTextureHash* existingptr);
  struct CSolidTextureHash* NewNode(unsigned long, unsigned long, unsigned long);
  struct CSolidTextureHash* Next(struct CSolidTextureHash*);
  struct CSolidTextureHash* Next(struct CSolidTextureHash*);
  struct CSolidTextureHash* Prev(struct CSolidTextureHash*);
  struct CSolidTextureHash* Prev(struct CSolidTextureHash*);
  struct CSolidTextureHash* RawNext(struct CSolidTextureHash*);
  struct CSolidTextureHash* RawNext(struct CSolidTextureHash*);
  struct CSolidTextureHash* Tail();
  struct CSolidTextureHash* Tail();
  void TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >::UnlinkAll();
  void UnlinkNode(struct CSolidTextureHash*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CTextureHash> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >&);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::InitializeTerminator();
  class TSLink<CTextureHash>* TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CTextureHash* ptr);
  void SetLinkOffset(int);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >(int);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >(class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >&);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >();
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::~TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >();
  class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >& operator=(class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >&);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::Clear();
  void Combine(class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >*, unsigned long, struct CTextureHash*);
  struct CTextureHash* DeleteNode(struct CTextureHash*);
  struct CTextureHash* Head();
  struct CTextureHash* Head();
  int IsEmpty();
  int IsLinked(struct CTextureHash*);
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CTextureHash* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CTextureHash* existingptr);
  struct CTextureHash* NewNode(unsigned long, unsigned long, unsigned long);
  struct CTextureHash* Next(struct CTextureHash*);
  struct CTextureHash* Next(struct CTextureHash*);
  struct CTextureHash* Prev(struct CTextureHash*);
  struct CTextureHash* Prev(struct CTextureHash*);
  struct CTextureHash* RawNext(struct CTextureHash*);
  struct CTextureHash* RawNext(struct CTextureHash*);
  struct CTextureHash* Tail();
  struct CTextureHash* Tail();
  void TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >::UnlinkAll();
  void UnlinkNode(struct CTextureHash*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxTexCache> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >&);
  void InitializeTerminator();
  class TSLink<CGxTexCache>* Link(class CGxTexCache*);
  void SetLinkOffset(int);
  void TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >(int);
  void TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >(class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >&);
  void TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >();
  void ~TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >();
  class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >& operator=(class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >*, unsigned long, class CGxTexCache*);
  class CGxTexCache* DeleteNode(class CGxTexCache*);
  class CGxTexCache* Head();
  class CGxTexCache* Head();
  int IsEmpty();
  int IsLinked(class CGxTexCache*);
  void TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxTexCache* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CGxTexCache* existingptr);
  class CGxTexCache* NewNode(unsigned long, unsigned long, unsigned long);
  class CGxTexCache* Next(class CGxTexCache*);
  class CGxTexCache* Next(class CGxTexCache*);
  class CGxTexCache* Prev(class CGxTexCache*);
  class CGxTexCache* Prev(class CGxTexCache*);
  class CGxTexCache* RawNext(class CGxTexCache*);
  class CGxTexCache* RawNext(class CGxTexCache*);
  class CGxTexCache* Tail();
  class CGxTexCache* Tail();
  void UnlinkAll();
  void UnlinkNode(class CGxTexCache*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CTexture,TSGetExplicitLink<CTexture> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CTexture> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CTexture,TSGetExplicitLink<CTexture> >&);
  void InitializeTerminator();
  class TSLink<CTexture>* Link(class CTexture*);
  void SetLinkOffset(int);
  void TSList<CTexture,TSGetExplicitLink<CTexture> >(int);
  void TSList<CTexture,TSGetExplicitLink<CTexture> >(class TSList<CTexture,TSGetExplicitLink<CTexture> >&);
  void TSList<CTexture,TSGetExplicitLink<CTexture> >();
  void ~TSList<CTexture,TSGetExplicitLink<CTexture> >();
  class TSList<CTexture,TSGetExplicitLink<CTexture> >& operator=(class TSList<CTexture,TSGetExplicitLink<CTexture> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CTexture,TSGetExplicitLink<CTexture> >*, unsigned long, class CTexture*);
  class CTexture* DeleteNode(class CTexture*);
  class CTexture* Head();
  class CTexture* Head();
  int IsEmpty();
  int IsLinked(class CTexture*);
  void LinkNode(class CTexture*, unsigned long, class CTexture*);
  class CTexture* NewNode(unsigned long, unsigned long, unsigned long);
  class CTexture* Next(class CTexture*);
  class CTexture* Next(class CTexture*);
  class CTexture* Prev(class CTexture*);
  class CTexture* Prev(class CTexture*);
  class CTexture* RawNext(class CTexture*);
  class CTexture* RawNext(class CTexture*);
  class CTexture* Tail();
  class CTexture* Tail();
  void UnlinkAll();
  void UnlinkNode(class CTexture*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CTextureItem> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >&);
  void InitializeTerminator();
  class TSLink<CTextureItem>* Link(struct CTextureItem*);
  void SetLinkOffset(int);
  void TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >(int);
  void TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >(class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >&);
  void TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >();
  void ~TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >();
  class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >& operator=(class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >*, unsigned long, struct CTextureItem*);
  struct CTextureItem* DeleteNode(struct CTextureItem*);
  struct CTextureItem* Head();
  struct CTextureItem* Head();
  int IsEmpty();
  int IsLinked(struct CTextureItem*);
  void LinkNode(struct CTextureItem*, unsigned long, struct CTextureItem*);
  struct CTextureItem* NewNode(unsigned long, unsigned long, unsigned long);
  struct CTextureItem* Next(struct CTextureItem*);
  struct CTextureItem* Next(struct CTextureItem*);
  struct CTextureItem* Prev(struct CTextureItem*);
  struct CTextureItem* Prev(struct CTextureItem*);
  struct CTextureItem* RawNext(struct CTextureItem*);
  struct CTextureItem* RawNext(struct CTextureItem*);
  struct CTextureItem* Tail();
  struct CTextureItem* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CTextureItem*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CBaseManaged> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >&);
  void InitializeTerminator();
  class TSLink<CBaseManaged>* TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CBaseManaged* ptr);
  void SetLinkOffset(int);
  void TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >(int);
  void TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >(class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >&);
  void TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >();
  void ~TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >();
  class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >& operator=(class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >*, unsigned long, class CBaseManaged*);
  class CBaseManaged* DeleteNode(class CBaseManaged*);
  class CBaseManaged* Head();
  class CBaseManaged* Head();
  int IsEmpty();
  int IsLinked(class CBaseManaged*);
  void LinkNode(class CBaseManaged*, unsigned long, class CBaseManaged*);
  class CBaseManaged* NewNode(unsigned long, unsigned long, unsigned long);
  class CBaseManaged* Next(class CBaseManaged*);
  class CBaseManaged* Next(class CBaseManaged*);
  class CBaseManaged* Prev(class CBaseManaged*);
  class CBaseManaged* Prev(class CBaseManaged*);
  class CBaseManaged* RawNext(class CBaseManaged*);
  class CBaseManaged* RawNext(class CBaseManaged*);
  class CBaseManaged* Tail();
  class CBaseManaged* Tail();
  void UnlinkAll();
  void UnlinkNode(class CBaseManaged*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FONTHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >&);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::InitializeTerminator();
  class TSLink<FONTHASHOBJ>* TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FONTHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >(int);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >(class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >&);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >();
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::~TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >();
  class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >& operator=(class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >&);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >*, unsigned long, struct FONTHASHOBJ*);
  struct FONTHASHOBJ* DeleteNode(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Head();
  struct FONTHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct FONTHASHOBJ*);
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FONTHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct FONTHASHOBJ* existingptr);
  struct FONTHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Tail();
  struct FONTHASHOBJ* Tail();
  void TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct FONTHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ProfileInternal::SECTION> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >&);
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >::InitializeTerminator();
  class TSLink<ProfileInternal::SECTION>* TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::SECTION* ptr);
  void SetLinkOffset(int);
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >(int);
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >(class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >&);
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >();
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >::~TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >();
  class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >& operator=(class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >*, unsigned long, struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* DeleteNode(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Head();
  struct ProfileInternal::SECTION* Head();
  int IsEmpty();
  int IsLinked(struct ProfileInternal::SECTION*);
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::SECTION* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ProfileInternal::SECTION* existingptr);
  struct ProfileInternal::SECTION* NewNode(unsigned long, unsigned long, unsigned long);
  struct ProfileInternal::SECTION* Next(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Next(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Prev(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Prev(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* RawNext(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* RawNext(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Tail();
  struct ProfileInternal::SECTION* Tail();
  void TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >::UnlinkAll();
  void UnlinkNode(struct ProfileInternal::SECTION*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ProfileInternal::KEYVALUE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >&);
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::InitializeTerminator();
  class TSLink<ProfileInternal::KEYVALUE>* TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::KEYVALUE* ptr);
  void SetLinkOffset(int);
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >(int);
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >(class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >&);
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >();
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::~TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >();
  class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >& operator=(class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >*, unsigned long, struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* DeleteNode(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Head();
  struct ProfileInternal::KEYVALUE* Head();
  int IsEmpty();
  int IsLinked(struct ProfileInternal::KEYVALUE*);
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::KEYVALUE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ProfileInternal::KEYVALUE* existingptr);
  struct ProfileInternal::KEYVALUE* NewNode(unsigned long, unsigned long, unsigned long);
  struct ProfileInternal::KEYVALUE* Next(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Next(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Prev(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Prev(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* RawNext(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* RawNext(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Tail();
  struct ProfileInternal::KEYVALUE* Tail();
  void TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >::UnlinkAll();
  void UnlinkNode(struct ProfileInternal::KEYVALUE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ProfileInternal::STRINGBLOCK> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >&);
  void InitializeTerminator();
  class TSLink<ProfileInternal::STRINGBLOCK>* TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::STRINGBLOCK* ptr);
  void SetLinkOffset(int);
  void TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >(int);
  void TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >(class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >&);
  void TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >();
  void ~TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >();
  class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >& operator=(class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ProfileInternal::STRINGBLOCK,TSGetLink<ProfileInternal::STRINGBLOCK> >*, unsigned long, struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* DeleteNode(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* Head();
  struct ProfileInternal::STRINGBLOCK* Head();
  int IsEmpty();
  int IsLinked(struct ProfileInternal::STRINGBLOCK*);
  void LinkNode(struct ProfileInternal::STRINGBLOCK*, unsigned long, struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* NewNode(unsigned long, unsigned long, unsigned long);
  struct ProfileInternal::STRINGBLOCK* Next(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* Next(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* Prev(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* Prev(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* RawNext(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* RawNext(struct ProfileInternal::STRINGBLOCK*);
  struct ProfileInternal::STRINGBLOCK* Tail();
  struct ProfileInternal::STRINGBLOCK* Tail();
  void UnlinkAll();
  void UnlinkNode(struct ProfileInternal::STRINGBLOCK*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CILayer,TSGetExplicitLink<CILayer> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CILayer> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CILayer,TSGetExplicitLink<CILayer> >&);
  void InitializeTerminator();
  class TSLink<CILayer>* Link(class CILayer*);
  void SetLinkOffset(int);
  void TSList<CILayer,TSGetExplicitLink<CILayer> >(int);
  void TSList<CILayer,TSGetExplicitLink<CILayer> >(class TSList<CILayer,TSGetExplicitLink<CILayer> >&);
  void TSList<CILayer,TSGetExplicitLink<CILayer> >();
  void ~TSList<CILayer,TSGetExplicitLink<CILayer> >();
  class TSList<CILayer,TSGetExplicitLink<CILayer> >& operator=(class TSList<CILayer,TSGetExplicitLink<CILayer> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CILayer,TSGetExplicitLink<CILayer> >*, unsigned long, class CILayer*);
  class CILayer* DeleteNode(class CILayer*);
  class CILayer* Head();
  class CILayer* Head();
  int IsEmpty();
  int IsLinked(class CILayer*);
  void LinkNode(class CILayer*, unsigned long, class CILayer*);
  class CILayer* NewNode(unsigned long, unsigned long, unsigned long);
  class CILayer* Next(class CILayer*);
  class CILayer* Next(class CILayer*);
  class CILayer* Prev(class CILayer*);
  class CILayer* Prev(class CILayer*);
  class CILayer* RawNext(class CILayer*);
  class CILayer* RawNext(class CILayer*);
  class CILayer* Tail();
  class CILayer* Tail();
  void UnlinkAll();
  void UnlinkNode(class CILayer*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ContextData,TSGetLink<ContextData> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ContextData> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ContextData,TSGetLink<ContextData> >&);
  void InitializeTerminator();
  class TSLink<ContextData>* Link(struct ContextData*);
  void SetLinkOffset(int);
  void TSList<ContextData,TSGetLink<ContextData> >(int);
  void TSList<ContextData,TSGetLink<ContextData> >(class TSList<ContextData,TSGetLink<ContextData> >&);
  void TSList<ContextData,TSGetLink<ContextData> >();
  void ~TSList<ContextData,TSGetLink<ContextData> >();
  class TSList<ContextData,TSGetLink<ContextData> >& operator=(class TSList<ContextData,TSGetLink<ContextData> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ContextData,TSGetLink<ContextData> >*, unsigned long, struct ContextData*);
  struct ContextData* DeleteNode(struct ContextData*);
  struct ContextData* Head();
  struct ContextData* Head();
  int IsEmpty();
  int IsLinked(struct ContextData*);
  void LinkNode(struct ContextData*, unsigned long, struct ContextData*);
  struct ContextData* NewNode(unsigned long, unsigned long, unsigned long);
  struct ContextData* Next(struct ContextData*);
  struct ContextData* Next(struct ContextData*);
  struct ContextData* Prev(struct ContextData*);
  struct ContextData* Prev(struct ContextData*);
  struct ContextData* RawNext(struct ContextData*);
  struct ContextData* RawNext(struct ContextData*);
  struct ContextData* Tail();
  struct ContextData* Tail();
  void UnlinkAll();
  void UnlinkNode(struct ContextData*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ThreadData,TSGetLink<ThreadData> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ThreadData> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ThreadData,TSGetLink<ThreadData> >&);
  void InitializeTerminator();
  class TSLink<ThreadData>* Link(struct ThreadData*);
  void SetLinkOffset(int);
  void TSList<ThreadData,TSGetLink<ThreadData> >(int);
  void TSList<ThreadData,TSGetLink<ThreadData> >(class TSList<ThreadData,TSGetLink<ThreadData> >&);
  void TSList<ThreadData,TSGetLink<ThreadData> >();
  void ~TSList<ThreadData,TSGetLink<ThreadData> >();
  class TSList<ThreadData,TSGetLink<ThreadData> >& operator=(class TSList<ThreadData,TSGetLink<ThreadData> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<ThreadData,TSGetLink<ThreadData> >*, unsigned long, struct ThreadData*);
  struct ThreadData* DeleteNode(struct ThreadData*);
  struct ThreadData* Head();
  struct ThreadData* Head();
  int IsEmpty();
  int IsLinked(struct ThreadData*);
  void LinkNode(struct ThreadData*, unsigned long, struct ThreadData*);
  struct ThreadData* NewNode(unsigned long, unsigned long, unsigned long);
  struct ThreadData* Next(struct ThreadData*);
  struct ThreadData* Next(struct ThreadData*);
  struct ThreadData* Prev(struct ThreadData*);
  struct ThreadData* Prev(struct ThreadData*);
  struct ThreadData* RawNext(struct ThreadData*);
  struct ThreadData* RawNext(struct ThreadData*);
  struct ThreadData* Tail();
  struct ThreadData* Tail();
  void UnlinkAll();
  void UnlinkNode(struct ThreadData*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >&);
  void InitializeTerminator();
  class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> >* TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >(int);
  void TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >(class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >();
  void ~TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >();
  class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >& operator=(class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >&);
  void ChangeLinkOffset(int);
  void TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >::Clear();
  void Combine(class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >*, unsigned long, class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* DeleteNode(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Head();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  void TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* existingptr);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Next(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Next(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Prev(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Prev(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Tail();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::NETSELSOCKPTR> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >&);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::InitializeTerminator();
  class TSLink<OsNet::NETSELSOCKPTR>* TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >(int);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >(class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >&);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >();
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::~TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >();
  class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >& operator=(class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >&);
  void ChangeLinkOffset(int);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::Clear();
  void Combine(class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >*, unsigned long, struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* DeleteNode(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Head();
  struct OsNet::NETSELSOCKPTR* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::NETSELSOCKPTR*);
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* existingptr);
  struct OsNet::NETSELSOCKPTR* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::NETSELSOCKPTR* Next(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Next(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Prev(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Prev(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* RawNext(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* RawNext(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Tail();
  struct OsNet::NETSELSOCKPTR* Tail();
  void TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >::UnlinkAll();
  void UnlinkNode(struct OsNet::NETSELSOCKPTR*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::LOOPCONN::INPUT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >&);
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >::InitializeTerminator();
  class TSLink<OsNet::LOOPCONN::INPUT>* TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::LOOPCONN::INPUT* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >(int);
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >(class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >&);
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >::TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >();
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >::~TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >();
  class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >& operator=(class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >*, unsigned long, struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* DeleteNode(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* Head();
  struct OsNet::LOOPCONN::INPUT* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::LOOPCONN::INPUT*);
  void LinkNode(struct OsNet::LOOPCONN::INPUT*, unsigned long, struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::LOOPCONN::INPUT* Next(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* Next(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* Prev(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* Prev(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* RawNext(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* RawNext(struct OsNet::LOOPCONN::INPUT*);
  struct OsNet::LOOPCONN::INPUT* Tail();
  struct OsNet::LOOPCONN::INPUT* Tail();
  void TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >::UnlinkAll();
  void UnlinkNode(struct OsNet::LOOPCONN::INPUT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::LOOPCONN> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >&);
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::InitializeTerminator();
  class TSLink<OsNet::LOOPCONN>* TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class OsNet::LOOPCONN* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >(int);
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >(class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >&);
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >();
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::~TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >();
  class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >& operator=(class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >*, unsigned long, class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* DeleteNode(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* Head();
  class OsNet::LOOPCONN* Head();
  int IsEmpty();
  int IsLinked(class OsNet::LOOPCONN*);
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class OsNet::LOOPCONN* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class OsNet::LOOPCONN* existingptr);
  class OsNet::LOOPCONN* NewNode(unsigned long, unsigned long, unsigned long);
  class OsNet::LOOPCONN* Next(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* Next(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* Prev(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* Prev(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* RawNext(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* RawNext(class OsNet::LOOPCONN*);
  class OsNet::LOOPCONN* Tail();
  class OsNet::LOOPCONN* Tail();
  void TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >::UnlinkAll();
  void UnlinkNode(class OsNet::LOOPCONN*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::TCPHOSTADDRINFO> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >&);
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >::InitializeTerminator();
  class TSLink<OsNet::TCPHOSTADDRINFO>* TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::TCPHOSTADDRINFO* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >(int);
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >(class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >&);
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >::TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >();
  void ~TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >();
  class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >& operator=(class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >*, unsigned long, struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* DeleteNode(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* Head();
  struct OsNet::TCPHOSTADDRINFO* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::TCPHOSTADDRINFO*);
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::TCPHOSTADDRINFO* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct OsNet::TCPHOSTADDRINFO* existingptr);
  struct OsNet::TCPHOSTADDRINFO* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::TCPHOSTADDRINFO* Next(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* Next(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* Prev(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* Prev(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* RawNext(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* RawNext(struct OsNet::TCPHOSTADDRINFO*);
  struct OsNet::TCPHOSTADDRINFO* Tail();
  struct OsNet::TCPHOSTADDRINFO* Tail();
  void TSList<OsNet::TCPHOSTADDRINFO,TSGetLink<OsNet::TCPHOSTADDRINFO> >::UnlinkAll();
  void UnlinkNode(struct OsNet::TCPHOSTADDRINFO*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::NETCONNECT> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >&);
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::InitializeTerminator();
  class TSLink<OsNet::NETCONNECT>* TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETCONNECT* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >(int);
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >(class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >&);
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >();
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::~TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >();
  class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >& operator=(class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >*, unsigned long, struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETCONNECT* ptr);
  struct OsNet::NETCONNECT* Head();
  struct OsNet::NETCONNECT* Head();
  int IsEmpty();
  int IsLinked(struct OsNet::NETCONNECT*);
  void TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETCONNECT* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct OsNet::NETCONNECT* existingptr);
  struct OsNet::NETCONNECT* NewNode(unsigned long, unsigned long, unsigned long);
  struct OsNet::NETCONNECT* Next(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* Next(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* Prev(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* Prev(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* RawNext(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* RawNext(struct OsNet::NETCONNECT*);
  struct OsNet::NETCONNECT* Tail();
  struct OsNet::NETCONNECT* Tail();
  void UnlinkAll();
  void UnlinkNode(struct OsNet::NETCONNECT*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::NETCONN> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >&);
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >::InitializeTerminator();
  class TSLink<OsNet::NETCONN>* TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class OsNet::NETCONN* ptr);
  void SetLinkOffset(int);
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >(int);
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >(class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >&);
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >::TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >();
  void ~TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >();
  class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >& operator=(class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >*, unsigned long, class OsNet::NETCONN*);
  class OsNet::NETCONN* DeleteNode(class OsNet::NETCONN*);
  class OsNet::NETCONN* Head();
  class OsNet::NETCONN* Head();
  int IsEmpty();
  int IsLinked(class OsNet::NETCONN*);
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class OsNet::NETCONN* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class OsNet::NETCONN* existingptr);
  class OsNet::NETCONN* NewNode(unsigned long, unsigned long, unsigned long);
  class OsNet::NETCONN* Next(class OsNet::NETCONN*);
  class OsNet::NETCONN* Next(class OsNet::NETCONN*);
  class OsNet::NETCONN* Prev(class OsNet::NETCONN*);
  class OsNet::NETCONN* Prev(class OsNet::NETCONN*);
  class OsNet::NETCONN* RawNext(class OsNet::NETCONN*);
  class OsNet::NETCONN* RawNext(class OsNet::NETCONN*);
  class OsNet::NETCONN* Tail();
  class OsNet::NETCONN* Tail();
  void TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >::UnlinkAll();
  void UnlinkNode(class OsNet::NETCONN*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<Sound,TSGetExplicitLink<Sound> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<Sound> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<Sound,TSGetExplicitLink<Sound> >&);
  void InitializeTerminator();
  class TSLink<Sound>* Link(struct Sound*);
  void SetLinkOffset(int);
  void TSList<Sound,TSGetExplicitLink<Sound> >(int);
  void TSList<Sound,TSGetExplicitLink<Sound> >(class TSList<Sound,TSGetExplicitLink<Sound> >&);
  void TSList<Sound,TSGetExplicitLink<Sound> >();
  void ~TSList<Sound,TSGetExplicitLink<Sound> >();
  class TSList<Sound,TSGetExplicitLink<Sound> >& operator=(class TSList<Sound,TSGetExplicitLink<Sound> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<Sound,TSGetExplicitLink<Sound> >*, unsigned long, struct Sound*);
  struct Sound* DeleteNode(struct Sound*);
  struct Sound* Head();
  struct Sound* Head();
  int IsEmpty();
  int IsLinked(struct Sound*);
  void LinkNode(struct Sound*, unsigned long, struct Sound*);
  struct Sound* NewNode(unsigned long, unsigned long, unsigned long);
  struct Sound* Next(struct Sound*);
  struct Sound* Next(struct Sound*);
  struct Sound* Prev(struct Sound*);
  struct Sound* Prev(struct Sound*);
  struct Sound* RawNext(struct Sound*);
  struct Sound* RawNext(struct Sound*);
  struct Sound* Tail();
  struct Sound* Tail();
  void UnlinkAll();
  void UnlinkNode(struct Sound*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> >* TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >(int);
  void TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >(class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >&);
  void TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >();
  void ~TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >();
  class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >& operator=(class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >*, unsigned long, class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* DeleteNode(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Head();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  void TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* existingptr);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Next(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Next(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Prev(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Prev(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* RawNext(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Tail();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >&);
  void TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> >* TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >(int);
  void TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >(class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >&);
  void TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >();
  void ~TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >();
  class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >& operator=(class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >*, unsigned long, class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* DeleteNode(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Head();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  void TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* existingptr);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Next(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Next(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Prev(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Prev(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* RawNext(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* RawNext(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Tail();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SoundFileObjectCacheNode> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >&);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::InitializeTerminator();
  class TSLink<SoundFileObjectCacheNode>* TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* ptr);
  void SetLinkOffset(int);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >(int);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >(class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >&);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >();
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::~TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >();
  class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >& operator=(class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >&);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::Clear();
  void Combine(class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >*, unsigned long, struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* DeleteNode(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Head();
  struct SoundFileObjectCacheNode* Head();
  int IsEmpty();
  int IsLinked(struct SoundFileObjectCacheNode*);
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* existingptr);
  struct SoundFileObjectCacheNode* NewNode(unsigned long, unsigned long, unsigned long);
  struct SoundFileObjectCacheNode* Next(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Next(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Prev(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Prev(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* RawNext(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* RawNext(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Tail();
  struct SoundFileObjectCacheNode* Tail();
  void TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >::UnlinkAll();
  void UnlinkNode(struct SoundFileObjectCacheNode*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SoundFileObject> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >&);
  void InitializeTerminator();
  class TSLink<SoundFileObject>* Link(struct SoundFileObject*);
  void SetLinkOffset(int);
  void TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >(int);
  void TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >(class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >&);
  void TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >();
  void ~TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >();
  class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >& operator=(class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >*, unsigned long, struct SoundFileObject*);
  struct SoundFileObject* DeleteNode(struct SoundFileObject*);
  struct SoundFileObject* Head();
  struct SoundFileObject* Head();
  int IsEmpty();
  int IsLinked(struct SoundFileObject*);
  void LinkNode(struct SoundFileObject*, unsigned long, struct SoundFileObject*);
  struct SoundFileObject* NewNode(unsigned long, unsigned long, unsigned long);
  struct SoundFileObject* Next(struct SoundFileObject*);
  struct SoundFileObject* Next(struct SoundFileObject*);
  struct SoundFileObject* Prev(struct SoundFileObject*);
  struct SoundFileObject* Prev(struct SoundFileObject*);
  struct SoundFileObject* RawNext(struct SoundFileObject*);
  struct SoundFileObject* RawNext(struct SoundFileObject*);
  struct SoundFileObject* Tail();
  struct SoundFileObject* Tail();
  void UnlinkAll();
  void UnlinkNode(struct SoundFileObject*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SoundFileDataCacheBlock> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >&);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::InitializeTerminator();
  class TSLink<SoundFileDataCacheBlock>* TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* ptr);
  void SetLinkOffset(int);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >(int);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >(class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >&);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >();
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::~TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >();
  class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >& operator=(class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >&);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::Clear();
  void Combine(class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >*, unsigned long, struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* DeleteNode(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Head();
  struct SoundFileDataCacheBlock* Head();
  int IsEmpty();
  int IsLinked(struct SoundFileDataCacheBlock*);
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* existingptr);
  struct SoundFileDataCacheBlock* NewNode(unsigned long, unsigned long, unsigned long);
  struct SoundFileDataCacheBlock* Next(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Next(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Prev(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Prev(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* RawNext(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* RawNext(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Tail();
  struct SoundFileDataCacheBlock* Tail();
  void TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >::UnlinkAll();
  void UnlinkNode(struct SoundFileDataCacheBlock*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >&);
  void TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >::InitializeTerminator();
  class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> >* TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* ptr);
  void SetLinkOffset(int);
  void TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >(int);
  void TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >(class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >&);
  void TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >();
  void ~TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >();
  class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >& operator=(class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >*, unsigned long, class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* DeleteNode(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Head();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Head();
  int IsEmpty();
  int IsLinked(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  void TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* existingptr);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* NewNode(unsigned long, unsigned long, unsigned long);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Next(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Next(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Prev(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Prev(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* RawNext(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* RawNext(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Tail();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>* Tail();
  void UnlinkAll();
  void UnlinkNode(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CStatus::STATUSENTRY> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >&);
  void TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >::InitializeTerminator();
  class TSLink<CStatus::STATUSENTRY>* Link(struct CStatus::STATUSENTRY*);
  void SetLinkOffset(int);
  void TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >(int);
  void TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >(class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >&);
  void TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >::TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >();
  void ~TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >();
  class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >& operator=(class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >*, unsigned long, struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* DeleteNode(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* Head();
  struct CStatus::STATUSENTRY* Head();
  int IsEmpty();
  int IsLinked(struct CStatus::STATUSENTRY*);
  void LinkNode(struct CStatus::STATUSENTRY*, unsigned long, struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* NewNode(unsigned long, unsigned long, unsigned long);
  struct CStatus::STATUSENTRY* Next(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* Next(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* Prev(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* Prev(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* RawNext(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* RawNext(struct CStatus::STATUSENTRY*);
  struct CStatus::STATUSENTRY* Tail();
  struct CStatus::STATUSENTRY* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CStatus::STATUSENTRY*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CModelModItem,TSGetLink<CModelModItem> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CModelModItem> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CModelModItem,TSGetLink<CModelModItem> >&);
  void TSList<CModelModItem,TSGetLink<CModelModItem> >::InitializeTerminator();
  class TSLink<CModelModItem>* Link(struct CModelModItem*);
  void SetLinkOffset(int);
  void TSList<CModelModItem,TSGetLink<CModelModItem> >(int);
  void TSList<CModelModItem,TSGetLink<CModelModItem> >(class TSList<CModelModItem,TSGetLink<CModelModItem> >&);
  void TSList<CModelModItem,TSGetLink<CModelModItem> >();
  void ~TSList<CModelModItem,TSGetLink<CModelModItem> >();
  class TSList<CModelModItem,TSGetLink<CModelModItem> >& operator=(class TSList<CModelModItem,TSGetLink<CModelModItem> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CModelModItem,TSGetLink<CModelModItem> >*, unsigned long, struct CModelModItem*);
  struct CModelModItem* DeleteNode(struct CModelModItem*);
  struct CModelModItem* Head();
  struct CModelModItem* Head();
  int IsEmpty();
  int IsLinked(struct CModelModItem*);
  void TSList<CModelModItem,TSGetLink<CModelModItem> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelModItem* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CModelModItem* existingptr);
  struct CModelModItem* NewNode(unsigned long, unsigned long, unsigned long);
  struct CModelModItem* Next(struct CModelModItem*);
  struct CModelModItem* Next(struct CModelModItem*);
  struct CModelModItem* Prev(struct CModelModItem*);
  struct CModelModItem* Prev(struct CModelModItem*);
  struct CModelModItem* RawNext(struct CModelModItem*);
  struct CModelModItem* RawNext(struct CModelModItem*);
  struct CModelModItem* Tail();
  struct CModelModItem* Tail();
  void UnlinkAll();
  void UnlinkNode(struct CModelModItem*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CModelHash,TSGetExplicitLink<CModelHash> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CModelHash> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CModelHash,TSGetExplicitLink<CModelHash> >&);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::InitializeTerminator();
  class TSLink<CModelHash>* TSList<CModelHash,TSGetExplicitLink<CModelHash> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelHash* ptr);
  void SetLinkOffset(int);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >(int);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >(class TSList<CModelHash,TSGetExplicitLink<CModelHash> >&);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::TSList<CModelHash,TSGetExplicitLink<CModelHash> >();
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::~TSList<CModelHash,TSGetExplicitLink<CModelHash> >();
  class TSList<CModelHash,TSGetExplicitLink<CModelHash> >& operator=(class TSList<CModelHash,TSGetExplicitLink<CModelHash> >&);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::Clear();
  void Combine(class TSList<CModelHash,TSGetExplicitLink<CModelHash> >*, unsigned long, struct CModelHash*);
  struct CModelHash* DeleteNode(struct CModelHash*);
  struct CModelHash* Head();
  struct CModelHash* Head();
  int IsEmpty();
  int IsLinked(struct CModelHash*);
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelHash* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CModelHash* existingptr);
  struct CModelHash* NewNode(unsigned long, unsigned long, unsigned long);
  struct CModelHash* Next(struct CModelHash*);
  struct CModelHash* Next(struct CModelHash*);
  struct CModelHash* Prev(struct CModelHash*);
  struct CModelHash* Prev(struct CModelHash*);
  struct CModelHash* RawNext(struct CModelHash*);
  struct CModelHash* RawNext(struct CModelHash*);
  struct CModelHash* Tail();
  struct CModelHash* Tail();
  void TSList<CModelHash,TSGetExplicitLink<CModelHash> >::UnlinkAll();
  void UnlinkNode(struct CModelHash*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CAsyncObject> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >&);
  void InitializeTerminator();
  class TSLink<CAsyncObject>* Link(class CAsyncObject*);
  void SetLinkOffset(int);
  void TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >(int);
  void TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >(class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >&);
  void TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >();
  void ~TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >();
  class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >& operator=(class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >*, unsigned long, class CAsyncObject*);
  class CAsyncObject* DeleteNode(class CAsyncObject*);
  class CAsyncObject* Head();
  class CAsyncObject* Head();
  int IsEmpty();
  int IsLinked(class CAsyncObject*);
  void LinkNode(class CAsyncObject*, unsigned long, class CAsyncObject*);
  class CAsyncObject* NewNode(unsigned long, unsigned long, unsigned long);
  class CAsyncObject* Next(class CAsyncObject*);
  class CAsyncObject* Next(class CAsyncObject*);
  class CAsyncObject* Prev(class CAsyncObject*);
  class CAsyncObject* Prev(class CAsyncObject*);
  class CAsyncObject* RawNext(class CAsyncObject*);
  class CAsyncObject* RawNext(class CAsyncObject*);
  class CAsyncObject* Tail();
  class CAsyncObject* Tail();
  void UnlinkAll();
  void UnlinkNode(class CAsyncObject*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<LINKUNIQUE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >&);
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::InitializeTerminator();
  class TSLink<LINKUNIQUE>* TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct LINKUNIQUE* ptr);
  void SetLinkOffset(int);
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >(int);
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >(class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >&);
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >();
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::~TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >& operator=(class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >*, unsigned long, struct LINKUNIQUE*);
  struct LINKUNIQUE* DeleteNode(struct LINKUNIQUE*);
  struct LINKUNIQUE* Head();
  struct LINKUNIQUE* Head();
  int IsEmpty();
  int IsLinked(struct LINKUNIQUE*);
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct LINKUNIQUE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct LINKUNIQUE* existingptr);
  struct LINKUNIQUE* NewNode(unsigned long, unsigned long, unsigned long);
  struct LINKUNIQUE* Next(struct LINKUNIQUE*);
  struct LINKUNIQUE* Next(struct LINKUNIQUE*);
  struct LINKUNIQUE* Prev(struct LINKUNIQUE*);
  struct LINKUNIQUE* Prev(struct LINKUNIQUE*);
  struct LINKUNIQUE* RawNext(struct LINKUNIQUE*);
  struct LINKUNIQUE* RawNext(struct LINKUNIQUE*);
  struct LINKUNIQUE* Tail();
  struct LINKUNIQUE* Tail();
  void TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >::UnlinkAll();
  void UnlinkNode(struct LINKUNIQUE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSimpleFrame> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >&);
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >::InitializeTerminator();
  class TSLink<CSimpleFrame>* TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* ptr);
  void SetLinkOffset(int);
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >(int);
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >(class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >&);
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >::TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >();
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >::~TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >();
  class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >& operator=(class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >*, unsigned long, class CSimpleFrame*);
  class CSimpleFrame* DeleteNode(class CSimpleFrame*);
  class CSimpleFrame* Head();
  class CSimpleFrame* Head();
  int IsEmpty();
  int IsLinked(class CSimpleFrame*);
  void TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleFrame* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CSimpleFrame* existingptr);
  class CSimpleFrame* NewNode(unsigned long, unsigned long, unsigned long);
  class CSimpleFrame* Next(class CSimpleFrame*);
  class CSimpleFrame* Next(class CSimpleFrame*);
  class CSimpleFrame* Prev(class CSimpleFrame*);
  class CSimpleFrame* Prev(class CSimpleFrame*);
  class CSimpleFrame* RawNext(class CSimpleFrame*);
  class CSimpleFrame* RawNext(class CSimpleFrame*);
  class CSimpleFrame* Tail();
  class CSimpleFrame* Tail();
  void UnlinkAll();
  void UnlinkNode(class CSimpleFrame*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLECONTEXTHASHOBJ> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >&);
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::InitializeTerminator();
  class TSLink<SIMPLECONTEXTHASHOBJ>* TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLECONTEXTHASHOBJ* ptr);
  void SetLinkOffset(int);
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >(int);
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >(class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >&);
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >();
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::~TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >();
  class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >& operator=(class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >*, unsigned long, struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* DeleteNode(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Head();
  struct SIMPLECONTEXTHASHOBJ* Head();
  int IsEmpty();
  int IsLinked(struct SIMPLECONTEXTHASHOBJ*);
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLECONTEXTHASHOBJ* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SIMPLECONTEXTHASHOBJ* existingptr);
  struct SIMPLECONTEXTHASHOBJ* NewNode(unsigned long, unsigned long, unsigned long);
  struct SIMPLECONTEXTHASHOBJ* Next(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Next(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Prev(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Prev(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* RawNext(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* RawNext(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Tail();
  struct SIMPLECONTEXTHASHOBJ* Tail();
  void TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >::UnlinkAll();
  void UnlinkNode(struct SIMPLECONTEXTHASHOBJ*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLEFONTSTRINGREGHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >&);
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >::InitializeTerminator();
  class TSLink<SIMPLEFONTSTRINGREGHASH>* TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFONTSTRINGREGHASH* ptr);
  void SetLinkOffset(int);
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >(int);
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >(class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >&);
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >();
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >::~TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >();
  class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >& operator=(class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >*, unsigned long, struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* DeleteNode(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Head();
  struct SIMPLEFONTSTRINGREGHASH* Head();
  int IsEmpty();
  int IsLinked(struct SIMPLEFONTSTRINGREGHASH*);
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFONTSTRINGREGHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SIMPLEFONTSTRINGREGHASH* existingptr);
  struct SIMPLEFONTSTRINGREGHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct SIMPLEFONTSTRINGREGHASH* Next(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Next(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Prev(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Prev(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* RawNext(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* RawNext(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Tail();
  struct SIMPLEFONTSTRINGREGHASH* Tail();
  void TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >::UnlinkAll();
  void UnlinkNode(struct SIMPLEFONTSTRINGREGHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLETEXTUREREGHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >&);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::InitializeTerminator();
  class TSLink<SIMPLETEXTUREREGHASH>* TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLETEXTUREREGHASH* ptr);
  void SetLinkOffset(int);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >(int);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >(class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >&);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >();
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::~TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >();
  class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >& operator=(class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >&);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >*, unsigned long, struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* DeleteNode(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Head();
  struct SIMPLETEXTUREREGHASH* Head();
  int IsEmpty();
  int IsLinked(struct SIMPLETEXTUREREGHASH*);
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLETEXTUREREGHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SIMPLETEXTUREREGHASH* existingptr);
  struct SIMPLETEXTUREREGHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct SIMPLETEXTUREREGHASH* Next(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Next(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Prev(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Prev(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* RawNext(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* RawNext(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Tail();
  struct SIMPLETEXTUREREGHASH* Tail();
  void TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >::UnlinkAll();
  void UnlinkNode(struct SIMPLETEXTUREREGHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLEFRAMEREGHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >&);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::InitializeTerminator();
  class TSLink<SIMPLEFRAMEREGHASH>* TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFRAMEREGHASH* ptr);
  void SetLinkOffset(int);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >(int);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >(class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >&);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >();
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::~TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >();
  class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >& operator=(class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >&);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >*, unsigned long, struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* DeleteNode(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Head();
  struct SIMPLEFRAMEREGHASH* Head();
  int IsEmpty();
  int IsLinked(struct SIMPLEFRAMEREGHASH*);
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFRAMEREGHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct SIMPLEFRAMEREGHASH* existingptr);
  struct SIMPLEFRAMEREGHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct SIMPLEFRAMEREGHASH* Next(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Next(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Prev(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Prev(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* RawNext(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* RawNext(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Tail();
  struct SIMPLEFRAMEREGHASH* Tail();
  void TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >::UnlinkAll();
  void UnlinkNode(struct SIMPLEFRAMEREGHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CLayoutFrame> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >&);
  void InitializeTerminator();
  class TSLink<CLayoutFrame>* TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* ptr);
  void SetLinkOffset(int);
  void TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >(int);
  void TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >(class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >&);
  void TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >();
  void ~TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >();
  class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >& operator=(class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >*, unsigned long, class CLayoutFrame*);
  class CLayoutFrame* DeleteNode(class CLayoutFrame*);
  class CLayoutFrame* Head();
  class CLayoutFrame* Head();
  int IsEmpty();
  int IsLinked(class CLayoutFrame*);
  void TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CLayoutFrame* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CLayoutFrame* existingptr);
  class CLayoutFrame* NewNode(unsigned long, unsigned long, unsigned long);
  class CLayoutFrame* Next(class CLayoutFrame*);
  class CLayoutFrame* Next(class CLayoutFrame*);
  class CLayoutFrame* Prev(class CLayoutFrame*);
  class CLayoutFrame* Prev(class CLayoutFrame*);
  class CLayoutFrame* RawNext(class CLayoutFrame*);
  class CLayoutFrame* RawNext(class CLayoutFrame*);
  class CLayoutFrame* Tail();
  class CLayoutFrame* Tail();
  void UnlinkAll();
  void UnlinkNode(class CLayoutFrame*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CRenderBatch> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >&);
  void InitializeTerminator();
  class TSLink<CRenderBatch>* TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CRenderBatch* ptr);
  void SetLinkOffset(int);
  void TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >(int);
  void TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >(class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >&);
  void TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >();
  void TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >::~TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >();
  class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >& operator=(class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >*, unsigned long, class CRenderBatch*);
  class CRenderBatch* DeleteNode(class CRenderBatch*);
  class CRenderBatch* Head();
  class CRenderBatch* Head();
  int IsEmpty();
  int IsLinked(class CRenderBatch*);
  void LinkNode(class CRenderBatch*, unsigned long, class CRenderBatch*);
  class CRenderBatch* NewNode(unsigned long, unsigned long, unsigned long);
  class CRenderBatch* Next(class CRenderBatch*);
  class CRenderBatch* Next(class CRenderBatch*);
  class CRenderBatch* Prev(class CRenderBatch*);
  class CRenderBatch* Prev(class CRenderBatch*);
  class CRenderBatch* RawNext(class CRenderBatch*);
  class CRenderBatch* RawNext(class CRenderBatch*);
  class CRenderBatch* Tail();
  class CRenderBatch* Tail();
  void TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >::UnlinkAll();
  void UnlinkNode(class CRenderBatch*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLEFRAMENODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >&);
  void InitializeTerminator();
  class TSLink<SIMPLEFRAMENODE>* TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFRAMENODE* ptr);
  void SetLinkOffset(int);
  void TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >(int);
  void TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >(class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >&);
  void TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >();
  void ~TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >();
  class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >& operator=(class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<SIMPLEFRAMENODE,TSGetLink<SIMPLEFRAMENODE> >*, unsigned long, struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* DeleteNode(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* Head();
  struct SIMPLEFRAMENODE* Head();
  int IsEmpty();
  int IsLinked(struct SIMPLEFRAMENODE*);
  void LinkNode(struct SIMPLEFRAMENODE*, unsigned long, struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct SIMPLEFRAMENODE* Next(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* Next(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* Prev(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* Prev(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* RawNext(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* RawNext(struct SIMPLEFRAMENODE*);
  struct SIMPLEFRAMENODE* Tail();
  struct SIMPLEFRAMENODE* Tail();
  void UnlinkAll();
  void UnlinkNode(struct SIMPLEFRAMENODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSimpleHyperlinkButton> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >&);
  void InitializeTerminator();
  class TSLink<CSimpleHyperlinkButton>* TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSimpleHyperlinkButton* ptr);
  void SetLinkOffset(int);
  void TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >(int);
  void TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >(class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >&);
  void TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >();
  void ~TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >();
  class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >& operator=(class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >*, unsigned long, class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* DeleteNode(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* Head();
  class CSimpleHyperlinkButton* Head();
  int IsEmpty();
  int IsLinked(class CSimpleHyperlinkButton*);
  void LinkNode(class CSimpleHyperlinkButton*, unsigned long, class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* NewNode(unsigned long, unsigned long, unsigned long);
  class CSimpleHyperlinkButton* Next(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* Next(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* Prev(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* Prev(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* RawNext(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* RawNext(class CSimpleHyperlinkButton*);
  class CSimpleHyperlinkButton* Tail();
  class CSimpleHyperlinkButton* Tail();
  void UnlinkAll();
  void UnlinkNode(class CSimpleHyperlinkButton*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<REGIONNODE,TSGetLink<REGIONNODE> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<REGIONNODE> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<REGIONNODE,TSGetLink<REGIONNODE> >&);
  void InitializeTerminator();
  class TSLink<REGIONNODE>* TSList<REGIONNODE,TSGetLink<REGIONNODE> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REGIONNODE* ptr);
  void SetLinkOffset(int);
  void TSList<REGIONNODE,TSGetLink<REGIONNODE> >(int);
  void TSList<REGIONNODE,TSGetLink<REGIONNODE> >(class TSList<REGIONNODE,TSGetLink<REGIONNODE> >&);
  void TSList<REGIONNODE,TSGetLink<REGIONNODE> >();
  void ~TSList<REGIONNODE,TSGetLink<REGIONNODE> >();
  class TSList<REGIONNODE,TSGetLink<REGIONNODE> >& operator=(class TSList<REGIONNODE,TSGetLink<REGIONNODE> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<REGIONNODE,TSGetLink<REGIONNODE> >*, unsigned long, struct REGIONNODE*);
  struct REGIONNODE* DeleteNode(struct REGIONNODE*);
  struct REGIONNODE* Head();
  struct REGIONNODE* Head();
  int IsEmpty();
  int IsLinked(struct REGIONNODE*);
  void TSList<REGIONNODE,TSGetLink<REGIONNODE> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct REGIONNODE* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct REGIONNODE* existingptr);
  struct REGIONNODE* NewNode(unsigned long, unsigned long, unsigned long);
  struct REGIONNODE* Next(struct REGIONNODE*);
  struct REGIONNODE* Next(struct REGIONNODE*);
  struct REGIONNODE* Prev(struct REGIONNODE*);
  struct REGIONNODE* Prev(struct REGIONNODE*);
  struct REGIONNODE* RawNext(struct REGIONNODE*);
  struct REGIONNODE* RawNext(struct REGIONNODE*);
  struct REGIONNODE* Tail();
  struct REGIONNODE* Tail();
  void TSList<REGIONNODE,TSGetLink<REGIONNODE> >::UnlinkAll();
  void UnlinkNode(struct REGIONNODE*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EvtThread,TSGetLink<EvtThread> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EvtThread> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EvtThread,TSGetLink<EvtThread> >&);
  void InitializeTerminator();
  class TSLink<EvtThread>* TSList<EvtThread,TSGetLink<EvtThread> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EvtThread* ptr);
  void SetLinkOffset(int);
  void TSList<EvtThread,TSGetLink<EvtThread> >(int);
  void TSList<EvtThread,TSGetLink<EvtThread> >(class TSList<EvtThread,TSGetLink<EvtThread> >&);
  void TSList<EvtThread,TSGetLink<EvtThread> >();
  void ~TSList<EvtThread,TSGetLink<EvtThread> >();
  class TSList<EvtThread,TSGetLink<EvtThread> >& operator=(class TSList<EvtThread,TSGetLink<EvtThread> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EvtThread,TSGetLink<EvtThread> >*, unsigned long, struct EvtThread*);
  struct EvtThread* DeleteNode(struct EvtThread*);
  struct EvtThread* Head();
  struct EvtThread* Head();
  int IsEmpty();
  int IsLinked(struct EvtThread*);
  void LinkNode(struct EvtThread*, unsigned long, struct EvtThread*);
  struct EvtThread* NewNode(unsigned long, unsigned long, unsigned long);
  struct EvtThread* Next(struct EvtThread*);
  struct EvtThread* Next(struct EvtThread*);
  struct EvtThread* Prev(struct EvtThread*);
  struct EvtThread* Prev(struct EvtThread*);
  struct EvtThread* RawNext(struct EvtThread*);
  struct EvtThread* RawNext(struct EvtThread*);
  struct EvtThread* Tail();
  struct EvtThread* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EvtThread*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EvtContext,TSGetLink<EvtContext> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EvtContext> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EvtContext,TSGetLink<EvtContext> >&);
  void InitializeTerminator();
  class TSLink<EvtContext>* TSList<EvtContext,TSGetLink<EvtContext> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EvtContext* ptr);
  void SetLinkOffset(int);
  void TSList<EvtContext,TSGetLink<EvtContext> >(int);
  void TSList<EvtContext,TSGetLink<EvtContext> >(class TSList<EvtContext,TSGetLink<EvtContext> >&);
  void TSList<EvtContext,TSGetLink<EvtContext> >();
  void ~TSList<EvtContext,TSGetLink<EvtContext> >();
  class TSList<EvtContext,TSGetLink<EvtContext> >& operator=(class TSList<EvtContext,TSGetLink<EvtContext> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EvtContext,TSGetLink<EvtContext> >*, unsigned long, struct EvtContext*);
  struct EvtContext* DeleteNode(struct EvtContext*);
  struct EvtContext* Head();
  struct EvtContext* Head();
  int IsEmpty();
  int IsLinked(struct EvtContext*);
  void TSList<EvtContext,TSGetLink<EvtContext> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EvtContext* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct EvtContext* existingptr);
  struct EvtContext* NewNode(unsigned long, unsigned long, unsigned long);
  struct EvtContext* Next(struct EvtContext*);
  struct EvtContext* Next(struct EvtContext*);
  struct EvtContext* Prev(struct EvtContext*);
  struct EvtContext* Prev(struct EvtContext*);
  struct EvtContext* RawNext(struct EvtContext*);
  struct EvtContext* RawNext(struct EvtContext*);
  struct EvtContext* Tail();
  struct EvtContext* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EvtContext*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EvtKeyDown> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >&);
  void TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >::InitializeTerminator();
  class TSLink<EvtKeyDown>* TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EvtKeyDown* ptr);
  void SetLinkOffset(int);
  void TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >(int);
  void TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >(class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >&);
  void TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >();
  void TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >::~TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >();
  class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >& operator=(class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >*, unsigned long, struct EvtKeyDown*);
  struct EvtKeyDown* DeleteNode(struct EvtKeyDown*);
  struct EvtKeyDown* Head();
  struct EvtKeyDown* Head();
  int IsEmpty();
  int IsLinked(struct EvtKeyDown*);
  void LinkNode(struct EvtKeyDown*, unsigned long, struct EvtKeyDown*);
  struct EvtKeyDown* NewNode(unsigned long, unsigned long, unsigned long);
  struct EvtKeyDown* Next(struct EvtKeyDown*);
  struct EvtKeyDown* Next(struct EvtKeyDown*);
  struct EvtKeyDown* Prev(struct EvtKeyDown*);
  struct EvtKeyDown* Prev(struct EvtKeyDown*);
  struct EvtKeyDown* RawNext(struct EvtKeyDown*);
  struct EvtKeyDown* RawNext(struct EvtKeyDown*);
  struct EvtKeyDown* Tail();
  struct EvtKeyDown* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EvtKeyDown*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EvtHandler> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >&);
  void TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >::InitializeTerminator();
  class TSLink<EvtHandler>* TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EvtHandler* ptr);
  void SetLinkOffset(int);
  void TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >(int);
  void TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >(class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >&);
  void TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >::TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >();
  void ~TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >();
  class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >& operator=(class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >*, unsigned long, struct EvtHandler*);
  struct EvtHandler* DeleteNode(struct EvtHandler*);
  struct EvtHandler* Head();
  struct EvtHandler* Head();
  int IsEmpty();
  int IsLinked(struct EvtHandler*);
  void LinkNode(struct EvtHandler*, unsigned long, struct EvtHandler*);
  struct EvtHandler* NewNode(unsigned long, unsigned long, unsigned long);
  struct EvtHandler* Next(struct EvtHandler*);
  struct EvtHandler* Next(struct EvtHandler*);
  struct EvtHandler* Prev(struct EvtHandler*);
  struct EvtHandler* Prev(struct EvtHandler*);
  struct EvtHandler* RawNext(struct EvtHandler*);
  struct EvtHandler* RawNext(struct EvtHandler*);
  struct EvtHandler* Tail();
  struct EvtHandler* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EvtHandler*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EvtMessage> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >&);
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >::InitializeTerminator();
  class TSLink<EvtMessage>* Link(struct EvtMessage*);
  void SetLinkOffset(int);
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >(int);
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >(class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >&);
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >();
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >::~TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >();
  class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >& operator=(class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >::Combine(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >* list, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct EvtMessage* existingptr);
  struct EvtMessage* DeleteNode(struct EvtMessage*);
  struct EvtMessage* Head();
  struct EvtMessage* Head();
  int IsEmpty();
  int IsLinked(struct EvtMessage*);
  void LinkNode(struct EvtMessage*, unsigned long, struct EvtMessage*);
  struct EvtMessage* NewNode(unsigned long, unsigned long, unsigned long);
  struct EvtMessage* Next(struct EvtMessage*);
  struct EvtMessage* Next(struct EvtMessage*);
  struct EvtMessage* Prev(struct EvtMessage*);
  struct EvtMessage* Prev(struct EvtMessage*);
  struct EvtMessage* RawNext(struct EvtMessage*);
  struct EvtMessage* RawNext(struct EvtMessage*);
  struct EvtMessage* Tail();
  struct EvtMessage* Tail();
  void UnlinkAll();
  void UnlinkNode(struct EvtMessage*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<EventReg,TSGetExplicitLink<EventReg> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EventReg> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<EventReg,TSGetExplicitLink<EventReg> >&);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >::InitializeTerminator();
  class TSLink<EventReg>* TSList<EventReg,TSGetExplicitLink<EventReg> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EventReg* ptr);
  void SetLinkOffset(int);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >(int);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >(class TSList<EventReg,TSGetExplicitLink<EventReg> >&);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >();
  void TSList<EventReg,TSGetExplicitLink<EventReg> >::~TSList<EventReg,TSGetExplicitLink<EventReg> >();
  class TSList<EventReg,TSGetExplicitLink<EventReg> >& operator=(class TSList<EventReg,TSGetExplicitLink<EventReg> >&);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<EventReg,TSGetExplicitLink<EventReg> >*, unsigned long, struct EventReg*);
  struct EventReg* DeleteNode(struct EventReg*);
  struct EventReg* Head();
  struct EventReg* Head();
  int IsEmpty();
  int IsLinked(struct EventReg*);
  void TSList<EventReg,TSGetExplicitLink<EventReg> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EventReg* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct EventReg* existingptr);
  struct EventReg* NewNode(unsigned long, unsigned long, unsigned long);
  struct EventReg* Next(struct EventReg*);
  struct EventReg* Next(struct EventReg*);
  struct EventReg* Prev(struct EventReg*);
  struct EventReg* Prev(struct EventReg*);
  struct EventReg* RawNext(struct EventReg*);
  struct EventReg* RawNext(struct EventReg*);
  struct EventReg* Tail();
  struct EventReg* Tail();
  void TSList<EventReg,TSGetExplicitLink<EventReg> >::UnlinkAll();
  void UnlinkNode(struct EventReg*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UncachableNode> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >&);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::InitializeTerminator();
  class TSLink<UncachableNode>* TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UncachableNode* ptr);
  void SetLinkOffset(int);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >(int);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >(class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >&);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >();
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::~TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >();
  class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >& operator=(class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >&);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >*, unsigned long, struct UncachableNode*);
  struct UncachableNode* DeleteNode(struct UncachableNode*);
  struct UncachableNode* Head();
  struct UncachableNode* Head();
  int IsEmpty();
  int IsLinked(struct UncachableNode*);
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UncachableNode* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct UncachableNode* existingptr);
  struct UncachableNode* NewNode(unsigned long, unsigned long, unsigned long);
  struct UncachableNode* Next(struct UncachableNode*);
  struct UncachableNode* Next(struct UncachableNode*);
  struct UncachableNode* Prev(struct UncachableNode*);
  struct UncachableNode* Prev(struct UncachableNode*);
  struct UncachableNode* RawNext(struct UncachableNode*);
  struct UncachableNode* RawNext(struct UncachableNode*);
  struct UncachableNode* Tail();
  struct UncachableNode* Tail();
  void TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >::UnlinkAll();
  void UnlinkNode(struct UncachableNode*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PrefetchNode> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >&);
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >::InitializeTerminator();
  class TSLink<PrefetchNode>* TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PrefetchNode* ptr);
  void SetLinkOffset(int);
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >(int);
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >(class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >&);
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >();
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >::~TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >();
  class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >& operator=(class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >&);
  void ChangeLinkOffset(int);
  void Clear();
  void Combine(class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >*, unsigned long, struct PrefetchNode*);
  struct PrefetchNode* DeleteNode(struct PrefetchNode*);
  struct PrefetchNode* Head();
  struct PrefetchNode* Head();
  int IsEmpty();
  int IsLinked(struct PrefetchNode*);
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PrefetchNode* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct PrefetchNode* existingptr);
  struct PrefetchNode* NewNode(unsigned long, unsigned long, unsigned long);
  struct PrefetchNode* Next(struct PrefetchNode*);
  struct PrefetchNode* Next(struct PrefetchNode*);
  struct PrefetchNode* Prev(struct PrefetchNode*);
  struct PrefetchNode* Prev(struct PrefetchNode*);
  struct PrefetchNode* RawNext(struct PrefetchNode*);
  struct PrefetchNode* RawNext(struct PrefetchNode*);
  struct PrefetchNode* Tail();
  struct PrefetchNode* Tail();
  void TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >::UnlinkAll();
  void UnlinkNode(struct PrefetchNode*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CStringRep,TSGetExplicitLink<CStringRep> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CStringRep> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CStringRep,TSGetExplicitLink<CStringRep> >&);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::InitializeTerminator();
  class TSLink<CStringRep>* TSList<CStringRep,TSGetExplicitLink<CStringRep> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStringRep* ptr);
  void SetLinkOffset(int);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >(int);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >(class TSList<CStringRep,TSGetExplicitLink<CStringRep> >&);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::TSList<CStringRep,TSGetExplicitLink<CStringRep> >();
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::~TSList<CStringRep,TSGetExplicitLink<CStringRep> >();
  class TSList<CStringRep,TSGetExplicitLink<CStringRep> >& operator=(class TSList<CStringRep,TSGetExplicitLink<CStringRep> >&);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<CStringRep,TSGetExplicitLink<CStringRep> >*, unsigned long, class CStringRep*);
  class CStringRep* DeleteNode(class CStringRep*);
  class CStringRep* Head();
  class CStringRep* Head();
  int IsEmpty();
  int IsLinked(class CStringRep*);
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStringRep* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ class CStringRep* existingptr);
  class CStringRep* NewNode(unsigned long, unsigned long, unsigned long);
  class CStringRep* Next(class CStringRep*);
  class CStringRep* Next(class CStringRep*);
  class CStringRep* Prev(class CStringRep*);
  class CStringRep* Prev(class CStringRep*);
  class CStringRep* RawNext(class CStringRep*);
  class CStringRep* RawNext(class CStringRep*);
  class CStringRep* Tail();
  class CStringRep* Tail();
  void TSList<CStringRep,TSGetExplicitLink<CStringRep> >::UnlinkAll();
  void UnlinkNode(class CStringRep*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ANIMHASH> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >&);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::InitializeTerminator();
  class TSLink<ANIMHASH>* TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMHASH* ptr);
  void SetLinkOffset(int);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >(int);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >(class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >&);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >();
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::~TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >();
  class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >& operator=(class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >&);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >*, unsigned long, struct ANIMHASH*);
  struct ANIMHASH* DeleteNode(struct ANIMHASH*);
  struct ANIMHASH* Head();
  struct ANIMHASH* Head();
  int IsEmpty();
  int IsLinked(struct ANIMHASH*);
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct ANIMHASH* existingptr);
  struct ANIMHASH* NewNode(unsigned long, unsigned long, unsigned long);
  struct ANIMHASH* Next(struct ANIMHASH*);
  struct ANIMHASH* Next(struct ANIMHASH*);
  struct ANIMHASH* Prev(struct ANIMHASH*);
  struct ANIMHASH* Prev(struct ANIMHASH*);
  struct ANIMHASH* RawNext(struct ANIMHASH*);
  struct ANIMHASH* RawNext(struct ANIMHASH*);
  struct ANIMHASH* Tail();
  struct ANIMHASH* Tail();
  void TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >::UnlinkAll();
  void UnlinkNode(struct ANIMHASH*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ int m_linkoffset;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CAnimNameHash> m_terminator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CopyConstructor(class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >&);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::InitializeTerminator();
  class TSLink<CAnimNameHash>* TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CAnimNameHash* ptr);
  void SetLinkOffset(int);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >(int);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >(class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >&);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >();
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::~TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >();
  class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >& operator=(class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >&);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::ChangeLinkOffset(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkoffset);
  void Clear();
  void Combine(class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >*, unsigned long, struct CAnimNameHash*);
  struct CAnimNameHash* DeleteNode(struct CAnimNameHash*);
  struct CAnimNameHash* Head();
  struct CAnimNameHash* Head();
  int IsEmpty();
  int IsLinked(struct CAnimNameHash*);
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::LinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CAnimNameHash* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long linktype, /*<regrel ebp+0x10>*/ /*|0x4|*/ struct CAnimNameHash* existingptr);
  struct CAnimNameHash* NewNode(unsigned long, unsigned long, unsigned long);
  struct CAnimNameHash* Next(struct CAnimNameHash*);
  struct CAnimNameHash* Next(struct CAnimNameHash*);
  struct CAnimNameHash* Prev(struct CAnimNameHash*);
  struct CAnimNameHash* Prev(struct CAnimNameHash*);
  struct CAnimNameHash* RawNext(struct CAnimNameHash*);
  struct CAnimNameHash* RawNext(struct CAnimNameHash*);
  struct CAnimNameHash* Tail();
  struct CAnimNameHash* Tail();
  void TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >::UnlinkAll();
  void UnlinkNode(struct CAnimNameHash*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

}

{ // TSExplicitList - 163 ( wowae )

class TSExplicitList<CMapObjDefGroup,8> : class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjDefGroup,8>(class TSExplicitList<CMapObjDefGroup,8>&);
  void TSExplicitList<CMapObjDefGroup,8>();
  class TSExplicitList<CMapObjDefGroup,8>& operator=(class TSExplicitList<CMapObjDefGroup,8>&);
  void ~TSExplicitList<CMapObjDefGroup,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<EvtKeyDown,0> : class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<EvtKeyDown,TSGetExplicitLink<EvtKeyDown> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<EvtKeyDown,0>(class TSExplicitList<EvtKeyDown,0>&);
  void TSExplicitList<EvtKeyDown,0>();
  class TSExplicitList<EvtKeyDown,0>& operator=(class TSExplicitList<EvtKeyDown,0>&);
  void ~TSExplicitList<EvtKeyDown,0>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CSimpleFrame,668> : class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CSimpleFrame,TSGetExplicitLink<CSimpleFrame> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CSimpleFrame,668>(class TSExplicitList<CSimpleFrame,668>&);
  void TSExplicitList<CSimpleFrame,668>();
  class TSExplicitList<CSimpleFrame,668>& operator=(class TSExplicitList<CSimpleFrame,668>&);
  void ~TSExplicitList<CSimpleFrame,668>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CSimpleHyperlinkButton,760> : class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CSimpleHyperlinkButton,TSGetExplicitLink<CSimpleHyperlinkButton> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CSimpleHyperlinkButton,760>(class TSExplicitList<CSimpleHyperlinkButton,760>&);
  void TSExplicitList<CSimpleHyperlinkButton,760>();
  class TSExplicitList<CSimpleHyperlinkButton,760>& operator=(class TSExplicitList<CSimpleHyperlinkButton,760>&);
  void ~TSExplicitList<CSimpleHyperlinkButton,760>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::LOOPCONN::INPUT,0> : class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::LOOPCONN::INPUT,0>(class TSExplicitList<OsNet::LOOPCONN::INPUT,0>&);
  void TSExplicitList<OsNet::LOOPCONN::INPUT,0>();
  class TSExplicitList<OsNet::LOOPCONN::INPUT,0>& operator=(class TSExplicitList<OsNet::LOOPCONN::INPUT,0>&);
  void ~TSExplicitList<OsNet::LOOPCONN::INPUT,0>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20> : class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>(class TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>&);
  void TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>();
  class TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>& operator=(class TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMovementData,0> : class TSList<CMovementData,TSGetExplicitLink<CMovementData> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMovementData,TSGetExplicitLink<CMovementData> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMovementData,0>(class TSExplicitList<CMovementData,0>&);
  void TSExplicitList<CMovementData,0>();
  class TSExplicitList<CMovementData,0>& operator=(class TSExplicitList<CMovementData,0>&);
  void ~TSExplicitList<CMovementData,0>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CACHEENTRY,32> : class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CACHEENTRY,32>(class TSExplicitList<CACHEENTRY,32>&);
  void TSExplicitList<CACHEENTRY,32>();
  class TSExplicitList<CACHEENTRY,32>& operator=(class TSExplicitList<CACHEENTRY,32>&);
  void ~TSExplicitList<CACHEENTRY,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxBuf,-572662307> : class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxBuf,-572662307>(class TSExplicitList<CGxBuf,-572662307>&);
  void TSExplicitList<CGxBuf,-572662307>();
  class TSExplicitList<CGxBuf,-572662307>& operator=(class TSExplicitList<CGxBuf,-572662307>&);
  void ~TSExplicitList<CGxBuf,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<C_OBJECTHASH,7656> : class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<C_OBJECTHASH,7656>(class TSExplicitList<C_OBJECTHASH,7656>&);
  void TSExplicitList<C_OBJECTHASH,7656>();
  class TSExplicitList<C_OBJECTHASH,7656>& operator=(class TSExplicitList<C_OBJECTHASH,7656>&);
  void ~TSExplicitList<C_OBJECTHASH,7656>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<C_OBJECTHASH,7648> : class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<C_OBJECTHASH,7648>(class TSExplicitList<C_OBJECTHASH,7648>&);
  void TSExplicitList<C_OBJECTHASH,7648>();
  class TSExplicitList<C_OBJECTHASH,7648>& operator=(class TSExplicitList<C_OBJECTHASH,7648>&);
  void ~TSExplicitList<C_OBJECTHASH,7648>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<WowConnection,188> : class TSList<WowConnection,TSGetExplicitLink<WowConnection> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<WowConnection,TSGetExplicitLink<WowConnection> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<WowConnection,188>(class TSExplicitList<WowConnection,188>&);
  void TSExplicitList<WowConnection,188>();
  class TSExplicitList<WowConnection,188>& operator=(class TSExplicitList<WowConnection,188>&);
  void ~TSExplicitList<WowConnection,188>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxString,16> : class TSList<CGxString,TSGetExplicitLink<CGxString> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxString,TSGetExplicitLink<CGxString> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxString,16>(class TSExplicitList<CGxString,16>&);
  void TSExplicitList<CGxString,16>();
  class TSExplicitList<CGxString,16>& operator=(class TSExplicitList<CGxString,16>&);
  void ~TSExplicitList<CGxString,16>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SPLATDATA,68> : class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SPLATDATA,68>(class TSExplicitList<SPLATDATA,68>&);
  void TSExplicitList<SPLATDATA,68>();
  class TSExplicitList<SPLATDATA,68>& operator=(class TSExplicitList<SPLATDATA,68>&);
  void ~TSExplicitList<SPLATDATA,68>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ONESHOTEFFECTNODE,4> : class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ONESHOTEFFECTNODE,TSGetExplicitLink<ONESHOTEFFECTNODE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ONESHOTEFFECTNODE,4>(class TSExplicitList<ONESHOTEFFECTNODE,4>&);
  void TSExplicitList<ONESHOTEFFECTNODE,4>();
  class TSExplicitList<ONESHOTEFFECTNODE,4>& operator=(class TSExplicitList<ONESHOTEFFECTNODE,4>&);
  void ~TSExplicitList<ONESHOTEFFECTNODE,4>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMovementData,8> : class TSList<CMovementData,TSGetExplicitLink<CMovementData> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMovementData,TSGetExplicitLink<CMovementData> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMovementData,8>(class TSExplicitList<CMovementData,8>&);
  void TSExplicitList<CMovementData,8>();
  class TSExplicitList<CMovementData,8>& operator=(class TSExplicitList<CMovementData,8>&);
  void ~TSExplicitList<CMovementData,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxBuf,0> : class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxBuf,TSGetExplicitLink<CGxBuf> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxBuf,0>(class TSExplicitList<CGxBuf,0>&);
  void TSExplicitList<CGxBuf,0>();
  class TSExplicitList<CGxBuf,0>& operator=(class TSExplicitList<CGxBuf,0>&);
  void ~TSExplicitList<CGxBuf,0>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObjDef,344> : class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjDef,344>(class TSExplicitList<CMapObjDef,344>&);
  void TSExplicitList<CMapObjDef,344>();
  class TSExplicitList<CMapObjDef,344>& operator=(class TSExplicitList<CMapObjDef,344>&);
  void ~TSExplicitList<CMapObjDef,344>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CHARCODEDESC,32> : class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CHARCODEDESC,32>(class TSExplicitList<CHARCODEDESC,32>&);
  void TSExplicitList<CHARCODEDESC,32>();
  class TSExplicitList<CHARCODEDESC,32>& operator=(class TSExplicitList<CHARCODEDESC,32>&);
  void ~TSExplicitList<CHARCODEDESC,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxString,8> : class TSList<CGxString,TSGetExplicitLink<CGxString> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxString,TSGetExplicitLink<CGxString> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxString,8>(class TSExplicitList<CGxString,8>&);
  void TSExplicitList<CGxString,8>();
  class TSExplicitList<CGxString,8>& operator=(class TSExplicitList<CGxString,8>&);
  void ~TSExplicitList<CGxString,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> : class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ITEMCOOLDOWNHASHNODE,TSGetExplicitLink<ITEMCOOLDOWNHASHNODE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>&);
  void TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>::TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>& operator=(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>&);
  void ~TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<PLAYERNAMEDESC,8> : class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<PLAYERNAMEDESC,TSGetExplicitLink<PLAYERNAMEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<PLAYERNAMEDESC,8>(class TSExplicitList<PLAYERNAMEDESC,8>&);
  void TSExplicitList<PLAYERNAMEDESC,8>();
  class TSExplicitList<PLAYERNAMEDESC,8>& operator=(class TSExplicitList<PLAYERNAMEDESC,8>&);
  void ~TSExplicitList<PLAYERNAMEDESC,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<WORLDTEXTSTRING,384> : class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<WORLDTEXTSTRING,TSGetExplicitLink<WORLDTEXTSTRING> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<WORLDTEXTSTRING,384>(class TSExplicitList<WORLDTEXTSTRING,384>&);
  void TSExplicitList<WORLDTEXTSTRING,384>();
  class TSExplicitList<WORLDTEXTSTRING,384>& operator=(class TSExplicitList<WORLDTEXTSTRING,384>&);
  void ~TSExplicitList<WORLDTEXTSTRING,384>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<MINIMAPMD5NAME,-572662307> : class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<MINIMAPMD5NAME,TSGetExplicitLink<MINIMAPMD5NAME> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<MINIMAPMD5NAME,-572662307>(class TSExplicitList<MINIMAPMD5NAME,-572662307>&);
  void TSExplicitList<MINIMAPMD5NAME,-572662307>();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>& operator=(class TSExplicitList<MINIMAPMD5NAME,-572662307>&);
  void ~TSExplicitList<MINIMAPMD5NAME,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<AREAHASHOBJECT,-572662307> : class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<AREAHASHOBJECT,TSGetExplicitLink<AREAHASHOBJECT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<AREAHASHOBJECT,-572662307>(class TSExplicitList<AREAHASHOBJECT,-572662307>&);
  void TSExplicitList<AREAHASHOBJECT,-572662307>::TSExplicitList<AREAHASHOBJECT,-572662307>();
  class TSExplicitList<AREAHASHOBJECT,-572662307>& operator=(class TSExplicitList<AREAHASHOBJECT,-572662307>&);
  void ~TSExplicitList<AREAHASHOBJECT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CChunkLiquid,808> : class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CChunkLiquid,808>(class TSExplicitList<CChunkLiquid,808>&);
  void TSExplicitList<CChunkLiquid,808>::TSExplicitList<CChunkLiquid,808>();
  class TSExplicitList<CChunkLiquid,808>& operator=(class TSExplicitList<CChunkLiquid,808>&);
  void ~TSExplicitList<CChunkLiquid,808>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapEntity,216> : class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapEntity,216>(class TSExplicitList<CMapEntity,216>&);
  void TSExplicitList<CMapEntity,216>();
  class TSExplicitList<CMapEntity,216>& operator=(class TSExplicitList<CMapEntity,216>&);
  void ~TSExplicitList<CMapEntity,216>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObjDefGroup,196> : class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjDefGroup,TSGetExplicitLink<CMapObjDefGroup> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjDefGroup,196>(class TSExplicitList<CMapObjDefGroup,196>&);
  void TSExplicitList<CMapObjDefGroup,196>();
  class TSExplicitList<CMapObjDefGroup,196>& operator=(class TSExplicitList<CMapObjDefGroup,196>&);
  void ~TSExplicitList<CMapObjDefGroup,196>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapDoodadDef,344> : class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapDoodadDef,344>(class TSExplicitList<CMapDoodadDef,344>&);
  void TSExplicitList<CMapDoodadDef,344>();
  class TSExplicitList<CMapDoodadDef,344>& operator=(class TSExplicitList<CMapDoodadDef,344>&);
  void ~TSExplicitList<CMapDoodadDef,344>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapChunk,156> : class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapChunk,156>(class TSExplicitList<CMapChunk,156>&);
  void TSExplicitList<CMapChunk,156>::TSExplicitList<CMapChunk,156>();
  class TSExplicitList<CMapChunk,156>& operator=(class TSExplicitList<CMapChunk,156>&);
  void ~TSExplicitList<CMapChunk,156>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapAreaLow,2240> : class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapAreaLow,TSGetExplicitLink<CMapAreaLow> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapAreaLow,2240>(class TSExplicitList<CMapAreaLow,2240>&);
  void TSExplicitList<CMapAreaLow,2240>();
  class TSExplicitList<CMapAreaLow,2240>& operator=(class TSExplicitList<CMapAreaLow,2240>&);
  void ~TSExplicitList<CMapAreaLow,2240>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapSoundEmitter,76> : class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapSoundEmitter,TSGetExplicitLink<CMapSoundEmitter> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapSoundEmitter,76>(class TSExplicitList<CMapSoundEmitter,76>&);
  void TSExplicitList<CMapSoundEmitter,76>();
  class TSExplicitList<CMapSoundEmitter,76>& operator=(class TSExplicitList<CMapSoundEmitter,76>&);
  void ~TSExplicitList<CMapSoundEmitter,76>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObjDef,8> : class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjDef,8>(class TSExplicitList<CMapObjDef,8>&);
  void TSExplicitList<CMapObjDef,8>();
  class TSExplicitList<CMapObjDef,8>& operator=(class TSExplicitList<CMapObjDef,8>&);
  void ~TSExplicitList<CMapObjDef,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapDoodadDef,8> : class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapDoodadDef,8>(class TSExplicitList<CMapDoodadDef,8>&);
  void TSExplicitList<CMapDoodadDef,8>();
  class TSExplicitList<CMapDoodadDef,8>& operator=(class TSExplicitList<CMapDoodadDef,8>&);
  void ~TSExplicitList<CMapDoodadDef,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CChunkLiquid,816> : class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CChunkLiquid,TSGetExplicitLink<CChunkLiquid> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CChunkLiquid,816>(class TSExplicitList<CChunkLiquid,816>&);
  void TSExplicitList<CChunkLiquid,816>();
  class TSExplicitList<CChunkLiquid,816>& operator=(class TSExplicitList<CChunkLiquid,816>&);
  void ~TSExplicitList<CChunkLiquid,816>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObjDef,-572662307> : class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjDef,TSGetExplicitLink<CMapObjDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjDef,-572662307>(class TSExplicitList<CMapObjDef,-572662307>&);
  void TSExplicitList<CMapObjDef,-572662307>::TSExplicitList<CMapObjDef,-572662307>();
  class TSExplicitList<CMapObjDef,-572662307>& operator=(class TSExplicitList<CMapObjDef,-572662307>&);
  void ~TSExplicitList<CMapObjDef,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapChunk,8> : class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapChunk,TSGetExplicitLink<CMapChunk> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapChunk,8>(class TSExplicitList<CMapChunk,8>&);
  void TSExplicitList<CMapChunk,8>();
  class TSExplicitList<CMapChunk,8>& operator=(class TSExplicitList<CMapChunk,8>&);
  void ~TSExplicitList<CMapChunk,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapArea,8> : class TSList<CMapArea,TSGetExplicitLink<CMapArea> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapArea,TSGetExplicitLink<CMapArea> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapArea,8>(class TSExplicitList<CMapArea,8>&);
  void TSExplicitList<CMapArea,8>();
  class TSExplicitList<CMapArea,8>& operator=(class TSExplicitList<CMapArea,8>&);
  void ~TSExplicitList<CMapArea,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapBaseObjLink,16> : class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapBaseObjLink,16>(class TSExplicitList<CMapBaseObjLink,16>&);
  void TSExplicitList<CMapBaseObjLink,16>();
  class TSExplicitList<CMapBaseObjLink,16>& operator=(class TSExplicitList<CMapBaseObjLink,16>&);
  void ~TSExplicitList<CMapBaseObjLink,16>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObj,420> : class TSList<CMapObj,TSGetExplicitLink<CMapObj> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObj,TSGetExplicitLink<CMapObj> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObj,420>(class TSExplicitList<CMapObj,420>&);
  void TSExplicitList<CMapObj,420>();
  class TSExplicitList<CMapObj,420>& operator=(class TSExplicitList<CMapObj,420>&);
  void ~TSExplicitList<CMapObj,420>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapEntity,8> : class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapEntity,TSGetExplicitLink<CMapEntity> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapEntity,8>(class TSExplicitList<CMapEntity,8>&);
  void TSExplicitList<CMapEntity,8>();
  class TSExplicitList<CMapEntity,8>& operator=(class TSExplicitList<CMapEntity,8>&);
  void ~TSExplicitList<CMapEntity,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapDoodadDef,-572662307> : class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapDoodadDef,TSGetExplicitLink<CMapDoodadDef> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapDoodadDef,-572662307>(class TSExplicitList<CMapDoodadDef,-572662307>&);
  void TSExplicitList<CMapDoodadDef,-572662307>::TSExplicitList<CMapDoodadDef,-572662307>();
  class TSExplicitList<CMapDoodadDef,-572662307>& operator=(class TSExplicitList<CMapDoodadDef,-572662307>&);
  void ~TSExplicitList<CMapDoodadDef,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObjGroup,428> : class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObjGroup,TSGetExplicitLink<CMapObjGroup> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObjGroup,428>(class TSExplicitList<CMapObjGroup,428>&);
  void TSExplicitList<CMapObjGroup,428>();
  class TSExplicitList<CMapObjGroup,428>& operator=(class TSExplicitList<CMapObjGroup,428>&);
  void ~TSExplicitList<CMapObjGroup,428>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapCacheLight,72> : class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapCacheLight,TSGetExplicitLink<CMapCacheLight> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapCacheLight,72>(class TSExplicitList<CMapCacheLight,72>&);
  void TSExplicitList<CMapCacheLight,72>();
  class TSExplicitList<CMapCacheLight,72>& operator=(class TSExplicitList<CMapCacheLight,72>&);
  void ~TSExplicitList<CMapCacheLight,72>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapBaseObjLink,8> : class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapBaseObjLink,TSGetExplicitLink<CMapBaseObjLink> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapBaseObjLink,8>(class TSExplicitList<CMapBaseObjLink,8>&);
  void TSExplicitList<CMapBaseObjLink,8>();
  class TSExplicitList<CMapBaseObjLink,8>& operator=(class TSExplicitList<CMapBaseObjLink,8>&);
  void ~TSExplicitList<CMapBaseObjLink,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapLight,8> : class TSList<CMapLight,TSGetExplicitLink<CMapLight> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapLight,TSGetExplicitLink<CMapLight> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapLight,8>(class TSExplicitList<CMapLight,8>&);
  void TSExplicitList<CMapLight,8>();
  class TSExplicitList<CMapLight,8>& operator=(class TSExplicitList<CMapLight,8>&);
  void ~TSExplicitList<CMapLight,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CWFrustum,244> : class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CWFrustum,TSGetExplicitLink<CWFrustum> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CWFrustum,244>(class TSExplicitList<CWFrustum,244>&);
  void TSExplicitList<CWFrustum,244>();
  class TSExplicitList<CWFrustum,244>& operator=(class TSExplicitList<CWFrustum,244>&);
  void ~TSExplicitList<CWFrustum,244>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMapObj,-572662307> : class TSList<CMapObj,TSGetExplicitLink<CMapObj> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMapObj,TSGetExplicitLink<CMapObj> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMapObj,-572662307>(class TSExplicitList<CMapObj,-572662307>&);
  void TSExplicitList<CMapObj,-572662307>::TSExplicitList<CMapObj,-572662307>();
  class TSExplicitList<CMapObj,-572662307>& operator=(class TSExplicitList<CMapObj,-572662307>&);
  void ~TSExplicitList<CMapObj,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CDetailDoodadInst,16> : class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CDetailDoodadInst,TSGetExplicitLink<CDetailDoodadInst> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CDetailDoodadInst,16>(class TSExplicitList<CDetailDoodadInst,16>&);
  void TSExplicitList<CDetailDoodadInst,16>();
  class TSExplicitList<CDetailDoodadInst,16>& operator=(class TSExplicitList<CDetailDoodadInst,16>&);
  void ~TSExplicitList<CDetailDoodadInst,16>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CDetailDoodadGeom,104> : class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CDetailDoodadGeom,TSGetExplicitLink<CDetailDoodadGeom> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CDetailDoodadGeom,104>(class TSExplicitList<CDetailDoodadGeom,104>&);
  void TSExplicitList<CDetailDoodadGeom,104>();
  class TSExplicitList<CDetailDoodadGeom,104>& operator=(class TSExplicitList<CDetailDoodadGeom,104>&);
  void ~TSExplicitList<CDetailDoodadGeom,104>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CSimpleDoodad,-572662307> : class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CSimpleDoodad,-572662307>(class TSExplicitList<CSimpleDoodad,-572662307>&);
  void TSExplicitList<CSimpleDoodad,-572662307>();
  class TSExplicitList<CSimpleDoodad,-572662307>& operator=(class TSExplicitList<CSimpleDoodad,-572662307>&);
  void ~TSExplicitList<CSimpleDoodad,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CSimpleDoodad,536> : class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CSimpleDoodad,TSGetExplicitLink<CSimpleDoodad> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CSimpleDoodad,536>(class TSExplicitList<CSimpleDoodad,536>&);
  void TSExplicitList<CSimpleDoodad,536>();
  class TSExplicitList<CSimpleDoodad,536>& operator=(class TSExplicitList<CSimpleDoodad,536>&);
  void ~TSExplicitList<CSimpleDoodad,536>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FILEMAP,-572662307> : class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FILEMAP,TSGetExplicitLink<FILEMAP> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FILEMAP,-572662307>::TSExplicitList<FILEMAP,-572662307>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FILEMAP,-572662307>& __that);
  void TSExplicitList<FILEMAP,-572662307>::TSExplicitList<FILEMAP,-572662307>();
  class TSExplicitList<FILEMAP,-572662307>& operator=(class TSExplicitList<FILEMAP,-572662307>&);
  void TSExplicitList<FILEMAP,-572662307>::~TSExplicitList<FILEMAP,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20> : class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<RGN,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>(class TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>&);
  void TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>::TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>();
  class TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>& operator=(class TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>&);
  void TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>::~TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<RGN,-572662307> : class TSList<RGN,TSGetExplicitLink<RGN> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<RGN,TSGetExplicitLink<RGN> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<RGN,-572662307>::TSExplicitList<RGN,-572662307>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<RGN,-572662307>& __that);
  void TSExplicitList<RGN,-572662307>::TSExplicitList<RGN,-572662307>();
  class TSExplicitList<RGN,-572662307>& operator=(class TSExplicitList<RGN,-572662307>&);
  void TSExplicitList<RGN,-572662307>::~TSExplicitList<RGN,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ZipFileDirEntry,-572662307> : class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ZipFileDirEntry,TSGetExplicitLink<ZipFileDirEntry> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ZipFileDirEntry,-572662307>::TSExplicitList<ZipFileDirEntry,-572662307>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ZipFileDirEntry,-572662307>& __that);
  void TSExplicitList<ZipFileDirEntry,-572662307>::TSExplicitList<ZipFileDirEntry,-572662307>();
  class TSExplicitList<ZipFileDirEntry,-572662307>& operator=(class TSExplicitList<ZipFileDirEntry,-572662307>&);
  void TSExplicitList<ZipFileDirEntry,-572662307>::~TSExplicitList<ZipFileDirEntry,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TIMESTAMPSTRUCT,-572662307> : class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TIMESTAMPSTRUCT,TSGetExplicitLink<TIMESTAMPSTRUCT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TIMESTAMPSTRUCT,-572662307>(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>&);
  void TSExplicitList<TIMESTAMPSTRUCT,-572662307>();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>& operator=(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>&);
  void ~TSExplicitList<TIMESTAMPSTRUCT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CVar,-572662307> : class TSList<CVar,TSGetExplicitLink<CVar> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CVar,TSGetExplicitLink<CVar> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CVar,-572662307>(class TSExplicitList<CVar,-572662307>&);
  void TSExplicitList<CVar,-572662307>();
  class TSExplicitList<CVar,-572662307>& operator=(class TSExplicitList<CVar,-572662307>&);
  void ~TSExplicitList<CVar,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CONSOLECOMMAND,-572662307> : class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CONSOLECOMMAND,TSGetExplicitLink<CONSOLECOMMAND> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CONSOLECOMMAND,-572662307>(class TSExplicitList<CONSOLECOMMAND,-572662307>&);
  void TSExplicitList<CONSOLECOMMAND,-572662307>();
  class TSExplicitList<CONSOLECOMMAND,-572662307>& operator=(class TSExplicitList<CONSOLECOMMAND,-572662307>&);
  void ~TSExplicitList<CONSOLECOMMAND,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<INVENTORYART,-572662307> : class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<INVENTORYART,TSGetExplicitLink<INVENTORYART> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<INVENTORYART,-572662307>(class TSExplicitList<INVENTORYART,-572662307>&);
  void TSExplicitList<INVENTORYART,-572662307>();
  class TSExplicitList<INVENTORYART,-572662307>& operator=(class TSExplicitList<INVENTORYART,-572662307>&);
  void ~TSExplicitList<INVENTORYART,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TRADESKILLLINE,-572662307> : class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TRADESKILLLINE,TSGetExplicitLink<TRADESKILLLINE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TRADESKILLLINE,-572662307>(class TSExplicitList<TRADESKILLLINE,-572662307>&);
  void TSExplicitList<TRADESKILLLINE,-572662307>::TSExplicitList<TRADESKILLLINE,-572662307>();
  class TSExplicitList<TRADESKILLLINE,-572662307>& operator=(class TSExplicitList<TRADESKILLLINE,-572662307>&);
  void ~TSExplicitList<TRADESKILLLINE,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ITEMEXPIRATION,-572662307> : class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ITEMEXPIRATION,TSGetExplicitLink<ITEMEXPIRATION> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ITEMEXPIRATION,-572662307>(class TSExplicitList<ITEMEXPIRATION,-572662307>&);
  void TSExplicitList<ITEMEXPIRATION,-572662307>();
  class TSExplicitList<ITEMEXPIRATION,-572662307>& operator=(class TSExplicitList<ITEMEXPIRATION,-572662307>&);
  void ~TSExplicitList<ITEMEXPIRATION,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<NAMEPLATEDESC,-572662307> : class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<NAMEPLATEDESC,-572662307>(class TSExplicitList<NAMEPLATEDESC,-572662307>&);
  void TSExplicitList<NAMEPLATEDESC,-572662307>();
  class TSExplicitList<NAMEPLATEDESC,-572662307>& operator=(class TSExplicitList<NAMEPLATEDESC,-572662307>&);
  void ~TSExplicitList<NAMEPLATEDESC,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<NAMEPLATEDESC,32> : class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<NAMEPLATEDESC,TSGetExplicitLink<NAMEPLATEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<NAMEPLATEDESC,32>(class TSExplicitList<NAMEPLATEDESC,32>&);
  void TSExplicitList<NAMEPLATEDESC,32>();
  class TSExplicitList<NAMEPLATEDESC,32>& operator=(class TSExplicitList<NAMEPLATEDESC,32>&);
  void ~TSExplicitList<NAMEPLATEDESC,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGGameObject_C,52> : class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGGameObject_C,TSGetExplicitLink<CGGameObject_C> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGGameObject_C,52>(class TSExplicitList<CGGameObject_C,52>&);
  void TSExplicitList<CGGameObject_C,52>();
  class TSExplicitList<CGGameObject_C,52>& operator=(class TSExplicitList<CGGameObject_C,52>&);
  void ~TSExplicitList<CGGameObject_C,52>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4> : class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ONESHOTSTANDALONEEFFECTNODE,TSGetExplicitLink<ONESHOTSTANDALONEEFFECTNODE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>(class TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>&);
  void TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>();
  class TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>& operator=(class TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>&);
  void ~TSExplicitList<ONESHOTSTANDALONEEFFECTNODE,4>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> : class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<UNITONESHOTEFFECTDESC,TSGetExplicitLink<UNITONESHOTEFFECTDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>&);
  void TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>& operator=(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>&);
  void ~TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SPLATDATA,76> : class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SPLATDATA,TSGetExplicitLink<SPLATDATA> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SPLATDATA,76>(class TSExplicitList<SPLATDATA,76>&);
  void TSExplicitList<SPLATDATA,76>();
  class TSExplicitList<SPLATDATA,76>& operator=(class TSExplicitList<SPLATDATA,76>&);
  void ~TSExplicitList<SPLATDATA,76>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<UNITHASHOBJ,-572662307> : class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<UNITHASHOBJ,TSGetExplicitLink<UNITHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<UNITHASHOBJ,-572662307>(class TSExplicitList<UNITHASHOBJ,-572662307>&);
  void TSExplicitList<UNITHASHOBJ,-572662307>();
  class TSExplicitList<UNITHASHOBJ,-572662307>& operator=(class TSExplicitList<UNITHASHOBJ,-572662307>&);
  void ~TSExplicitList<UNITHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ANIMKIT,-572662307> : class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ANIMKIT,TSGetExplicitLink<ANIMKIT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ANIMKIT,-572662307>(class TSExplicitList<ANIMKIT,-572662307>&);
  void TSExplicitList<ANIMKIT,-572662307>();
  class TSExplicitList<ANIMKIT,-572662307>& operator=(class TSExplicitList<ANIMKIT,-572662307>&);
  void ~TSExplicitList<ANIMKIT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxuLightLink,20> : class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxuLightLink,20>(class TSExplicitList<CGxuLightLink,20>&);
  void TSExplicitList<CGxuLightLink,20>();
  class TSExplicitList<CGxuLightLink,20>& operator=(class TSExplicitList<CGxuLightLink,20>&);
  void ~TSExplicitList<CGxuLightLink,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxuLightLink,12> : class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxuLightLink,TSGetExplicitLink<CGxuLightLink> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxuLightLink,12>(class TSExplicitList<CGxuLightLink,12>&);
  void TSExplicitList<CGxuLightLink,12>::TSExplicitList<CGxuLightLink,12>();
  class TSExplicitList<CGxuLightLink,12>& operator=(class TSExplicitList<CGxuLightLink,12>&);
  void ~TSExplicitList<CGxuLightLink,12>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20> : class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,TSGetExplicitLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>(class TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>&);
  void TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>();
  class TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CLightList,-572662307> : class TSList<CLightList,TSGetExplicitLink<CLightList> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CLightList,TSGetExplicitLink<CLightList> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CLightList,-572662307>(class TSExplicitList<CLightList,-572662307>&);
  void TSExplicitList<CLightList,-572662307>::TSExplicitList<CLightList,-572662307>();
  class TSExplicitList<CLightList,-572662307>& operator=(class TSExplicitList<CLightList,-572662307>&);
  void ~TSExplicitList<CLightList,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> : class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<BATCHEDRENDERFONTDESC,TSGetExplicitLink<BATCHEDRENDERFONTDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>&);
  void TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>& operator=(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>&);
  void ~TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<KERNNODE,-572662307> : class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<KERNNODE,TSGetExplicitLink<KERNNODE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<KERNNODE,-572662307>(class TSExplicitList<KERNNODE,-572662307>&);
  void TSExplicitList<KERNNODE,-572662307>::TSExplicitList<KERNNODE,-572662307>();
  class TSExplicitList<KERNNODE,-572662307>& operator=(class TSExplicitList<KERNNODE,-572662307>&);
  void ~TSExplicitList<KERNNODE,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CHARCODEDESC,-572662307> : class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CHARCODEDESC,-572662307>(class TSExplicitList<CHARCODEDESC,-572662307>&);
  void TSExplicitList<CHARCODEDESC,-572662307>();
  class TSExplicitList<CHARCODEDESC,-572662307>& operator=(class TSExplicitList<CHARCODEDESC,-572662307>&);
  void ~TSExplicitList<CHARCODEDESC,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<GLYPHBITMAPDATA,-572662307> : class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<GLYPHBITMAPDATA,TSGetExplicitLink<GLYPHBITMAPDATA> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<GLYPHBITMAPDATA,-572662307>(class TSExplicitList<GLYPHBITMAPDATA,-572662307>&);
  void TSExplicitList<GLYPHBITMAPDATA,-572662307>::TSExplicitList<GLYPHBITMAPDATA,-572662307>();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>& operator=(class TSExplicitList<GLYPHBITMAPDATA,-572662307>&);
  void ~TSExplicitList<GLYPHBITMAPDATA,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CHARCODEDESC,24> : class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CHARCODEDESC,TSGetExplicitLink<CHARCODEDESC> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CHARCODEDESC,24>(class TSExplicitList<CHARCODEDESC,24>&);
  void TSExplicitList<CHARCODEDESC,24>::TSExplicitList<CHARCODEDESC,24>();
  class TSExplicitList<CHARCODEDESC,24>& operator=(class TSExplicitList<CHARCODEDESC,24>&);
  void ~TSExplicitList<CHARCODEDESC,24>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<STRINGVIEWMATRICES,24> : class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<STRINGVIEWMATRICES,24>(class TSExplicitList<STRINGVIEWMATRICES,24>&);
  void TSExplicitList<STRINGVIEWMATRICES,24>();
  class TSExplicitList<STRINGVIEWMATRICES,24>& operator=(class TSExplicitList<STRINGVIEWMATRICES,24>&);
  void ~TSExplicitList<STRINGVIEWMATRICES,24>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<STRINGVIEWMATRICES,-572662307> : class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<STRINGVIEWMATRICES,TSGetExplicitLink<STRINGVIEWMATRICES> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<STRINGVIEWMATRICES,-572662307>(class TSExplicitList<STRINGVIEWMATRICES,-572662307>&);
  void TSExplicitList<STRINGVIEWMATRICES,-572662307>();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>& operator=(class TSExplicitList<STRINGVIEWMATRICES,-572662307>&);
  void ~TSExplicitList<STRINGVIEWMATRICES,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FACEDATA,-572662307> : class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FACEDATA,TSGetExplicitLink<FACEDATA> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FACEDATA,-572662307>(class TSExplicitList<FACEDATA,-572662307>&);
  void TSExplicitList<FACEDATA,-572662307>::TSExplicitList<FACEDATA,-572662307>();
  class TSExplicitList<FACEDATA,-572662307>& operator=(class TSExplicitList<FACEDATA,-572662307>&);
  void ~TSExplicitList<FACEDATA,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20> : class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>(class TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>&);
  void TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>::TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>();
  class TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20> : class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,TSGetExplicitLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>(class TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>&);
  void TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>::TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>();
  class TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxVertexShader,-572662307> : class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxVertexShader,TSGetExplicitLink<CGxVertexShader> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxVertexShader,-572662307>(class TSExplicitList<CGxVertexShader,-572662307>&);
  void TSExplicitList<CGxVertexShader,-572662307>();
  class TSExplicitList<CGxVertexShader,-572662307>& operator=(class TSExplicitList<CGxVertexShader,-572662307>&);
  void ~TSExplicitList<CGxVertexShader,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxPixelShader,-572662307> : class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxPixelShader,TSGetExplicitLink<CGxPixelShader> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxPixelShader,-572662307>(class TSExplicitList<CGxPixelShader,-572662307>&);
  void TSExplicitList<CGxPixelShader,-572662307>();
  class TSExplicitList<CGxPixelShader,-572662307>& operator=(class TSExplicitList<CGxPixelShader,-572662307>&);
  void ~TSExplicitList<CGxPixelShader,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxShaderParam,108> : class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxShaderParam,TSGetExplicitLink<CGxShaderParam> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxShaderParam,108>::TSExplicitList<CGxShaderParam,108>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxShaderParam,108>& __that);
  void TSExplicitList<CGxShaderParam,108>();
  class TSExplicitList<CGxShaderParam,108>& operator=(class TSExplicitList<CGxShaderParam,108>&);
  void ~TSExplicitList<CGxShaderParam,108>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> : class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,TSGetExplicitLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> : class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,TSGetExplicitLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>::TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator=(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  void ~TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CACHEENTRY,-572662307> : class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CACHEENTRY,TSGetExplicitLink<CACHEENTRY> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CACHEENTRY,-572662307>(class TSExplicitList<CACHEENTRY,-572662307>&);
  void TSExplicitList<CACHEENTRY,-572662307>::TSExplicitList<CACHEENTRY,-572662307>();
  class TSExplicitList<CACHEENTRY,-572662307>& operator=(class TSExplicitList<CACHEENTRY,-572662307>&);
  void ~TSExplicitList<CACHEENTRY,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<UNITPORTRAIT,-572662307> : class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<UNITPORTRAIT,TSGetExplicitLink<UNITPORTRAIT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<UNITPORTRAIT,-572662307>(class TSExplicitList<UNITPORTRAIT,-572662307>&);
  void TSExplicitList<UNITPORTRAIT,-572662307>::TSExplicitList<UNITPORTRAIT,-572662307>();
  class TSExplicitList<UNITPORTRAIT,-572662307>& operator=(class TSExplicitList<UNITPORTRAIT,-572662307>&);
  void ~TSExplicitList<UNITPORTRAIT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<PLAYERPORTRAIT,-572662307> : class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<PLAYERPORTRAIT,TSGetExplicitLink<PLAYERPORTRAIT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<PLAYERPORTRAIT,-572662307>(class TSExplicitList<PLAYERPORTRAIT,-572662307>&);
  void TSExplicitList<PLAYERPORTRAIT,-572662307>::TSExplicitList<PLAYERPORTRAIT,-572662307>();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>& operator=(class TSExplicitList<PLAYERPORTRAIT,-572662307>&);
  void ~TSExplicitList<PLAYERPORTRAIT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ITEMPORTRAIT,-572662307> : class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ITEMPORTRAIT,TSGetExplicitLink<ITEMPORTRAIT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ITEMPORTRAIT,-572662307>(class TSExplicitList<ITEMPORTRAIT,-572662307>&);
  void TSExplicitList<ITEMPORTRAIT,-572662307>::TSExplicitList<ITEMPORTRAIT,-572662307>();
  class TSExplicitList<ITEMPORTRAIT,-572662307>& operator=(class TSExplicitList<ITEMPORTRAIT,-572662307>&);
  void ~TSExplicitList<ITEMPORTRAIT,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<WORDLIST,-572662307> : class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<WORDLIST,TSGetExplicitLink<WORDLIST> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<WORDLIST,-572662307>(class TSExplicitList<WORDLIST,-572662307>&);
  void TSExplicitList<WORDLIST,-572662307>();
  class TSExplicitList<WORDLIST,-572662307>& operator=(class TSExplicitList<WORDLIST,-572662307>&);
  void ~TSExplicitList<WORDLIST,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FADEOUTHASHOBJ,-572662307> : class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FADEOUTHASHOBJ,TSGetExplicitLink<FADEOUTHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FADEOUTHASHOBJ,-572662307>(class TSExplicitList<FADEOUTHASHOBJ,-572662307>&);
  void TSExplicitList<FADEOUTHASHOBJ,-572662307>();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>& operator=(class TSExplicitList<FADEOUTHASHOBJ,-572662307>&);
  void ~TSExplicitList<FADEOUTHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<KEYCOMMAND,-572662307> : class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<KEYCOMMAND,TSGetExplicitLink<KEYCOMMAND> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<KEYCOMMAND,-572662307>(class TSExplicitList<KEYCOMMAND,-572662307>&);
  void TSExplicitList<KEYCOMMAND,-572662307>();
  class TSExplicitList<KEYCOMMAND,-572662307>& operator=(class TSExplicitList<KEYCOMMAND,-572662307>&);
  void ~TSExplicitList<KEYCOMMAND,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<KEYBINDING,-572662307> : class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<KEYBINDING,TSGetExplicitLink<KEYBINDING> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<KEYBINDING,-572662307>(class TSExplicitList<KEYBINDING,-572662307>&);
  void TSExplicitList<KEYBINDING,-572662307>();
  class TSExplicitList<KEYBINDING,-572662307>& operator=(class TSExplicitList<KEYBINDING,-572662307>&);
  void ~TSExplicitList<KEYBINDING,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<C_OBJECTHASH,-572662307> : class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<C_OBJECTHASH,TSGetExplicitLink<C_OBJECTHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<C_OBJECTHASH,-572662307>(class TSExplicitList<C_OBJECTHASH,-572662307>&);
  void TSExplicitList<C_OBJECTHASH,-572662307>::TSExplicitList<C_OBJECTHASH,-572662307>();
  class TSExplicitList<C_OBJECTHASH,-572662307>& operator=(class TSExplicitList<C_OBJECTHASH,-572662307>&);
  void ~TSExplicitList<C_OBJECTHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CMirrorHandler,8> : class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CMirrorHandler,TSGetExplicitLink<CMirrorHandler> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CMirrorHandler,8>(class TSExplicitList<CMirrorHandler,8>&);
  void TSExplicitList<CMirrorHandler,8>();
  class TSExplicitList<CMirrorHandler,8>& operator=(class TSExplicitList<CMirrorHandler,8>&);
  void ~TSExplicitList<CMirrorHandler,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FOOTSTEPSNDCACHE,-572662307> : class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FOOTSTEPSNDCACHE,TSGetExplicitLink<FOOTSTEPSNDCACHE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FOOTSTEPSNDCACHE,-572662307>(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>&);
  void TSExplicitList<FOOTSTEPSNDCACHE,-572662307>::TSExplicitList<FOOTSTEPSNDCACHE,-572662307>();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>& operator=(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>&);
  void ~TSExplicitList<FOOTSTEPSNDCACHE,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SHEATHSOUNDHASH,-572662307> : class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SHEATHSOUNDHASH,TSGetExplicitLink<SHEATHSOUNDHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SHEATHSOUNDHASH,-572662307>(class TSExplicitList<SHEATHSOUNDHASH,-572662307>&);
  void TSExplicitList<SHEATHSOUNDHASH,-572662307>::TSExplicitList<SHEATHSOUNDHASH,-572662307>();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>& operator=(class TSExplicitList<SHEATHSOUNDHASH,-572662307>&);
  void ~TSExplicitList<SHEATHSOUNDHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SOUNDDEFINITION,-572662307> : class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SOUNDDEFINITION,TSGetExplicitLink<SOUNDDEFINITION> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SOUNDDEFINITION,-572662307>(class TSExplicitList<SOUNDDEFINITION,-572662307>&);
  void TSExplicitList<SOUNDDEFINITION,-572662307>::TSExplicitList<SOUNDDEFINITION,-572662307>();
  class TSExplicitList<SOUNDDEFINITION,-572662307>& operator=(class TSExplicitList<SOUNDDEFINITION,-572662307>&);
  void ~TSExplicitList<SOUNDDEFINITION,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<UISOUNDLOOKUP,-572662307> : class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<UISOUNDLOOKUP,TSGetExplicitLink<UISOUNDLOOKUP> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<UISOUNDLOOKUP,-572662307>(class TSExplicitList<UISOUNDLOOKUP,-572662307>&);
  void TSExplicitList<UISOUNDLOOKUP,-572662307>();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>& operator=(class TSExplicitList<UISOUNDLOOKUP,-572662307>&);
  void ~TSExplicitList<UISOUNDLOOKUP,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> : class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OUTDOORSCHUNKHASHOBJ,TSGetExplicitLink<OUTDOORSCHUNKHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>&);
  void TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>& operator=(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>&);
  void ~TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CHUNKHASHOBJ,-572662307> : class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CHUNKHASHOBJ,TSGetExplicitLink<CHUNKHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CHUNKHASHOBJ,-572662307>(class TSExplicitList<CHUNKHASHOBJ,-572662307>&);
  void TSExplicitList<CHUNKHASHOBJ,-572662307>();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>& operator=(class TSExplicitList<CHUNKHASHOBJ,-572662307>&);
  void ~TSExplicitList<CHUNKHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20> : class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>(class TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>&);
  void TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>();
  class TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CSolidTextureHash,-572662307> : class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CSolidTextureHash,TSGetExplicitLink<CSolidTextureHash> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CSolidTextureHash,-572662307>(class TSExplicitList<CSolidTextureHash,-572662307>&);
  void TSExplicitList<CSolidTextureHash,-572662307>();
  class TSExplicitList<CSolidTextureHash,-572662307>& operator=(class TSExplicitList<CSolidTextureHash,-572662307>&);
  void ~TSExplicitList<CSolidTextureHash,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20> : class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,TSGetExplicitLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>(class TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>&);
  void TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>();
  class TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CTextureHash,-572662307> : class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CTextureHash,TSGetExplicitLink<CTextureHash> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CTextureHash,-572662307>(class TSExplicitList<CTextureHash,-572662307>&);
  void TSExplicitList<CTextureHash,-572662307>();
  class TSExplicitList<CTextureHash,-572662307>& operator=(class TSExplicitList<CTextureHash,-572662307>&);
  void ~TSExplicitList<CTextureHash,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CGxTexCache,8> : class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CGxTexCache,TSGetExplicitLink<CGxTexCache> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CGxTexCache,8>(class TSExplicitList<CGxTexCache,8>&);
  void TSExplicitList<CGxTexCache,8>();
  class TSExplicitList<CGxTexCache,8>& operator=(class TSExplicitList<CGxTexCache,8>&);
  void ~TSExplicitList<CGxTexCache,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CTexture,324> : class TSList<CTexture,TSGetExplicitLink<CTexture> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CTexture,TSGetExplicitLink<CTexture> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CTexture,324>(class TSExplicitList<CTexture,324>&);
  void TSExplicitList<CTexture,324>();
  class TSExplicitList<CTexture,324>& operator=(class TSExplicitList<CTexture,324>&);
  void ~TSExplicitList<CTexture,324>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CTextureItem,12> : class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CTextureItem,TSGetExplicitLink<CTextureItem> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CTextureItem,12>(class TSExplicitList<CTextureItem,12>&);
  void TSExplicitList<CTextureItem,12>();
  class TSExplicitList<CTextureItem,12>& operator=(class TSExplicitList<CTextureItem,12>&);
  void ~TSExplicitList<CTextureItem,12>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CBaseManaged,4> : class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CBaseManaged,TSGetExplicitLink<CBaseManaged> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CBaseManaged,4>(class TSExplicitList<CBaseManaged,4>&);
  void TSExplicitList<CBaseManaged,4>::TSExplicitList<CBaseManaged,4>();
  class TSExplicitList<CBaseManaged,4>& operator=(class TSExplicitList<CBaseManaged,4>&);
  void ~TSExplicitList<CBaseManaged,4>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FONTHASHOBJ,-572662307> : class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FONTHASHOBJ,TSGetExplicitLink<FONTHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FONTHASHOBJ,-572662307>(class TSExplicitList<FONTHASHOBJ,-572662307>&);
  void TSExplicitList<FONTHASHOBJ,-572662307>::TSExplicitList<FONTHASHOBJ,-572662307>();
  class TSExplicitList<FONTHASHOBJ,-572662307>& operator=(class TSExplicitList<FONTHASHOBJ,-572662307>&);
  void ~TSExplicitList<FONTHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ProfileInternal::SECTION,-572662307> : class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ProfileInternal::SECTION,TSGetExplicitLink<ProfileInternal::SECTION> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ProfileInternal::SECTION,-572662307>(class TSExplicitList<ProfileInternal::SECTION,-572662307>&);
  void TSExplicitList<ProfileInternal::SECTION,-572662307>::TSExplicitList<ProfileInternal::SECTION,-572662307>();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>& operator=(class TSExplicitList<ProfileInternal::SECTION,-572662307>&);
  void ~TSExplicitList<ProfileInternal::SECTION,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ProfileInternal::KEYVALUE,-572662307> : class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ProfileInternal::KEYVALUE,TSGetExplicitLink<ProfileInternal::KEYVALUE> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ProfileInternal::KEYVALUE,-572662307>(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>&);
  void TSExplicitList<ProfileInternal::KEYVALUE,-572662307>::TSExplicitList<ProfileInternal::KEYVALUE,-572662307>();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>& operator=(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>&);
  void ~TSExplicitList<ProfileInternal::KEYVALUE,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CILayer,56> : class TSList<CILayer,TSGetExplicitLink<CILayer> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CILayer,TSGetExplicitLink<CILayer> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CILayer,56>(class TSExplicitList<CILayer,56>&);
  void TSExplicitList<CILayer,56>();
  class TSExplicitList<CILayer,56>& operator=(class TSExplicitList<CILayer,56>&);
  void ~TSExplicitList<CILayer,56>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::TCPLISTEN,8> : class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::TCPLISTEN,TSGetExplicitLink<OsNet::TCPLISTEN> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::TCPLISTEN,8>(class TSExplicitList<OsNet::TCPLISTEN,8>&);
  void TSExplicitList<OsNet::TCPLISTEN,8>::TSExplicitList<OsNet::TCPLISTEN,8>();
  class TSExplicitList<OsNet::TCPLISTEN,8>& operator=(class TSExplicitList<OsNet::TCPLISTEN,8>&);
  void TSExplicitList<OsNet::TCPLISTEN,8>::~TSExplicitList<OsNet::TCPLISTEN,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> : class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::NETSELSOCKPTR,TSGetExplicitLink<OsNet::NETSELSOCKPTR> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>&);
  void TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>::TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>& operator=(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>&);
  void ~TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::LOOPCONN::INPUT,8> : class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::LOOPCONN::INPUT,TSGetExplicitLink<OsNet::LOOPCONN::INPUT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::LOOPCONN::INPUT,8>(class TSExplicitList<OsNet::LOOPCONN::INPUT,8>&);
  void TSExplicitList<OsNet::LOOPCONN::INPUT,8>();
  class TSExplicitList<OsNet::LOOPCONN::INPUT,8>& operator=(class TSExplicitList<OsNet::LOOPCONN::INPUT,8>&);
  void ~TSExplicitList<OsNet::LOOPCONN::INPUT,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::LOOPCONN,108> : class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::LOOPCONN,TSGetExplicitLink<OsNet::LOOPCONN> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::LOOPCONN,108>(class TSExplicitList<OsNet::LOOPCONN,108>&);
  void TSExplicitList<OsNet::LOOPCONN,108>();
  class TSExplicitList<OsNet::LOOPCONN,108>& operator=(class TSExplicitList<OsNet::LOOPCONN,108>&);
  void ~TSExplicitList<OsNet::LOOPCONN,108>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::NETCONNECT,8> : class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::NETCONNECT,TSGetExplicitLink<OsNet::NETCONNECT> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::NETCONNECT,8>(class TSExplicitList<OsNet::NETCONNECT,8>&);
  void TSExplicitList<OsNet::NETCONNECT,8>();
  class TSExplicitList<OsNet::NETCONNECT,8>& operator=(class TSExplicitList<OsNet::NETCONNECT,8>&);
  void ~TSExplicitList<OsNet::NETCONNECT,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<OsNet::NETCONN,8> : class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<OsNet::NETCONN,TSGetExplicitLink<OsNet::NETCONN> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<OsNet::NETCONN,8>(class TSExplicitList<OsNet::NETCONN,8>&);
  void TSExplicitList<OsNet::NETCONN,8>();
  class TSExplicitList<OsNet::NETCONN,8>& operator=(class TSExplicitList<OsNet::NETCONN,8>&);
  void ~TSExplicitList<OsNet::NETCONN,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,48> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,48>(class TSExplicitList<Sound,48>&);
  void TSExplicitList<Sound,48>();
  class TSExplicitList<Sound,48>& operator=(class TSExplicitList<Sound,48>&);
  void ~TSExplicitList<Sound,48>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,40> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,40>(class TSExplicitList<Sound,40>&);
  void TSExplicitList<Sound,40>();
  class TSExplicitList<Sound,40>& operator=(class TSExplicitList<Sound,40>&);
  void ~TSExplicitList<Sound,40>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,32> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,32>(class TSExplicitList<Sound,32>&);
  void TSExplicitList<Sound,32>();
  class TSExplicitList<Sound,32>& operator=(class TSExplicitList<Sound,32>&);
  void ~TSExplicitList<Sound,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,24> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,24>(class TSExplicitList<Sound,24>&);
  void TSExplicitList<Sound,24>();
  class TSExplicitList<Sound,24>& operator=(class TSExplicitList<Sound,24>&);
  void ~TSExplicitList<Sound,24>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,16> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,16>(class TSExplicitList<Sound,16>&);
  void TSExplicitList<Sound,16>();
  class TSExplicitList<Sound,16>& operator=(class TSExplicitList<Sound,16>&);
  void ~TSExplicitList<Sound,16>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<Sound,8> : class TSList<Sound,TSGetExplicitLink<Sound> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<Sound,TSGetExplicitLink<Sound> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<Sound,8>(class TSExplicitList<Sound,8>&);
  void TSExplicitList<Sound,8>();
  class TSExplicitList<Sound,8>& operator=(class TSExplicitList<Sound,8>&);
  void ~TSExplicitList<Sound,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SoundFileObject,412> : class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SoundFileObject,TSGetExplicitLink<SoundFileObject> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SoundFileObject,412>(class TSExplicitList<SoundFileObject,412>&);
  void TSExplicitList<SoundFileObject,412>();
  class TSExplicitList<SoundFileObject,412>& operator=(class TSExplicitList<SoundFileObject,412>&);
  void ~TSExplicitList<SoundFileObject,412>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SoundFileDataCacheBlock,32> : class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SoundFileDataCacheBlock,32>(class TSExplicitList<SoundFileDataCacheBlock,32>&);
  void TSExplicitList<SoundFileDataCacheBlock,32>();
  class TSExplicitList<SoundFileDataCacheBlock,32>& operator=(class TSExplicitList<SoundFileDataCacheBlock,32>&);
  void ~TSExplicitList<SoundFileDataCacheBlock,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20> : class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,TSGetExplicitLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>(class TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>&);
  void TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>();
  class TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>& operator=(class TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SoundFileDataCacheBlock,-572662307> : class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SoundFileDataCacheBlock,TSGetExplicitLink<SoundFileDataCacheBlock> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SoundFileDataCacheBlock,-572662307>(class TSExplicitList<SoundFileDataCacheBlock,-572662307>&);
  void TSExplicitList<SoundFileDataCacheBlock,-572662307>::TSExplicitList<SoundFileDataCacheBlock,-572662307>();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>& operator=(class TSExplicitList<SoundFileDataCacheBlock,-572662307>&);
  void ~TSExplicitList<SoundFileDataCacheBlock,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20> : class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,TSGetExplicitLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>(class TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>&);
  void TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>();
  class TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>& operator=(class TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SoundFileObjectCacheNode,-572662307> : class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SoundFileObjectCacheNode,TSGetExplicitLink<SoundFileObjectCacheNode> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SoundFileObjectCacheNode,-572662307>(class TSExplicitList<SoundFileObjectCacheNode,-572662307>&);
  void TSExplicitList<SoundFileObjectCacheNode,-572662307>::TSExplicitList<SoundFileObjectCacheNode,-572662307>();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>& operator=(class TSExplicitList<SoundFileObjectCacheNode,-572662307>&);
  void ~TSExplicitList<SoundFileObjectCacheNode,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CModelHash,292> : class TSList<CModelHash,TSGetExplicitLink<CModelHash> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CModelHash,TSGetExplicitLink<CModelHash> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CModelHash,292>(class TSExplicitList<CModelHash,292>&);
  void TSExplicitList<CModelHash,292>();
  class TSExplicitList<CModelHash,292>& operator=(class TSExplicitList<CModelHash,292>&);
  void ~TSExplicitList<CModelHash,292>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20> : class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,TSGetExplicitLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>(class TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>&);
  void TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>();
  class TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>& operator=(class TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>&);
  void ~TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CModelHash,-572662307> : class TSList<CModelHash,TSGetExplicitLink<CModelHash> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CModelHash,TSGetExplicitLink<CModelHash> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CModelHash,-572662307>(class TSExplicitList<CModelHash,-572662307>&);
  void TSExplicitList<CModelHash,-572662307>();
  class TSExplicitList<CModelHash,-572662307>& operator=(class TSExplicitList<CModelHash,-572662307>&);
  void ~TSExplicitList<CModelHash,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CAsyncObject,32> : class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CAsyncObject,TSGetExplicitLink<CAsyncObject> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CAsyncObject,32>(class TSExplicitList<CAsyncObject,32>&);
  void TSExplicitList<CAsyncObject,32>();
  class TSExplicitList<CAsyncObject,32>& operator=(class TSExplicitList<CAsyncObject,32>&);
  void ~TSExplicitList<CAsyncObject,32>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CRenderBatch,44> : class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CRenderBatch,TSGetExplicitLink<CRenderBatch> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CRenderBatch,44>(class TSExplicitList<CRenderBatch,44>&);
  void TSExplicitList<CRenderBatch,44>::TSExplicitList<CRenderBatch,44>();
  class TSExplicitList<CRenderBatch,44>& operator=(class TSExplicitList<CRenderBatch,44>&);
  void ~TSExplicitList<CRenderBatch,44>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> : class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SIMPLEFONTSTRINGREGHASH,TSGetExplicitLink<SIMPLEFONTSTRINGREGHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>&);
  void TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>::TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>& operator=(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>&);
  void ~TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> : class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SIMPLETEXTUREREGHASH,TSGetExplicitLink<SIMPLETEXTUREREGHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>&);
  void TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>::TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>& operator=(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>&);
  void ~TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> : class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SIMPLEFRAMEREGHASH,TSGetExplicitLink<SIMPLEFRAMEREGHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>&);
  void TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>::TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>& operator=(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>&);
  void ~TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> : class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<SIMPLECONTEXTHASHOBJ,TSGetExplicitLink<SIMPLECONTEXTHASHOBJ> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>&);
  void TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>& operator=(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>&);
  void ~TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CLayoutFrame,72> : class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CLayoutFrame,TSGetExplicitLink<CLayoutFrame> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CLayoutFrame,72>(class TSExplicitList<CLayoutFrame,72>&);
  void TSExplicitList<CLayoutFrame,72>();
  class TSExplicitList<CLayoutFrame,72>& operator=(class TSExplicitList<CLayoutFrame,72>&);
  void ~TSExplicitList<CLayoutFrame,72>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<FrameScriptObject_Variable,-572662307> : class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<FrameScriptObject_Variable,TSGetExplicitLink<FrameScriptObject_Variable> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<FrameScriptObject_Variable,-572662307>(class TSExplicitList<FrameScriptObject_Variable,-572662307>&);
  void TSExplicitList<FrameScriptObject_Variable,-572662307>();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>& operator=(class TSExplicitList<FrameScriptObject_Variable,-572662307>&);
  void ~TSExplicitList<FrameScriptObject_Variable,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<EvtMessage,4> : class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<EvtMessage,TSGetExplicitLink<EvtMessage> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<EvtMessage,4>(class TSExplicitList<EvtMessage,4>&);
  void TSExplicitList<EvtMessage,4>();
  class TSExplicitList<EvtMessage,4>& operator=(class TSExplicitList<EvtMessage,4>&);
  void ~TSExplicitList<EvtMessage,4>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<EvtHandler,0> : class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<EvtHandler,TSGetExplicitLink<EvtHandler> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<EvtHandler,0>(class TSExplicitList<EvtHandler,0>&);
  void TSExplicitList<EvtHandler,0>();
  class TSExplicitList<EvtHandler,0>& operator=(class TSExplicitList<EvtHandler,0>&);
  void TSExplicitList<EvtHandler,0>::~TSExplicitList<EvtHandler,0>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<EventReg,-572662307> : class TSList<EventReg,TSGetExplicitLink<EventReg> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<EventReg,TSGetExplicitLink<EventReg> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<EventReg,-572662307>(class TSExplicitList<EventReg,-572662307>&);
  void TSExplicitList<EventReg,-572662307>::TSExplicitList<EventReg,-572662307>();
  class TSExplicitList<EventReg,-572662307>& operator=(class TSExplicitList<EventReg,-572662307>&);
  void ~TSExplicitList<EventReg,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<UncachableNode,-572662307> : class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<UncachableNode,TSGetExplicitLink<UncachableNode> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<UncachableNode,-572662307>(class TSExplicitList<UncachableNode,-572662307>&);
  void TSExplicitList<UncachableNode,-572662307>();
  class TSExplicitList<UncachableNode,-572662307>& operator=(class TSExplicitList<UncachableNode,-572662307>&);
  void ~TSExplicitList<UncachableNode,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<PrefetchNode,-572662307> : class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<PrefetchNode,TSGetExplicitLink<PrefetchNode> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<PrefetchNode,-572662307>(class TSExplicitList<PrefetchNode,-572662307>&);
  void TSExplicitList<PrefetchNode,-572662307>::TSExplicitList<PrefetchNode,-572662307>();
  class TSExplicitList<PrefetchNode,-572662307>& operator=(class TSExplicitList<PrefetchNode,-572662307>&);
  void ~TSExplicitList<PrefetchNode,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CStringRep,-572662307> : class TSList<CStringRep,TSGetExplicitLink<CStringRep> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CStringRep,TSGetExplicitLink<CStringRep> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CStringRep,-572662307>(class TSExplicitList<CStringRep,-572662307>&);
  void TSExplicitList<CStringRep,-572662307>::TSExplicitList<CStringRep,-572662307>();
  class TSExplicitList<CStringRep,-572662307>& operator=(class TSExplicitList<CStringRep,-572662307>&);
  void ~TSExplicitList<CStringRep,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<ANIMHASH,-572662307> : class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<ANIMHASH,TSGetExplicitLink<ANIMHASH> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<ANIMHASH,-572662307>(class TSExplicitList<ANIMHASH,-572662307>&);
  void TSExplicitList<ANIMHASH,-572662307>::TSExplicitList<ANIMHASH,-572662307>();
  class TSExplicitList<ANIMHASH,-572662307>& operator=(class TSExplicitList<ANIMHASH,-572662307>&);
  void ~TSExplicitList<ANIMHASH,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CAnimNameHash,-572662307> : class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CAnimNameHash,TSGetExplicitLink<CAnimNameHash> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CAnimNameHash,-572662307>(class TSExplicitList<CAnimNameHash,-572662307>&);
  void TSExplicitList<CAnimNameHash,-572662307>();
  class TSExplicitList<CAnimNameHash,-572662307>& operator=(class TSExplicitList<CAnimNameHash,-572662307>&);
  void ~TSExplicitList<CAnimNameHash,-572662307>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSExplicitList<CStatus::STATUSENTRY,8> : class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<CStatus::STATUSENTRY,TSGetExplicitLink<CStatus::STATUSENTRY> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSExplicitList<CStatus::STATUSENTRY,8>(class TSExplicitList<CStatus::STATUSENTRY,8>&);
  void TSExplicitList<CStatus::STATUSENTRY,8>::TSExplicitList<CStatus::STATUSENTRY,8>();
  class TSExplicitList<CStatus::STATUSENTRY,8>& operator=(class TSExplicitList<CStatus::STATUSENTRY,8>&);
  void ~TSExplicitList<CStatus::STATUSENTRY,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>


}

{ // TSListWinHeap - 1

class TSListWinHeap<HANDLER,TSGetLink<HANDLER> > : class TSList<HANDLER,TSGetLink<HANDLER> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSList<HANDLER,TSGetLink<HANDLER> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct HANDLER* TSListWinHeap<HANDLER,TSGetLink<HANDLER> >::NewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long location, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct HANDLER* TSListWinHeap<HANDLER,TSGetLink<HANDLER> >::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HANDLER* ptr);
  void TSListWinHeap<HANDLER,TSGetLink<HANDLER> >(class TSListWinHeap<HANDLER,TSGetLink<HANDLER> >&);
  void TSListWinHeap<HANDLER,TSGetLink<HANDLER> >::TSListWinHeap<HANDLER,TSGetLink<HANDLER> >();
  class TSListWinHeap<HANDLER,TSGetLink<HANDLER> >& operator=(class TSListWinHeap<HANDLER,TSGetLink<HANDLER> >&);
  void TSListWinHeap<HANDLER,TSGetLink<HANDLER> >::~TSListWinHeap<HANDLER,TSGetLink<HANDLER> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

}

{ // TSBaseArray - 288

class TSBaseArray<CAnimLayerStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimLayerStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimLayerStatus& operator[](unsigned int);
  struct CAnimLayerStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimLayerStatus* Ptr();
  struct CAnimLayerStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimLayerStatus* Top();
  struct CAnimLayerStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimLayerStatus>(class TSBaseArray<CAnimLayerStatus>&);
  void TSBaseArray<CAnimLayerStatus>();
  class TSBaseArray<CAnimLayerStatus>& operator=(class TSBaseArray<CAnimLayerStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimEventObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimEventObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimEventObjStatus& operator[](unsigned int);
  struct CAnimEventObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimEventObjStatus* Ptr();
  struct CAnimEventObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimEventObjStatus* Top();
  struct CAnimEventObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimEventObjStatus>(class TSBaseArray<CAnimEventObjStatus>&);
  void TSBaseArray<CAnimEventObjStatus>();
  class TSBaseArray<CAnimEventObjStatus>& operator=(class TSBaseArray<CAnimEventObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimCameraObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimCameraObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimCameraObjStatus& operator[](unsigned int);
  struct CAnimCameraObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimCameraObjStatus* Ptr();
  struct CAnimCameraObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimCameraObjStatus* Top();
  struct CAnimCameraObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimCameraObjStatus>(class TSBaseArray<CAnimCameraObjStatus>&);
  void TSBaseArray<CAnimCameraObjStatus>();
  class TSBaseArray<CAnimCameraObjStatus>& operator=(class TSBaseArray<CAnimCameraObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimRibbonObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimRibbonObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimRibbonObjStatus& operator[](unsigned int);
  struct CAnimRibbonObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimRibbonObjStatus* Ptr();
  struct CAnimRibbonObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimRibbonObjStatus* Top();
  struct CAnimRibbonObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimRibbonObjStatus>(class TSBaseArray<CAnimRibbonObjStatus>&);
  void TSBaseArray<CAnimRibbonObjStatus>();
  class TSBaseArray<CAnimRibbonObjStatus>& operator=(class TSBaseArray<CAnimRibbonObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimEmitter2ObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimEmitter2ObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimEmitter2ObjStatus& operator[](unsigned int);
  struct CAnimEmitter2ObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimEmitter2ObjStatus* Ptr();
  struct CAnimEmitter2ObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimEmitter2ObjStatus* Top();
  struct CAnimEmitter2ObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimEmitter2ObjStatus>(class TSBaseArray<CAnimEmitter2ObjStatus>&);
  void TSBaseArray<CAnimEmitter2ObjStatus>();
  class TSBaseArray<CAnimEmitter2ObjStatus>& operator=(class TSBaseArray<CAnimEmitter2ObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimLightObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimLightObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimLightObjStatus& operator[](unsigned int);
  struct CAnimLightObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimLightObjStatus* Ptr();
  struct CAnimLightObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimLightObjStatus* Top();
  struct CAnimLightObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimLightObjStatus>(class TSBaseArray<CAnimLightObjStatus>&);
  void TSBaseArray<CAnimLightObjStatus>();
  class TSBaseArray<CAnimLightObjStatus>& operator=(class TSBaseArray<CAnimLightObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimObjBlendStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimObjBlendStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimObjBlendStatus& operator[](unsigned int);
  struct CAnimObjBlendStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimObjBlendStatus* Ptr();
  struct CAnimObjBlendStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimObjBlendStatus* Top();
  struct CAnimObjBlendStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimObjBlendStatus>(class TSBaseArray<CAnimObjBlendStatus>&);
  void TSBaseArray<CAnimObjBlendStatus>();
  class TSBaseArray<CAnimObjBlendStatus>& operator=(class TSBaseArray<CAnimObjBlendStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimModelObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimModelObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimModelObjStatus& operator[](unsigned int);
  struct CAnimModelObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimModelObjStatus* Ptr();
  struct CAnimModelObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimModelObjStatus* Top();
  struct CAnimModelObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimModelObjStatus>(class TSBaseArray<CAnimModelObjStatus>&);
  void TSBaseArray<CAnimModelObjStatus>();
  class TSBaseArray<CAnimModelObjStatus>& operator=(class TSBaseArray<CAnimModelObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimGeosetObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimGeosetObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimGeosetObjStatus& operator[](unsigned int);
  struct CAnimGeosetObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimGeosetObjStatus* Ptr();
  struct CAnimGeosetObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimGeosetObjStatus* Top();
  struct CAnimGeosetObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimGeosetObjStatus>(class TSBaseArray<CAnimGeosetObjStatus>&);
  void TSBaseArray<CAnimGeosetObjStatus>();
  class TSBaseArray<CAnimGeosetObjStatus>& operator=(class TSBaseArray<CAnimGeosetObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSeqInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CSeqInfo* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CSeqInfo& operator[](unsigned int);
  struct CSeqInfo& operator[](unsigned int);
  unsigned int Bytes();
  struct CSeqInfo* Ptr();
  struct CSeqInfo* Ptr();
  unsigned int SizeOfElement();
  struct CSeqInfo* Top();
  struct CSeqInfo* Top();
  unsigned int NumElements();
  void TSBaseArray<CSeqInfo>(class TSBaseArray<CSeqInfo>&);
  void TSBaseArray<CSeqInfo>();
  class TSBaseArray<CSeqInfo>& operator=(class TSBaseArray<CSeqInfo>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimObjStatus *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimObjStatus** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimObjStatus*& operator[](unsigned int);
  struct CAnimObjStatus*& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimObjStatus** Ptr();
  struct CAnimObjStatus** Ptr();
  unsigned int SizeOfElement();
  struct CAnimObjStatus** Top();
  struct CAnimObjStatus** Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimObjStatus *>(class TSBaseArray<CAnimObjStatus *>&);
  void TSBaseArray<CAnimObjStatus *>();
  class TSBaseArray<CAnimObjStatus *>& operator=(class TSBaseArray<CAnimObjStatus *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimObjStatus* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimObjStatus& operator[](unsigned int);
  struct CAnimObjStatus& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimObjStatus* Ptr();
  struct CAnimObjStatus* Ptr();
  unsigned int SizeOfElement();
  struct CAnimObjStatus* Top();
  struct CAnimObjStatus* Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimObjStatus>(class TSBaseArray<CAnimObjStatus>&);
  void TSBaseArray<CAnimObjStatus>();
  class TSBaseArray<CAnimObjStatus>& operator=(class TSBaseArray<CAnimObjStatus>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::CiRect> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::CiRect* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class NTempest::CiRect& operator[](unsigned int);
  class NTempest::CiRect& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::CiRect* Ptr();
  class NTempest::CiRect* Ptr();
  unsigned int SizeOfElement();
  class NTempest::CiRect* Top();
  class NTempest::CiRect* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::CiRect>(class TSBaseArray<NTempest::CiRect>&);
  void TSBaseArray<NTempest::CiRect>();
  class TSBaseArray<NTempest::CiRect>& operator=(class TSBaseArray<NTempest::CiRect>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* MemFileName();
  virtual /*<vtableoff 0x4>*/ int MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSFixedArray<SkillLineAbilityRec const *>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class TSFixedArray<SkillLineAbilityRec const *>& operator[](unsigned int);
  class TSFixedArray<SkillLineAbilityRec const *>& operator[](unsigned int);
  unsigned int Bytes();
  class TSFixedArray<SkillLineAbilityRec const *>* Ptr();
  class TSFixedArray<SkillLineAbilityRec const *>* Ptr();
  unsigned int SizeOfElement();
  class TSFixedArray<SkillLineAbilityRec const *>* Top();
  class TSFixedArray<SkillLineAbilityRec const *>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >(class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >&);
  void TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >();
  class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >& operator=(class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SkillLineAbilityRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class SkillLineAbilityRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class SkillLineAbilityRec*& operator[](unsigned int);
  class SkillLineAbilityRec*& operator[](unsigned int);
  unsigned int Bytes();
  class SkillLineAbilityRec** Ptr();
  class SkillLineAbilityRec** Ptr();
  unsigned int SizeOfElement();
  class SkillLineAbilityRec** Top();
  class SkillLineAbilityRec** Top();
  unsigned int NumElements();
  void TSBaseArray<SkillLineAbilityRec const *>(class TSBaseArray<SkillLineAbilityRec const *>&);
  void TSBaseArray<SkillLineAbilityRec const *>();
  class TSBaseArray<SkillLineAbilityRec const *>& operator=(class TSBaseArray<SkillLineAbilityRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SkillLineAbilityRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SkillLineAbilityRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LightningObject::Bolt> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LightningObject::Bolt* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct LightningObject::Bolt& operator[](unsigned int);
  struct LightningObject::Bolt& operator[](unsigned int);
  unsigned int Bytes();
  struct LightningObject::Bolt* Ptr();
  struct LightningObject::Bolt* Ptr();
  unsigned int SizeOfElement();
  struct LightningObject::Bolt* Top();
  struct LightningObject::Bolt* Top();
  unsigned int NumElements();
  void TSBaseArray<LightningObject::Bolt>(class TSBaseArray<LightningObject::Bolt>&);
  void TSBaseArray<LightningObject::Bolt>();
  class TSBaseArray<LightningObject::Bolt>& operator=(class TSBaseArray<LightningObject::Bolt>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LightningObject::Bolt>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LightningObject::Bolt>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SpellAuraNamesRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class SpellAuraNamesRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class SpellAuraNamesRec*& operator[](unsigned int);
  class SpellAuraNamesRec*& operator[](unsigned int);
  unsigned int Bytes();
  class SpellAuraNamesRec** Ptr();
  class SpellAuraNamesRec** Ptr();
  unsigned int SizeOfElement();
  class SpellAuraNamesRec** Top();
  class SpellAuraNamesRec** Top();
  unsigned int NumElements();
  void TSBaseArray<SpellAuraNamesRec const *>(class TSBaseArray<SpellAuraNamesRec const *>&);
  void TSBaseArray<SpellAuraNamesRec const *>();
  class TSBaseArray<SpellAuraNamesRec const *>& operator=(class TSBaseArray<SpellAuraNamesRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SpellAuraNamesRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SpellAuraNamesRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<enum ANIMENUMERATION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ enum ANIMENUMERATION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  enum ANIMENUMERATION& operator[](unsigned int);
  enum ANIMENUMERATION& operator[](unsigned int);
  unsigned int Bytes();
  enum ANIMENUMERATION* Ptr();
  enum ANIMENUMERATION* Ptr();
  unsigned int SizeOfElement();
  enum ANIMENUMERATION* Top();
  enum ANIMENUMERATION* Top();
  unsigned int NumElements();
  void TSBaseArray<enum ANIMENUMERATION>(class TSBaseArray<enum ANIMENUMERATION>&);
  void TSBaseArray<enum ANIMENUMERATION>();
  class TSBaseArray<enum ANIMENUMERATION>& operator=(class TSBaseArray<enum ANIMENUMERATION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<enum ANIMENUMERATION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<enum ANIMENUMERATION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>& operator[](unsigned int);
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* Ptr();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* Top();
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >(class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >();
  class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TAXILINE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TAXILINE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TAXILINE>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct TAXILINE& operator[](unsigned int);
  struct TAXILINE& operator[](unsigned int);
  unsigned int Bytes();
  struct TAXILINE* Ptr();
  struct TAXILINE* Ptr();
  unsigned int SizeOfElement();
  struct TAXILINE* Top();
  struct TAXILINE* Top();
  unsigned int NumElements();
  void TSBaseArray<TAXILINE>(class TSBaseArray<TAXILINE>&);
  void TSBaseArray<TAXILINE>();
  class TSBaseArray<TAXILINE>& operator=(class TSBaseArray<TAXILINE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TAXILINE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TAXILINE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<VERTEX> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct VERTEX* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct VERTEX& operator[](unsigned int);
  struct VERTEX& operator[](unsigned int);
  unsigned int Bytes();
  struct VERTEX* Ptr();
  struct VERTEX* Ptr();
  unsigned int SizeOfElement();
  struct VERTEX* Top();
  struct VERTEX* Top();
  unsigned int NumElements();
  void TSBaseArray<VERTEX>(class TSBaseArray<VERTEX>&);
  void TSBaseArray<VERTEX>();
  class TSBaseArray<VERTEX>& operator=(class TSBaseArray<VERTEX>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<VERTEX>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<VERTEX>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LightData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LightData* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<LightData>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct LightData& operator[](unsigned int);
  struct LightData& operator[](unsigned int);
  unsigned int Bytes();
  struct LightData* Ptr();
  struct LightData* Ptr();
  unsigned int SizeOfElement();
  struct LightData* Top();
  struct LightData* Top();
  unsigned int NumElements();
  void TSBaseArray<LightData>(class TSBaseArray<LightData>&);
  void TSBaseArray<LightData>();
  class TSBaseArray<LightData>& operator=(class TSBaseArray<LightData>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LightData>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LightData>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LightMarker> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LightMarker* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct LightMarker& operator[](unsigned int);
  struct LightMarker& operator[](unsigned int);
  unsigned int Bytes();
  struct LightMarker* Ptr();
  struct LightMarker* Ptr();
  unsigned int SizeOfElement();
  struct LightMarker* Top();
  struct LightMarker* Top();
  unsigned int NumElements();
  void TSBaseArray<LightMarker>(class TSBaseArray<LightMarker>&);
  void TSBaseArray<LightMarker>();
  class TSBaseArray<LightMarker>& operator=(class TSBaseArray<LightMarker>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LightMarker>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LightMarker>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LightDataFog> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LightDataFog* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct LightDataFog& operator[](unsigned int);
  struct LightDataFog& operator[](unsigned int);
  unsigned int Bytes();
  struct LightDataFog* Ptr();
  struct LightDataFog* Ptr();
  unsigned int SizeOfElement();
  struct LightDataFog* Top();
  struct LightDataFog* Top();
  unsigned int NumElements();
  void TSBaseArray<LightDataFog>(class TSBaseArray<LightDataFog>&);
  void TSBaseArray<LightDataFog>();
  class TSBaseArray<LightDataFog>& operator=(class TSBaseArray<LightDataFog>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LightDataFog>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LightDataFog>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<MINIMAPMD5NAME,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>& operator[](unsigned int);
  class TSExplicitList<MINIMAPMD5NAME,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* Ptr();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* Top();
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >(class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >();
  class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >& operator=(class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LightDataSky> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LightDataSky* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<LightDataSky>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct LightDataSky& operator[](unsigned int);
  struct LightDataSky& operator[](unsigned int);
  unsigned int Bytes();
  struct LightDataSky* Ptr();
  struct LightDataSky* Ptr();
  unsigned int SizeOfElement();
  struct LightDataSky* Top();
  struct LightDataSky* Top();
  unsigned int NumElements();
  void TSBaseArray<LightDataSky>(class TSBaseArray<LightDataSky>&);
  void TSBaseArray<LightDataSky>();
  class TSBaseArray<LightDataSky>& operator=(class TSBaseArray<LightDataSky>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LightDataSky>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LightDataSky>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<AREAHASHOBJECT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<AREAHASHOBJECT,-572662307>& operator[](unsigned int);
  class TSExplicitList<AREAHASHOBJECT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<AREAHASHOBJECT,-572662307>* Ptr();
  class TSExplicitList<AREAHASHOBJECT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<AREAHASHOBJECT,-572662307>* Top();
  class TSExplicitList<AREAHASHOBJECT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >(class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >();
  class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LODIndexFix> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LODIndexFix* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<LODIndexFix>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct LODIndexFix& operator[](unsigned int);
  struct LODIndexFix& operator[](unsigned int);
  unsigned int Bytes();
  struct LODIndexFix* Ptr();
  struct LODIndexFix* Ptr();
  unsigned int SizeOfElement();
  struct LODIndexFix* Top();
  struct LODIndexFix* Top();
  unsigned int NumElements();
  void TSBaseArray<LODIndexFix>(class TSBaseArray<LODIndexFix>&);
  void TSBaseArray<LODIndexFix>();
  class TSBaseArray<LODIndexFix>& operator=(class TSBaseArray<LODIndexFix>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LODIndexFix>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LODIndexFix>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LODArrays> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct LODArrays* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct LODArrays& operator[](unsigned int);
  struct LODArrays& operator[](unsigned int);
  unsigned int Bytes();
  struct LODArrays* Ptr();
  struct LODArrays* Ptr();
  unsigned int SizeOfElement();
  struct LODArrays* Top();
  struct LODArrays* Top();
  unsigned int NumElements();
  void TSBaseArray<LODArrays>(class TSBaseArray<LODArrays>&);
  void TSBaseArray<LODArrays>();
  class TSBaseArray<LODArrays>& operator=(class TSBaseArray<LODArrays>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LODArrays>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LODArrays>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxVertexPC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxVertexPC* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxVertexPC& operator[](unsigned int);
  struct CGxVertexPC& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxVertexPC* Ptr();
  struct CGxVertexPC* Ptr();
  unsigned int SizeOfElement();
  struct CGxVertexPC* Top();
  struct CGxVertexPC* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxVertexPC>(class TSBaseArray<CGxVertexPC>&);
  void TSBaseArray<CGxVertexPC>();
  class TSBaseArray<CGxVertexPC>& operator=(class TSBaseArray<CGxVertexPC>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxVertexPC>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxVertexPC>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CMapDoodadDef,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CMapDoodadDef,-572662307>& operator[](unsigned int);
  class TSExplicitList<CMapDoodadDef,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CMapDoodadDef,-572662307>* Ptr();
  class TSExplicitList<CMapDoodadDef,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CMapDoodadDef,-572662307>* Top();
  class TSExplicitList<CMapDoodadDef,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >(class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >();
  class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CMapObjDef,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CMapObjDef,-572662307>& operator[](unsigned int);
  class TSExplicitList<CMapObjDef,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CMapObjDef,-572662307>* Ptr();
  class TSExplicitList<CMapObjDef,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CMapObjDef,-572662307>* Top();
  class TSExplicitList<CMapObjDef,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >(class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >();
  class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CMapObj,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CMapObj,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CMapObj,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CMapObj,-572662307>& operator[](unsigned int);
  class TSExplicitList<CMapObj,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CMapObj,-572662307>* Ptr();
  class TSExplicitList<CMapObj,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CMapObj,-572662307>* Top();
  class TSExplicitList<CMapObj,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CMapObj,-572662307> >(class TSBaseArray<TSExplicitList<CMapObj,-572662307> >&);
  void TSBaseArray<TSExplicitList<CMapObj,-572662307> >();
  class TSBaseArray<TSExplicitList<CMapObj,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapObj,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CMapObj,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CMapObj,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxBuf *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxBuf** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxBuf*& operator[](unsigned int);
  struct CGxBuf*& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxBuf** Ptr();
  struct CGxBuf** Ptr();
  unsigned int SizeOfElement();
  struct CGxBuf** Top();
  struct CGxBuf** Top();
  unsigned int NumElements();
  void TSBaseArray<CGxBuf *>(class TSBaseArray<CGxBuf *>&);
  void TSBaseArray<CGxBuf *>();
  class TSBaseArray<CGxBuf *>& operator=(class TSBaseArray<CGxBuf *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxBuf *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxBuf *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SGroupPtr> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SGroupPtr* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SGroupPtr& operator[](unsigned int);
  struct SGroupPtr& operator[](unsigned int);
  unsigned int Bytes();
  struct SGroupPtr* Ptr();
  struct SGroupPtr* Ptr();
  unsigned int SizeOfElement();
  struct SGroupPtr* Top();
  struct SGroupPtr* Top();
  unsigned int NumElements();
  void TSBaseArray<SGroupPtr>(class TSBaseArray<SGroupPtr>&);
  void TSBaseArray<SGroupPtr>();
  class TSBaseArray<SGroupPtr>& operator=(class TSBaseArray<SGroupPtr>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SGroupPtr>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SGroupPtr>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CDetailDoodadData *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CDetailDoodadData** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CDetailDoodadData *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CDetailDoodadData*& operator[](unsigned int);
  class CDetailDoodadData*& operator[](unsigned int);
  unsigned int Bytes();
  class CDetailDoodadData** Ptr();
  class CDetailDoodadData** Ptr();
  unsigned int SizeOfElement();
  class CDetailDoodadData** Top();
  class CDetailDoodadData** Top();
  unsigned int NumElements();
  void TSBaseArray<CDetailDoodadData *>(class TSBaseArray<CDetailDoodadData *>&);
  void TSBaseArray<CDetailDoodadData *>();
  class TSBaseArray<CDetailDoodadData *>& operator=(class TSBaseArray<CDetailDoodadData *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CDetailDoodadData *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CDetailDoodadData *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CSimpleDoodad,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CSimpleDoodad,-572662307>& operator[](unsigned int);
  class TSExplicitList<CSimpleDoodad,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CSimpleDoodad,-572662307>* Ptr();
  class TSExplicitList<CSimpleDoodad,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CSimpleDoodad,-572662307>* Top();
  class TSExplicitList<CSimpleDoodad,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >(class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >();
  class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CMapDoodadDef *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CMapDoodadDef** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CMapDoodadDef*& operator[](unsigned int);
  class CMapDoodadDef*& operator[](unsigned int);
  unsigned int Bytes();
  class CMapDoodadDef** Ptr();
  class CMapDoodadDef** Ptr();
  unsigned int SizeOfElement();
  class CMapDoodadDef** Top();
  class CMapDoodadDef** Top();
  unsigned int NumElements();
  void TSBaseArray<CMapDoodadDef *>(class TSBaseArray<CMapDoodadDef *>&);
  void TSBaseArray<CMapDoodadDef *>();
  class TSBaseArray<CMapDoodadDef *>& operator=(class TSBaseArray<CMapDoodadDef *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CMapDoodadDef *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CMapDoodadDef *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::C44Matrix> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::C44Matrix* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class NTempest::C44Matrix& operator[](unsigned int);
  class NTempest::C44Matrix& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::C44Matrix* Ptr();
  class NTempest::C44Matrix* Ptr();
  unsigned int SizeOfElement();
  class NTempest::C44Matrix* Top();
  class NTempest::C44Matrix* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::C44Matrix>(class TSBaseArray<NTempest::C44Matrix>&);
  void TSBaseArray<NTempest::C44Matrix>();
  class TSBaseArray<NTempest::C44Matrix>& operator=(class TSBaseArray<NTempest::C44Matrix>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::C44Matrix>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::C44Matrix>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SMDoodadDef> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SMDoodadDef* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SMDoodadDef& operator[](unsigned int);
  struct SMDoodadDef& operator[](unsigned int);
  unsigned int Bytes();
  struct SMDoodadDef* Ptr();
  struct SMDoodadDef* Ptr();
  unsigned int SizeOfElement();
  struct SMDoodadDef* Top();
  struct SMDoodadDef* Top();
  unsigned int NumElements();
  void TSBaseArray<SMDoodadDef>(class TSBaseArray<SMDoodadDef>&);
  void TSBaseArray<SMDoodadDef>();
  class TSBaseArray<SMDoodadDef>& operator=(class TSBaseArray<SMDoodadDef>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SMDoodadDef>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SMDoodadDef>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SMMapObjDef> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SMMapObjDef* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SMMapObjDef& operator[](unsigned int);
  struct SMMapObjDef& operator[](unsigned int);
  unsigned int Bytes();
  struct SMMapObjDef* Ptr();
  struct SMMapObjDef* Ptr();
  unsigned int SizeOfElement();
  struct SMMapObjDef* Top();
  struct SMMapObjDef* Top();
  unsigned int NumElements();
  void TSBaseArray<SMMapObjDef>(class TSBaseArray<SMMapObjDef>&);
  void TSBaseArray<SMMapObjDef>();
  class TSBaseArray<SMMapObjDef>& operator=(class TSBaseArray<SMMapObjDef>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SMMapObjDef>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SMMapObjDef>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CMapLight *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CMapLight** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CMapLight*& operator[](unsigned int);
  class CMapLight*& operator[](unsigned int);
  unsigned int Bytes();
  class CMapLight** Ptr();
  class CMapLight** Ptr();
  unsigned int SizeOfElement();
  class CMapLight** Top();
  class CMapLight** Top();
  unsigned int NumElements();
  void TSBaseArray<CMapLight *>(class TSBaseArray<CMapLight *>&);
  void TSBaseArray<CMapLight *>();
  class TSBaseArray<CMapLight *>& operator=(class TSBaseArray<CMapLight *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CMapLight *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CMapLight *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FILEMAP,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FILEMAP,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::Constructor();
  void TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::Count();
  class TSExplicitList<FILEMAP,-572662307>& operator[](unsigned int);
  class TSExplicitList<FILEMAP,-572662307>& TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  class TSExplicitList<FILEMAP,-572662307>* Ptr();
  class TSExplicitList<FILEMAP,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FILEMAP,-572662307>* Top();
  class TSExplicitList<FILEMAP,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FILEMAP,-572662307> >(class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::TSBaseArray<TSExplicitList<FILEMAP,-572662307> >();
  class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FILEMAP,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<RGN> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct RGN* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<RGN>::Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct RGN& operator[](unsigned int);
  struct RGN& operator[](unsigned int);
  unsigned int Bytes();
  struct RGN* Ptr();
  struct RGN* Ptr();
  unsigned int SizeOfElement();
  struct RGN* Top();
  struct RGN* Top();
  unsigned int NumElements();
  void TSBaseArray<RGN>(class TSBaseArray<RGN>&);
  void TSBaseArray<RGN>::TSBaseArray<RGN>();
  class TSBaseArray<RGN>& operator=(class TSBaseArray<RGN>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<RGN>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<RGN>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<RGN,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<RGN,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<TSExplicitList<RGN,-572662307> >::Constructor();
  void TSBaseArray<TSExplicitList<RGN,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<TSExplicitList<RGN,-572662307> >::Count();
  class TSExplicitList<RGN,-572662307>& operator[](unsigned int);
  class TSExplicitList<RGN,-572662307>& TSBaseArray<TSExplicitList<RGN,-572662307> >::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  class TSExplicitList<RGN,-572662307>* Ptr();
  class TSExplicitList<RGN,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<RGN,-572662307>* Top();
  class TSExplicitList<RGN,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<RGN,-572662307> >(class TSBaseArray<TSExplicitList<RGN,-572662307> >&);
  void TSBaseArray<TSExplicitList<RGN,-572662307> >::TSBaseArray<TSExplicitList<RGN,-572662307> >();
  class TSBaseArray<TSExplicitList<RGN,-572662307> >& operator=(class TSBaseArray<TSExplicitList<RGN,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<RGN,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<RGN,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<_FOUNDPARAM> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct _FOUNDPARAM* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<_FOUNDPARAM>::Constructor();
  void TSBaseArray<_FOUNDPARAM>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<_FOUNDPARAM>::Count();
  struct _FOUNDPARAM& operator[](unsigned int);
  struct _FOUNDPARAM& TSBaseArray<_FOUNDPARAM>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  struct _FOUNDPARAM* TSBaseArray<_FOUNDPARAM>::Ptr();
  struct _FOUNDPARAM* TSBaseArray<_FOUNDPARAM>::Ptr();
  unsigned int SizeOfElement();
  struct _FOUNDPARAM* Top();
  struct _FOUNDPARAM* Top();
  unsigned int TSBaseArray<_FOUNDPARAM>::NumElements();
  void TSBaseArray<_FOUNDPARAM>(class TSBaseArray<_FOUNDPARAM>&);
  void TSBaseArray<_FOUNDPARAM>::TSBaseArray<_FOUNDPARAM>();
  class TSBaseArray<_FOUNDPARAM>& operator=(class TSBaseArray<_FOUNDPARAM>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<_FOUNDPARAM>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<_FOUNDPARAM>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<RECTF> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct RECTF* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<RECTF>::Constructor();
  void TSBaseArray<RECTF>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<RECTF>::Count();
  struct RECTF& operator[](unsigned int);
  struct RECTF& TSBaseArray<RECTF>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  struct RECTF* TSBaseArray<RECTF>::Ptr();
  struct RECTF* TSBaseArray<RECTF>::Ptr();
  unsigned int SizeOfElement();
  struct RECTF* Top();
  struct RECTF* Top();
  unsigned int TSBaseArray<RECTF>::NumElements();
  void TSBaseArray<RECTF>(class TSBaseArray<RECTF>&);
  void TSBaseArray<RECTF>::TSBaseArray<RECTF>();
  class TSBaseArray<RECTF>& operator=(class TSBaseArray<RECTF>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<RECTF>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<RECTF>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<_SOURCE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct _SOURCE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<_SOURCE>::Constructor();
  void TSBaseArray<_SOURCE>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<_SOURCE>::Count();
  struct _SOURCE& operator[](unsigned int);
  struct _SOURCE& TSBaseArray<_SOURCE>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  struct _SOURCE* TSBaseArray<_SOURCE>::Ptr();
  struct _SOURCE* TSBaseArray<_SOURCE>::Ptr();
  unsigned int SizeOfElement();
  struct _SOURCE* Top();
  struct _SOURCE* Top();
  unsigned int TSBaseArray<_SOURCE>::NumElements();
  void TSBaseArray<_SOURCE>(class TSBaseArray<_SOURCE>&);
  void TSBaseArray<_SOURCE>::TSBaseArray<_SOURCE>();
  class TSBaseArray<_SOURCE>& operator=(class TSBaseArray<_SOURCE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<_SOURCE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<_SOURCE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ZipFileDirEntry,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::Constructor();
  void TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::Count();
  class TSExplicitList<ZipFileDirEntry,-572662307>& operator[](unsigned int);
  class TSExplicitList<ZipFileDirEntry,-572662307>& TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  class TSExplicitList<ZipFileDirEntry,-572662307>* Ptr();
  class TSExplicitList<ZipFileDirEntry,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ZipFileDirEntry,-572662307>* Top();
  class TSExplicitList<ZipFileDirEntry,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >(class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >();
  class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>& operator[](unsigned int);
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* Ptr();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* Top();
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >(class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >();
  class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxMonitorMode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxMonitorMode* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxMonitorMode& operator[](unsigned int);
  struct CGxMonitorMode& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxMonitorMode* Ptr();
  struct CGxMonitorMode* Ptr();
  unsigned int SizeOfElement();
  struct CGxMonitorMode* Top();
  struct CGxMonitorMode* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxMonitorMode>(class TSBaseArray<CGxMonitorMode>&);
  void TSBaseArray<CGxMonitorMode>();
  class TSBaseArray<CGxMonitorMode>& operator=(class TSBaseArray<CGxMonitorMode>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxMonitorMode>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxMonitorMode>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CVar,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CVar,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CVar,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CVar,-572662307>& operator[](unsigned int);
  class TSExplicitList<CVar,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CVar,-572662307>* Ptr();
  class TSExplicitList<CVar,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CVar,-572662307>* Top();
  class TSExplicitList<CVar,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CVar,-572662307> >(class TSBaseArray<TSExplicitList<CVar,-572662307> >&);
  void TSBaseArray<TSExplicitList<CVar,-572662307> >();
  class TSBaseArray<TSExplicitList<CVar,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CVar,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CVar,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CVar,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CONSOLECOMMAND,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CONSOLECOMMAND,-572662307>& operator[](unsigned int);
  class TSExplicitList<CONSOLECOMMAND,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CONSOLECOMMAND,-572662307>* Ptr();
  class TSExplicitList<CONSOLECOMMAND,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CONSOLECOMMAND,-572662307>* Top();
  class TSExplicitList<CONSOLECOMMAND,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >(class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >();
  class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<INVENTORYART,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<INVENTORYART,-572662307>& operator[](unsigned int);
  class TSExplicitList<INVENTORYART,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<INVENTORYART,-572662307>* Ptr();
  class TSExplicitList<INVENTORYART,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<INVENTORYART,-572662307>* Top();
  class TSExplicitList<INVENTORYART,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >(class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >();
  class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >& operator=(class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<TRADESKILLLINE,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<TRADESKILLLINE,-572662307>& operator[](unsigned int);
  class TSExplicitList<TRADESKILLLINE,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<TRADESKILLLINE,-572662307>* Ptr();
  class TSExplicitList<TRADESKILLLINE,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<TRADESKILLLINE,-572662307>* Top();
  class TSExplicitList<TRADESKILLLINE,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >(class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >();
  class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<InitialSpellStruct> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct InitialSpellStruct* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct InitialSpellStruct& operator[](unsigned int);
  struct InitialSpellStruct& operator[](unsigned int);
  unsigned int Bytes();
  struct InitialSpellStruct* Ptr();
  struct InitialSpellStruct* Ptr();
  unsigned int SizeOfElement();
  struct InitialSpellStruct* Top();
  struct InitialSpellStruct* Top();
  unsigned int NumElements();
  void TSBaseArray<InitialSpellStruct>(class TSBaseArray<InitialSpellStruct>&);
  void TSBaseArray<InitialSpellStruct>();
  class TSBaseArray<InitialSpellStruct>& operator=(class TSBaseArray<InitialSpellStruct>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<InitialSpellStruct>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<InitialSpellStruct>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ITEMEXPIRATION,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ITEMEXPIRATION,-572662307>& operator[](unsigned int);
  class TSExplicitList<ITEMEXPIRATION,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ITEMEXPIRATION,-572662307>* Ptr();
  class TSExplicitList<ITEMEXPIRATION,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ITEMEXPIRATION,-572662307>* Top();
  class TSExplicitList<ITEMEXPIRATION,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >(class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >();
  class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ITEMSWAP> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct ITEMSWAP* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<ITEMSWAP>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct ITEMSWAP& operator[](unsigned int);
  struct ITEMSWAP& operator[](unsigned int);
  unsigned int Bytes();
  struct ITEMSWAP* Ptr();
  struct ITEMSWAP* Ptr();
  unsigned int SizeOfElement();
  struct ITEMSWAP* Top();
  struct ITEMSWAP* Top();
  unsigned int NumElements();
  void TSBaseArray<ITEMSWAP>(class TSBaseArray<ITEMSWAP>&);
  void TSBaseArray<ITEMSWAP>();
  class TSBaseArray<ITEMSWAP>& operator=(class TSBaseArray<ITEMSWAP>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ITEMSWAP>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ITEMSWAP>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::C4Plane> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::C4Plane* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::C4Plane>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class NTempest::C4Plane& operator[](unsigned int);
  class NTempest::C4Plane& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::C4Plane* Ptr();
  class NTempest::C4Plane* Ptr();
  unsigned int SizeOfElement();
  class NTempest::C4Plane* Top();
  class NTempest::C4Plane* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::C4Plane>(class TSBaseArray<NTempest::C4Plane>&);
  void TSBaseArray<NTempest::C4Plane>();
  class TSBaseArray<NTempest::C4Plane>& operator=(class TSBaseArray<NTempest::C4Plane>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::C4Plane>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::C4Plane>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<QUESTGIVEREMOTENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct QUESTGIVEREMOTENODE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct QUESTGIVEREMOTENODE& operator[](unsigned int);
  struct QUESTGIVEREMOTENODE& operator[](unsigned int);
  unsigned int Bytes();
  struct QUESTGIVEREMOTENODE* Ptr();
  struct QUESTGIVEREMOTENODE* Ptr();
  unsigned int SizeOfElement();
  struct QUESTGIVEREMOTENODE* Top();
  struct QUESTGIVEREMOTENODE* Top();
  unsigned int NumElements();
  void TSBaseArray<QUESTGIVEREMOTENODE>(class TSBaseArray<QUESTGIVEREMOTENODE>&);
  void TSBaseArray<QUESTGIVEREMOTENODE>();
  class TSBaseArray<QUESTGIVEREMOTENODE>& operator=(class TSBaseArray<QUESTGIVEREMOTENODE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<QUESTGIVEREMOTENODE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<QUESTGIVEREMOTENODE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<NAMEPLATEDESC,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<NAMEPLATEDESC,-572662307>& operator[](unsigned int);
  class TSExplicitList<NAMEPLATEDESC,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<NAMEPLATEDESC,-572662307>* Ptr();
  class TSExplicitList<NAMEPLATEDESC,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<NAMEPLATEDESC,-572662307>* Top();
  class TSExplicitList<NAMEPLATEDESC,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >(class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >();
  class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<char> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ char* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  char& operator[](unsigned int);
  char& operator[](unsigned int);
  unsigned int Bytes();
  char* Ptr();
  char* Ptr();
  unsigned int SizeOfElement();
  char* Top();
  char* Top();
  unsigned int NumElements();
  void TSBaseArray<char>(class TSBaseArray<char>&);
  void TSBaseArray<char>();
  class TSBaseArray<char>& operator=(class TSBaseArray<char>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<char>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<char>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ANIMENDDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct ANIMENDDATA* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct ANIMENDDATA& operator[](unsigned int);
  struct ANIMENDDATA& operator[](unsigned int);
  unsigned int Bytes();
  struct ANIMENDDATA* Ptr();
  struct ANIMENDDATA* Ptr();
  unsigned int SizeOfElement();
  struct ANIMENDDATA* Top();
  struct ANIMENDDATA* Top();
  unsigned int NumElements();
  void TSBaseArray<ANIMENDDATA>(class TSBaseArray<ANIMENDDATA>&);
  void TSBaseArray<ANIMENDDATA>();
  class TSBaseArray<ANIMENDDATA>& operator=(class TSBaseArray<ANIMENDDATA>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ANIMENDDATA>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ANIMENDDATA>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<DEATTHUDSOUNDINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct DEATTHUDSOUNDINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct DEATTHUDSOUNDINFO& operator[](unsigned int);
  struct DEATTHUDSOUNDINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct DEATTHUDSOUNDINFO* Ptr();
  struct DEATTHUDSOUNDINFO* Ptr();
  unsigned int SizeOfElement();
  struct DEATTHUDSOUNDINFO* Top();
  struct DEATTHUDSOUNDINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<DEATTHUDSOUNDINFO>(class TSBaseArray<DEATTHUDSOUNDINFO>&);
  void TSBaseArray<DEATTHUDSOUNDINFO>();
  class TSBaseArray<DEATTHUDSOUNDINFO>& operator=(class TSBaseArray<DEATTHUDSOUNDINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<DEATTHUDSOUNDINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<DEATTHUDSOUNDINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>& operator[](unsigned int);
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* Ptr();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* Top();
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >(class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >();
  class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<VERTDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct VERTDATA* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<VERTDATA>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct VERTDATA& operator[](unsigned int);
  struct VERTDATA& operator[](unsigned int);
  unsigned int Bytes();
  struct VERTDATA* Ptr();
  struct VERTDATA* Ptr();
  unsigned int SizeOfElement();
  struct VERTDATA* Top();
  struct VERTDATA* Top();
  unsigned int NumElements();
  void TSBaseArray<VERTDATA>(class TSBaseArray<VERTDATA>&);
  void TSBaseArray<VERTDATA>();
  class TSBaseArray<VERTDATA>& operator=(class TSBaseArray<VERTDATA>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<VERTDATA>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<VERTDATA>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<PERSISTENTTEXTURE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct PERSISTENTTEXTURE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct PERSISTENTTEXTURE& operator[](unsigned int);
  struct PERSISTENTTEXTURE& operator[](unsigned int);
  unsigned int Bytes();
  struct PERSISTENTTEXTURE* Ptr();
  struct PERSISTENTTEXTURE* Ptr();
  unsigned int SizeOfElement();
  struct PERSISTENTTEXTURE* Top();
  struct PERSISTENTTEXTURE* Top();
  unsigned int NumElements();
  void TSBaseArray<PERSISTENTTEXTURE>(class TSBaseArray<PERSISTENTTEXTURE>&);
  void TSBaseArray<PERSISTENTTEXTURE>();
  class TSBaseArray<PERSISTENTTEXTURE>& operator=(class TSBaseArray<PERSISTENTTEXTURE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<PERSISTENTTEXTURE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<PERSISTENTTEXTURE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TIMEDTEXTURE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TIMEDTEXTURE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct TIMEDTEXTURE& operator[](unsigned int);
  struct TIMEDTEXTURE& operator[](unsigned int);
  unsigned int Bytes();
  struct TIMEDTEXTURE* Ptr();
  struct TIMEDTEXTURE* Ptr();
  unsigned int SizeOfElement();
  struct TIMEDTEXTURE* Top();
  struct TIMEDTEXTURE* Top();
  unsigned int NumElements();
  void TSBaseArray<TIMEDTEXTURE>(class TSBaseArray<TIMEDTEXTURE>&);
  void TSBaseArray<TIMEDTEXTURE>();
  class TSBaseArray<TIMEDTEXTURE>& operator=(class TSBaseArray<TIMEDTEXTURE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TIMEDTEXTURE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TIMEDTEXTURE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<UNITHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<UNITHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<UNITHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<UNITHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<UNITHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<UNITHASHOBJ,-572662307>* Top();
  class TSExplicitList<UNITHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ENCHANTMENTLOGDESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct ENCHANTMENTLOGDESC* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct ENCHANTMENTLOGDESC& operator[](unsigned int);
  struct ENCHANTMENTLOGDESC& operator[](unsigned int);
  unsigned int Bytes();
  struct ENCHANTMENTLOGDESC* Ptr();
  struct ENCHANTMENTLOGDESC* Ptr();
  unsigned int SizeOfElement();
  struct ENCHANTMENTLOGDESC* Top();
  struct ENCHANTMENTLOGDESC* Top();
  unsigned int NumElements();
  void TSBaseArray<ENCHANTMENTLOGDESC>(class TSBaseArray<ENCHANTMENTLOGDESC>&);
  void TSBaseArray<ENCHANTMENTLOGDESC>();
  class TSBaseArray<ENCHANTMENTLOGDESC>& operator=(class TSBaseArray<ENCHANTMENTLOGDESC>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ENCHANTMENTLOGDESC>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ENCHANTMENTLOGDESC>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHANCES> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHANCES* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CHANCES& operator[](unsigned int);
  struct CHANCES& operator[](unsigned int);
  unsigned int Bytes();
  struct CHANCES* Ptr();
  struct CHANCES* Ptr();
  unsigned int SizeOfElement();
  struct CHANCES* Top();
  struct CHANCES* Top();
  unsigned int NumElements();
  void TSBaseArray<CHANCES>(class TSBaseArray<CHANCES>&);
  void TSBaseArray<CHANCES>();
  class TSBaseArray<CHANCES>& operator=(class TSBaseArray<CHANCES>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHANCES>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHANCES>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ANIMKIT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ANIMKIT,-572662307>& operator[](unsigned int);
  class TSExplicitList<ANIMKIT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ANIMKIT,-572662307>* Ptr();
  class TSExplicitList<ANIMKIT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ANIMKIT,-572662307>* Top();
  class TSExplicitList<ANIMKIT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >(class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >();
  class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CLightList> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CLightList* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CLightList& operator[](unsigned int);
  struct CLightList& operator[](unsigned int);
  unsigned int Bytes();
  struct CLightList* Ptr();
  struct CLightList* Ptr();
  unsigned int SizeOfElement();
  struct CLightList* Top();
  struct CLightList* Top();
  unsigned int NumElements();
  void TSBaseArray<CLightList>(class TSBaseArray<CLightList>&);
  void TSBaseArray<CLightList>();
  class TSBaseArray<CLightList>& operator=(class TSBaseArray<CLightList>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CLightList>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CLightList>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxuLight *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxuLight** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxuLight*& operator[](unsigned int);
  struct CGxuLight*& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxuLight** Ptr();
  struct CGxuLight** Ptr();
  unsigned int SizeOfElement();
  struct CGxuLight** Top();
  struct CGxuLight** Top();
  unsigned int NumElements();
  void TSBaseArray<CGxuLight *>(class TSBaseArray<CGxuLight *>&);
  void TSBaseArray<CGxuLight *>();
  class TSBaseArray<CGxuLight *>& operator=(class TSBaseArray<CGxuLight *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxuLight *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxuLight *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CLightList,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CLightList,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CLightList,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CLightList,-572662307>& operator[](unsigned int);
  class TSExplicitList<CLightList,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CLightList,-572662307>* Ptr();
  class TSExplicitList<CLightList,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CLightList,-572662307>* Top();
  class TSExplicitList<CLightList,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CLightList,-572662307> >(class TSBaseArray<TSExplicitList<CLightList,-572662307> >&);
  void TSBaseArray<TSExplicitList<CLightList,-572662307> >();
  class TSBaseArray<TSExplicitList<CLightList,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CLightList,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CLightList,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CLightList,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TEXTLINETEXTURE *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TEXTLINETEXTURE** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct TEXTLINETEXTURE*& operator[](unsigned int);
  struct TEXTLINETEXTURE*& operator[](unsigned int);
  unsigned int Bytes();
  struct TEXTLINETEXTURE** Ptr();
  struct TEXTLINETEXTURE** Ptr();
  unsigned int SizeOfElement();
  struct TEXTLINETEXTURE** Top();
  struct TEXTLINETEXTURE** Top();
  unsigned int NumElements();
  void TSBaseArray<TEXTLINETEXTURE *>(class TSBaseArray<TEXTLINETEXTURE *>&);
  void TSBaseArray<TEXTLINETEXTURE *>();
  class TSBaseArray<TEXTLINETEXTURE *>& operator=(class TSBaseArray<TEXTLINETEXTURE *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TEXTLINETEXTURE *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TEXTLINETEXTURE *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>& operator[](unsigned int);
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* Ptr();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* Top();
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >(class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >();
  class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<KERNNODE,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<KERNNODE,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<KERNNODE,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<KERNNODE,-572662307>& operator[](unsigned int);
  class TSExplicitList<KERNNODE,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<KERNNODE,-572662307>* Ptr();
  class TSExplicitList<KERNNODE,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<KERNNODE,-572662307>* Top();
  class TSExplicitList<KERNNODE,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<KERNNODE,-572662307> >(class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >&);
  void TSBaseArray<TSExplicitList<KERNNODE,-572662307> >();
  class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<KERNNODE,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<KERNNODE,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<STRINGVIEWMATRICES,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>& operator[](unsigned int);
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* Ptr();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* Top();
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >(class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >();
  class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >& operator=(class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CHARCODEDESC,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CHARCODEDESC,-572662307>& operator[](unsigned int);
  class TSExplicitList<CHARCODEDESC,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CHARCODEDESC,-572662307>* Ptr();
  class TSExplicitList<CHARCODEDESC,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CHARCODEDESC,-572662307>* Top();
  class TSExplicitList<CHARCODEDESC,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >(class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >();
  class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<GLYPHBITMAPDATA,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>& operator[](unsigned int);
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* Ptr();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* Top();
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >(class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >();
  class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >& operator=(class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::CImVector *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::CImVector** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class NTempest::CImVector*& operator[](unsigned int);
  class NTempest::CImVector*& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::CImVector** Ptr();
  class NTempest::CImVector** Ptr();
  unsigned int SizeOfElement();
  class NTempest::CImVector** Top();
  class NTempest::CImVector** Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::CImVector *>(class TSBaseArray<NTempest::CImVector *>&);
  void TSBaseArray<NTempest::CImVector *>();
  class TSBaseArray<NTempest::CImVector *>& operator=(class TSBaseArray<NTempest::CImVector *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::CImVector *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::CImVector *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<GXUFONTHYPERLINKINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct GXUFONTHYPERLINKINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct GXUFONTHYPERLINKINFO& operator[](unsigned int);
  struct GXUFONTHYPERLINKINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct GXUFONTHYPERLINKINFO* Ptr();
  struct GXUFONTHYPERLINKINFO* Ptr();
  unsigned int SizeOfElement();
  struct GXUFONTHYPERLINKINFO* Top();
  struct GXUFONTHYPERLINKINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<GXUFONTHYPERLINKINFO>(class TSBaseArray<GXUFONTHYPERLINKINFO>&);
  void TSBaseArray<GXUFONTHYPERLINKINFO>();
  class TSBaseArray<GXUFONTHYPERLINKINFO>& operator=(class TSBaseArray<GXUFONTHYPERLINKINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<GXUFONTHYPERLINKINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<GXUFONTHYPERLINKINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TEXTURECACHEROW> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TEXTURECACHEROW* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct TEXTURECACHEROW& operator[](unsigned int);
  struct TEXTURECACHEROW& operator[](unsigned int);
  unsigned int Bytes();
  struct TEXTURECACHEROW* Ptr();
  struct TEXTURECACHEROW* Ptr();
  unsigned int SizeOfElement();
  struct TEXTURECACHEROW* Top();
  struct TEXTURECACHEROW* Top();
  unsigned int NumElements();
  void TSBaseArray<TEXTURECACHEROW>(class TSBaseArray<TEXTURECACHEROW>&);
  void TSBaseArray<TEXTURECACHEROW>();
  class TSBaseArray<TEXTURECACHEROW>& operator=(class TSBaseArray<TEXTURECACHEROW>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TEXTURECACHEROW>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TEXTURECACHEROW>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<IGXUTEXTLINE *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct IGXUTEXTLINE** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct IGXUTEXTLINE*& operator[](unsigned int);
  struct IGXUTEXTLINE*& operator[](unsigned int);
  unsigned int Bytes();
  struct IGXUTEXTLINE** Ptr();
  struct IGXUTEXTLINE** Ptr();
  unsigned int SizeOfElement();
  struct IGXUTEXTLINE** Top();
  struct IGXUTEXTLINE** Top();
  unsigned int NumElements();
  void TSBaseArray<IGXUTEXTLINE *>(class TSBaseArray<IGXUTEXTLINE *>&);
  void TSBaseArray<IGXUTEXTLINE *>();
  class TSBaseArray<IGXUTEXTLINE *>& operator=(class TSBaseArray<IGXUTEXTLINE *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<IGXUTEXTLINE *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<IGXUTEXTLINE *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<VERT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct VERT* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct VERT& operator[](unsigned int);
  struct VERT& operator[](unsigned int);
  unsigned int Bytes();
  struct VERT* Ptr();
  struct VERT* Ptr();
  unsigned int SizeOfElement();
  struct VERT* Top();
  struct VERT* Top();
  unsigned int NumElements();
  void TSBaseArray<VERT>(class TSBaseArray<VERT>&);
  void TSBaseArray<VERT>();
  class TSBaseArray<VERT>& operator=(class TSBaseArray<VERT>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<VERT>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<VERT>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FACEDATA,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FACEDATA,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<FACEDATA,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<FACEDATA,-572662307>& operator[](unsigned int);
  class TSExplicitList<FACEDATA,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<FACEDATA,-572662307>* Ptr();
  class TSExplicitList<FACEDATA,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FACEDATA,-572662307>* Top();
  class TSExplicitList<FACEDATA,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FACEDATA,-572662307> >(class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >&);
  void TSBaseArray<TSExplicitList<FACEDATA,-572662307> >();
  class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FACEDATA,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FACEDATA,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<WowConnection *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class WowConnection** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class WowConnection*& operator[](unsigned int);
  class WowConnection*& operator[](unsigned int);
  unsigned int Bytes();
  class WowConnection** Ptr();
  class WowConnection** Ptr();
  unsigned int SizeOfElement();
  class WowConnection** Top();
  class WowConnection** Top();
  unsigned int NumElements();
  void TSBaseArray<WowConnection *>(class TSBaseArray<WowConnection *>&);
  void TSBaseArray<WowConnection *>();
  class TSBaseArray<WowConnection *>& operator=(class TSBaseArray<WowConnection *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<WowConnection *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<WowConnection *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<REALM_INFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct REALM_INFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct REALM_INFO& operator[](unsigned int);
  struct REALM_INFO& operator[](unsigned int);
  unsigned int Bytes();
  struct REALM_INFO* Ptr();
  struct REALM_INFO* Ptr();
  unsigned int SizeOfElement();
  struct REALM_INFO* Top();
  struct REALM_INFO* Top();
  unsigned int NumElements();
  void TSBaseArray<REALM_INFO>(class TSBaseArray<REALM_INFO>&);
  void TSBaseArray<REALM_INFO>();
  class TSBaseArray<REALM_INFO>& operator=(class TSBaseArray<REALM_INFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<REALM_INFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<REALM_INFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHARACTER_INFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHARACTER_INFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CHARACTER_INFO>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CHARACTER_INFO& operator[](unsigned int);
  struct CHARACTER_INFO& operator[](unsigned int);
  unsigned int Bytes();
  struct CHARACTER_INFO* Ptr();
  struct CHARACTER_INFO* Ptr();
  unsigned int SizeOfElement();
  struct CHARACTER_INFO* Top();
  struct CHARACTER_INFO* Top();
  unsigned int NumElements();
  void TSBaseArray<CHARACTER_INFO>(class TSBaseArray<CHARACTER_INFO>&);
  void TSBaseArray<CHARACTER_INFO>();
  class TSBaseArray<CHARACTER_INFO>& operator=(class TSBaseArray<CHARACTER_INFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHARACTER_INFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHARACTER_INFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxFormat> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxFormat* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxFormat& operator[](unsigned int);
  struct CGxFormat& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxFormat* Ptr();
  struct CGxFormat* Ptr();
  unsigned int SizeOfElement();
  struct CGxFormat* Top();
  struct CGxFormat* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxFormat>(class TSBaseArray<CGxFormat>&);
  void TSBaseArray<CGxFormat>();
  class TSBaseArray<CGxFormat>& operator=(class TSBaseArray<CGxFormat>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxFormat>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxFormat>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxVertexShader> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CGxVertexShader* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CGxVertexShader& operator[](unsigned int);
  class CGxVertexShader& operator[](unsigned int);
  unsigned int Bytes();
  class CGxVertexShader* Ptr();
  class CGxVertexShader* Ptr();
  unsigned int SizeOfElement();
  class CGxVertexShader* Top();
  class CGxVertexShader* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxVertexShader>(class TSBaseArray<CGxVertexShader>&);
  void TSBaseArray<CGxVertexShader>();
  class TSBaseArray<CGxVertexShader>& operator=(class TSBaseArray<CGxVertexShader>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxVertexShader>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxVertexShader>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxPixelShader> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CGxPixelShader* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CGxPixelShader& operator[](unsigned int);
  class CGxPixelShader& operator[](unsigned int);
  unsigned int Bytes();
  class CGxPixelShader* Ptr();
  class CGxPixelShader* Ptr();
  unsigned int SizeOfElement();
  class CGxPixelShader* Top();
  class CGxPixelShader* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxPixelShader>(class TSBaseArray<CGxPixelShader>&);
  void TSBaseArray<CGxPixelShader>();
  class TSBaseArray<CGxPixelShader>& operator=(class TSBaseArray<CGxPixelShader>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxPixelShader>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxPixelShader>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxTex *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CGxTex** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CGxTex *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CGxTex*& operator[](unsigned int);
  class CGxTex*& operator[](unsigned int);
  unsigned int Bytes();
  class CGxTex** Ptr();
  class CGxTex** Ptr();
  unsigned int SizeOfElement();
  class CGxTex** Top();
  class CGxTex** Top();
  unsigned int NumElements();
  void TSBaseArray<CGxTex *>(class TSBaseArray<CGxTex *>&);
  void TSBaseArray<CGxTex *>();
  class TSBaseArray<CGxTex *>& operator=(class TSBaseArray<CGxTex *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxTex *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxTex *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CGxVertexShader,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CGxVertexShader,-572662307>& operator[](unsigned int);
  class TSExplicitList<CGxVertexShader,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CGxVertexShader,-572662307>* Ptr();
  class TSExplicitList<CGxVertexShader,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CGxVertexShader,-572662307>* Top();
  class TSExplicitList<CGxVertexShader,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >(class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >();
  class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxAppRenderState> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxAppRenderState* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CGxAppRenderState>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CGxAppRenderState& operator[](unsigned int);
  struct CGxAppRenderState& TSBaseArray<CGxAppRenderState>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  struct CGxAppRenderState* Ptr();
  struct CGxAppRenderState* Ptr();
  unsigned int SizeOfElement();
  struct CGxAppRenderState* Top();
  struct CGxAppRenderState* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxAppRenderState>(class TSBaseArray<CGxAppRenderState>&);
  void TSBaseArray<CGxAppRenderState>();
  class TSBaseArray<CGxAppRenderState>& operator=(class TSBaseArray<CGxAppRenderState>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxAppRenderState>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxAppRenderState>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxStateBom> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CGxStateBom* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CGxStateBom& operator[](unsigned int);
  class CGxStateBom& operator[](unsigned int);
  unsigned int Bytes();
  class CGxStateBom* Ptr();
  class CGxStateBom* Ptr();
  unsigned int SizeOfElement();
  class CGxStateBom* Top();
  class CGxStateBom* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxStateBom>(class TSBaseArray<CGxStateBom>&);
  void TSBaseArray<CGxStateBom>();
  class TSBaseArray<CGxStateBom>& operator=(class TSBaseArray<CGxStateBom>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxStateBom>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxStateBom>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CGxPixelShader,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CGxPixelShader,-572662307>& operator[](unsigned int);
  class TSExplicitList<CGxPixelShader,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CGxPixelShader,-572662307>* Ptr();
  class TSExplicitList<CGxPixelShader,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CGxPixelShader,-572662307>* Top();
  class TSExplicitList<CGxPixelShader,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >(class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >();
  class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<enum EGxRenderState> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ enum EGxRenderState* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  enum EGxRenderState& operator[](unsigned int);
  enum EGxRenderState& operator[](unsigned int);
  unsigned int Bytes();
  enum EGxRenderState* Ptr();
  enum EGxRenderState* Ptr();
  unsigned int SizeOfElement();
  enum EGxRenderState* Top();
  enum EGxRenderState* Top();
  unsigned int NumElements();
  void TSBaseArray<enum EGxRenderState>(class TSBaseArray<enum EGxRenderState>&);
  void TSBaseArray<enum EGxRenderState>();
  class TSBaseArray<enum EGxRenderState>& operator=(class TSBaseArray<enum EGxRenderState>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<enum EGxRenderState>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<enum EGxRenderState>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxPushedRenderState> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGxPushedRenderState* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CGxPushedRenderState& operator[](unsigned int);
  struct CGxPushedRenderState& operator[](unsigned int);
  unsigned int Bytes();
  struct CGxPushedRenderState* Ptr();
  struct CGxPushedRenderState* Ptr();
  unsigned int SizeOfElement();
  struct CGxPushedRenderState* Top();
  struct CGxPushedRenderState* Top();
  unsigned int NumElements();
  void TSBaseArray<CGxPushedRenderState>(class TSBaseArray<CGxPushedRenderState>&);
  void TSBaseArray<CGxPushedRenderState>();
  class TSBaseArray<CGxPushedRenderState>& operator=(class TSBaseArray<CGxPushedRenderState>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxPushedRenderState>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxPushedRenderState>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGxVertexBuffer_D3d *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CGxVertexBuffer_D3d** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CGxVertexBuffer_D3d*& operator[](unsigned int);
  class CGxVertexBuffer_D3d*& operator[](unsigned int);
  unsigned int Bytes();
  class CGxVertexBuffer_D3d** Ptr();
  class CGxVertexBuffer_D3d** Ptr();
  unsigned int SizeOfElement();
  class CGxVertexBuffer_D3d** Top();
  class CGxVertexBuffer_D3d** Top();
  unsigned int NumElements();
  void TSBaseArray<CGxVertexBuffer_D3d *>(class TSBaseArray<CGxVertexBuffer_D3d *>&);
  void TSBaseArray<CGxVertexBuffer_D3d *>();
  class TSBaseArray<CGxVertexBuffer_D3d *>& operator=(class TSBaseArray<CGxVertexBuffer_D3d *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGxVertexBuffer_D3d *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGxVertexBuffer_D3d *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ItemSubClassRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class ItemSubClassRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class ItemSubClassRec*& operator[](unsigned int);
  class ItemSubClassRec*& operator[](unsigned int);
  unsigned int Bytes();
  class ItemSubClassRec** Ptr();
  class ItemSubClassRec** Ptr();
  unsigned int SizeOfElement();
  class ItemSubClassRec** Top();
  class ItemSubClassRec** Top();
  unsigned int NumElements();
  void TSBaseArray<ItemSubClassRec const *>(class TSBaseArray<ItemSubClassRec const *>&);
  void TSBaseArray<ItemSubClassRec const *>();
  class TSBaseArray<ItemSubClassRec const *>& operator=(class TSBaseArray<ItemSubClassRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ItemSubClassRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ItemSubClassRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ResistancesRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class ResistancesRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class ResistancesRec*& operator[](unsigned int);
  class ResistancesRec*& operator[](unsigned int);
  unsigned int Bytes();
  class ResistancesRec** Ptr();
  class ResistancesRec** Ptr();
  unsigned int SizeOfElement();
  class ResistancesRec** Top();
  class ResistancesRec** Top();
  unsigned int NumElements();
  void TSBaseArray<ResistancesRec const *>(class TSBaseArray<ResistancesRec const *>&);
  void TSBaseArray<ResistancesRec const *>();
  class TSBaseArray<ResistancesRec const *>& operator=(class TSBaseArray<ResistancesRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ResistancesRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ResistancesRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSimpleFontString *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleFontString** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CSimpleFontString*& operator[](unsigned int);
  class CSimpleFontString*& operator[](unsigned int);
  unsigned int Bytes();
  class CSimpleFontString** Ptr();
  class CSimpleFontString** Ptr();
  unsigned int SizeOfElement();
  class CSimpleFontString** Top();
  class CSimpleFontString** Top();
  unsigned int NumElements();
  void TSBaseArray<CSimpleFontString *>(class TSBaseArray<CSimpleFontString *>&);
  void TSBaseArray<CSimpleFontString *>();
  class TSBaseArray<CSimpleFontString *>& operator=(class TSBaseArray<CSimpleFontString *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSimpleFontString *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSimpleFontString *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::CRect> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::CRect* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class NTempest::CRect& operator[](unsigned int);
  class NTempest::CRect& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::CRect* Ptr();
  class NTempest::CRect* Ptr();
  unsigned int SizeOfElement();
  class NTempest::CRect* Top();
  class NTempest::CRect* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::CRect>(class TSBaseArray<NTempest::CRect>&);
  void TSBaseArray<NTempest::CRect>();
  class TSBaseArray<NTempest::CRect>& operator=(class TSBaseArray<NTempest::CRect>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::CRect>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::CRect>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CACHEENTRY,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CACHEENTRY,-572662307>& operator[](unsigned int);
  class TSExplicitList<CACHEENTRY,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CACHEENTRY,-572662307>* Ptr();
  class TSExplicitList<CACHEENTRY,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CACHEENTRY,-572662307>* Top();
  class TSExplicitList<CACHEENTRY,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >(class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >();
  class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<PLAYERPORTRAIT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>& operator[](unsigned int);
  class TSExplicitList<PLAYERPORTRAIT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* Ptr();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* Top();
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >();
  class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<UNITPORTRAIT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<UNITPORTRAIT,-572662307>& operator[](unsigned int);
  class TSExplicitList<UNITPORTRAIT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<UNITPORTRAIT,-572662307>* Ptr();
  class TSExplicitList<UNITPORTRAIT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<UNITPORTRAIT,-572662307>* Top();
  class TSExplicitList<UNITPORTRAIT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >();
  class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ITEMPORTRAIT,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ITEMPORTRAIT,-572662307>& operator[](unsigned int);
  class TSExplicitList<ITEMPORTRAIT,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ITEMPORTRAIT,-572662307>* Ptr();
  class TSExplicitList<ITEMPORTRAIT,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ITEMPORTRAIT,-572662307>* Top();
  class TSExplicitList<ITEMPORTRAIT,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >();
  class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NearestEnemyData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct NearestEnemyData* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct NearestEnemyData& operator[](unsigned int);
  struct NearestEnemyData& operator[](unsigned int);
  unsigned int Bytes();
  struct NearestEnemyData* Ptr();
  struct NearestEnemyData* Ptr();
  unsigned int SizeOfElement();
  struct NearestEnemyData* Top();
  struct NearestEnemyData* Top();
  unsigned int NumElements();
  void TSBaseArray<NearestEnemyData>(class TSBaseArray<NearestEnemyData>&);
  void TSBaseArray<NearestEnemyData>();
  class TSBaseArray<NearestEnemyData>& operator=(class TSBaseArray<NearestEnemyData>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NearestEnemyData>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NearestEnemyData>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<ChatChannel> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct ChatChannel* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct ChatChannel& operator[](unsigned int);
  struct ChatChannel& operator[](unsigned int);
  unsigned int Bytes();
  struct ChatChannel* Ptr();
  struct ChatChannel* Ptr();
  unsigned int SizeOfElement();
  struct ChatChannel* Top();
  struct ChatChannel* Top();
  unsigned int NumElements();
  void TSBaseArray<ChatChannel>(class TSBaseArray<ChatChannel>&);
  void TSBaseArray<ChatChannel>();
  class TSBaseArray<ChatChannel>& operator=(class TSBaseArray<ChatChannel>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<ChatChannel>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<ChatChannel>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<LanguageWordsRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class LanguageWordsRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class LanguageWordsRec*& operator[](unsigned int);
  class LanguageWordsRec*& operator[](unsigned int);
  unsigned int Bytes();
  class LanguageWordsRec** Ptr();
  class LanguageWordsRec** Ptr();
  unsigned int SizeOfElement();
  class LanguageWordsRec** Top();
  class LanguageWordsRec** Top();
  unsigned int NumElements();
  void TSBaseArray<LanguageWordsRec const *>(class TSBaseArray<LanguageWordsRec const *>&);
  void TSBaseArray<LanguageWordsRec const *>();
  class TSBaseArray<LanguageWordsRec const *>& operator=(class TSBaseArray<LanguageWordsRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<LanguageWordsRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<LanguageWordsRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<WORDLIST,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<WORDLIST,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<WORDLIST,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<WORDLIST,-572662307>& operator[](unsigned int);
  class TSExplicitList<WORDLIST,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<WORDLIST,-572662307>* Ptr();
  class TSExplicitList<WORDLIST,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<WORDLIST,-572662307>* Top();
  class TSExplicitList<WORDLIST,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<WORDLIST,-572662307> >(class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >&);
  void TSBaseArray<TSExplicitList<WORDLIST,-572662307> >();
  class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >& operator=(class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<WORDLIST,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<WORDLIST,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<regex_t> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct regex_t* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct regex_t& operator[](unsigned int);
  struct regex_t& operator[](unsigned int);
  unsigned int Bytes();
  struct regex_t* Ptr();
  struct regex_t* Ptr();
  unsigned int SizeOfElement();
  struct regex_t* Top();
  struct regex_t* Top();
  unsigned int NumElements();
  void TSBaseArray<regex_t>(class TSBaseArray<regex_t>&);
  void TSBaseArray<regex_t>();
  class TSBaseArray<regex_t>& operator=(class TSBaseArray<regex_t>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<regex_t>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<regex_t>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FADEOUTHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* Top();
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<WorldMapLandmarkInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct WorldMapLandmarkInfo* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<WorldMapLandmarkInfo>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct WorldMapLandmarkInfo& operator[](unsigned int);
  struct WorldMapLandmarkInfo& operator[](unsigned int);
  unsigned int Bytes();
  struct WorldMapLandmarkInfo* Ptr();
  struct WorldMapLandmarkInfo* Ptr();
  unsigned int SizeOfElement();
  struct WorldMapLandmarkInfo* Top();
  struct WorldMapLandmarkInfo* Top();
  unsigned int NumElements();
  void TSBaseArray<WorldMapLandmarkInfo>(class TSBaseArray<WorldMapLandmarkInfo>&);
  void TSBaseArray<WorldMapLandmarkInfo>();
  class TSBaseArray<WorldMapLandmarkInfo>& operator=(class TSBaseArray<WorldMapLandmarkInfo>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<WorldMapLandmarkInfo>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<WorldMapLandmarkInfo>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<WorldMapContinentInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct WorldMapContinentInfo* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<WorldMapContinentInfo>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct WorldMapContinentInfo& operator[](unsigned int);
  struct WorldMapContinentInfo& operator[](unsigned int);
  unsigned int Bytes();
  struct WorldMapContinentInfo* Ptr();
  struct WorldMapContinentInfo* Ptr();
  unsigned int SizeOfElement();
  struct WorldMapContinentInfo* Top();
  struct WorldMapContinentInfo* Top();
  unsigned int NumElements();
  void TSBaseArray<WorldMapContinentInfo>(class TSBaseArray<WorldMapContinentInfo>&);
  void TSBaseArray<WorldMapContinentInfo>();
  class TSBaseArray<WorldMapContinentInfo>& operator=(class TSBaseArray<WorldMapContinentInfo>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<WorldMapContinentInfo>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<WorldMapContinentInfo>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TrainerServiceInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TrainerServiceInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TrainerServiceInfo *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct TrainerServiceInfo*& operator[](unsigned int);
  struct TrainerServiceInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct TrainerServiceInfo** Ptr();
  struct TrainerServiceInfo** Ptr();
  unsigned int SizeOfElement();
  struct TrainerServiceInfo** Top();
  struct TrainerServiceInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<TrainerServiceInfo *>(class TSBaseArray<TrainerServiceInfo *>&);
  void TSBaseArray<TrainerServiceInfo *>();
  class TSBaseArray<TrainerServiceInfo *>& operator=(class TSBaseArray<TrainerServiceInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TrainerServiceInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TrainerServiceInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TrainerSkillLineInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TrainerSkillLineInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TrainerSkillLineInfo *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct TrainerSkillLineInfo*& operator[](unsigned int);
  struct TrainerSkillLineInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct TrainerSkillLineInfo** Ptr();
  struct TrainerSkillLineInfo** Ptr();
  unsigned int SizeOfElement();
  struct TrainerSkillLineInfo** Top();
  struct TrainerSkillLineInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<TrainerSkillLineInfo *>(class TSBaseArray<TrainerSkillLineInfo *>&);
  void TSBaseArray<TrainerSkillLineInfo *>();
  class TSBaseArray<TrainerSkillLineInfo *>& operator=(class TSBaseArray<TrainerSkillLineInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TrainerSkillLineInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TrainerSkillLineInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<KEYCOMMAND,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<KEYCOMMAND,-572662307>& operator[](unsigned int);
  class TSExplicitList<KEYCOMMAND,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<KEYCOMMAND,-572662307>* Ptr();
  class TSExplicitList<KEYCOMMAND,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<KEYCOMMAND,-572662307>* Top();
  class TSExplicitList<KEYCOMMAND,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >(class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >();
  class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<KEYBINDING,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<KEYBINDING,-572662307>& operator[](unsigned int);
  class TSExplicitList<KEYBINDING,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<KEYBINDING,-572662307>* Ptr();
  class TSExplicitList<KEYBINDING,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<KEYBINDING,-572662307>* Top();
  class TSExplicitList<KEYBINDING,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >(class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >();
  class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<PetitionSignerInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct PetitionSignerInfo* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct PetitionSignerInfo& operator[](unsigned int);
  struct PetitionSignerInfo& operator[](unsigned int);
  unsigned int Bytes();
  struct PetitionSignerInfo* Ptr();
  struct PetitionSignerInfo* Ptr();
  unsigned int SizeOfElement();
  struct PetitionSignerInfo* Top();
  struct PetitionSignerInfo* Top();
  unsigned int NumElements();
  void TSBaseArray<PetitionSignerInfo>(class TSBaseArray<PetitionSignerInfo>&);
  void TSBaseArray<PetitionSignerInfo>();
  class TSBaseArray<PetitionSignerInfo>& operator=(class TSBaseArray<PetitionSignerInfo>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<PetitionSignerInfo>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<PetitionSignerInfo>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CraftInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CraftInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CraftInfo*& operator[](unsigned int);
  struct CraftInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct CraftInfo** Ptr();
  struct CraftInfo** Ptr();
  unsigned int SizeOfElement();
  struct CraftInfo** Top();
  struct CraftInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<CraftInfo *>(class TSBaseArray<CraftInfo *>&);
  void TSBaseArray<CraftInfo *>();
  class TSBaseArray<CraftInfo *>& operator=(class TSBaseArray<CraftInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CraftInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CraftInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CraftSkillLineInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CraftSkillLineInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CraftSkillLineInfo*& operator[](unsigned int);
  struct CraftSkillLineInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct CraftSkillLineInfo** Ptr();
  struct CraftSkillLineInfo** Ptr();
  unsigned int SizeOfElement();
  struct CraftSkillLineInfo** Top();
  struct CraftSkillLineInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<CraftSkillLineInfo *>(class TSBaseArray<CraftSkillLineInfo *>&);
  void TSBaseArray<CraftSkillLineInfo *>();
  class TSBaseArray<CraftSkillLineInfo *>& operator=(class TSBaseArray<CraftSkillLineInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CraftSkillLineInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CraftSkillLineInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TradeSkillInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TradeSkillInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TradeSkillInfo *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct TradeSkillInfo*& operator[](unsigned int);
  struct TradeSkillInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct TradeSkillInfo** Ptr();
  struct TradeSkillInfo** Ptr();
  unsigned int SizeOfElement();
  struct TradeSkillInfo** Top();
  struct TradeSkillInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<TradeSkillInfo *>(class TSBaseArray<TradeSkillInfo *>&);
  void TSBaseArray<TradeSkillInfo *>();
  class TSBaseArray<TradeSkillInfo *>& operator=(class TSBaseArray<TradeSkillInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TradeSkillInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TradeSkillInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TradeSkillSubClassInfo *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct TradeSkillSubClassInfo** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TradeSkillSubClassInfo *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct TradeSkillSubClassInfo*& operator[](unsigned int);
  struct TradeSkillSubClassInfo*& operator[](unsigned int);
  unsigned int Bytes();
  struct TradeSkillSubClassInfo** Ptr();
  struct TradeSkillSubClassInfo** Ptr();
  unsigned int SizeOfElement();
  struct TradeSkillSubClassInfo** Top();
  struct TradeSkillSubClassInfo** Top();
  unsigned int NumElements();
  void TSBaseArray<TradeSkillSubClassInfo *>(class TSBaseArray<TradeSkillSubClassInfo *>&);
  void TSBaseArray<TradeSkillSubClassInfo *>();
  class TSBaseArray<TradeSkillSubClassInfo *>& operator=(class TSBaseArray<TradeSkillSubClassInfo *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TradeSkillSubClassInfo *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TradeSkillSubClassInfo *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FrameScriptObject_Variable,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>& operator[](unsigned int);
  class TSExplicitList<FrameScriptObject_Variable,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* Ptr();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* Top();
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >(class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >();
  class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<POIINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct POIINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<POIINFO>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct POIINFO& operator[](unsigned int);
  struct POIINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct POIINFO* Ptr();
  struct POIINFO* Ptr();
  unsigned int SizeOfElement();
  struct POIINFO* Top();
  struct POIINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<POIINFO>(class TSBaseArray<POIINFO>&);
  void TSBaseArray<POIINFO>();
  class TSBaseArray<POIINFO>& operator=(class TSBaseArray<POIINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<POIINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<POIINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<POIDIRECTIONDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct POIDIRECTIONDATA* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct POIDIRECTIONDATA& operator[](unsigned int);
  struct POIDIRECTIONDATA& operator[](unsigned int);
  unsigned int Bytes();
  struct POIDIRECTIONDATA* Ptr();
  struct POIDIRECTIONDATA* Ptr();
  unsigned int SizeOfElement();
  struct POIDIRECTIONDATA* Top();
  struct POIDIRECTIONDATA* Top();
  unsigned int NumElements();
  void TSBaseArray<POIDIRECTIONDATA>(class TSBaseArray<POIDIRECTIONDATA>&);
  void TSBaseArray<POIDIRECTIONDATA>();
  class TSBaseArray<POIDIRECTIONDATA>& operator=(class TSBaseArray<POIDIRECTIONDATA>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<POIDIRECTIONDATA>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<POIDIRECTIONDATA>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OBJINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OBJINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OBJINFO& operator[](unsigned int);
  struct OBJINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct OBJINFO* Ptr();
  struct OBJINFO* Ptr();
  unsigned int SizeOfElement();
  struct OBJINFO* Top();
  struct OBJINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<OBJINFO>(class TSBaseArray<OBJINFO>&);
  void TSBaseArray<OBJINFO>();
  class TSBaseArray<OBJINFO>& operator=(class TSBaseArray<OBJINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OBJINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OBJINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<AreaPOIRec const *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class AreaPOIRec** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<AreaPOIRec const *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class AreaPOIRec*& operator[](unsigned int);
  class AreaPOIRec*& operator[](unsigned int);
  unsigned int Bytes();
  class AreaPOIRec** Ptr();
  class AreaPOIRec** Ptr();
  unsigned int SizeOfElement();
  class AreaPOIRec** Top();
  class AreaPOIRec** Top();
  unsigned int NumElements();
  void TSBaseArray<AreaPOIRec const *>(class TSBaseArray<AreaPOIRec const *>&);
  void TSBaseArray<AreaPOIRec const *>();
  class TSBaseArray<AreaPOIRec const *>& operator=(class TSBaseArray<AreaPOIRec const *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<AreaPOIRec const *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<AreaPOIRec const *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<unsigned __int64> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned __int64* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<unsigned __int64>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  unsigned __int64& operator[](unsigned int);
  unsigned __int64& operator[](unsigned int);
  unsigned int Bytes();
  unsigned __int64* Ptr();
  unsigned __int64* Ptr();
  unsigned int SizeOfElement();
  unsigned __int64* Top();
  unsigned __int64* Top();
  unsigned int NumElements();
  void TSBaseArray<unsigned __int64>(class TSBaseArray<unsigned __int64>&);
  void TSBaseArray<unsigned __int64>();
  class TSBaseArray<unsigned __int64>& operator=(class TSBaseArray<unsigned __int64>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<unsigned __int64>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<unsigned __int64>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CWalkableSurface> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CWalkableSurface* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CWalkableSurface& operator[](unsigned int);
  struct CWalkableSurface& operator[](unsigned int);
  unsigned int Bytes();
  struct CWalkableSurface* Ptr();
  struct CWalkableSurface* Ptr();
  unsigned int SizeOfElement();
  struct CWalkableSurface* Top();
  struct CWalkableSurface* Top();
  unsigned int NumElements();
  void TSBaseArray<CWalkableSurface>(class TSBaseArray<CWalkableSurface>&);
  void TSBaseArray<CWalkableSurface>();
  class TSBaseArray<CWalkableSurface>& operator=(class TSBaseArray<CWalkableSurface>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CWalkableSurface>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CWalkableSurface>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<enum FACET_COLOR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ enum FACET_COLOR* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  enum FACET_COLOR& operator[](unsigned int);
  enum FACET_COLOR& operator[](unsigned int);
  unsigned int Bytes();
  enum FACET_COLOR* Ptr();
  enum FACET_COLOR* Ptr();
  unsigned int SizeOfElement();
  enum FACET_COLOR* Top();
  enum FACET_COLOR* Top();
  unsigned int NumElements();
  void TSBaseArray<enum FACET_COLOR>(class TSBaseArray<enum FACET_COLOR>&);
  void TSBaseArray<enum FACET_COLOR>();
  class TSBaseArray<enum FACET_COLOR>& operator=(class TSBaseArray<enum FACET_COLOR>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<enum FACET_COLOR>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<enum FACET_COLOR>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::CImVector> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::CImVector* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::CImVector>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class NTempest::CImVector& operator[](unsigned int);
  class NTempest::CImVector& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::CImVector* Ptr();
  class NTempest::CImVector* Ptr();
  unsigned int SizeOfElement();
  class NTempest::CImVector* Top();
  class NTempest::CImVector* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::CImVector>(class TSBaseArray<NTempest::CImVector>&);
  void TSBaseArray<NTempest::CImVector>();
  class TSBaseArray<NTempest::CImVector>& operator=(class TSBaseArray<NTempest::CImVector>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::CImVector>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::CImVector>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<STRINGWANNABE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct STRINGWANNABE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<STRINGWANNABE>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct STRINGWANNABE& operator[](unsigned int);
  struct STRINGWANNABE& operator[](unsigned int);
  unsigned int Bytes();
  struct STRINGWANNABE* Ptr();
  struct STRINGWANNABE* Ptr();
  unsigned int SizeOfElement();
  struct STRINGWANNABE* Top();
  struct STRINGWANNABE* Top();
  unsigned int NumElements();
  void TSBaseArray<STRINGWANNABE>(class TSBaseArray<STRINGWANNABE>&);
  void TSBaseArray<STRINGWANNABE>();
  class TSBaseArray<STRINGWANNABE>& operator=(class TSBaseArray<STRINGWANNABE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<STRINGWANNABE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<STRINGWANNABE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHARACTERVARIATIONS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHARACTERVARIATIONS* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CHARACTERVARIATIONS>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CHARACTERVARIATIONS& operator[](unsigned int);
  struct CHARACTERVARIATIONS& operator[](unsigned int);
  unsigned int Bytes();
  struct CHARACTERVARIATIONS* Ptr();
  struct CHARACTERVARIATIONS* Ptr();
  unsigned int SizeOfElement();
  struct CHARACTERVARIATIONS* Top();
  struct CHARACTERVARIATIONS* Top();
  unsigned int NumElements();
  void TSBaseArray<CHARACTERVARIATIONS>(class TSBaseArray<CHARACTERVARIATIONS>&);
  void TSBaseArray<CHARACTERVARIATIONS>();
  class TSBaseArray<CHARACTERVARIATIONS>& operator=(class TSBaseArray<CHARACTERVARIATIONS>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHARACTERVARIATIONS>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHARACTERVARIATIONS>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<INTDATA> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct INTDATA* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct INTDATA& operator[](unsigned int);
  struct INTDATA& operator[](unsigned int);
  unsigned int Bytes();
  struct INTDATA* Ptr();
  struct INTDATA* Ptr();
  unsigned int SizeOfElement();
  struct INTDATA* Top();
  struct INTDATA* Top();
  unsigned int NumElements();
  void TSBaseArray<INTDATA>(class TSBaseArray<INTDATA>&);
  void TSBaseArray<INTDATA>();
  class TSBaseArray<INTDATA>& operator=(class TSBaseArray<INTDATA>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<INTDATA>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<INTDATA>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHARACTERRACEVARIATIONS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHARACTERRACEVARIATIONS* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CHARACTERRACEVARIATIONS>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CHARACTERRACEVARIATIONS& operator[](unsigned int);
  struct CHARACTERRACEVARIATIONS& operator[](unsigned int);
  unsigned int Bytes();
  struct CHARACTERRACEVARIATIONS* Ptr();
  struct CHARACTERRACEVARIATIONS* Ptr();
  unsigned int SizeOfElement();
  struct CHARACTERRACEVARIATIONS* Top();
  struct CHARACTERRACEVARIATIONS* Top();
  unsigned int NumElements();
  void TSBaseArray<CHARACTERRACEVARIATIONS>(class TSBaseArray<CHARACTERRACEVARIATIONS>&);
  void TSBaseArray<CHARACTERRACEVARIATIONS>();
  class TSBaseArray<CHARACTERRACEVARIATIONS>& operator=(class TSBaseArray<CHARACTERRACEVARIATIONS>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHARACTERRACEVARIATIONS>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHARACTERRACEVARIATIONS>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<VARIATIONS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct VARIATIONS* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct VARIATIONS& operator[](unsigned int);
  struct VARIATIONS& operator[](unsigned int);
  unsigned int Bytes();
  struct VARIATIONS* Ptr();
  struct VARIATIONS* Ptr();
  unsigned int SizeOfElement();
  struct VARIATIONS* Top();
  struct VARIATIONS* Top();
  unsigned int NumElements();
  void TSBaseArray<VARIATIONS>(class TSBaseArray<VARIATIONS>&);
  void TSBaseArray<VARIATIONS>();
  class TSBaseArray<VARIATIONS>& operator=(class TSBaseArray<VARIATIONS>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<VARIATIONS>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<VARIATIONS>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<FACIALGEOSETS> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct FACIALGEOSETS* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<FACIALGEOSETS>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct FACIALGEOSETS& operator[](unsigned int);
  struct FACIALGEOSETS& operator[](unsigned int);
  unsigned int Bytes();
  struct FACIALGEOSETS* Ptr();
  struct FACIALGEOSETS* Ptr();
  unsigned int SizeOfElement();
  struct FACIALGEOSETS* Top();
  struct FACIALGEOSETS* Top();
  unsigned int NumElements();
  void TSBaseArray<FACIALGEOSETS>(class TSBaseArray<FACIALGEOSETS>&);
  void TSBaseArray<FACIALGEOSETS>();
  class TSBaseArray<FACIALGEOSETS>& operator=(class TSBaseArray<FACIALGEOSETS>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<FACIALGEOSETS>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<FACIALGEOSETS>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAMERAFILENAMES> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAMERAFILENAMES* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAMERAFILENAMES& operator[](unsigned int);
  struct CAMERAFILENAMES& operator[](unsigned int);
  unsigned int Bytes();
  struct CAMERAFILENAMES* Ptr();
  struct CAMERAFILENAMES* Ptr();
  unsigned int SizeOfElement();
  struct CAMERAFILENAMES* Top();
  struct CAMERAFILENAMES* Top();
  unsigned int NumElements();
  void TSBaseArray<CAMERAFILENAMES>(class TSBaseArray<CAMERAFILENAMES>&);
  void TSBaseArray<CAMERAFILENAMES>();
  class TSBaseArray<CAMERAFILENAMES>& operator=(class TSBaseArray<CAMERAFILENAMES>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CAMERAFILENAMES>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CAMERAFILENAMES>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSFixedArray<VARIATIONS> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSFixedArray<VARIATIONS>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSFixedArray<VARIATIONS> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSFixedArray<VARIATIONS>& operator[](unsigned int);
  class TSFixedArray<VARIATIONS>& operator[](unsigned int);
  unsigned int Bytes();
  class TSFixedArray<VARIATIONS>* Ptr();
  class TSFixedArray<VARIATIONS>* Ptr();
  unsigned int SizeOfElement();
  class TSFixedArray<VARIATIONS>* Top();
  class TSFixedArray<VARIATIONS>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSFixedArray<VARIATIONS> >(class TSBaseArray<TSFixedArray<VARIATIONS> >&);
  void TSBaseArray<TSFixedArray<VARIATIONS> >();
  class TSBaseArray<TSFixedArray<VARIATIONS> >& operator=(class TSBaseArray<TSFixedArray<VARIATIONS> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSFixedArray<VARIATIONS> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSFixedArray<VARIATIONS> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHARINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHARINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CHARINFO& operator[](unsigned int);
  struct CHARINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct CHARINFO* Ptr();
  struct CHARINFO* Ptr();
  unsigned int SizeOfElement();
  struct CHARINFO* Top();
  struct CHARINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<CHARINFO>(class TSBaseArray<CHARINFO>&);
  void TSBaseArray<CHARINFO>();
  class TSBaseArray<CHARINFO>& operator=(class TSBaseArray<CHARINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHARINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHARINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<C_OBJECTHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<C_OBJECTHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<C_OBJECTHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<C_OBJECTHASH,-572662307>* Ptr();
  class TSExplicitList<C_OBJECTHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<C_OBJECTHASH,-572662307>* Top();
  class TSExplicitList<C_OBJECTHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >(class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CObjectHeap> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CObjectHeap* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CObjectHeap& operator[](unsigned int);
  class CObjectHeap& operator[](unsigned int);
  unsigned int Bytes();
  class CObjectHeap* Ptr();
  class CObjectHeap* Ptr();
  unsigned int SizeOfElement();
  class CObjectHeap* Top();
  class CObjectHeap* Top();
  unsigned int NumElements();
  void TSBaseArray<CObjectHeap>(class TSBaseArray<CObjectHeap>&);
  void TSBaseArray<CObjectHeap>();
  class TSBaseArray<CObjectHeap>& operator=(class TSBaseArray<CObjectHeap>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CObjectHeap>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CObjectHeap>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CObjectHeapList> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CObjectHeapList* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CObjectHeapList& operator[](unsigned int);
  class CObjectHeapList& operator[](unsigned int);
  unsigned int Bytes();
  class CObjectHeapList* Ptr();
  class CObjectHeapList* Ptr();
  unsigned int SizeOfElement();
  class CObjectHeapList* Top();
  class CObjectHeapList* Top();
  unsigned int NumElements();
  void TSBaseArray<CObjectHeapList>(class TSBaseArray<CObjectHeapList>&);
  void TSBaseArray<CObjectHeapList>();
  class TSBaseArray<CObjectHeapList>& operator=(class TSBaseArray<CObjectHeapList>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CObjectHeapList>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CObjectHeapList>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>& operator[](unsigned int);
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* Ptr();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* Top();
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >(class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >();
  class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SHEATHSOUNDHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* Ptr();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* Top();
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >(class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<UISOUNDLOOKUP,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>& operator[](unsigned int);
  class TSExplicitList<UISOUNDLOOKUP,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* Ptr();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* Top();
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >(class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >();
  class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SOUNDDEFINITION,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SOUNDDEFINITION,-572662307>& operator[](unsigned int);
  class TSExplicitList<SOUNDDEFINITION,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SOUNDDEFINITION,-572662307>* Ptr();
  class TSExplicitList<SOUNDDEFINITION,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SOUNDDEFINITION,-572662307>* Top();
  class TSExplicitList<SOUNDDEFINITION,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >(class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >();
  class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<REVERBINFO> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct REVERBINFO* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct REVERBINFO& operator[](unsigned int);
  struct REVERBINFO& operator[](unsigned int);
  unsigned int Bytes();
  struct REVERBINFO* Ptr();
  struct REVERBINFO* Ptr();
  unsigned int SizeOfElement();
  struct REVERBINFO* Top();
  struct REVERBINFO* Top();
  unsigned int NumElements();
  void TSBaseArray<REVERBINFO>(class TSBaseArray<REVERBINFO>&);
  void TSBaseArray<REVERBINFO>();
  class TSBaseArray<REVERBINFO>& operator=(class TSBaseArray<REVERBINFO>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<REVERBINFO>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<REVERBINFO>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<IMPACTSOUNDARRAY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct IMPACTSOUNDARRAY* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct IMPACTSOUNDARRAY& operator[](unsigned int);
  struct IMPACTSOUNDARRAY& operator[](unsigned int);
  unsigned int Bytes();
  struct IMPACTSOUNDARRAY* Ptr();
  struct IMPACTSOUNDARRAY* Ptr();
  unsigned int SizeOfElement();
  struct IMPACTSOUNDARRAY* Top();
  struct IMPACTSOUNDARRAY* Top();
  unsigned int NumElements();
  void TSBaseArray<IMPACTSOUNDARRAY>(class TSBaseArray<IMPACTSOUNDARRAY>&);
  void TSBaseArray<IMPACTSOUNDARRAY>();
  class TSBaseArray<IMPACTSOUNDARRAY>& operator=(class TSBaseArray<IMPACTSOUNDARRAY>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<IMPACTSOUNDARRAY>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<IMPACTSOUNDARRAY>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* Top();
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OUTDOORSCHUNKHASHOBJ *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OUTDOORSCHUNKHASHOBJ*& operator[](unsigned int);
  struct OUTDOORSCHUNKHASHOBJ*& operator[](unsigned int);
  unsigned int Bytes();
  struct OUTDOORSCHUNKHASHOBJ** Ptr();
  struct OUTDOORSCHUNKHASHOBJ** Ptr();
  unsigned int SizeOfElement();
  struct OUTDOORSCHUNKHASHOBJ** Top();
  struct OUTDOORSCHUNKHASHOBJ** Top();
  unsigned int NumElements();
  void TSBaseArray<OUTDOORSCHUNKHASHOBJ *>(class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>&);
  void TSBaseArray<OUTDOORSCHUNKHASHOBJ *>();
  class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>& operator=(class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OUTDOORSCHUNKHASHOBJ *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OUTDOORSCHUNKHASHOBJ *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CHUNKHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<CHUNKHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* Top();
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHUNKHASHOBJ *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHUNKHASHOBJ** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CHUNKHASHOBJ*& operator[](unsigned int);
  struct CHUNKHASHOBJ*& operator[](unsigned int);
  unsigned int Bytes();
  struct CHUNKHASHOBJ** Ptr();
  struct CHUNKHASHOBJ** Ptr();
  unsigned int SizeOfElement();
  struct CHUNKHASHOBJ** Top();
  struct CHUNKHASHOBJ** Top();
  unsigned int NumElements();
  void TSBaseArray<CHUNKHASHOBJ *>(class TSBaseArray<CHUNKHASHOBJ *>&);
  void TSBaseArray<CHUNKHASHOBJ *>();
  class TSBaseArray<CHUNKHASHOBJ *>& operator=(class TSBaseArray<CHUNKHASHOBJ *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHUNKHASHOBJ *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHUNKHASHOBJ *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MACRODESC> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MACRODESC* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MACRODESC& operator[](unsigned int);
  struct MACRODESC& operator[](unsigned int);
  unsigned int Bytes();
  struct MACRODESC* Ptr();
  struct MACRODESC* Ptr();
  unsigned int SizeOfElement();
  struct MACRODESC* Top();
  struct MACRODESC* Top();
  unsigned int NumElements();
  void TSBaseArray<MACRODESC>(class TSBaseArray<MACRODESC>&);
  void TSBaseArray<MACRODESC>();
  class TSBaseArray<MACRODESC>& operator=(class TSBaseArray<MACRODESC>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MACRODESC>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MACRODESC>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSolidTextureHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CSolidTextureHash* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CSolidTextureHash& operator[](unsigned int);
  struct CSolidTextureHash& operator[](unsigned int);
  unsigned int Bytes();
  struct CSolidTextureHash* Ptr();
  struct CSolidTextureHash* Ptr();
  unsigned int SizeOfElement();
  struct CSolidTextureHash* Top();
  struct CSolidTextureHash* Top();
  unsigned int NumElements();
  void TSBaseArray<CSolidTextureHash>(class TSBaseArray<CSolidTextureHash>&);
  void TSBaseArray<CSolidTextureHash>();
  class TSBaseArray<CSolidTextureHash>& operator=(class TSBaseArray<CSolidTextureHash>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSolidTextureHash>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSolidTextureHash>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CTextureHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CTextureHash* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CTextureHash& operator[](unsigned int);
  struct CTextureHash& operator[](unsigned int);
  unsigned int Bytes();
  struct CTextureHash* Ptr();
  struct CTextureHash* Ptr();
  unsigned int SizeOfElement();
  struct CTextureHash* Top();
  struct CTextureHash* Top();
  unsigned int NumElements();
  void TSBaseArray<CTextureHash>(class TSBaseArray<CTextureHash>&);
  void TSBaseArray<CTextureHash>();
  class TSBaseArray<CTextureHash>& operator=(class TSBaseArray<CTextureHash>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CTextureHash>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CTextureHash>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CTexture *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CTexture** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CTexture*& operator[](unsigned int);
  class CTexture*& operator[](unsigned int);
  unsigned int Bytes();
  class CTexture** Ptr();
  class CTexture** Ptr();
  unsigned int SizeOfElement();
  class CTexture** Top();
  class CTexture** Top();
  unsigned int NumElements();
  void TSBaseArray<CTexture *>(class TSBaseArray<CTexture *>&);
  void TSBaseArray<CTexture *>();
  class TSBaseArray<CTexture *>& operator=(class TSBaseArray<CTexture *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CTexture *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CTexture *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CSolidTextureHash,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CSolidTextureHash,-572662307>& operator[](unsigned int);
  class TSExplicitList<CSolidTextureHash,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CSolidTextureHash,-572662307>* Ptr();
  class TSExplicitList<CSolidTextureHash,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CSolidTextureHash,-572662307>* Top();
  class TSExplicitList<CSolidTextureHash,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >(class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >();
  class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CTextureHash,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CTextureHash,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CTextureHash,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CTextureHash,-572662307>& operator[](unsigned int);
  class TSExplicitList<CTextureHash,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CTextureHash,-572662307>* Ptr();
  class TSExplicitList<CTextureHash,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CTextureHash,-572662307>* Top();
  class TSExplicitList<CTextureHash,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CTextureHash,-572662307> >(class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >&);
  void TSBaseArray<TSExplicitList<CTextureHash,-572662307> >();
  class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CTextureHash,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CTextureHash,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<void (__fastcall*)(void)> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ void  (m_data**)();

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  void  (*)()& operator[](unsigned int);
  void  (*)()& operator[](unsigned int);
  unsigned int Bytes();
  void  (**)() Ptr();
  void  (**)() Ptr();
  unsigned int SizeOfElement();
  void  (**)() Top();
  void  (**)() Top();
  unsigned int NumElements();
  void TSBaseArray<void (__fastcall*)(void)>(class TSBaseArray<void (__fastcall*)(void)>&);
  void TSBaseArray<void (__fastcall*)(void)>();
  class TSBaseArray<void (__fastcall*)(void)>& operator=(class TSBaseArray<void (__fastcall*)(void)>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<void (__fastcall*)(void)>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<void (__fastcall*)(void)>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CParticleEmitter *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CParticleEmitter** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CParticleEmitter *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CParticleEmitter*& operator[](unsigned int);
  class CParticleEmitter*& operator[](unsigned int);
  unsigned int Bytes();
  class CParticleEmitter** Ptr();
  class CParticleEmitter** Ptr();
  unsigned int SizeOfElement();
  class CParticleEmitter** Top();
  class CParticleEmitter** Top();
  unsigned int NumElements();
  void TSBaseArray<CParticleEmitter *>(class TSBaseArray<CParticleEmitter *>&);
  void TSBaseArray<CParticleEmitter *>();
  class TSBaseArray<CParticleEmitter *>& operator=(class TSBaseArray<CParticleEmitter *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CParticleEmitter *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CParticleEmitter *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<float> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ float* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<float>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  float& operator[](unsigned int);
  float& operator[](unsigned int);
  unsigned int Bytes();
  float* Ptr();
  float* Ptr();
  unsigned int SizeOfElement();
  float* Top();
  float* Top();
  unsigned int NumElements();
  void TSBaseArray<float>(class TSBaseArray<float>&);
  void TSBaseArray<float>();
  class TSBaseArray<float>& operator=(class TSBaseArray<float>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<float>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<float>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CRibbonVertex> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CRibbonVertex* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CRibbonVertex>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CRibbonVertex& operator[](unsigned int);
  struct CRibbonVertex& operator[](unsigned int);
  unsigned int Bytes();
  struct CRibbonVertex* Ptr();
  struct CRibbonVertex* Ptr();
  unsigned int SizeOfElement();
  struct CRibbonVertex* Top();
  struct CRibbonVertex* Top();
  unsigned int NumElements();
  void TSBaseArray<CRibbonVertex>(class TSBaseArray<CRibbonVertex>&);
  void TSBaseArray<CRibbonVertex>();
  class TSBaseArray<CRibbonVertex>& operator=(class TSBaseArray<CRibbonVertex>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CRibbonVertex>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CRibbonVertex>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CParticle2> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CParticle2* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CParticle2>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CParticle2& operator[](unsigned int);
  class CParticle2& operator[](unsigned int);
  unsigned int Bytes();
  class CParticle2* Ptr();
  class CParticle2* Ptr();
  unsigned int SizeOfElement();
  class CParticle2* Top();
  class CParticle2* Top();
  unsigned int NumElements();
  void TSBaseArray<CParticle2>(class TSBaseArray<CParticle2>&);
  void TSBaseArray<CParticle2>();
  class TSBaseArray<CParticle2>& operator=(class TSBaseArray<CParticle2>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CParticle2>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CParticle2>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CParticle2_Model> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CParticle2_Model* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CParticle2_Model>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CParticle2_Model& operator[](unsigned int);
  class CParticle2_Model& operator[](unsigned int);
  unsigned int Bytes();
  class CParticle2_Model* Ptr();
  class CParticle2_Model* Ptr();
  unsigned int SizeOfElement();
  class CParticle2_Model* Top();
  class CParticle2_Model* Top();
  unsigned int NumElements();
  void TSBaseArray<CParticle2_Model>(class TSBaseArray<CParticle2_Model>&);
  void TSBaseArray<CParticle2_Model>();
  class TSBaseArray<CParticle2_Model>& operator=(class TSBaseArray<CParticle2_Model>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CParticle2_Model>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CParticle2_Model>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CBaseManaged *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CBaseManaged** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CBaseManaged *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CBaseManaged*& operator[](unsigned int);
  class CBaseManaged*& operator[](unsigned int);
  unsigned int Bytes();
  class CBaseManaged** Ptr();
  class CBaseManaged** Ptr();
  unsigned int SizeOfElement();
  class CBaseManaged** Top();
  class CBaseManaged** Top();
  unsigned int NumElements();
  void TSBaseArray<CBaseManaged *>(class TSBaseArray<CBaseManaged *>&);
  void TSBaseArray<CBaseManaged *>();
  class TSBaseArray<CBaseManaged *>& operator=(class TSBaseArray<CBaseManaged *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CBaseManaged *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CBaseManaged *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<FONTHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<FONTHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<FONTHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<FONTHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<FONTHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<FONTHASHOBJ,-572662307>* Top();
  class TSExplicitList<FONTHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CParticle> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CParticle* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CParticle& operator[](unsigned int);
  class CParticle& operator[](unsigned int);
  unsigned int Bytes();
  class CParticle* Ptr();
  class CParticle* Ptr();
  unsigned int SizeOfElement();
  class CParticle* Top();
  class CParticle* Top();
  unsigned int NumElements();
  void TSBaseArray<CParticle>(class TSBaseArray<CParticle>&);
  void TSBaseArray<CParticle>();
  class TSBaseArray<CParticle>& operator=(class TSBaseArray<CParticle>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CParticle>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CParticle>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>& operator[](unsigned int);
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* Ptr();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* Top();
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >(class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >();
  class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ProfileInternal::SECTION,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>& operator[](unsigned int);
  class TSExplicitList<ProfileInternal::SECTION,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* Ptr();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* Top();
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >(class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >();
  class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CLightning *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CLightning** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CLightning *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CLightning*& operator[](unsigned int);
  class CLightning*& TSBaseArray<CLightning *>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  class CLightning** Ptr();
  class CLightning** Ptr();
  unsigned int SizeOfElement();
  class CLightning** Top();
  class CLightning** Top();
  unsigned int NumElements();
  void TSBaseArray<CLightning *>(class TSBaseArray<CLightning *>&);
  void TSBaseArray<CLightning *>();
  class TSBaseArray<CLightning *>& operator=(class TSBaseArray<CLightning *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CLightning *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CLightning *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<COsControl *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class COsControl** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class COsControl*& operator[](unsigned int);
  class COsControl*& operator[](unsigned int);
  unsigned int Bytes();
  class COsControl** Ptr();
  class COsControl** Ptr();
  unsigned int SizeOfElement();
  class COsControl** Top();
  class COsControl** Top();
  unsigned int NumElements();
  void TSBaseArray<COsControl *>(class TSBaseArray<COsControl *>&);
  void TSBaseArray<COsControl *>();
  class TSBaseArray<COsControl *>& operator=(class TSBaseArray<COsControl *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<COsControl *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<COsControl *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<int> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<int>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  int& operator[](unsigned int);
  int& operator[](unsigned int);
  unsigned int Bytes();
  int* Ptr();
  int* Ptr();
  unsigned int SizeOfElement();
  int* Top();
  int* Top();
  unsigned int NumElements();
  void TSBaseArray<int>(class TSBaseArray<int>&);
  void TSBaseArray<int>();
  class TSBaseArray<int>& operator=(class TSBaseArray<int>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<int>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<int>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OsGuiTreeItemParams> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OsGuiTreeItemParams* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OsGuiTreeItemParams& operator[](unsigned int);
  struct OsGuiTreeItemParams& operator[](unsigned int);
  unsigned int Bytes();
  struct OsGuiTreeItemParams* Ptr();
  struct OsGuiTreeItemParams* Ptr();
  unsigned int SizeOfElement();
  struct OsGuiTreeItemParams* Top();
  struct OsGuiTreeItemParams* Top();
  unsigned int NumElements();
  void TSBaseArray<OsGuiTreeItemParams>(class TSBaseArray<OsGuiTreeItemParams>&);
  void TSBaseArray<OsGuiTreeItemParams>();
  class TSBaseArray<OsGuiTreeItemParams>& operator=(class TSBaseArray<OsGuiTreeItemParams>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OsGuiTreeItemParams>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OsGuiTreeItemParams>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<COsDialog *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class COsDialog** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class COsDialog*& operator[](unsigned int);
  class COsDialog*& operator[](unsigned int);
  unsigned int Bytes();
  class COsDialog** Ptr();
  class COsDialog** Ptr();
  unsigned int SizeOfElement();
  class COsDialog** Top();
  class COsDialog** Top();
  unsigned int NumElements();
  void TSBaseArray<COsDialog *>(class TSBaseArray<COsDialog *>&);
  void TSBaseArray<COsDialog *>();
  class TSBaseArray<COsDialog *>& operator=(class TSBaseArray<COsDialog *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<COsDialog *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<COsDialog *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<COsMenuBar *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class COsMenuBar** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class COsMenuBar*& operator[](unsigned int);
  class COsMenuBar*& operator[](unsigned int);
  unsigned int Bytes();
  class COsMenuBar** Ptr();
  class COsMenuBar** Ptr();
  unsigned int SizeOfElement();
  class COsMenuBar** Top();
  class COsMenuBar** Top();
  unsigned int NumElements();
  void TSBaseArray<COsMenuBar *>(class TSBaseArray<COsMenuBar *>&);
  void TSBaseArray<COsMenuBar *>();
  class TSBaseArray<COsMenuBar *>& operator=(class TSBaseArray<COsMenuBar *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<COsMenuBar *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<COsMenuBar *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<tagACCEL> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct tagACCEL* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct tagACCEL& operator[](unsigned int);
  struct tagACCEL& operator[](unsigned int);
  unsigned int Bytes();
  struct tagACCEL* Ptr();
  struct tagACCEL* Ptr();
  unsigned int SizeOfElement();
  struct tagACCEL* Top();
  struct tagACCEL* Top();
  unsigned int NumElements();
  void TSBaseArray<tagACCEL>(class TSBaseArray<tagACCEL>&);
  void TSBaseArray<tagACCEL>();
  class TSBaseArray<tagACCEL>& operator=(class TSBaseArray<tagACCEL>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<tagACCEL>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<tagACCEL>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OsGuiMenuHotkey> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OsGuiMenuHotkey* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OsGuiMenuHotkey& operator[](unsigned int);
  struct OsGuiMenuHotkey& operator[](unsigned int);
  unsigned int Bytes();
  struct OsGuiMenuHotkey* Ptr();
  struct OsGuiMenuHotkey* Ptr();
  unsigned int SizeOfElement();
  struct OsGuiMenuHotkey* Top();
  struct OsGuiMenuHotkey* Top();
  unsigned int NumElements();
  void TSBaseArray<OsGuiMenuHotkey>(class TSBaseArray<OsGuiMenuHotkey>&);
  void TSBaseArray<OsGuiMenuHotkey>();
  class TSBaseArray<OsGuiMenuHotkey>& operator=(class TSBaseArray<OsGuiMenuHotkey>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OsGuiMenuHotkey>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OsGuiMenuHotkey>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<COsMenu *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class COsMenu** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class COsMenu*& operator[](unsigned int);
  class COsMenu*& operator[](unsigned int);
  unsigned int Bytes();
  class COsMenu** Ptr();
  class COsMenu** Ptr();
  unsigned int SizeOfElement();
  class COsMenu** Top();
  class COsMenu** Top();
  unsigned int NumElements();
  void TSBaseArray<COsMenu *>(class TSBaseArray<COsMenu *>&);
  void TSBaseArray<COsMenu *>();
  class TSBaseArray<COsMenu *>& operator=(class TSBaseArray<COsMenu *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<COsMenu *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<COsMenu *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OsIMECandidate> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OsIMECandidate* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OsIMECandidate& operator[](unsigned int);
  struct OsIMECandidate& operator[](unsigned int);
  unsigned int Bytes();
  struct OsIMECandidate* Ptr();
  struct OsIMECandidate* Ptr();
  unsigned int SizeOfElement();
  struct OsIMECandidate* Top();
  struct OsIMECandidate* Top();
  unsigned int NumElements();
  void TSBaseArray<OsIMECandidate>(class TSBaseArray<OsIMECandidate>&);
  void TSBaseArray<OsIMECandidate>();
  class TSBaseArray<OsIMECandidate>& operator=(class TSBaseArray<OsIMECandidate>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OsIMECandidate>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OsIMECandidate>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<OsNet::NETSELSOCKPTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct OsNet::NETSELSOCKPTR& operator[](unsigned int);
  struct OsNet::NETSELSOCKPTR& operator[](unsigned int);
  unsigned int Bytes();
  struct OsNet::NETSELSOCKPTR* Ptr();
  struct OsNet::NETSELSOCKPTR* Ptr();
  unsigned int SizeOfElement();
  struct OsNet::NETSELSOCKPTR* Top();
  struct OsNet::NETSELSOCKPTR* Top();
  unsigned int NumElements();
  void TSBaseArray<OsNet::NETSELSOCKPTR>(class TSBaseArray<OsNet::NETSELSOCKPTR>&);
  void TSBaseArray<OsNet::NETSELSOCKPTR>();
  class TSBaseArray<OsNet::NETSELSOCKPTR>& operator=(class TSBaseArray<OsNet::NETSELSOCKPTR>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<OsNet::NETSELSOCKPTR>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<OsNet::NETSELSOCKPTR>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NETADDR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ union NETADDR* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  union NETADDR& operator[](unsigned int);
  union NETADDR& operator[](unsigned int);
  unsigned int Bytes();
  union NETADDR* Ptr();
  union NETADDR* Ptr();
  unsigned int SizeOfElement();
  union NETADDR* Top();
  union NETADDR* Top();
  unsigned int NumElements();
  void TSBaseArray<NETADDR>(class TSBaseArray<NETADDR>&);
  void TSBaseArray<NETADDR>();
  class TSBaseArray<NETADDR>& operator=(class TSBaseArray<NETADDR>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NETADDR>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NETADDR>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>& operator[](unsigned int);
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* Ptr();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* Top();
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >(class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >();
  class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >& operator=(class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<W32Joystick> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct W32Joystick* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct W32Joystick& operator[](unsigned int);
  struct W32Joystick& operator[](unsigned int);
  unsigned int Bytes();
  struct W32Joystick* Ptr();
  struct W32Joystick* Ptr();
  unsigned int SizeOfElement();
  struct W32Joystick* Top();
  struct W32Joystick* Top();
  unsigned int NumElements();
  void TSBaseArray<W32Joystick>(class TSBaseArray<W32Joystick>&);
  void TSBaseArray<W32Joystick>();
  class TSBaseArray<W32Joystick>& operator=(class TSBaseArray<W32Joystick>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<W32Joystick>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<W32Joystick>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SoundFileObjectCacheNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SoundFileObjectCacheNode& operator[](unsigned int);
  struct SoundFileObjectCacheNode& operator[](unsigned int);
  unsigned int Bytes();
  struct SoundFileObjectCacheNode* Ptr();
  struct SoundFileObjectCacheNode* Ptr();
  unsigned int SizeOfElement();
  struct SoundFileObjectCacheNode* Top();
  struct SoundFileObjectCacheNode* Top();
  unsigned int NumElements();
  void TSBaseArray<SoundFileObjectCacheNode>(class TSBaseArray<SoundFileObjectCacheNode>&);
  void TSBaseArray<SoundFileObjectCacheNode>();
  class TSBaseArray<SoundFileObjectCacheNode>& operator=(class TSBaseArray<SoundFileObjectCacheNode>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SoundFileObjectCacheNode>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SoundFileObjectCacheNode>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SoundFileDataCacheBlock> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SoundFileDataCacheBlock& operator[](unsigned int);
  struct SoundFileDataCacheBlock& operator[](unsigned int);
  unsigned int Bytes();
  struct SoundFileDataCacheBlock* Ptr();
  struct SoundFileDataCacheBlock* Ptr();
  unsigned int SizeOfElement();
  struct SoundFileDataCacheBlock* Top();
  struct SoundFileDataCacheBlock* Top();
  unsigned int NumElements();
  void TSBaseArray<SoundFileDataCacheBlock>(class TSBaseArray<SoundFileDataCacheBlock>&);
  void TSBaseArray<SoundFileDataCacheBlock>();
  class TSBaseArray<SoundFileDataCacheBlock>& operator=(class TSBaseArray<SoundFileDataCacheBlock>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SoundFileDataCacheBlock>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SoundFileDataCacheBlock>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SoundFileDataCacheBlock,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>& operator[](unsigned int);
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* Ptr();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* Top();
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >(class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >();
  class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SoundFileObjectCacheNode,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>& operator[](unsigned int);
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* Ptr();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* Top();
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >(class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >();
  class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SoundFileObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct SoundFileObject* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct SoundFileObject& operator[](unsigned int);
  struct SoundFileObject& operator[](unsigned int);
  unsigned int Bytes();
  struct SoundFileObject* Ptr();
  struct SoundFileObject* Ptr();
  unsigned int SizeOfElement();
  struct SoundFileObject* Top();
  struct SoundFileObject* Top();
  unsigned int NumElements();
  void TSBaseArray<SoundFileObject>(class TSBaseArray<SoundFileObject>&);
  void TSBaseArray<SoundFileObject>();
  class TSBaseArray<SoundFileObject>& operator=(class TSBaseArray<SoundFileObject>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SoundFileObject>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SoundFileObject>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CModelHash> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CModelHash* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CModelHash& operator[](unsigned int);
  struct CModelHash& operator[](unsigned int);
  unsigned int Bytes();
  struct CModelHash* Ptr();
  struct CModelHash* Ptr();
  unsigned int SizeOfElement();
  struct CModelHash* Top();
  struct CModelHash* Top();
  unsigned int NumElements();
  void TSBaseArray<CModelHash>(class TSBaseArray<CModelHash>&);
  void TSBaseArray<CModelHash>();
  class TSBaseArray<CModelHash>& operator=(class TSBaseArray<CModelHash>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CModelHash>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CModelHash>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CModelHash,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CModelHash,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CModelHash,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CModelHash,-572662307>& operator[](unsigned int);
  class TSExplicitList<CModelHash,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CModelHash,-572662307>* Ptr();
  class TSExplicitList<CModelHash,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CModelHash,-572662307>* Top();
  class TSExplicitList<CModelHash,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CModelHash,-572662307> >(class TSBaseArray<TSExplicitList<CModelHash,-572662307> >&);
  void TSBaseArray<TSExplicitList<CModelHash,-572662307> >();
  class TSBaseArray<TSExplicitList<CModelHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CModelHash,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CModelHash,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CModelHash,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<unsigned long> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  unsigned long& operator[](unsigned int);
  unsigned long& operator[](unsigned int);
  unsigned int Bytes();
  unsigned long* Ptr();
  unsigned long* Ptr();
  unsigned int SizeOfElement();
  unsigned long* Top();
  unsigned long* Top();
  unsigned int NumElements();
  void TSBaseArray<unsigned long>(class TSBaseArray<unsigned long>&);
  void TSBaseArray<unsigned long>();
  class TSBaseArray<unsigned long>& operator=(class TSBaseArray<unsigned long>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<unsigned long>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<unsigned long>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CHitTest> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CHitTest* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CHitTest>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CHitTest& operator[](unsigned int);
  struct CHitTest& operator[](unsigned int);
  unsigned int Bytes();
  struct CHitTest* Ptr();
  struct CHitTest* Ptr();
  unsigned int SizeOfElement();
  struct CHitTest* Top();
  struct CHitTest* Top();
  unsigned int NumElements();
  void TSBaseArray<CHitTest>(class TSBaseArray<CHitTest>&);
  void TSBaseArray<CHitTest>();
  class TSBaseArray<CHitTest>& operator=(class TSBaseArray<CHitTest>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CHitTest>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CHitTest>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CBoundsData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CBoundsData* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CBoundsData& operator[](unsigned int);
  struct CBoundsData& operator[](unsigned int);
  unsigned int Bytes();
  struct CBoundsData* Ptr();
  struct CBoundsData* Ptr();
  unsigned int SizeOfElement();
  struct CBoundsData* Top();
  struct CBoundsData* Top();
  unsigned int NumElements();
  void TSBaseArray<CBoundsData>(class TSBaseArray<CBoundsData>&);
  void TSBaseArray<CBoundsData>();
  class TSBaseArray<CBoundsData>& operator=(class TSBaseArray<CBoundsData>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CBoundsData>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CBoundsData>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLGLOBALSEQSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLGLOBALSEQSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLGLOBALSEQSECTION& operator[](unsigned int);
  struct MDLGLOBALSEQSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLGLOBALSEQSECTION* Ptr();
  struct MDLGLOBALSEQSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLGLOBALSEQSECTION* Top();
  struct MDLGLOBALSEQSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLGLOBALSEQSECTION>(class TSBaseArray<MDLGLOBALSEQSECTION>&);
  void TSBaseArray<MDLGLOBALSEQSECTION>();
  class TSBaseArray<MDLGLOBALSEQSECTION>& operator=(class TSBaseArray<MDLGLOBALSEQSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLGLOBALSEQSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLGLOBALSEQSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLTEXLAYER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLTEXLAYER* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLTEXLAYER>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLTEXLAYER& operator[](unsigned int);
  struct MDLTEXLAYER& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLTEXLAYER* Ptr();
  struct MDLTEXLAYER* Ptr();
  unsigned int SizeOfElement();
  struct MDLTEXLAYER* Top();
  struct MDLTEXLAYER* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLTEXLAYER>(class TSBaseArray<MDLTEXLAYER>&);
  void TSBaseArray<MDLTEXLAYER>();
  class TSBaseArray<MDLTEXLAYER>& operator=(class TSBaseArray<MDLTEXLAYER>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLTEXLAYER>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLTEXLAYER>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLMATERIALSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLMATERIALSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLMATERIALSECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLMATERIALSECTION& operator[](unsigned int);
  struct MDLMATERIALSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLMATERIALSECTION* Ptr();
  struct MDLMATERIALSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLMATERIALSECTION* Top();
  struct MDLMATERIALSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLMATERIALSECTION>(class TSBaseArray<MDLMATERIALSECTION>&);
  void TSBaseArray<MDLMATERIALSECTION>();
  class TSBaseArray<MDLMATERIALSECTION>& operator=(class TSBaseArray<MDLMATERIALSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLMATERIALSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLMATERIALSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLTEXTURESECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLTEXTURESECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLTEXTURESECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLTEXTURESECTION& operator[](unsigned int);
  struct MDLTEXTURESECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLTEXTURESECTION* Ptr();
  struct MDLTEXTURESECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLTEXTURESECTION* Top();
  struct MDLTEXTURESECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLTEXTURESECTION>(class TSBaseArray<MDLTEXTURESECTION>&);
  void TSBaseArray<MDLTEXTURESECTION>();
  class TSBaseArray<MDLTEXTURESECTION>& operator=(class TSBaseArray<MDLTEXTURESECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLTEXTURESECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLTEXTURESECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLKEYFRAME<NTempest::C3Vector>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLKEYFRAME<NTempest::C3Vector>& operator[](unsigned int);
  struct MDLKEYFRAME<NTempest::C3Vector>& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLKEYFRAME<NTempest::C3Vector>* Ptr();
  struct MDLKEYFRAME<NTempest::C3Vector>* Ptr();
  unsigned int SizeOfElement();
  struct MDLKEYFRAME<NTempest::C3Vector>* Top();
  struct MDLKEYFRAME<NTempest::C3Vector>* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >(class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >&);
  void TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >();
  class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >& operator=(class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLKEYFRAME<NTempest::C4Quaternion>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLKEYFRAME<NTempest::C4Quaternion>& operator[](unsigned int);
  struct MDLKEYFRAME<NTempest::C4Quaternion>& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLKEYFRAME<NTempest::C4Quaternion>* Ptr();
  struct MDLKEYFRAME<NTempest::C4Quaternion>* Ptr();
  unsigned int SizeOfElement();
  struct MDLKEYFRAME<NTempest::C4Quaternion>* Top();
  struct MDLKEYFRAME<NTempest::C4Quaternion>* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >(class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);
  void TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >();
  class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >& operator=(class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLTEXANIMSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLTEXANIMSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLTEXANIMSECTION& operator[](unsigned int);
  struct MDLTEXANIMSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLTEXANIMSECTION* Ptr();
  struct MDLTEXANIMSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLTEXANIMSECTION* Top();
  struct MDLTEXANIMSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLTEXANIMSECTION>(class TSBaseArray<MDLTEXANIMSECTION>&);
  void TSBaseArray<MDLTEXANIMSECTION>();
  class TSBaseArray<MDLTEXANIMSECTION>& operator=(class TSBaseArray<MDLTEXANIMSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLTEXANIMSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLTEXANIMSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CMdlBounds> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CMdlBounds* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CMdlBounds& operator[](unsigned int);
  struct CMdlBounds& operator[](unsigned int);
  unsigned int Bytes();
  struct CMdlBounds* Ptr();
  struct CMdlBounds* Ptr();
  unsigned int SizeOfElement();
  struct CMdlBounds* Top();
  struct CMdlBounds* Top();
  unsigned int NumElements();
  void TSBaseArray<CMdlBounds>(class TSBaseArray<CMdlBounds>&);
  void TSBaseArray<CMdlBounds>();
  class TSBaseArray<CMdlBounds>& operator=(class TSBaseArray<CMdlBounds>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CMdlBounds>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CMdlBounds>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLGEOSETSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLGEOSETSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLGEOSETSECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLGEOSETSECTION& operator[](unsigned int);
  struct MDLGEOSETSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLGEOSETSECTION* Ptr();
  struct MDLGEOSETSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLGEOSETSECTION* Top();
  struct MDLGEOSETSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLGEOSETSECTION>(class TSBaseArray<MDLGEOSETSECTION>&);
  void TSBaseArray<MDLGEOSETSECTION>();
  class TSBaseArray<MDLGEOSETSECTION>& operator=(class TSBaseArray<MDLGEOSETSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLGEOSETSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLGEOSETSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLKEYFRAME<float> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLKEYFRAME<float>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLKEYFRAME<float>& operator[](unsigned int);
  struct MDLKEYFRAME<float>& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLKEYFRAME<float>* Ptr();
  struct MDLKEYFRAME<float>* Ptr();
  unsigned int SizeOfElement();
  struct MDLKEYFRAME<float>* Top();
  struct MDLKEYFRAME<float>* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLKEYFRAME<float> >(class TSBaseArray<MDLKEYFRAME<float> >&);
  void TSBaseArray<MDLKEYFRAME<float> >();
  class TSBaseArray<MDLKEYFRAME<float> >& operator=(class TSBaseArray<MDLKEYFRAME<float> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLKEYFRAME<float> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLKEYFRAME<float> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLKEYFRAME<C3Color> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLKEYFRAME<C3Color>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLKEYFRAME<C3Color>& operator[](unsigned int);
  struct MDLKEYFRAME<C3Color>& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLKEYFRAME<C3Color>* Ptr();
  struct MDLKEYFRAME<C3Color>* Ptr();
  unsigned int SizeOfElement();
  struct MDLKEYFRAME<C3Color>* Top();
  struct MDLKEYFRAME<C3Color>* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLKEYFRAME<C3Color> >(class TSBaseArray<MDLKEYFRAME<C3Color> >&);
  void TSBaseArray<MDLKEYFRAME<C3Color> >();
  class TSBaseArray<MDLKEYFRAME<C3Color> >& operator=(class TSBaseArray<MDLKEYFRAME<C3Color> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLKEYFRAME<C3Color> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLKEYFRAME<C3Color> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLGEOSETANIMSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLGEOSETANIMSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLGEOSETANIMSECTION& operator[](unsigned int);
  struct MDLGEOSETANIMSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLGEOSETANIMSECTION* Ptr();
  struct MDLGEOSETANIMSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLGEOSETANIMSECTION* Top();
  struct MDLGEOSETANIMSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLGEOSETANIMSECTION>(class TSBaseArray<MDLGEOSETANIMSECTION>&);
  void TSBaseArray<MDLGEOSETANIMSECTION>();
  class TSBaseArray<MDLGEOSETANIMSECTION>& operator=(class TSBaseArray<MDLGEOSETANIMSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLGEOSETANIMSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLGEOSETANIMSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLPARTICLEEMITTER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLPARTICLEEMITTER* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLPARTICLEEMITTER& operator[](unsigned int);
  struct MDLPARTICLEEMITTER& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLPARTICLEEMITTER* Ptr();
  struct MDLPARTICLEEMITTER* Ptr();
  unsigned int SizeOfElement();
  struct MDLPARTICLEEMITTER* Top();
  struct MDLPARTICLEEMITTER* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLPARTICLEEMITTER>(class TSBaseArray<MDLPARTICLEEMITTER>&);
  void TSBaseArray<MDLPARTICLEEMITTER>();
  class TSBaseArray<MDLPARTICLEEMITTER>& operator=(class TSBaseArray<MDLPARTICLEEMITTER>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLPARTICLEEMITTER>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLPARTICLEEMITTER>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLCAMERASECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLCAMERASECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLCAMERASECTION& operator[](unsigned int);
  struct MDLCAMERASECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLCAMERASECTION* Ptr();
  struct MDLCAMERASECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLCAMERASECTION* Top();
  struct MDLCAMERASECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLCAMERASECTION>(class TSBaseArray<MDLCAMERASECTION>&);
  void TSBaseArray<MDLCAMERASECTION>();
  class TSBaseArray<MDLCAMERASECTION>& operator=(class TSBaseArray<MDLCAMERASECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLCAMERASECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLCAMERASECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLEVENTKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLEVENTKEY* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLEVENTKEY& operator[](unsigned int);
  struct MDLEVENTKEY& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLEVENTKEY* Ptr();
  struct MDLEVENTKEY* Ptr();
  unsigned int SizeOfElement();
  struct MDLEVENTKEY* Top();
  struct MDLEVENTKEY* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLEVENTKEY>(class TSBaseArray<MDLEVENTKEY>&);
  void TSBaseArray<MDLEVENTKEY>();
  class TSBaseArray<MDLEVENTKEY>& operator=(class TSBaseArray<MDLEVENTKEY>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLEVENTKEY>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLEVENTKEY>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLEVENTSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLEVENTSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLEVENTSECTION& operator[](unsigned int);
  struct MDLEVENTSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLEVENTSECTION* Ptr();
  struct MDLEVENTSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLEVENTSECTION* Top();
  struct MDLEVENTSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLEVENTSECTION>(class TSBaseArray<MDLEVENTSECTION>&);
  void TSBaseArray<MDLEVENTSECTION>();
  class TSBaseArray<MDLEVENTSECTION>& operator=(class TSBaseArray<MDLEVENTSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLEVENTSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLEVENTSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLPARTICLEEMITTER2> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLPARTICLEEMITTER2* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLPARTICLEEMITTER2& operator[](unsigned int);
  struct MDLPARTICLEEMITTER2& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLPARTICLEEMITTER2* Ptr();
  struct MDLPARTICLEEMITTER2* Ptr();
  unsigned int SizeOfElement();
  struct MDLPARTICLEEMITTER2* Top();
  struct MDLPARTICLEEMITTER2* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLPARTICLEEMITTER2>(class TSBaseArray<MDLPARTICLEEMITTER2>&);
  void TSBaseArray<MDLPARTICLEEMITTER2>();
  class TSBaseArray<MDLPARTICLEEMITTER2>& operator=(class TSBaseArray<MDLPARTICLEEMITTER2>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLPARTICLEEMITTER2>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLPARTICLEEMITTER2>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLHITTESTSHAPE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLHITTESTSHAPE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLHITTESTSHAPE>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLHITTESTSHAPE& operator[](unsigned int);
  struct MDLHITTESTSHAPE& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLHITTESTSHAPE* Ptr();
  struct MDLHITTESTSHAPE* Ptr();
  unsigned int SizeOfElement();
  struct MDLHITTESTSHAPE* Top();
  struct MDLHITTESTSHAPE* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLHITTESTSHAPE>(class TSBaseArray<MDLHITTESTSHAPE>&);
  void TSBaseArray<MDLHITTESTSHAPE>();
  class TSBaseArray<MDLHITTESTSHAPE>& operator=(class TSBaseArray<MDLHITTESTSHAPE>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLHITTESTSHAPE>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLHITTESTSHAPE>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLINTKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLINTKEY* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MDLINTKEY& operator[](unsigned int);
  struct MDLINTKEY& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLINTKEY* Ptr();
  struct MDLINTKEY* Ptr();
  unsigned int SizeOfElement();
  struct MDLINTKEY* Top();
  struct MDLINTKEY* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLINTKEY>(class TSBaseArray<MDLINTKEY>&);
  void TSBaseArray<MDLINTKEY>();
  class TSBaseArray<MDLINTKEY>& operator=(class TSBaseArray<MDLINTKEY>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLINTKEY>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLINTKEY>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::C34Matrix> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::C34Matrix* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::C34Matrix>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class NTempest::C34Matrix& operator[](unsigned int);
  class NTempest::C34Matrix& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::C34Matrix* Ptr();
  class NTempest::C34Matrix* Ptr();
  unsigned int SizeOfElement();
  class NTempest::C34Matrix* Top();
  class NTempest::C34Matrix* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::C34Matrix>(class TSBaseArray<NTempest::C34Matrix>&);
  void TSBaseArray<NTempest::C34Matrix>();
  class TSBaseArray<NTempest::C34Matrix>& operator=(class TSBaseArray<NTempest::C34Matrix>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::C34Matrix>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::C34Matrix>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<unsigned short> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned short* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<unsigned short>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<unsigned short>::Count();
  unsigned short& operator[](unsigned int);
  unsigned short& operator[](unsigned int);
  unsigned int Bytes();
  unsigned short* Ptr();
  unsigned short* TSBaseArray<unsigned short>::Ptr();
  unsigned int SizeOfElement();
  unsigned short* Top();
  unsigned short* Top();
  unsigned int NumElements();
  void TSBaseArray<unsigned short>(class TSBaseArray<unsigned short>&);
  void TSBaseArray<unsigned short>();
  class TSBaseArray<unsigned short>& operator=(class TSBaseArray<unsigned short>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<unsigned short>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<unsigned short>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<COpaqueLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct COpaqueLayer* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct COpaqueLayer& operator[](unsigned int);
  struct COpaqueLayer& operator[](unsigned int);
  unsigned int Bytes();
  struct COpaqueLayer* Ptr();
  struct COpaqueLayer* Ptr();
  unsigned int SizeOfElement();
  struct COpaqueLayer* Top();
  struct COpaqueLayer* Top();
  unsigned int NumElements();
  void TSBaseArray<COpaqueLayer>(class TSBaseArray<COpaqueLayer>&);
  void TSBaseArray<COpaqueLayer>();
  class TSBaseArray<COpaqueLayer>& operator=(class TSBaseArray<COpaqueLayer>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<COpaqueLayer>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<COpaqueLayer>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CTransparentObject> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CTransparentObject* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CTransparentObject& operator[](unsigned int);
  struct CTransparentObject& operator[](unsigned int);
  unsigned int Bytes();
  struct CTransparentObject* Ptr();
  struct CTransparentObject* Ptr();
  unsigned int SizeOfElement();
  struct CTransparentObject* Top();
  struct CTransparentObject* Top();
  unsigned int NumElements();
  void TSBaseArray<CTransparentObject>(class TSBaseArray<CTransparentObject>&);
  void TSBaseArray<CTransparentObject>();
  class TSBaseArray<CTransparentObject>& operator=(class TSBaseArray<CTransparentObject>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CTransparentObject>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CTransparentObject>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::C2Vector> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::C2Vector* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::C2Vector>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class NTempest::C2Vector& operator[](unsigned int);
  class NTempest::C2Vector& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::C2Vector* Ptr();
  class NTempest::C2Vector* TSBaseArray<NTempest::C2Vector>::Ptr();
  unsigned int SizeOfElement();
  class NTempest::C2Vector* Top();
  class NTempest::C2Vector* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::C2Vector>(class TSBaseArray<NTempest::C2Vector>&);
  void TSBaseArray<NTempest::C2Vector>();
  class TSBaseArray<NTempest::C2Vector>& operator=(class TSBaseArray<NTempest::C2Vector>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::C2Vector>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::C2Vector>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CTexLayerShared> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CTexLayerShared* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CTexLayerShared>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CTexLayerShared& operator[](unsigned int);
  struct CTexLayerShared& operator[](unsigned int);
  unsigned int Bytes();
  struct CTexLayerShared* Ptr();
  struct CTexLayerShared* Ptr();
  unsigned int SizeOfElement();
  struct CTexLayerShared* Top();
  struct CTexLayerShared* Top();
  unsigned int NumElements();
  void TSBaseArray<CTexLayerShared>(class TSBaseArray<CTexLayerShared>&);
  void TSBaseArray<CTexLayerShared>();
  class TSBaseArray<CTexLayerShared>& operator=(class TSBaseArray<CTexLayerShared>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CTexLayerShared>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CTexLayerShared>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CTexLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CTexLayer* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CTexLayer>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CTexLayer& operator[](unsigned int);
  struct CTexLayer& operator[](unsigned int);
  unsigned int Bytes();
  struct CTexLayer* Ptr();
  struct CTexLayer* Ptr();
  unsigned int SizeOfElement();
  struct CTexLayer* Top();
  struct CTexLayer* Top();
  unsigned int NumElements();
  void TSBaseArray<CTexLayer>(class TSBaseArray<CTexLayer>&);
  void TSBaseArray<CTexLayer>();
  class TSBaseArray<CTexLayer>& operator=(class TSBaseArray<CTexLayer>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CTexLayer>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CTexLayer>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGeosetShared> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGeosetShared* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CGeosetShared>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CGeosetShared& operator[](unsigned int);
  struct CGeosetShared& operator[](unsigned int);
  unsigned int Bytes();
  struct CGeosetShared* Ptr();
  struct CGeosetShared* Ptr();
  unsigned int SizeOfElement();
  struct CGeosetShared* Top();
  struct CGeosetShared* Top();
  unsigned int NumElements();
  void TSBaseArray<CGeosetShared>(class TSBaseArray<CGeosetShared>&);
  void TSBaseArray<CGeosetShared>();
  class TSBaseArray<CGeosetShared>& operator=(class TSBaseArray<CGeosetShared>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGeosetShared>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGeosetShared>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGeoset> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGeoset* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CGeoset>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CGeoset& operator[](unsigned int);
  struct CGeoset& operator[](unsigned int);
  unsigned int Bytes();
  struct CGeoset* Ptr();
  struct CGeoset* Ptr();
  unsigned int SizeOfElement();
  struct CGeoset* Top();
  struct CGeoset* Top();
  unsigned int NumElements();
  void TSBaseArray<CGeoset>(class TSBaseArray<CGeoset>&);
  void TSBaseArray<CGeoset>();
  class TSBaseArray<CGeoset>& operator=(class TSBaseArray<CGeoset>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGeoset>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGeoset>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CGeosetColor> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CGeosetColor* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CGeosetColor>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CGeosetColor& operator[](unsigned int);
  struct CGeosetColor& operator[](unsigned int);
  unsigned int Bytes();
  struct CGeosetColor* Ptr();
  struct CGeosetColor* Ptr();
  unsigned int SizeOfElement();
  struct CGeosetColor* Top();
  struct CGeosetColor* Top();
  unsigned int NumElements();
  void TSBaseArray<CGeosetColor>(class TSBaseArray<CGeosetColor>&);
  void TSBaseArray<CGeosetColor>();
  class TSBaseArray<CGeosetColor>& operator=(class TSBaseArray<CGeosetColor>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CGeosetColor>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CGeosetColor>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CCustomGeoset> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CCustomGeoset* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CCustomGeoset>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CCustomGeoset& operator[](unsigned int);
  struct CCustomGeoset& operator[](unsigned int);
  unsigned int Bytes();
  struct CCustomGeoset* Ptr();
  struct CCustomGeoset* Ptr();
  unsigned int SizeOfElement();
  struct CCustomGeoset* Top();
  struct CCustomGeoset* Top();
  unsigned int NumElements();
  void TSBaseArray<CCustomGeoset>(class TSBaseArray<CCustomGeoset>&);
  void TSBaseArray<CCustomGeoset>();
  class TSBaseArray<CCustomGeoset>& operator=(class TSBaseArray<CCustomGeoset>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CCustomGeoset>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CCustomGeoset>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<HMATERIAL__ *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HMATERIAL__** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<HMATERIAL__ *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct HMATERIAL__*& operator[](unsigned int);
  struct HMATERIAL__*& operator[](unsigned int);
  unsigned int Bytes();
  struct HMATERIAL__** Ptr();
  struct HMATERIAL__** Ptr();
  unsigned int SizeOfElement();
  struct HMATERIAL__** Top();
  struct HMATERIAL__** Top();
  unsigned int NumElements();
  void TSBaseArray<HMATERIAL__ *>(class TSBaseArray<HMATERIAL__ *>&);
  void TSBaseArray<HMATERIAL__ *>();
  class TSBaseArray<HMATERIAL__ *>& operator=(class TSBaseArray<HMATERIAL__ *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<HMATERIAL__ *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<HMATERIAL__ *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CModelTexture> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CModelTexture* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CModelTexture>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CModelTexture& operator[](unsigned int);
  struct CModelTexture& operator[](unsigned int);
  unsigned int Bytes();
  struct CModelTexture* Ptr();
  struct CModelTexture* Ptr();
  unsigned int SizeOfElement();
  struct CModelTexture* Top();
  struct CModelTexture* Top();
  unsigned int NumElements();
  void TSBaseArray<CModelTexture>(class TSBaseArray<CModelTexture>&);
  void TSBaseArray<CModelTexture>();
  class TSBaseArray<CModelTexture>& operator=(class TSBaseArray<CModelTexture>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CModelTexture>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CModelTexture>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >& operator[](unsigned int);
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >& operator[](unsigned int);
  unsigned int Bytes();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >* Ptr();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >* Ptr();
  unsigned int SizeOfElement();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >* Top();
  class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >* Top();
  unsigned int NumElements();
  void TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >(class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);
  void TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >();
  class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >& operator=(class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<HCAMERA__ *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HCAMERA__** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<HCAMERA__ *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct HCAMERA__*& operator[](unsigned int);
  struct HCAMERA__*& operator[](unsigned int);
  unsigned int Bytes();
  struct HCAMERA__** Ptr();
  struct HCAMERA__** Ptr();
  unsigned int SizeOfElement();
  struct HCAMERA__** Top();
  struct HCAMERA__** Top();
  unsigned int NumElements();
  void TSBaseArray<HCAMERA__ *>(class TSBaseArray<HCAMERA__ *>&);
  void TSBaseArray<HCAMERA__ *>();
  class TSBaseArray<HCAMERA__ *>& operator=(class TSBaseArray<HCAMERA__ *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<HCAMERA__ *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<HCAMERA__ *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CParticleEmitter2 *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CParticleEmitter2** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CParticleEmitter2 *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CParticleEmitter2*& operator[](unsigned int);
  class CParticleEmitter2*& operator[](unsigned int);
  unsigned int Bytes();
  class CParticleEmitter2** Ptr();
  class CParticleEmitter2** Ptr();
  unsigned int SizeOfElement();
  class CParticleEmitter2** Top();
  class CParticleEmitter2** Top();
  unsigned int NumElements();
  void TSBaseArray<CParticleEmitter2 *>(class TSBaseArray<CParticleEmitter2 *>&);
  void TSBaseArray<CParticleEmitter2 *>();
  class TSBaseArray<CParticleEmitter2 *>& operator=(class TSBaseArray<CParticleEmitter2 *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CParticleEmitter2 *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CParticleEmitter2 *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CRibbonEmitter *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CRibbonEmitter** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CRibbonEmitter *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CRibbonEmitter*& operator[](unsigned int);
  class CRibbonEmitter*& operator[](unsigned int);
  unsigned int Bytes();
  class CRibbonEmitter** Ptr();
  class CRibbonEmitter** Ptr();
  unsigned int SizeOfElement();
  class CRibbonEmitter** Top();
  class CRibbonEmitter** Top();
  unsigned int NumElements();
  void TSBaseArray<CRibbonEmitter *>(class TSBaseArray<CRibbonEmitter *>&);
  void TSBaseArray<CRibbonEmitter *>();
  class TSBaseArray<CRibbonEmitter *>& operator=(class TSBaseArray<CRibbonEmitter *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CRibbonEmitter *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CRibbonEmitter *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CPrimitive> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CPrimitive* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CPrimitive>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CPrimitive& operator[](unsigned int);
  struct CPrimitive& TSBaseArray<CPrimitive>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  struct CPrimitive* Ptr();
  struct CPrimitive* Ptr();
  unsigned int SizeOfElement();
  struct CPrimitive* Top();
  struct CPrimitive* Top();
  unsigned int NumElements();
  void TSBaseArray<CPrimitive>(class TSBaseArray<CPrimitive>&);
  void TSBaseArray<CPrimitive>();
  class TSBaseArray<CPrimitive>& operator=(class TSBaseArray<CPrimitive>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CPrimitive>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CPrimitive>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CMatrixGroup> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CMatrixGroup* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CMatrixGroup& operator[](unsigned int);
  struct CMatrixGroup& operator[](unsigned int);
  unsigned int Bytes();
  struct CMatrixGroup* Ptr();
  struct CMatrixGroup* Ptr();
  unsigned int SizeOfElement();
  struct CMatrixGroup* Top();
  struct CMatrixGroup* Top();
  unsigned int NumElements();
  void TSBaseArray<CMatrixGroup>(class TSBaseArray<CMatrixGroup>&);
  void TSBaseArray<CMatrixGroup>();
  class TSBaseArray<CMatrixGroup>& operator=(class TSBaseArray<CMatrixGroup>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CMatrixGroup>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CMatrixGroup>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::CFacet> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct NTempest::CFacet* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::CFacet>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct NTempest::CFacet& operator[](unsigned int);
  struct NTempest::CFacet& operator[](unsigned int);
  unsigned int Bytes();
  struct NTempest::CFacet* Ptr();
  struct NTempest::CFacet* Ptr();
  unsigned int SizeOfElement();
  struct NTempest::CFacet* Top();
  struct NTempest::CFacet* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::CFacet>(class TSBaseArray<NTempest::CFacet>&);
  void TSBaseArray<NTempest::CFacet>();
  class TSBaseArray<NTempest::CFacet>& operator=(class TSBaseArray<NTempest::CFacet>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::CFacet>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::CFacet>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CRibbonMat> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CRibbonMat* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CRibbonMat>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct CRibbonMat& operator[](unsigned int);
  struct CRibbonMat& operator[](unsigned int);
  unsigned int Bytes();
  struct CRibbonMat* Ptr();
  struct CRibbonMat* Ptr();
  unsigned int SizeOfElement();
  struct CRibbonMat* Top();
  struct CRibbonMat* Top();
  unsigned int NumElements();
  void TSBaseArray<CRibbonMat>(class TSBaseArray<CRibbonMat>&);
  void TSBaseArray<CRibbonMat>();
  class TSBaseArray<CRibbonMat>& operator=(class TSBaseArray<CRibbonMat>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CRibbonMat>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CRibbonMat>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<HTEXTURE__ *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct HTEXTURE__** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct HTEXTURE__*& operator[](unsigned int);
  struct HTEXTURE__*& operator[](unsigned int);
  unsigned int Bytes();
  struct HTEXTURE__** Ptr();
  struct HTEXTURE__** Ptr();
  unsigned int SizeOfElement();
  struct HTEXTURE__** Top();
  struct HTEXTURE__** Top();
  unsigned int NumElements();
  void TSBaseArray<HTEXTURE__ *>(class TSBaseArray<HTEXTURE__ *>&);
  void TSBaseArray<HTEXTURE__ *>();
  class TSBaseArray<HTEXTURE__ *>& operator=(class TSBaseArray<HTEXTURE__ *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<HTEXTURE__ *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<HTEXTURE__ *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLRIBBONEMITTER> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLRIBBONEMITTER* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLRIBBONEMITTER>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLRIBBONEMITTER& operator[](unsigned int);
  struct MDLRIBBONEMITTER& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLRIBBONEMITTER* Ptr();
  struct MDLRIBBONEMITTER* Ptr();
  unsigned int SizeOfElement();
  struct MDLRIBBONEMITTER* Top();
  struct MDLRIBBONEMITTER* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLRIBBONEMITTER>(class TSBaseArray<MDLRIBBONEMITTER>&);
  void TSBaseArray<MDLRIBBONEMITTER>();
  class TSBaseArray<MDLRIBBONEMITTER>& operator=(class TSBaseArray<MDLRIBBONEMITTER>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLRIBBONEMITTER>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLRIBBONEMITTER>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSFixedArray_<NTempest::C2Vector,1229811556,266>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>& operator[](unsigned int);
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>& operator[](unsigned int);
  unsigned int Bytes();
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>* Ptr();
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>* Ptr();
  unsigned int SizeOfElement();
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>* Top();
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >(class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  void TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >();
  class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >& operator=(class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSGrowableArray<NTempest::C2Vector> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSGrowableArray<NTempest::C2Vector>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSGrowableArray<NTempest::C2Vector> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSGrowableArray<NTempest::C2Vector>& operator[](unsigned int);
  class TSGrowableArray<NTempest::C2Vector>& operator[](unsigned int);
  unsigned int Bytes();
  class TSGrowableArray<NTempest::C2Vector>* Ptr();
  class TSGrowableArray<NTempest::C2Vector>* Ptr();
  unsigned int SizeOfElement();
  class TSGrowableArray<NTempest::C2Vector>* Top();
  class TSGrowableArray<NTempest::C2Vector>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSGrowableArray<NTempest::C2Vector> >(class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >&);
  void TSBaseArray<TSGrowableArray<NTempest::C2Vector> >();
  class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >& operator=(class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSGrowableArray<NTempest::C2Vector> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSGrowableArray<NTempest::C2Vector> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<unsigned char> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned char* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<unsigned char>::Constructor();
  void TSBaseArray<unsigned char>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<unsigned char>::Count();
  unsigned char& operator[](unsigned int);
  unsigned char& TSBaseArray<unsigned char>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* TSBaseArray<unsigned char>::Ptr();
  unsigned int SizeOfElement();
  unsigned char* Top();
  unsigned char* TSBaseArray<unsigned char>::Top();
  unsigned int NumElements();
  void TSBaseArray<unsigned char>(class TSBaseArray<unsigned char>&);
  void TSBaseArray<unsigned char>::TSBaseArray<unsigned char>();
  class TSBaseArray<unsigned char>& operator=(class TSBaseArray<unsigned char>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<unsigned char>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<unsigned char>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLGENOBJECT *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLGENOBJECT** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLGENOBJECT *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLGENOBJECT*& operator[](unsigned int);
  struct MDLGENOBJECT*& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLGENOBJECT** Ptr();
  struct MDLGENOBJECT** Ptr();
  unsigned int SizeOfElement();
  struct MDLGENOBJECT** Top();
  struct MDLGENOBJECT** Top();
  unsigned int NumElements();
  void TSBaseArray<MDLGENOBJECT *>(class TSBaseArray<MDLGENOBJECT *>&);
  void TSBaseArray<MDLGENOBJECT *>();
  class TSBaseArray<MDLGENOBJECT *>& operator=(class TSBaseArray<MDLGENOBJECT *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLGENOBJECT *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLGENOBJECT *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLBONESECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLBONESECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLBONESECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLBONESECTION& operator[](unsigned int);
  struct MDLBONESECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLBONESECTION* Ptr();
  struct MDLBONESECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLBONESECTION* Top();
  struct MDLBONESECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLBONESECTION>(class TSBaseArray<MDLBONESECTION>&);
  void TSBaseArray<MDLBONESECTION>();
  class TSBaseArray<MDLBONESECTION>& operator=(class TSBaseArray<MDLBONESECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLBONESECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLBONESECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLLIGHTSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLLIGHTSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLLIGHTSECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLLIGHTSECTION& operator[](unsigned int);
  struct MDLLIGHTSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLLIGHTSECTION* Ptr();
  struct MDLLIGHTSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLLIGHTSECTION* Top();
  struct MDLLIGHTSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLLIGHTSECTION>(class TSBaseArray<MDLLIGHTSECTION>&);
  void TSBaseArray<MDLLIGHTSECTION>();
  class TSBaseArray<MDLLIGHTSECTION>& operator=(class TSBaseArray<MDLLIGHTSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLLIGHTSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLLIGHTSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLGENOBJECT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLGENOBJECT* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLGENOBJECT>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLGENOBJECT& operator[](unsigned int);
  struct MDLGENOBJECT& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLGENOBJECT* Ptr();
  struct MDLGENOBJECT* Ptr();
  unsigned int SizeOfElement();
  struct MDLGENOBJECT* Top();
  struct MDLGENOBJECT* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLGENOBJECT>(class TSBaseArray<MDLGENOBJECT>&);
  void TSBaseArray<MDLGENOBJECT>();
  class TSBaseArray<MDLGENOBJECT>& operator=(class TSBaseArray<MDLGENOBJECT>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLGENOBJECT>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLGENOBJECT>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLATTACHMENTSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLATTACHMENTSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLATTACHMENTSECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLATTACHMENTSECTION& operator[](unsigned int);
  struct MDLATTACHMENTSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLATTACHMENTSECTION* Ptr();
  struct MDLATTACHMENTSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLATTACHMENTSECTION* Top();
  struct MDLATTACHMENTSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLATTACHMENTSECTION>(class TSBaseArray<MDLATTACHMENTSECTION>&);
  void TSBaseArray<MDLATTACHMENTSECTION>();
  class TSBaseArray<MDLATTACHMENTSECTION>& operator=(class TSBaseArray<MDLATTACHMENTSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLATTACHMENTSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLATTACHMENTSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<FRAMEPRIORITY *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class FRAMEPRIORITY** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class FRAMEPRIORITY*& operator[](unsigned int);
  class FRAMEPRIORITY*& operator[](unsigned int);
  unsigned int Bytes();
  class FRAMEPRIORITY** Ptr();
  class FRAMEPRIORITY** Ptr();
  unsigned int SizeOfElement();
  class FRAMEPRIORITY** Top();
  class FRAMEPRIORITY** Top();
  unsigned int NumElements();
  void TSBaseArray<FRAMEPRIORITY *>(class TSBaseArray<FRAMEPRIORITY *>&);
  void TSBaseArray<FRAMEPRIORITY *>();
  class TSBaseArray<FRAMEPRIORITY *>& operator=(class TSBaseArray<FRAMEPRIORITY *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<FRAMEPRIORITY *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<FRAMEPRIORITY *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CFrameStrataNode *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CFrameStrataNode** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<CFrameStrataNode *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class CFrameStrataNode*& operator[](unsigned int);
  class CFrameStrataNode*& operator[](unsigned int);
  unsigned int Bytes();
  class CFrameStrataNode** Ptr();
  class CFrameStrataNode** Ptr();
  unsigned int SizeOfElement();
  class CFrameStrataNode** Top();
  class CFrameStrataNode** Top();
  unsigned int NumElements();
  void TSBaseArray<CFrameStrataNode *>(class TSBaseArray<CFrameStrataNode *>&);
  void TSBaseArray<CFrameStrataNode *>();
  class TSBaseArray<CFrameStrataNode *>& operator=(class TSBaseArray<CFrameStrataNode *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CFrameStrataNode *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CFrameStrataNode *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* Ptr();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* Top();
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>& operator[](unsigned int);
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* Ptr();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* Top();
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >();
  class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* Ptr();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* Top();
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* Ptr();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* Top();
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CFramePoint *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CFramePoint** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CFramePoint*& operator[](unsigned int);
  class CFramePoint*& operator[](unsigned int);
  unsigned int Bytes();
  class CFramePoint** Ptr();
  class CFramePoint** Ptr();
  unsigned int SizeOfElement();
  class CFramePoint** Top();
  class CFramePoint** Top();
  unsigned int NumElements();
  void TSBaseArray<CFramePoint *>(class TSBaseArray<CFramePoint *>&);
  void TSBaseArray<CFramePoint *>();
  class TSBaseArray<CFramePoint *>& operator=(class TSBaseArray<CFramePoint *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CFramePoint *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CFramePoint *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSimpleBatchedTexture> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CSimpleBatchedTexture* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CSimpleBatchedTexture& operator[](unsigned int);
  struct CSimpleBatchedTexture& operator[](unsigned int);
  unsigned int Bytes();
  struct CSimpleBatchedTexture* Ptr();
  struct CSimpleBatchedTexture* Ptr();
  unsigned int SizeOfElement();
  struct CSimpleBatchedTexture* Top();
  struct CSimpleBatchedTexture* Top();
  unsigned int NumElements();
  void TSBaseArray<CSimpleBatchedTexture>(class TSBaseArray<CSimpleBatchedTexture>&);
  void TSBaseArray<CSimpleBatchedTexture>();
  class TSBaseArray<CSimpleBatchedTexture>& operator=(class TSBaseArray<CSimpleBatchedTexture>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSimpleBatchedTexture>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSimpleBatchedTexture>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<char *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ char** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  char*& operator[](unsigned int);
  char*& operator[](unsigned int);
  unsigned int Bytes();
  char** Ptr();
  char** Ptr();
  unsigned int SizeOfElement();
  char** Top();
  char** Top();
  unsigned int NumElements();
  void TSBaseArray<char *>(class TSBaseArray<char *>&);
  void TSBaseArray<char *>();
  class TSBaseArray<char *>& operator=(class TSBaseArray<char *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<char *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<char *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSimpleMessageFrameLine> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleMessageFrameLine* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CSimpleMessageFrameLine& operator[](unsigned int);
  class CSimpleMessageFrameLine& operator[](unsigned int);
  unsigned int Bytes();
  class CSimpleMessageFrameLine* Ptr();
  class CSimpleMessageFrameLine* Ptr();
  unsigned int SizeOfElement();
  class CSimpleMessageFrameLine* Top();
  class CSimpleMessageFrameLine* Top();
  unsigned int NumElements();
  void TSBaseArray<CSimpleMessageFrameLine>(class TSBaseArray<CSimpleMessageFrameLine>&);
  void TSBaseArray<CSimpleMessageFrameLine>();
  class TSBaseArray<CSimpleMessageFrameLine>& operator=(class TSBaseArray<CSimpleMessageFrameLine>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSimpleMessageFrameLine>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSimpleMessageFrameLine>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MessageData> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MessageData* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct MessageData& operator[](unsigned int);
  struct MessageData& operator[](unsigned int);
  unsigned int Bytes();
  struct MessageData* Ptr();
  struct MessageData* Ptr();
  unsigned int SizeOfElement();
  struct MessageData* Top();
  struct MessageData* Top();
  unsigned int NumElements();
  void TSBaseArray<MessageData>(class TSBaseArray<MessageData>&);
  void TSBaseArray<MessageData>();
  class TSBaseArray<MessageData>& operator=(class TSBaseArray<MessageData>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MessageData>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MessageData>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSimpleMessageScrollFrameDisplayNode> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleMessageScrollFrameDisplayNode* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CSimpleMessageScrollFrameDisplayNode& operator[](unsigned int);
  class CSimpleMessageScrollFrameDisplayNode& operator[](unsigned int);
  unsigned int Bytes();
  class CSimpleMessageScrollFrameDisplayNode* Ptr();
  class CSimpleMessageScrollFrameDisplayNode* Ptr();
  unsigned int SizeOfElement();
  class CSimpleMessageScrollFrameDisplayNode* Top();
  class CSimpleMessageScrollFrameDisplayNode* Top();
  unsigned int NumElements();
  void TSBaseArray<CSimpleMessageScrollFrameDisplayNode>(class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>&);
  void TSBaseArray<CSimpleMessageScrollFrameDisplayNode>();
  class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>& operator=(class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSimpleMessageScrollFrameDisplayNode>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSimpleMessageScrollFrameDisplayNode>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSimpleMessageScrollFrameLine> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class CSimpleMessageScrollFrameLine* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  class CSimpleMessageScrollFrameLine& operator[](unsigned int);
  class CSimpleMessageScrollFrameLine& operator[](unsigned int);
  unsigned int Bytes();
  class CSimpleMessageScrollFrameLine* Ptr();
  class CSimpleMessageScrollFrameLine* Ptr();
  unsigned int SizeOfElement();
  class CSimpleMessageScrollFrameLine* Top();
  class CSimpleMessageScrollFrameLine* Top();
  unsigned int NumElements();
  void TSBaseArray<CSimpleMessageScrollFrameLine>(class TSBaseArray<CSimpleMessageScrollFrameLine>&);
  void TSBaseArray<CSimpleMessageScrollFrameLine>();
  class TSBaseArray<CSimpleMessageScrollFrameLine>& operator=(class TSBaseArray<CSimpleMessageScrollFrameLine>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSimpleMessageScrollFrameLine>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSimpleMessageScrollFrameLine>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<EvtTimer *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct EvtTimer** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<EvtTimer *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct EvtTimer*& operator[](unsigned int);
  struct EvtTimer*& operator[](unsigned int);
  unsigned int Bytes();
  struct EvtTimer** Ptr();
  struct EvtTimer** Ptr();
  unsigned int SizeOfElement();
  struct EvtTimer** Top();
  struct EvtTimer** Top();
  unsigned int NumElements();
  void TSBaseArray<EvtTimer *>(class TSBaseArray<EvtTimer *>&);
  void TSBaseArray<EvtTimer *>();
  class TSBaseArray<EvtTimer *>& operator=(class TSBaseArray<EvtTimer *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<EvtTimer *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<EvtTimer *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<SThread *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class SThread** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<SThread *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class SThread*& operator[](unsigned int);
  class SThread*& operator[](unsigned int);
  unsigned int Bytes();
  class SThread** Ptr();
  class SThread** Ptr();
  unsigned int SizeOfElement();
  class SThread** Top();
  class SThread** Top();
  unsigned int NumElements();
  void TSBaseArray<SThread *>(class TSBaseArray<SThread *>&);
  void TSBaseArray<SThread *>();
  class TSBaseArray<SThread *>& operator=(class TSBaseArray<SThread *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<SThread *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<SThread *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<EvtContext *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct EvtContext** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct EvtContext*& operator[](unsigned int);
  struct EvtContext*& operator[](unsigned int);
  unsigned int Bytes();
  struct EvtContext** Ptr();
  struct EvtContext** Ptr();
  unsigned int SizeOfElement();
  struct EvtContext** Top();
  struct EvtContext** Top();
  unsigned int NumElements();
  void TSBaseArray<EvtContext *>(class TSBaseArray<EvtContext *>&);
  void TSBaseArray<EvtContext *>();
  class TSBaseArray<EvtContext *>& operator=(class TSBaseArray<EvtContext *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<EvtContext *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<EvtContext *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<void *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ void** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<void *>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  void*& operator[](unsigned int);
  void*& operator[](unsigned int);
  unsigned int Bytes();
  void** Ptr();
  void** Ptr();
  unsigned int SizeOfElement();
  void** Top();
  void** Top();
  unsigned int NumElements();
  void TSBaseArray<void *>(class TSBaseArray<void *>&);
  void TSBaseArray<void *>();
  class TSBaseArray<void *>& operator=(class TSBaseArray<void *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<void *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<void *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<EventReg,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<EventReg,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<EventReg,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<EventReg,-572662307>& operator[](unsigned int);
  class TSExplicitList<EventReg,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<EventReg,-572662307>* Ptr();
  class TSExplicitList<EventReg,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<EventReg,-572662307>* Top();
  class TSExplicitList<EventReg,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<EventReg,-572662307> >(class TSBaseArray<TSExplicitList<EventReg,-572662307> >&);
  void TSBaseArray<TSExplicitList<EventReg,-572662307> >();
  class TSBaseArray<TSExplicitList<EventReg,-572662307> >& operator=(class TSBaseArray<TSExplicitList<EventReg,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<EventReg,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<EventReg,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<unsigned int> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned int* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBaseArray<unsigned int>::Constructor();
  void TSBaseArray<unsigned int>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<unsigned int>::Count();
  unsigned int& operator[](unsigned int);
  unsigned int& TSBaseArray<unsigned int>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Bytes();
  unsigned int* TSBaseArray<unsigned int>::Ptr();
  unsigned int* Ptr();
  unsigned int SizeOfElement();
  unsigned int* Top();
  unsigned int* TSBaseArray<unsigned int>::Top();
  unsigned int NumElements();
  void TSBaseArray<unsigned int>(class TSBaseArray<unsigned int>&);
  void TSBaseArray<unsigned int>::TSBaseArray<unsigned int>();
  class TSBaseArray<unsigned int>& operator=(class TSBaseArray<unsigned int>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<unsigned int>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<unsigned int>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<PrefetchNode,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<PrefetchNode,-572662307>& operator[](unsigned int);
  class TSExplicitList<PrefetchNode,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<PrefetchNode,-572662307>* Ptr();
  class TSExplicitList<PrefetchNode,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<PrefetchNode,-572662307>* Top();
  class TSExplicitList<PrefetchNode,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >(class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >();
  class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<UncachableNode,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<UncachableNode,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<UncachableNode,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<UncachableNode,-572662307>& operator[](unsigned int);
  class TSExplicitList<UncachableNode,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<UncachableNode,-572662307>* Ptr();
  class TSExplicitList<UncachableNode,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<UncachableNode,-572662307>* Top();
  class TSExplicitList<UncachableNode,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<UncachableNode,-572662307> >(class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >&);
  void TSBaseArray<TSExplicitList<UncachableNode,-572662307> >();
  class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<UncachableNode,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<UncachableNode,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CStringRep,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CStringRep,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CStringRep,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CStringRep,-572662307>& operator[](unsigned int);
  class TSExplicitList<CStringRep,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CStringRep,-572662307>* Ptr();
  class TSExplicitList<CStringRep,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CStringRep,-572662307>* Top();
  class TSExplicitList<CStringRep,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CStringRep,-572662307> >(class TSBaseArray<TSExplicitList<CStringRep,-572662307> >&);
  void TSBaseArray<TSExplicitList<CStringRep,-572662307> >();
  class TSBaseArray<TSExplicitList<CStringRep,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CStringRep,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CStringRep,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CStringRep,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<enum ACTIVITY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ enum ACTIVITY* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  enum ACTIVITY& operator[](unsigned int);
  enum ACTIVITY& operator[](unsigned int);
  unsigned int Bytes();
  enum ACTIVITY* Ptr();
  enum ACTIVITY* Ptr();
  unsigned int SizeOfElement();
  enum ACTIVITY* Top();
  enum ACTIVITY* Top();
  unsigned int NumElements();
  void TSBaseArray<enum ACTIVITY>(class TSBaseArray<enum ACTIVITY>&);
  void TSBaseArray<enum ACTIVITY>();
  class TSBaseArray<enum ACTIVITY>& operator=(class TSBaseArray<enum ACTIVITY>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<enum ACTIVITY>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<enum ACTIVITY>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<ANIMHASH,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<ANIMHASH,-572662307>& operator[](unsigned int);
  class TSExplicitList<ANIMHASH,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<ANIMHASH,-572662307>* Ptr();
  class TSExplicitList<ANIMHASH,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<ANIMHASH,-572662307>* Top();
  class TSExplicitList<ANIMHASH,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >(class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >();
  class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class TSExplicitList<CAnimNameHash,-572662307>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  class TSExplicitList<CAnimNameHash,-572662307>& operator[](unsigned int);
  class TSExplicitList<CAnimNameHash,-572662307>& operator[](unsigned int);
  unsigned int Bytes();
  class TSExplicitList<CAnimNameHash,-572662307>* Ptr();
  class TSExplicitList<CAnimNameHash,-572662307>* Ptr();
  unsigned int SizeOfElement();
  class TSExplicitList<CAnimNameHash,-572662307>* Top();
  class TSExplicitList<CAnimNameHash,-572662307>* Top();
  unsigned int NumElements();
  void TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >(class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >();
  class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >::MemLineNo();
};
// <size 0x10>

class TSBaseArray<NTempest::C3Vector> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<NTempest::C3Vector>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int TSBaseArray<NTempest::C3Vector>::Count();
  class NTempest::C3Vector& operator[](unsigned int);
  class NTempest::C3Vector& operator[](unsigned int);
  unsigned int Bytes();
  class NTempest::C3Vector* Ptr();
  class NTempest::C3Vector* TSBaseArray<NTempest::C3Vector>::Ptr();
  unsigned int SizeOfElement();
  class NTempest::C3Vector* Top();
  class NTempest::C3Vector* Top();
  unsigned int NumElements();
  void TSBaseArray<NTempest::C3Vector>(class TSBaseArray<NTempest::C3Vector>&);
  void TSBaseArray<NTempest::C3Vector>();
  class TSBaseArray<NTempest::C3Vector>& operator=(class TSBaseArray<NTempest::C3Vector>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<NTempest::C3Vector>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<NTempest::C3Vector>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<MDLSEQUENCESSECTION> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct MDLSEQUENCESSECTION* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void TSBaseArray<MDLSEQUENCESSECTION>::CheckArrayBounds(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  struct MDLSEQUENCESSECTION& operator[](unsigned int);
  struct MDLSEQUENCESSECTION& operator[](unsigned int);
  unsigned int Bytes();
  struct MDLSEQUENCESSECTION* Ptr();
  struct MDLSEQUENCESSECTION* Ptr();
  unsigned int SizeOfElement();
  struct MDLSEQUENCESSECTION* Top();
  struct MDLSEQUENCESSECTION* Top();
  unsigned int NumElements();
  void TSBaseArray<MDLSEQUENCESSECTION>(class TSBaseArray<MDLSEQUENCESSECTION>&);
  void TSBaseArray<MDLSEQUENCESSECTION>();
  class TSBaseArray<MDLSEQUENCESSECTION>& operator=(class TSBaseArray<MDLSEQUENCESSECTION>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<MDLSEQUENCESSECTION>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<MDLSEQUENCESSECTION>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CSeqOrdering> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CSeqOrdering* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CSeqOrdering& operator[](unsigned int);
  struct CSeqOrdering& operator[](unsigned int);
  unsigned int Bytes();
  struct CSeqOrdering* Ptr();
  struct CSeqOrdering* Ptr();
  unsigned int SizeOfElement();
  struct CSeqOrdering* Top();
  struct CSeqOrdering* Top();
  unsigned int NumElements();
  void TSBaseArray<CSeqOrdering>(class TSBaseArray<CSeqOrdering>&);
  void TSBaseArray<CSeqOrdering>();
  class TSBaseArray<CSeqOrdering>& operator=(class TSBaseArray<CSeqOrdering>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CSeqOrdering>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CSeqOrdering>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CAnimObj *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CAnimObj** m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CAnimObj*& operator[](unsigned int);
  struct CAnimObj*& operator[](unsigned int);
  unsigned int Bytes();
  struct CAnimObj** Ptr();
  struct CAnimObj** Ptr();
  unsigned int SizeOfElement();
  struct CAnimObj** Top();
  struct CAnimObj** Top();
  unsigned int NumElements();
  void TSBaseArray<CAnimObj *>(class TSBaseArray<CAnimObj *>&);
  void TSBaseArray<CAnimObj *>();
  class TSBaseArray<CAnimObj *>& operator=(class TSBaseArray<CAnimObj *>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CAnimObj *>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CAnimObj *>::MemLineNo();
};
// <size 0x10>

class TSBaseArray<CMemCmdItem> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_alloc;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0xc>*/ /*|0x4|*/ struct CMemCmdItem* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Constructor();
  void CheckArrayBounds(unsigned int);
  unsigned int Count();
  struct CMemCmdItem& operator[](unsigned int);
  struct CMemCmdItem& operator[](unsigned int);
  unsigned int Bytes();
  struct CMemCmdItem* Ptr();
  struct CMemCmdItem* Ptr();
  unsigned int SizeOfElement();
  struct CMemCmdItem* Top();
  struct CMemCmdItem* Top();
  unsigned int NumElements();
  void TSBaseArray<CMemCmdItem>(class TSBaseArray<CMemCmdItem>&);
  void TSBaseArray<CMemCmdItem>();
  class TSBaseArray<CMemCmdItem>& operator=(class TSBaseArray<CMemCmdItem>&);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSBaseArray<CMemCmdItem>::MemFileName();
  virtual /*<vtableoff 0x4>*/ int TSBaseArray<CMemCmdItem>::MemLineNo();
};
// <size 0x10>


}

{ // TSStackArray - 11

class TSStackArray<enum MISS_REASON> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ enum MISS_REASON* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<enum MISS_REASON>(void*, unsigned int, int);
  void ~TSStackArray<enum MISS_REASON>();
  class TSStackArray<enum MISS_REASON>& operator=(class TSStackArray<enum MISS_REASON>&);
  enum MISS_REASON& operator[](unsigned int);
  enum MISS_REASON& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  enum MISS_REASON* Ptr();
  enum MISS_REASON* Ptr();
  void Set(unsigned int, int, enum MISS_REASON*);
  void Set(unsigned int, enum MISS_REASON*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, enum MISS_REASON*);
  void Add(unsigned int, enum MISS_REASON*);
  enum MISS_REASON* New(enum MISS_REASON&);
  enum MISS_REASON* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<CWorld::MinimapQuad> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct CWorld::MinimapQuad* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<CWorld::MinimapQuad>(void*, unsigned int, int);
  void ~TSStackArray<CWorld::MinimapQuad>();
  class TSStackArray<CWorld::MinimapQuad>& operator=(class TSStackArray<CWorld::MinimapQuad>&);
  struct CWorld::MinimapQuad& operator[](unsigned int);
  struct CWorld::MinimapQuad& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  struct CWorld::MinimapQuad* Ptr();
  struct CWorld::MinimapQuad* Ptr();
  void Set(unsigned int, int, struct CWorld::MinimapQuad*);
  void Set(unsigned int, struct CWorld::MinimapQuad*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, struct CWorld::MinimapQuad*);
  void Add(unsigned int, struct CWorld::MinimapQuad*);
  struct CWorld::MinimapQuad* New(struct CWorld::MinimapQuad&);
  struct CWorld::MinimapQuad* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<unsigned char> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned char* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<unsigned char>(void*, unsigned int, int);
  void TSStackArray<unsigned char>::~TSStackArray<unsigned char>();
  class TSStackArray<unsigned char>& operator=(class TSStackArray<unsigned char>&);
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Set(unsigned int, int, unsigned char*);
  void Set(unsigned int, unsigned char*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, unsigned char*);
  void Add(unsigned int, unsigned char*);
  unsigned char* New(unsigned char&);
  unsigned char* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<QUESTGIVEREMOTENODE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct QUESTGIVEREMOTENODE* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<QUESTGIVEREMOTENODE>(void*, unsigned int, int);
  void ~TSStackArray<QUESTGIVEREMOTENODE>();
  class TSStackArray<QUESTGIVEREMOTENODE>& operator=(class TSStackArray<QUESTGIVEREMOTENODE>&);
  struct QUESTGIVEREMOTENODE& operator[](unsigned int);
  struct QUESTGIVEREMOTENODE& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  struct QUESTGIVEREMOTENODE* Ptr();
  struct QUESTGIVEREMOTENODE* Ptr();
  void Set(unsigned int, int, struct QUESTGIVEREMOTENODE*);
  void Set(unsigned int, struct QUESTGIVEREMOTENODE*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, struct QUESTGIVEREMOTENODE*);
  void Add(unsigned int, struct QUESTGIVEREMOTENODE*);
  struct QUESTGIVEREMOTENODE* New(struct QUESTGIVEREMOTENODE&);
  struct QUESTGIVEREMOTENODE* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<unsigned __int64> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned __int64* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<unsigned __int64>(void*, unsigned int, int);
  void ~TSStackArray<unsigned __int64>();
  class TSStackArray<unsigned __int64>& operator=(class TSStackArray<unsigned __int64>&);
  unsigned __int64& operator[](unsigned int);
  unsigned __int64& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  unsigned __int64* Ptr();
  unsigned __int64* Ptr();
  void Set(unsigned int, int, unsigned __int64*);
  void Set(unsigned int, unsigned __int64*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, unsigned __int64*);
  void Add(unsigned int, unsigned __int64*);
  unsigned __int64* New(unsigned __int64&);
  unsigned __int64* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<int> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ int* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<int>(void*, unsigned int, int);
  void TSStackArray<int>::~TSStackArray<int>();
  class TSStackArray<int>& operator=(class TSStackArray<int>&);
  int& operator[](unsigned int);
  int& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  int* Ptr();
  int* Ptr();
  void Set(unsigned int, int, int*);
  void Set(unsigned int, int*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, int*);
  void Add(unsigned int, int*);
  int* New(int&);
  int* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<TSGrowableArray<unsigned int> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TSGrowableArray<unsigned int>* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<TSGrowableArray<unsigned int> >(void*, unsigned int, int);
  void TSStackArray<TSGrowableArray<unsigned int> >::~TSStackArray<TSGrowableArray<unsigned int> >();
  class TSStackArray<TSGrowableArray<unsigned int> >& operator=(class TSStackArray<TSGrowableArray<unsigned int> >&);
  class TSGrowableArray<unsigned int>& operator[](unsigned int);
  class TSGrowableArray<unsigned int>& TSStackArray<TSGrowableArray<unsigned int> >::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int Count();
  unsigned int Bytes();
  class TSGrowableArray<unsigned int>* Ptr();
  class TSGrowableArray<unsigned int>* Ptr();
  void Set(unsigned int, int, class TSGrowableArray<unsigned int>*);
  void Set(unsigned int, class TSGrowableArray<unsigned int>*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, class TSGrowableArray<unsigned int>*);
  void Add(unsigned int, class TSGrowableArray<unsigned int>*);
  class TSGrowableArray<unsigned int>* New(class TSGrowableArray<unsigned int>&);
  class TSGrowableArray<unsigned int>* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<NTempest::C2Vector> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NTempest::C2Vector* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<NTempest::C2Vector>(void*, unsigned int, int);
  void ~TSStackArray<NTempest::C2Vector>();
  class TSStackArray<NTempest::C2Vector>& operator=(class TSStackArray<NTempest::C2Vector>&);
  class NTempest::C2Vector& operator[](unsigned int);
  class NTempest::C2Vector& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  class NTempest::C2Vector* Ptr();
  class NTempest::C2Vector* TSStackArray<NTempest::C2Vector>::Ptr();
  void Set(unsigned int, int, class NTempest::C2Vector*);
  void Set(unsigned int, class NTempest::C2Vector*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, class NTempest::C2Vector*);
  void Add(unsigned int, class NTempest::C2Vector*);
  class NTempest::C2Vector* New(class NTempest::C2Vector&);
  class NTempest::C2Vector* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<unsigned short> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned short* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<unsigned short>(void*, unsigned int, int);
  void ~TSStackArray<unsigned short>();
  class TSStackArray<unsigned short>& operator=(class TSStackArray<unsigned short>&);
  unsigned short& operator[](unsigned int);
  unsigned short& operator[](unsigned int);
  unsigned int TSStackArray<unsigned short>::Count();
  unsigned int Bytes();
  unsigned short* Ptr();
  unsigned short* TSStackArray<unsigned short>::Ptr();
  void Set(unsigned int, int, unsigned short*);
  void Set(unsigned int, unsigned short*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, unsigned short*);
  void Add(unsigned int, unsigned short*);
  unsigned short* New(unsigned short&);
  unsigned short* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<unsigned int> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ unsigned int* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<unsigned int>(void*, unsigned int, int);
  void TSStackArray<unsigned int>::~TSStackArray<unsigned int>();
  class TSStackArray<unsigned int>& operator=(class TSStackArray<unsigned int>&);
  unsigned int& operator[](unsigned int);
  unsigned int& operator[](unsigned int);
  unsigned int Count();
  unsigned int Bytes();
  unsigned int* Ptr();
  unsigned int* Ptr();
  void Set(unsigned int, int, unsigned int*);
  void Set(unsigned int, unsigned int*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, unsigned int*);
  void Add(unsigned int, unsigned int*);
  unsigned int* New(unsigned int&);
  unsigned int* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>

class TSStackArray<NTempest::C3Vector> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_maxCount;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NTempest::C3Vector* m_data;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void FatalArrayBounds();
  void TSStackArray<NTempest::C3Vector>(void*, unsigned int, int);
  void ~TSStackArray<NTempest::C3Vector>();
  class TSStackArray<NTempest::C3Vector>& operator=(class TSStackArray<NTempest::C3Vector>&);
  class NTempest::C3Vector& operator[](unsigned int);
  class NTempest::C3Vector& operator[](unsigned int);
  unsigned int TSStackArray<NTempest::C3Vector>::Count();
  unsigned int Bytes();
  class NTempest::C3Vector* Ptr();
  class NTempest::C3Vector* TSStackArray<NTempest::C3Vector>::Ptr();
  void Set(unsigned int, int, class NTempest::C3Vector*);
  void Set(unsigned int, class NTempest::C3Vector*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void Add(unsigned int, int, class NTempest::C3Vector*);
  void Add(unsigned int, class NTempest::C3Vector*);
  class NTempest::C3Vector* New(class NTempest::C3Vector&);
  class NTempest::C3Vector* New();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc>


}

{ // TSCArray - 22

class TSCArray<HTEXTURE__ *,96> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x180|*/ struct HTEXTURE__* m_data[96];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<HTEXTURE__ *,96>(class TSCArray<HTEXTURE__ *,96>&);
  void TSCArray<HTEXTURE__ *,96>();
  class TSCArray<HTEXTURE__ *,96>& operator=(class TSCArray<HTEXTURE__ *,96>&);
  struct HTEXTURE__*& operator[](unsigned int);
  struct HTEXTURE__*& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct HTEXTURE__** Ptr();
  struct HTEXTURE__** Ptr();
  void Set(unsigned int, int, struct HTEXTURE__**);
  void Set(unsigned int, struct HTEXTURE__**);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x184>

class TSCArray<CMapObjGroup *,384> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x600|*/ class CMapObjGroup* m_data[384];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<CMapObjGroup *,384>(class TSCArray<CMapObjGroup *,384>&);
  void TSCArray<CMapObjGroup *,384>();
  class TSCArray<CMapObjGroup *,384>& operator=(class TSCArray<CMapObjGroup *,384>&);
  class CMapObjGroup*& operator[](unsigned int);
  class CMapObjGroup*& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  class CMapObjGroup** Ptr();
  class CMapObjGroup** Ptr();
  void Set(unsigned int, int, class CMapObjGroup**);
  void Set(unsigned int, class CMapObjGroup**);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x604>

class TSCArray<unsigned short,201> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x192|*/ unsigned short m_data[201];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<unsigned short,201>(class TSCArray<unsigned short,201>&);
  void TSCArray<unsigned short,201>();
  class TSCArray<unsigned short,201>& operator=(class TSCArray<unsigned short,201>&);
  unsigned short& operator[](unsigned int);
  unsigned short& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  unsigned short* Ptr();
  unsigned short* Ptr();
  void Set(unsigned int, int, unsigned short*);
  void Set(unsigned int, unsigned short*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x198>

class TSCArray<float,201> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x324|*/ float m_data[201];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<float,201>::FatalArrayBounds();
  void TSCArray<float,201>(class TSCArray<float,201>&);
  void TSCArray<float,201>();
  class TSCArray<float,201>& operator=(class TSCArray<float,201>&);
  float& operator[](unsigned int);
  float& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  float* Ptr();
  float* Ptr();
  void Set(unsigned int, int, float*);
  void Set(unsigned int, float*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x328>

class TSCArray<NTempest::CImVector,512> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x800|*/ class NTempest::CImVector m_data[512];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<NTempest::CImVector,512>(class TSCArray<NTempest::CImVector,512>&);
  void TSCArray<NTempest::CImVector,512>();
  class TSCArray<NTempest::CImVector,512>& operator=(class TSCArray<NTempest::CImVector,512>&);
  class NTempest::CImVector& operator[](unsigned int);
  class NTempest::CImVector& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  class NTempest::CImVector* Ptr();
  class NTempest::CImVector* Ptr();
  void Set(unsigned int, int, class NTempest::CImVector*);
  void Set(unsigned int, class NTempest::CImVector*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<NTempest::CImVector,512>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x804>

class TSCArray<CGxBuf *,512> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x800|*/ struct CGxBuf* m_data[512];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<CGxBuf *,512>(class TSCArray<CGxBuf *,512>&);
  void TSCArray<CGxBuf *,512>();
  class TSCArray<CGxBuf *,512>& operator=(class TSCArray<CGxBuf *,512>&);
  struct CGxBuf*& operator[](unsigned int);
  struct CGxBuf*& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct CGxBuf** Ptr();
  struct CGxBuf** Ptr();
  void Set(unsigned int, int, struct CGxBuf**);
  void Set(unsigned int, struct CGxBuf**);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x804>

class TSCArray<unsigned char,15000> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x3a98|*/ unsigned char m_data[15000];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<unsigned char,15000>(class TSCArray<unsigned char,15000>&);
  void TSCArray<unsigned char,15000>();
  class TSCArray<unsigned char,15000>& operator=(class TSCArray<unsigned char,15000>&);
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Set(unsigned int, int, unsigned char*);
  void Set(unsigned int, unsigned char*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x3a9c>

class TSCArray<NTempest::CRect,16> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x100|*/ class NTempest::CRect m_data[16];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<NTempest::CRect,16>(class TSCArray<NTempest::CRect,16>&);
  void TSCArray<NTempest::CRect,16>();
  class TSCArray<NTempest::CRect,16>& operator=(class TSCArray<NTempest::CRect,16>&);
  class NTempest::CRect& operator[](unsigned int);
  class NTempest::CRect& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  class NTempest::CRect* Ptr();
  class NTempest::CRect* Ptr();
  void Set(unsigned int, int, class NTempest::CRect*);
  void TSCArray<NTempest::CRect,16>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CRect* data);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<NTempest::CRect,16>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x104>

class TSCArray<SPortalExt,2048> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0xe000|*/ struct SPortalExt m_data[2048];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<SPortalExt,2048>(class TSCArray<SPortalExt,2048>&);
  void TSCArray<SPortalExt,2048>();
  class TSCArray<SPortalExt,2048>& operator=(class TSCArray<SPortalExt,2048>&);
  struct SPortalExt& operator[](unsigned int);
  struct SPortalExt& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct SPortalExt* Ptr();
  struct SPortalExt* Ptr();
  void Set(unsigned int, int, struct SPortalExt*);
  void Set(unsigned int, struct SPortalExt*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<SPortalExt,2048>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xe004>

class TSCArray<unsigned char,163840> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x28000|*/ unsigned char m_data[163840];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<unsigned char,163840>(class TSCArray<unsigned char,163840>&);
  void TSCArray<unsigned char,163840>();
  class TSCArray<unsigned char,163840>& operator=(class TSCArray<unsigned char,163840>&);
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Set(unsigned int, int, unsigned char*);
  void Set(unsigned int, unsigned char*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x28004>

class TSCArray<int,120> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x1e0|*/ int m_data[120];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<int,120>(class TSCArray<int,120>&);
  void TSCArray<int,120>();
  class TSCArray<int,120>& operator=(class TSCArray<int,120>&);
  int& operator[](unsigned int);
  int& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  int* Ptr();
  int* Ptr();
  void Set(unsigned int, int, int*);
  void Set(unsigned int, int*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x1e4>

class TSCArray<TaxiNode,64> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x300|*/ struct TaxiNode m_data[64];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<TaxiNode,64>(class TSCArray<TaxiNode,64>&);
  void TSCArray<TaxiNode,64>();
  class TSCArray<TaxiNode,64>& operator=(class TSCArray<TaxiNode,64>&);
  struct TaxiNode& operator[](unsigned int);
  struct TaxiNode& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct TaxiNode* Ptr();
  struct TaxiNode* Ptr();
  void Set(unsigned int, int, struct TaxiNode*);
  void Set(unsigned int, struct TaxiNode*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x304>

class TSCArray<FILENAMEENTRY,10> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0xa50|*/ struct FILENAMEENTRY m_data[10];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<FILENAMEENTRY,10>(class TSCArray<FILENAMEENTRY,10>&);
  void TSCArray<FILENAMEENTRY,10>();
  class TSCArray<FILENAMEENTRY,10>& operator=(class TSCArray<FILENAMEENTRY,10>&);
  struct FILENAMEENTRY& operator[](unsigned int);
  struct FILENAMEENTRY& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct FILENAMEENTRY* Ptr();
  struct FILENAMEENTRY* Ptr();
  void Set(unsigned int, int, struct FILENAMEENTRY*);
  void Set(unsigned int, struct FILENAMEENTRY*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0xa54>

class TSCArray<unsigned char,1048576> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x100000|*/ unsigned char m_data[1048576];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<unsigned char,1048576>(class TSCArray<unsigned char,1048576>&);
  void TSCArray<unsigned char,1048576>();
  class TSCArray<unsigned char,1048576>& operator=(class TSCArray<unsigned char,1048576>&);
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Set(unsigned int, int, unsigned char*);
  void Set(unsigned int, unsigned char*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x100004>

class TSCArray<CParticleEmitter2 *,4> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x10|*/ class CParticleEmitter2* m_data[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<CParticleEmitter2 *,4>::FatalArrayBounds();
  void TSCArray<CParticleEmitter2 *,4>(class TSCArray<CParticleEmitter2 *,4>&);
  void TSCArray<CParticleEmitter2 *,4>();
  class TSCArray<CParticleEmitter2 *,4>& operator=(class TSCArray<CParticleEmitter2 *,4>&);
  class CParticleEmitter2*& operator[](unsigned int);
  class CParticleEmitter2*& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  class CParticleEmitter2** Ptr();
  class CParticleEmitter2** Ptr();
  void Set(unsigned int, int, class CParticleEmitter2**);
  void Set(unsigned int, class CParticleEmitter2**);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x14>

class TSCArray<CParticleKey,2> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0xc0|*/ class CParticleKey m_data[2];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<CParticleKey,2>::FatalArrayBounds();
  void TSCArray<CParticleKey,2>(class TSCArray<CParticleKey,2>&);
  void TSCArray<CParticleKey,2>();
  class TSCArray<CParticleKey,2>& operator=(class TSCArray<CParticleKey,2>&);
  class CParticleKey& operator[](unsigned int);
  class CParticleKey& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  class CParticleKey* Ptr();
  class CParticleKey* Ptr();
  void Set(unsigned int, int, class CParticleKey*);
  void Set(unsigned int, class CParticleKey*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<CParticleKey,2>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xc4>

class TSCArray<CCustomGeoset,1> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x14|*/ struct CCustomGeoset m_data[1];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<CCustomGeoset,1>(class TSCArray<CCustomGeoset,1>&);
  void TSCArray<CCustomGeoset,1>::TSCArray<CCustomGeoset,1>();
  class TSCArray<CCustomGeoset,1>& operator=(class TSCArray<CCustomGeoset,1>&);
  struct CCustomGeoset& operator[](unsigned int);
  struct CCustomGeoset& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct CCustomGeoset* Ptr();
  struct CCustomGeoset* Ptr();
  void Set(unsigned int, int, struct CCustomGeoset*);
  void Set(unsigned int, struct CCustomGeoset*);
  void TSCArray<CCustomGeoset,1>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<CCustomGeoset,1>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSCArray<unsigned char,4194304> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x400000|*/ unsigned char m_data[4194304];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void FatalArrayBounds();
  void TSCArray<unsigned char,4194304>(class TSCArray<unsigned char,4194304>&);
  void TSCArray<unsigned char,4194304>();
  class TSCArray<unsigned char,4194304>& operator=(class TSCArray<unsigned char,4194304>&);
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Set(unsigned int, int, unsigned char*);
  void Set(unsigned int, unsigned char*);
  void SetCount(unsigned int);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x400004>

class TSCArray<CGeoset,5> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x28|*/ struct CGeoset m_data[5];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<CGeoset,5>::FatalArrayBounds();
  void TSCArray<CGeoset,5>(class TSCArray<CGeoset,5>&);
  void TSCArray<CGeoset,5>::TSCArray<CGeoset,5>();
  class TSCArray<CGeoset,5>& operator=(class TSCArray<CGeoset,5>&);
  struct CGeoset& operator[](unsigned int);
  struct CGeoset& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct CGeoset* Ptr();
  struct CGeoset* Ptr();
  void Set(unsigned int, int, struct CGeoset*);
  void Set(unsigned int, struct CGeoset*);
  void TSCArray<CGeoset,5>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x2c>

class TSCArray<CModelTexture,4> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x20|*/ struct CModelTexture m_data[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<CModelTexture,4>::FatalArrayBounds();
  void TSCArray<CModelTexture,4>(class TSCArray<CModelTexture,4>&);
  void TSCArray<CModelTexture,4>::TSCArray<CModelTexture,4>();
  class TSCArray<CModelTexture,4>& operator=(class TSCArray<CModelTexture,4>&);
  struct CModelTexture& operator[](unsigned int);
  struct CModelTexture& TSCArray<CModelTexture,4>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct CModelTexture* Ptr();
  struct CModelTexture* Ptr();
  void Set(unsigned int, int, struct CModelTexture*);
  void Set(unsigned int, struct CModelTexture*);
  void TSCArray<CModelTexture,4>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<CModelTexture,4>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x24>

class TSCArray<HMATERIAL__ *,4> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x10|*/ struct HMATERIAL__* m_data[4];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<HMATERIAL__ *,4>::FatalArrayBounds();
  void TSCArray<HMATERIAL__ *,4>(class TSCArray<HMATERIAL__ *,4>&);
  void TSCArray<HMATERIAL__ *,4>();
  class TSCArray<HMATERIAL__ *,4>& operator=(class TSCArray<HMATERIAL__ *,4>&);
  struct HMATERIAL__*& TSCArray<HMATERIAL__ *,4>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct HMATERIAL__*& operator[](unsigned int);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct HMATERIAL__** Ptr();
  struct HMATERIAL__** Ptr();
  void Set(unsigned int, int, struct HMATERIAL__**);
  void Set(unsigned int, struct HMATERIAL__**);
  void TSCArray<HMATERIAL__ *,4>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void Zero();
  unsigned int SizeOfElement();

  // virtual functions ------------------------------
};
// <size 0x14>

class TSCArray<CGeosetColor,5> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x4>*/ /*|0x50|*/ struct CGeosetColor m_data[5];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  char* MemFileName();
  int MemLineNo();
  void TSCArray<CGeosetColor,5>::FatalArrayBounds();
  void TSCArray<CGeosetColor,5>(class TSCArray<CGeosetColor,5>&);
  void TSCArray<CGeosetColor,5>::TSCArray<CGeosetColor,5>();
  class TSCArray<CGeosetColor,5>& operator=(class TSCArray<CGeosetColor,5>&);
  struct CGeosetColor& operator[](unsigned int);
  struct CGeosetColor& TSCArray<CGeosetColor,5>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int MaxCount();
  unsigned int Count();
  unsigned int Bytes();
  struct CGeosetColor* Ptr();
  struct CGeosetColor* Ptr();
  void Set(unsigned int, int, struct CGeosetColor*);
  void TSCArray<CGeosetColor,5>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGeosetColor* data);
  void TSCArray<CGeosetColor,5>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void Zero();
  unsigned int SizeOfElement();
  void ~TSCArray<CGeosetColor,5>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x54>


}

{ // TSFixedArray - 288

class TSFixedArray<CAnimLayerStatus> : class TSBaseArray<CAnimLayerStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimLayerStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimLayerStatus>(class TSBaseArray<CAnimLayerStatus>&);
  void TSFixedArray<CAnimLayerStatus>(class TSFixedArray<CAnimLayerStatus>&);
  void TSFixedArray<CAnimLayerStatus>();
  void ~TSFixedArray<CAnimLayerStatus>();
  class TSFixedArray<CAnimLayerStatus>& operator=(class TSBaseArray<CAnimLayerStatus>&);
  class TSFixedArray<CAnimLayerStatus>& operator=(class TSFixedArray<CAnimLayerStatus>&);
  void Clear();
  void Detach(struct CAnimLayerStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimLayerStatus>*);
  void Set(unsigned int, int, struct CAnimLayerStatus*);
  void Set(unsigned int, struct CAnimLayerStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimLayerStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimEventObjStatus> : class TSBaseArray<CAnimEventObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimEventObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimEventObjStatus>(class TSBaseArray<CAnimEventObjStatus>&);
  void TSFixedArray<CAnimEventObjStatus>(class TSFixedArray<CAnimEventObjStatus>&);
  void TSFixedArray<CAnimEventObjStatus>();
  void ~TSFixedArray<CAnimEventObjStatus>();
  class TSFixedArray<CAnimEventObjStatus>& operator=(class TSBaseArray<CAnimEventObjStatus>&);
  class TSFixedArray<CAnimEventObjStatus>& operator=(class TSFixedArray<CAnimEventObjStatus>&);
  void Clear();
  void Detach(struct CAnimEventObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimEventObjStatus>*);
  void Set(unsigned int, int, struct CAnimEventObjStatus*);
  void Set(unsigned int, struct CAnimEventObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimEventObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimCameraObjStatus> : class TSBaseArray<CAnimCameraObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimCameraObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimCameraObjStatus>(class TSBaseArray<CAnimCameraObjStatus>&);
  void TSFixedArray<CAnimCameraObjStatus>(class TSFixedArray<CAnimCameraObjStatus>&);
  void TSFixedArray<CAnimCameraObjStatus>();
  void ~TSFixedArray<CAnimCameraObjStatus>();
  class TSFixedArray<CAnimCameraObjStatus>& operator=(class TSBaseArray<CAnimCameraObjStatus>&);
  class TSFixedArray<CAnimCameraObjStatus>& operator=(class TSFixedArray<CAnimCameraObjStatus>&);
  void Clear();
  void Detach(struct CAnimCameraObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimCameraObjStatus>*);
  void Set(unsigned int, int, struct CAnimCameraObjStatus*);
  void Set(unsigned int, struct CAnimCameraObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimCameraObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimRibbonObjStatus> : class TSBaseArray<CAnimRibbonObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimRibbonObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimRibbonObjStatus>(class TSBaseArray<CAnimRibbonObjStatus>&);
  void TSFixedArray<CAnimRibbonObjStatus>(class TSFixedArray<CAnimRibbonObjStatus>&);
  void TSFixedArray<CAnimRibbonObjStatus>();
  void ~TSFixedArray<CAnimRibbonObjStatus>();
  class TSFixedArray<CAnimRibbonObjStatus>& operator=(class TSBaseArray<CAnimRibbonObjStatus>&);
  class TSFixedArray<CAnimRibbonObjStatus>& operator=(class TSFixedArray<CAnimRibbonObjStatus>&);
  void Clear();
  void Detach(struct CAnimRibbonObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimRibbonObjStatus>*);
  void Set(unsigned int, int, struct CAnimRibbonObjStatus*);
  void Set(unsigned int, struct CAnimRibbonObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimRibbonObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimEmitter2ObjStatus> : class TSBaseArray<CAnimEmitter2ObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimEmitter2ObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimEmitter2ObjStatus>(class TSBaseArray<CAnimEmitter2ObjStatus>&);
  void TSFixedArray<CAnimEmitter2ObjStatus>(class TSFixedArray<CAnimEmitter2ObjStatus>&);
  void TSFixedArray<CAnimEmitter2ObjStatus>();
  void ~TSFixedArray<CAnimEmitter2ObjStatus>();
  class TSFixedArray<CAnimEmitter2ObjStatus>& operator=(class TSBaseArray<CAnimEmitter2ObjStatus>&);
  class TSFixedArray<CAnimEmitter2ObjStatus>& operator=(class TSFixedArray<CAnimEmitter2ObjStatus>&);
  void Clear();
  void Detach(struct CAnimEmitter2ObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimEmitter2ObjStatus>*);
  void Set(unsigned int, int, struct CAnimEmitter2ObjStatus*);
  void Set(unsigned int, struct CAnimEmitter2ObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimEmitter2ObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimLightObjStatus> : class TSBaseArray<CAnimLightObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimLightObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimLightObjStatus>(class TSBaseArray<CAnimLightObjStatus>&);
  void TSFixedArray<CAnimLightObjStatus>(class TSFixedArray<CAnimLightObjStatus>&);
  void TSFixedArray<CAnimLightObjStatus>();
  void ~TSFixedArray<CAnimLightObjStatus>();
  class TSFixedArray<CAnimLightObjStatus>& operator=(class TSBaseArray<CAnimLightObjStatus>&);
  class TSFixedArray<CAnimLightObjStatus>& operator=(class TSFixedArray<CAnimLightObjStatus>&);
  void Clear();
  void Detach(struct CAnimLightObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimLightObjStatus>*);
  void Set(unsigned int, int, struct CAnimLightObjStatus*);
  void Set(unsigned int, struct CAnimLightObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimLightObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimObjBlendStatus> : class TSBaseArray<CAnimObjBlendStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimObjBlendStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimObjBlendStatus>(class TSBaseArray<CAnimObjBlendStatus>&);
  void TSFixedArray<CAnimObjBlendStatus>(class TSFixedArray<CAnimObjBlendStatus>&);
  void TSFixedArray<CAnimObjBlendStatus>();
  void ~TSFixedArray<CAnimObjBlendStatus>();
  class TSFixedArray<CAnimObjBlendStatus>& operator=(class TSBaseArray<CAnimObjBlendStatus>&);
  class TSFixedArray<CAnimObjBlendStatus>& operator=(class TSFixedArray<CAnimObjBlendStatus>&);
  void Clear();
  void Detach(struct CAnimObjBlendStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimObjBlendStatus>*);
  void Set(unsigned int, int, struct CAnimObjBlendStatus*);
  void Set(unsigned int, struct CAnimObjBlendStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimObjBlendStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimModelObjStatus> : class TSBaseArray<CAnimModelObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimModelObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimModelObjStatus>(class TSBaseArray<CAnimModelObjStatus>&);
  void TSFixedArray<CAnimModelObjStatus>(class TSFixedArray<CAnimModelObjStatus>&);
  void TSFixedArray<CAnimModelObjStatus>();
  void ~TSFixedArray<CAnimModelObjStatus>();
  class TSFixedArray<CAnimModelObjStatus>& operator=(class TSBaseArray<CAnimModelObjStatus>&);
  class TSFixedArray<CAnimModelObjStatus>& operator=(class TSFixedArray<CAnimModelObjStatus>&);
  void Clear();
  void Detach(struct CAnimModelObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimModelObjStatus>*);
  void Set(unsigned int, int, struct CAnimModelObjStatus*);
  void Set(unsigned int, struct CAnimModelObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimModelObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimGeosetObjStatus> : class TSBaseArray<CAnimGeosetObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimGeosetObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimGeosetObjStatus>(class TSBaseArray<CAnimGeosetObjStatus>&);
  void TSFixedArray<CAnimGeosetObjStatus>(class TSFixedArray<CAnimGeosetObjStatus>&);
  void TSFixedArray<CAnimGeosetObjStatus>();
  void ~TSFixedArray<CAnimGeosetObjStatus>();
  class TSFixedArray<CAnimGeosetObjStatus>& operator=(class TSBaseArray<CAnimGeosetObjStatus>&);
  class TSFixedArray<CAnimGeosetObjStatus>& operator=(class TSFixedArray<CAnimGeosetObjStatus>&);
  void Clear();
  void Detach(struct CAnimGeosetObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimGeosetObjStatus>*);
  void Set(unsigned int, int, struct CAnimGeosetObjStatus*);
  void Set(unsigned int, struct CAnimGeosetObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimGeosetObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimObjStatus> : class TSBaseArray<CAnimObjStatus>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimObjStatus>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimObjStatus>(class TSBaseArray<CAnimObjStatus>&);
  void TSFixedArray<CAnimObjStatus>(class TSFixedArray<CAnimObjStatus>&);
  void TSFixedArray<CAnimObjStatus>();
  void ~TSFixedArray<CAnimObjStatus>();
  class TSFixedArray<CAnimObjStatus>& operator=(class TSBaseArray<CAnimObjStatus>&);
  class TSFixedArray<CAnimObjStatus>& operator=(class TSFixedArray<CAnimObjStatus>&);
  void Clear();
  void Detach(struct CAnimObjStatus**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimObjStatus>*);
  void Set(unsigned int, int, struct CAnimObjStatus*);
  void Set(unsigned int, struct CAnimObjStatus*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimObjStatus*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimObjStatus *> : class TSBaseArray<CAnimObjStatus *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimObjStatus *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CAnimObjStatus *>(class TSBaseArray<CAnimObjStatus *>&);
  void TSFixedArray<CAnimObjStatus *>(class TSFixedArray<CAnimObjStatus *>&);
  void TSFixedArray<CAnimObjStatus *>();
  void ~TSFixedArray<CAnimObjStatus *>();
  class TSFixedArray<CAnimObjStatus *>& operator=(class TSBaseArray<CAnimObjStatus *>&);
  class TSFixedArray<CAnimObjStatus *>& operator=(class TSFixedArray<CAnimObjStatus *>&);
  void Clear();
  void Detach(struct CAnimObjStatus***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimObjStatus *>*);
  void Set(unsigned int, int, struct CAnimObjStatus**);
  void Set(unsigned int, struct CAnimObjStatus**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimObjStatus**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSeqInfo> : class TSBaseArray<CSeqInfo>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSeqInfo>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CSeqInfo>(class TSBaseArray<CSeqInfo>&);
  void TSFixedArray<CSeqInfo>(class TSFixedArray<CSeqInfo>&);
  void TSFixedArray<CSeqInfo>();
  void ~TSFixedArray<CSeqInfo>();
  class TSFixedArray<CSeqInfo>& operator=(class TSBaseArray<CSeqInfo>&);
  class TSFixedArray<CSeqInfo>& operator=(class TSFixedArray<CSeqInfo>&);
  void Clear();
  void Detach(struct CSeqInfo**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSeqInfo>*);
  void Set(unsigned int, int, struct CSeqInfo*);
  void Set(unsigned int, struct CSeqInfo*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CSeqInfo*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<void *> : class TSBaseArray<void *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<void *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<void *>(class TSBaseArray<void *>&);
  void TSFixedArray<void *>(class TSFixedArray<void *>&);
  void TSFixedArray<void *>();
  void ~TSFixedArray<void *>();
  class TSFixedArray<void *>& operator=(class TSBaseArray<void *>&);
  class TSFixedArray<void *>& operator=(class TSFixedArray<void *>&);
  void Clear();
  void Detach(void***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<void *>*);
  void Set(unsigned int, int, void**);
  void Set(unsigned int, void**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, void**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<COsMenu *> : class TSBaseArray<COsMenu *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<COsMenu *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<COsMenu *>(class TSBaseArray<COsMenu *>&);
  void TSFixedArray<COsMenu *>(class TSFixedArray<COsMenu *>&);
  void TSFixedArray<COsMenu *>();
  void ~TSFixedArray<COsMenu *>();
  class TSFixedArray<COsMenu *>& operator=(class TSBaseArray<COsMenu *>&);
  class TSFixedArray<COsMenu *>& operator=(class TSFixedArray<COsMenu *>&);
  void Clear();
  void Detach(class COsMenu***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<COsMenu *>*);
  void Set(unsigned int, int, class COsMenu**);
  void Set(unsigned int, class COsMenu**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class COsMenu**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLATTACHMENTSECTION> : class TSBaseArray<MDLATTACHMENTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLATTACHMENTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLATTACHMENTSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLATTACHMENTSECTION>(class TSBaseArray<MDLATTACHMENTSECTION>&);
  void TSFixedArray<MDLATTACHMENTSECTION>(class TSFixedArray<MDLATTACHMENTSECTION>&);
  void TSFixedArray<MDLATTACHMENTSECTION>::TSFixedArray<MDLATTACHMENTSECTION>();
  void TSFixedArray<MDLATTACHMENTSECTION>::~TSFixedArray<MDLATTACHMENTSECTION>();
  class TSFixedArray<MDLATTACHMENTSECTION>& operator=(class TSBaseArray<MDLATTACHMENTSECTION>&);
  class TSFixedArray<MDLATTACHMENTSECTION>& operator=(class TSFixedArray<MDLATTACHMENTSECTION>&);
  void Clear();
  void Detach(struct MDLATTACHMENTSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLATTACHMENTSECTION>*);
  void Set(unsigned int, int, struct MDLATTACHMENTSECTION*);
  void Set(unsigned int, struct MDLATTACHMENTSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLATTACHMENTSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CLightning *> : class TSBaseArray<CLightning *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CLightning *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CLightning *>(class TSBaseArray<CLightning *>&);
  void TSFixedArray<CLightning *>(class TSFixedArray<CLightning *>&);
  void TSFixedArray<CLightning *>();
  void ~TSFixedArray<CLightning *>();
  class TSFixedArray<CLightning *>& operator=(class TSBaseArray<CLightning *>&);
  class TSFixedArray<CLightning *>& operator=(class TSFixedArray<CLightning *>&);
  void Clear();
  void Detach(class CLightning***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CLightning *>*);
  void Set(unsigned int, int, class CLightning**);
  void Set(unsigned int, class CLightning**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CLightning**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SkillLineAbilityRec const *> : class TSBaseArray<SkillLineAbilityRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SkillLineAbilityRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SkillLineAbilityRec const *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SkillLineAbilityRec const *>(class TSBaseArray<SkillLineAbilityRec const *>&);
  void TSFixedArray<SkillLineAbilityRec const *>(class TSFixedArray<SkillLineAbilityRec const *>&);
  void TSFixedArray<SkillLineAbilityRec const *>();
  void ~TSFixedArray<SkillLineAbilityRec const *>();
  class TSFixedArray<SkillLineAbilityRec const *>& operator=(class TSBaseArray<SkillLineAbilityRec const *>&);
  class TSFixedArray<SkillLineAbilityRec const *>& operator=(class TSFixedArray<SkillLineAbilityRec const *>&);
  void Clear();
  void Detach(class SkillLineAbilityRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SkillLineAbilityRec const *>*);
  void Set(unsigned int, int, class SkillLineAbilityRec**);
  void Set(unsigned int, class SkillLineAbilityRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class SkillLineAbilityRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> > : class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >(class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >&);
  void TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >(class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >&);
  void TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >();
  void ~TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >();
  class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >& operator=(class TSBaseArray<TSFixedArray<SkillLineAbilityRec const *> >&);
  class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >& operator=(class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >&);
  void Clear();
  void Detach(class TSFixedArray<SkillLineAbilityRec const *>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSFixedArray<SkillLineAbilityRec const *> >*);
  void Set(unsigned int, int, class TSFixedArray<SkillLineAbilityRec const *>*);
  void Set(unsigned int, class TSFixedArray<SkillLineAbilityRec const *>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSFixedArray<SkillLineAbilityRec const *>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<enum ANIMENUMERATION> : class TSBaseArray<enum ANIMENUMERATION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<enum ANIMENUMERATION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<enum ANIMENUMERATION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<enum ANIMENUMERATION>(class TSBaseArray<enum ANIMENUMERATION>&);
  void TSFixedArray<enum ANIMENUMERATION>(class TSFixedArray<enum ANIMENUMERATION>&);
  void TSFixedArray<enum ANIMENUMERATION>();
  void ~TSFixedArray<enum ANIMENUMERATION>();
  class TSFixedArray<enum ANIMENUMERATION>& operator=(class TSBaseArray<enum ANIMENUMERATION>&);
  class TSFixedArray<enum ANIMENUMERATION>& operator=(class TSFixedArray<enum ANIMENUMERATION>&);
  void Clear();
  void Detach(enum ANIMENUMERATION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<enum ANIMENUMERATION>*);
  void Set(unsigned int, int, enum ANIMENUMERATION*);
  void Set(unsigned int, enum ANIMENUMERATION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, enum ANIMENUMERATION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LightningObject::Bolt> : class TSBaseArray<LightningObject::Bolt>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LightningObject::Bolt>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<LightningObject::Bolt>(class TSBaseArray<LightningObject::Bolt>&);
  void TSFixedArray<LightningObject::Bolt>(class TSFixedArray<LightningObject::Bolt>&);
  void TSFixedArray<LightningObject::Bolt>();
  void TSFixedArray<LightningObject::Bolt>::~TSFixedArray<LightningObject::Bolt>();
  class TSFixedArray<LightningObject::Bolt>& operator=(class TSBaseArray<LightningObject::Bolt>&);
  class TSFixedArray<LightningObject::Bolt>& operator=(class TSFixedArray<LightningObject::Bolt>&);
  void Clear();
  void Detach(struct LightningObject::Bolt**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LightningObject::Bolt>*);
  void Set(unsigned int, int, struct LightningObject::Bolt*);
  void Set(unsigned int, struct LightningObject::Bolt*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LightningObject::Bolt*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> > : class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >(class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >(class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >();
  void TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::~TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >();
  class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SpellAuraNamesRec const *> : class TSBaseArray<SpellAuraNamesRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SpellAuraNamesRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<SpellAuraNamesRec const *>(class TSBaseArray<SpellAuraNamesRec const *>&);
  void TSFixedArray<SpellAuraNamesRec const *>(class TSFixedArray<SpellAuraNamesRec const *>&);
  void TSFixedArray<SpellAuraNamesRec const *>();
  void ~TSFixedArray<SpellAuraNamesRec const *>();
  class TSFixedArray<SpellAuraNamesRec const *>& operator=(class TSBaseArray<SpellAuraNamesRec const *>&);
  class TSFixedArray<SpellAuraNamesRec const *>& operator=(class TSFixedArray<SpellAuraNamesRec const *>&);
  void Clear();
  void Detach(class SpellAuraNamesRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SpellAuraNamesRec const *>*);
  void Set(unsigned int, int, class SpellAuraNamesRec**);
  void Set(unsigned int, class SpellAuraNamesRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class SpellAuraNamesRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TAXILINE> : class TSBaseArray<TAXILINE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TAXILINE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TAXILINE>(class TSBaseArray<TAXILINE>&);
  void TSFixedArray<TAXILINE>(class TSFixedArray<TAXILINE>&);
  void TSFixedArray<TAXILINE>();
  void ~TSFixedArray<TAXILINE>();
  class TSFixedArray<TAXILINE>& operator=(class TSBaseArray<TAXILINE>&);
  class TSFixedArray<TAXILINE>& operator=(class TSFixedArray<TAXILINE>&);
  void Clear();
  void Detach(struct TAXILINE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TAXILINE>*);
  void Set(unsigned int, int, struct TAXILINE*);
  void Set(unsigned int, struct TAXILINE*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TAXILINE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<VERTEX> : class TSBaseArray<VERTEX>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<VERTEX>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<VERTEX>(class TSBaseArray<VERTEX>&);
  void TSFixedArray<VERTEX>(class TSFixedArray<VERTEX>&);
  void TSFixedArray<VERTEX>();
  void ~TSFixedArray<VERTEX>();
  class TSFixedArray<VERTEX>& operator=(class TSBaseArray<VERTEX>&);
  class TSFixedArray<VERTEX>& operator=(class TSFixedArray<VERTEX>&);
  void Clear();
  void Detach(struct VERTEX**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<VERTEX>*);
  void Set(unsigned int, int, struct VERTEX*);
  void Set(unsigned int, struct VERTEX*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct VERTEX*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> > : class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >(class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >(class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >();
  void TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::~TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >();
  class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >& operator=(class TSBaseArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >& operator=(class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<MINIMAPMD5NAME,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  void Set(unsigned int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<AreaPOIRec const *> : class TSBaseArray<AreaPOIRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<AreaPOIRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<AreaPOIRec const *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<AreaPOIRec const *>(class TSBaseArray<AreaPOIRec const *>&);
  void TSFixedArray<AreaPOIRec const *>(class TSFixedArray<AreaPOIRec const *>&);
  void TSFixedArray<AreaPOIRec const *>();
  void ~TSFixedArray<AreaPOIRec const *>();
  class TSFixedArray<AreaPOIRec const *>& operator=(class TSBaseArray<AreaPOIRec const *>&);
  class TSFixedArray<AreaPOIRec const *>& operator=(class TSFixedArray<AreaPOIRec const *>&);
  void Clear();
  void Detach(class AreaPOIRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<AreaPOIRec const *>*);
  void Set(unsigned int, int, class AreaPOIRec**);
  void Set(unsigned int, class AreaPOIRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class AreaPOIRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> > : class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >(class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >(class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >();
  void TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::~TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >();
  class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<AREAHASHOBJECT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LightMarker> : class TSBaseArray<LightMarker>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LightMarker>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LightMarker>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LightMarker>(class TSBaseArray<LightMarker>&);
  void TSFixedArray<LightMarker>::TSFixedArray<LightMarker>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<LightMarker>& source);
  void TSFixedArray<LightMarker>::TSFixedArray<LightMarker>();
  void TSFixedArray<LightMarker>::~TSFixedArray<LightMarker>();
  class TSFixedArray<LightMarker>& operator=(class TSBaseArray<LightMarker>&);
  class TSFixedArray<LightMarker>& operator=(class TSFixedArray<LightMarker>&);
  void Clear();
  void Detach(struct LightMarker**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LightMarker>*);
  void Set(unsigned int, int, struct LightMarker*);
  void Set(unsigned int, struct LightMarker*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LightMarker*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LightDataSky> : class TSBaseArray<LightDataSky>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LightDataSky>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LightDataSky>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LightDataSky>(class TSBaseArray<LightDataSky>&);
  void TSFixedArray<LightDataSky>::TSFixedArray<LightDataSky>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<LightDataSky>& source);
  void TSFixedArray<LightDataSky>::TSFixedArray<LightDataSky>();
  void TSFixedArray<LightDataSky>::~TSFixedArray<LightDataSky>();
  class TSFixedArray<LightDataSky>& operator=(class TSBaseArray<LightDataSky>&);
  class TSFixedArray<LightDataSky>& operator=(class TSFixedArray<LightDataSky>&);
  void Clear();
  void Detach(struct LightDataSky**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LightDataSky>*);
  void Set(unsigned int, int, struct LightDataSky*);
  void Set(unsigned int, struct LightDataSky*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LightDataSky*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LightDataFog> : class TSBaseArray<LightDataFog>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LightDataFog>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LightDataFog>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LightDataFog>(class TSBaseArray<LightDataFog>&);
  void TSFixedArray<LightDataFog>::TSFixedArray<LightDataFog>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<LightDataFog>& source);
  void TSFixedArray<LightDataFog>::TSFixedArray<LightDataFog>();
  void TSFixedArray<LightDataFog>::~TSFixedArray<LightDataFog>();
  class TSFixedArray<LightDataFog>& operator=(class TSBaseArray<LightDataFog>&);
  class TSFixedArray<LightDataFog>& operator=(class TSFixedArray<LightDataFog>&);
  void Clear();
  void Detach(struct LightDataFog**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LightDataFog>*);
  void Set(unsigned int, int, struct LightDataFog*);
  void Set(unsigned int, struct LightDataFog*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LightDataFog*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LightData> : class TSBaseArray<LightData>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LightData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LightData>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LightData>(class TSBaseArray<LightData>&);
  void TSFixedArray<LightData>(class TSFixedArray<LightData>&);
  void TSFixedArray<LightData>();
  void TSFixedArray<LightData>::~TSFixedArray<LightData>();
  class TSFixedArray<LightData>& operator=(class TSBaseArray<LightData>&);
  class TSFixedArray<LightData>& operator=(class TSFixedArray<LightData>&);
  void Clear();
  void Detach(struct LightData**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LightData>*);
  void Set(unsigned int, int, struct LightData*);
  void Set(unsigned int, struct LightData*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LightData*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LODIndexFix> : class TSBaseArray<LODIndexFix>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LODIndexFix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<LODIndexFix>(class TSBaseArray<LODIndexFix>&);
  void TSFixedArray<LODIndexFix>::TSFixedArray<LODIndexFix>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<LODIndexFix>& source);
  void TSFixedArray<LODIndexFix>();
  void TSFixedArray<LODIndexFix>::~TSFixedArray<LODIndexFix>();
  class TSFixedArray<LODIndexFix>& operator=(class TSBaseArray<LODIndexFix>&);
  class TSFixedArray<LODIndexFix>& operator=(class TSFixedArray<LODIndexFix>&);
  void Clear();
  void Detach(struct LODIndexFix**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LODIndexFix>*);
  void Set(unsigned int, int, struct LODIndexFix*);
  void Set(unsigned int, struct LODIndexFix*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LODIndexFix*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LODArrays> : class TSBaseArray<LODArrays>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LODArrays>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LODArrays>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LODArrays>(class TSBaseArray<LODArrays>&);
  void TSFixedArray<LODArrays>(class TSFixedArray<LODArrays>&);
  void TSFixedArray<LODArrays>();
  void ~TSFixedArray<LODArrays>();
  class TSFixedArray<LODArrays>& operator=(class TSBaseArray<LODArrays>&);
  class TSFixedArray<LODArrays>& operator=(class TSFixedArray<LODArrays>&);
  void Clear();
  void Detach(struct LODArrays**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LODArrays>*);
  void Set(unsigned int, int, struct LODArrays*);
  void Set(unsigned int, struct LODArrays*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct LODArrays*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CMapLight *> : class TSBaseArray<CMapLight *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CMapLight *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CMapLight *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CMapLight *>(class TSBaseArray<CMapLight *>&);
  void TSFixedArray<CMapLight *>(class TSFixedArray<CMapLight *>&);
  void TSFixedArray<CMapLight *>();
  void ~TSFixedArray<CMapLight *>();
  class TSFixedArray<CMapLight *>& operator=(class TSBaseArray<CMapLight *>&);
  class TSFixedArray<CMapLight *>& operator=(class TSFixedArray<CMapLight *>&);
  void Clear();
  void Detach(class CMapLight***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CMapLight *>*);
  void Set(unsigned int, int, class CMapLight**);
  void Set(unsigned int, class CMapLight**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CMapLight**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> > : class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >(class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >(class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >();
  void TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >::~TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >();
  class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CMapDoodadDef,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> > : class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >(class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >(class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >();
  void TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >::~TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >();
  class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapObjDef,-572662307> >&);
  class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CMapObjDef,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CMapObjDef,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CMapObjDef,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CMapObjDef,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CMapObj,-572662307> > : class TSBaseArray<TSExplicitList<CMapObj,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CMapObj,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CMapObj,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CMapObj,-572662307> >(class TSBaseArray<TSExplicitList<CMapObj,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapObj,-572662307> >(class TSFixedArray<TSExplicitList<CMapObj,-572662307> >&);
  void TSFixedArray<TSExplicitList<CMapObj,-572662307> >();
  void TSFixedArray<TSExplicitList<CMapObj,-572662307> >::~TSFixedArray<TSExplicitList<CMapObj,-572662307> >();
  class TSFixedArray<TSExplicitList<CMapObj,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CMapObj,-572662307> >&);
  class TSFixedArray<TSExplicitList<CMapObj,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CMapObj,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CMapObj,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CMapObj,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CMapObj,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CMapObj,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CMapObj,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxVertexPC> : class TSBaseArray<CGxVertexPC>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxVertexPC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxVertexPC>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxVertexPC>(class TSBaseArray<CGxVertexPC>&);
  void TSFixedArray<CGxVertexPC>(class TSFixedArray<CGxVertexPC>&);
  void TSFixedArray<CGxVertexPC>();
  void ~TSFixedArray<CGxVertexPC>();
  class TSFixedArray<CGxVertexPC>& operator=(class TSBaseArray<CGxVertexPC>&);
  class TSFixedArray<CGxVertexPC>& operator=(class TSFixedArray<CGxVertexPC>&);
  void Clear();
  void Detach(struct CGxVertexPC**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxVertexPC>*);
  void Set(unsigned int, int, struct CGxVertexPC*);
  void Set(unsigned int, struct CGxVertexPC*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxVertexPC*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SGroupPtr> : class TSBaseArray<SGroupPtr>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SGroupPtr>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<SGroupPtr>(class TSBaseArray<SGroupPtr>&);
  void TSFixedArray<SGroupPtr>(class TSFixedArray<SGroupPtr>&);
  void TSFixedArray<SGroupPtr>();
  void ~TSFixedArray<SGroupPtr>();
  class TSFixedArray<SGroupPtr>& operator=(class TSBaseArray<SGroupPtr>&);
  class TSFixedArray<SGroupPtr>& operator=(class TSFixedArray<SGroupPtr>&);
  void Clear();
  void Detach(struct SGroupPtr**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SGroupPtr>*);
  void Set(unsigned int, int, struct SGroupPtr*);
  void Set(unsigned int, struct SGroupPtr*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SGroupPtr*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxBuf *> : class TSBaseArray<CGxBuf *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxBuf *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxBuf *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxBuf *>(class TSBaseArray<CGxBuf *>&);
  void TSFixedArray<CGxBuf *>(class TSFixedArray<CGxBuf *>&);
  void TSFixedArray<CGxBuf *>();
  void ~TSFixedArray<CGxBuf *>();
  class TSFixedArray<CGxBuf *>& operator=(class TSBaseArray<CGxBuf *>&);
  class TSFixedArray<CGxBuf *>& operator=(class TSFixedArray<CGxBuf *>&);
  void Clear();
  void Detach(struct CGxBuf***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxBuf *>*);
  void Set(unsigned int, int, struct CGxBuf**);
  void Set(unsigned int, struct CGxBuf**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxBuf**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CDetailDoodadData *> : class TSBaseArray<CDetailDoodadData *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CDetailDoodadData *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CDetailDoodadData *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CDetailDoodadData *>(class TSBaseArray<CDetailDoodadData *>&);
  void TSFixedArray<CDetailDoodadData *>(class TSFixedArray<CDetailDoodadData *>&);
  void TSFixedArray<CDetailDoodadData *>();
  void ~TSFixedArray<CDetailDoodadData *>();
  class TSFixedArray<CDetailDoodadData *>& operator=(class TSBaseArray<CDetailDoodadData *>&);
  class TSFixedArray<CDetailDoodadData *>& operator=(class TSFixedArray<CDetailDoodadData *>&);
  void Clear();
  void Detach(class CDetailDoodadData***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CDetailDoodadData *>*);
  void Set(unsigned int, int, class CDetailDoodadData**);
  void Set(unsigned int, class CDetailDoodadData**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CDetailDoodadData**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> > : class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >(class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >(class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >();
  void TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >::~TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >();
  class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CSimpleDoodad,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::C44Matrix> : class TSBaseArray<NTempest::C44Matrix>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::C44Matrix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::C44Matrix>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C44Matrix>(class TSBaseArray<NTempest::C44Matrix>&);
  void TSFixedArray<NTempest::C44Matrix>(class TSFixedArray<NTempest::C44Matrix>&);
  void TSFixedArray<NTempest::C44Matrix>::TSFixedArray<NTempest::C44Matrix>();
  void TSFixedArray<NTempest::C44Matrix>::~TSFixedArray<NTempest::C44Matrix>();
  class TSFixedArray<NTempest::C44Matrix>& operator=(class TSBaseArray<NTempest::C44Matrix>&);
  class TSFixedArray<NTempest::C44Matrix>& operator=(class TSFixedArray<NTempest::C44Matrix>&);
  void Clear();
  void Detach(class NTempest::C44Matrix**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::C44Matrix>*);
  void Set(unsigned int, int, class NTempest::C44Matrix*);
  void Set(unsigned int, class NTempest::C44Matrix*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::C44Matrix*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CMapDoodadDef *> : class TSBaseArray<CMapDoodadDef *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CMapDoodadDef *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CMapDoodadDef *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CMapDoodadDef *>(class TSBaseArray<CMapDoodadDef *>&);
  void TSFixedArray<CMapDoodadDef *>(class TSFixedArray<CMapDoodadDef *>&);
  void TSFixedArray<CMapDoodadDef *>();
  void TSFixedArray<CMapDoodadDef *>::~TSFixedArray<CMapDoodadDef *>();
  class TSFixedArray<CMapDoodadDef *>& operator=(class TSBaseArray<CMapDoodadDef *>&);
  class TSFixedArray<CMapDoodadDef *>& operator=(class TSFixedArray<CMapDoodadDef *>&);
  void Clear();
  void Detach(class CMapDoodadDef***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CMapDoodadDef *>*);
  void Set(unsigned int, int, class CMapDoodadDef**);
  void Set(unsigned int, class CMapDoodadDef**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CMapDoodadDef**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SMMapObjDef> : class TSBaseArray<SMMapObjDef>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SMMapObjDef>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SMMapObjDef>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SMMapObjDef>(class TSBaseArray<SMMapObjDef>&);
  void TSFixedArray<SMMapObjDef>(class TSFixedArray<SMMapObjDef>&);
  void TSFixedArray<SMMapObjDef>();
  void ~TSFixedArray<SMMapObjDef>();
  class TSFixedArray<SMMapObjDef>& operator=(class TSBaseArray<SMMapObjDef>&);
  class TSFixedArray<SMMapObjDef>& operator=(class TSFixedArray<SMMapObjDef>&);
  void Clear();
  void Detach(struct SMMapObjDef**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SMMapObjDef>*);
  void Set(unsigned int, int, struct SMMapObjDef*);
  void Set(unsigned int, struct SMMapObjDef*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SMMapObjDef*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SMDoodadDef> : class TSBaseArray<SMDoodadDef>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SMDoodadDef>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SMDoodadDef>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SMDoodadDef>(class TSBaseArray<SMDoodadDef>&);
  void TSFixedArray<SMDoodadDef>(class TSFixedArray<SMDoodadDef>&);
  void TSFixedArray<SMDoodadDef>();
  void ~TSFixedArray<SMDoodadDef>();
  class TSFixedArray<SMDoodadDef>& operator=(class TSBaseArray<SMDoodadDef>&);
  class TSFixedArray<SMDoodadDef>& operator=(class TSFixedArray<SMDoodadDef>&);
  void Clear();
  void Detach(struct SMDoodadDef**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SMDoodadDef>*);
  void Set(unsigned int, int, struct SMDoodadDef*);
  void Set(unsigned int, struct SMDoodadDef*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SMDoodadDef*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FILEMAP,-572662307> > : class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >(class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >(class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >::TSFixedArray<TSExplicitList<FILEMAP,-572662307> >();
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >::~TSFixedArray<TSExplicitList<FILEMAP,-572662307> >();
  class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FILEMAP,-572662307> >&);
  class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSFixedArray<TSExplicitList<FILEMAP,-572662307> >::Clear();
  void Detach(class TSExplicitList<FILEMAP,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FILEMAP,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FILEMAP,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FILEMAP,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<RGN> : class TSBaseArray<RGN>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<RGN>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<RGN>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<RGN>(class TSBaseArray<RGN>&);
  void TSFixedArray<RGN>(class TSFixedArray<RGN>&);
  void TSFixedArray<RGN>::TSFixedArray<RGN>();
  void TSFixedArray<RGN>::~TSFixedArray<RGN>();
  class TSFixedArray<RGN>& operator=(class TSBaseArray<RGN>&);
  class TSFixedArray<RGN>& operator=(class TSFixedArray<RGN>&);
  void Clear();
  void Detach(struct RGN**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<RGN>*);
  void Set(unsigned int, int, struct RGN*);
  void Set(unsigned int, struct RGN*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct RGN*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<RGN,-572662307> > : class TSBaseArray<TSExplicitList<RGN,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<RGN,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<RGN,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<RGN,-572662307> >(class TSBaseArray<TSExplicitList<RGN,-572662307> >&);
  void TSFixedArray<TSExplicitList<RGN,-572662307> >(class TSFixedArray<TSExplicitList<RGN,-572662307> >&);
  void TSFixedArray<TSExplicitList<RGN,-572662307> >::TSFixedArray<TSExplicitList<RGN,-572662307> >();
  void TSFixedArray<TSExplicitList<RGN,-572662307> >::~TSFixedArray<TSExplicitList<RGN,-572662307> >();
  class TSFixedArray<TSExplicitList<RGN,-572662307> >& operator=(class TSBaseArray<TSExplicitList<RGN,-572662307> >&);
  class TSFixedArray<TSExplicitList<RGN,-572662307> >& operator=(class TSFixedArray<TSExplicitList<RGN,-572662307> >&);
  void TSFixedArray<TSExplicitList<RGN,-572662307> >::Clear();
  void Detach(class TSExplicitList<RGN,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<RGN,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<RGN,-572662307>*);
  void Set(unsigned int, class TSExplicitList<RGN,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<RGN,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<_SOURCE> : class TSBaseArray<_SOURCE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<_SOURCE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<_SOURCE>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<_SOURCE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<_SOURCE>(class TSBaseArray<_SOURCE>&);
  void TSFixedArray<_SOURCE>::TSFixedArray<_SOURCE>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<_SOURCE>& source);
  void TSFixedArray<_SOURCE>::TSFixedArray<_SOURCE>();
  void TSFixedArray<_SOURCE>::~TSFixedArray<_SOURCE>();
  class TSFixedArray<_SOURCE>& operator=(class TSBaseArray<_SOURCE>&);
  class TSFixedArray<_SOURCE>& TSFixedArray<_SOURCE>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<_SOURCE>& source);
  void Clear();
  void Detach(struct _SOURCE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<_SOURCE>*);
  void Set(unsigned int, int, struct _SOURCE*);
  void TSFixedArray<_SOURCE>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct _SOURCE* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct _SOURCE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<RECTF> : class TSBaseArray<RECTF>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<RECTF>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<RECTF>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<RECTF>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<RECTF>(class TSBaseArray<RECTF>&);
  void TSFixedArray<RECTF>::TSFixedArray<RECTF>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<RECTF>& source);
  void TSFixedArray<RECTF>::TSFixedArray<RECTF>();
  void TSFixedArray<RECTF>::~TSFixedArray<RECTF>();
  class TSFixedArray<RECTF>& operator=(class TSBaseArray<RECTF>&);
  class TSFixedArray<RECTF>& TSFixedArray<RECTF>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<RECTF>& source);
  void Clear();
  void Detach(struct RECTF**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<RECTF>*);
  void Set(unsigned int, int, struct RECTF*);
  void TSFixedArray<RECTF>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct RECTF* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct RECTF*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<_FOUNDPARAM> : class TSBaseArray<_FOUNDPARAM>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<_FOUNDPARAM>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<_FOUNDPARAM>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<_FOUNDPARAM>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<_FOUNDPARAM>(class TSBaseArray<_FOUNDPARAM>&);
  void TSFixedArray<_FOUNDPARAM>::TSFixedArray<_FOUNDPARAM>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<_FOUNDPARAM>& source);
  void TSFixedArray<_FOUNDPARAM>::TSFixedArray<_FOUNDPARAM>();
  void TSFixedArray<_FOUNDPARAM>::~TSFixedArray<_FOUNDPARAM>();
  class TSFixedArray<_FOUNDPARAM>& operator=(class TSBaseArray<_FOUNDPARAM>&);
  class TSFixedArray<_FOUNDPARAM>& TSFixedArray<_FOUNDPARAM>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<_FOUNDPARAM>& source);
  void Clear();
  void Detach(struct _FOUNDPARAM**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<_FOUNDPARAM>*);
  void Set(unsigned int, int, struct _FOUNDPARAM*);
  void TSFixedArray<_FOUNDPARAM>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct _FOUNDPARAM* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct _FOUNDPARAM*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> > : class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >(class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >(class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >::TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >();
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >::~TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >();
  class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >::Clear();
  void Detach(class TSExplicitList<ZipFileDirEntry,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> > : class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >(class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >(class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >();
  void TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::~TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >();
  class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CVar,-572662307> > : class TSBaseArray<TSExplicitList<CVar,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CVar,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CVar,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CVar,-572662307> >(class TSBaseArray<TSExplicitList<CVar,-572662307> >&);
  void TSFixedArray<TSExplicitList<CVar,-572662307> >(class TSFixedArray<TSExplicitList<CVar,-572662307> >&);
  void TSFixedArray<TSExplicitList<CVar,-572662307> >();
  void TSFixedArray<TSExplicitList<CVar,-572662307> >::~TSFixedArray<TSExplicitList<CVar,-572662307> >();
  class TSFixedArray<TSExplicitList<CVar,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CVar,-572662307> >&);
  class TSFixedArray<TSExplicitList<CVar,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CVar,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CVar,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CVar,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CVar,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CVar,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CVar,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> > : class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >(class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >(class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >();
  void TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::~TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >();
  class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CONSOLECOMMAND,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> > : class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >(class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >(class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >();
  void TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >::~TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >();
  class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >& operator=(class TSBaseArray<TSExplicitList<INVENTORYART,-572662307> >&);
  class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >& operator=(class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<INVENTORYART,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<INVENTORYART,-572662307>*);
  void Set(unsigned int, class TSExplicitList<INVENTORYART,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<INVENTORYART,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> > : class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >(class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >(class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >();
  void TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::~TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >();
  class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ITEMEXPIRATION,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> > : class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >(class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >(class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >();
  void TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >::~TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >();
  class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >& operator=(class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<TRADESKILLLINE,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  void Set(unsigned int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ITEMSWAP> : class TSBaseArray<ITEMSWAP>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ITEMSWAP>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ITEMSWAP>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ITEMSWAP>(class TSBaseArray<ITEMSWAP>&);
  void TSFixedArray<ITEMSWAP>(class TSFixedArray<ITEMSWAP>&);
  void TSFixedArray<ITEMSWAP>();
  void ~TSFixedArray<ITEMSWAP>();
  class TSFixedArray<ITEMSWAP>& operator=(class TSBaseArray<ITEMSWAP>&);
  class TSFixedArray<ITEMSWAP>& operator=(class TSFixedArray<ITEMSWAP>&);
  void Clear();
  void Detach(struct ITEMSWAP**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ITEMSWAP>*);
  void Set(unsigned int, int, struct ITEMSWAP*);
  void Set(unsigned int, struct ITEMSWAP*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct ITEMSWAP*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<InitialSpellStruct> : class TSBaseArray<InitialSpellStruct>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<InitialSpellStruct>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<InitialSpellStruct>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<InitialSpellStruct>(class TSBaseArray<InitialSpellStruct>&);
  void TSFixedArray<InitialSpellStruct>(class TSFixedArray<InitialSpellStruct>&);
  void TSFixedArray<InitialSpellStruct>();
  void ~TSFixedArray<InitialSpellStruct>();
  class TSFixedArray<InitialSpellStruct>& operator=(class TSBaseArray<InitialSpellStruct>&);
  class TSFixedArray<InitialSpellStruct>& operator=(class TSFixedArray<InitialSpellStruct>&);
  void Clear();
  void Detach(struct InitialSpellStruct**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<InitialSpellStruct>*);
  void Set(unsigned int, int, struct InitialSpellStruct*);
  void Set(unsigned int, struct InitialSpellStruct*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct InitialSpellStruct*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::C4Plane> : class TSBaseArray<NTempest::C4Plane>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::C4Plane>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<NTempest::C4Plane>(class TSBaseArray<NTempest::C4Plane>&);
  void TSFixedArray<NTempest::C4Plane>(class TSFixedArray<NTempest::C4Plane>&);
  void TSFixedArray<NTempest::C4Plane>();
  void TSFixedArray<NTempest::C4Plane>::~TSFixedArray<NTempest::C4Plane>();
  class TSFixedArray<NTempest::C4Plane>& operator=(class TSBaseArray<NTempest::C4Plane>&);
  class TSFixedArray<NTempest::C4Plane>& operator=(class TSFixedArray<NTempest::C4Plane>&);
  void Clear();
  void Detach(class NTempest::C4Plane**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::C4Plane>*);
  void Set(unsigned int, int, class NTempest::C4Plane*);
  void Set(unsigned int, class NTempest::C4Plane*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::C4Plane*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<QUESTGIVEREMOTENODE> : class TSBaseArray<QUESTGIVEREMOTENODE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<QUESTGIVEREMOTENODE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<QUESTGIVEREMOTENODE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<QUESTGIVEREMOTENODE>(class TSBaseArray<QUESTGIVEREMOTENODE>&);
  void TSFixedArray<QUESTGIVEREMOTENODE>(class TSFixedArray<QUESTGIVEREMOTENODE>&);
  void TSFixedArray<QUESTGIVEREMOTENODE>();
  void TSFixedArray<QUESTGIVEREMOTENODE>::~TSFixedArray<QUESTGIVEREMOTENODE>();
  class TSFixedArray<QUESTGIVEREMOTENODE>& operator=(class TSBaseArray<QUESTGIVEREMOTENODE>&);
  class TSFixedArray<QUESTGIVEREMOTENODE>& operator=(class TSFixedArray<QUESTGIVEREMOTENODE>&);
  void Clear();
  void Detach(struct QUESTGIVEREMOTENODE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<QUESTGIVEREMOTENODE>*);
  void Set(unsigned int, int, struct QUESTGIVEREMOTENODE*);
  void Set(unsigned int, struct QUESTGIVEREMOTENODE*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct QUESTGIVEREMOTENODE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> > : class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >(class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >(class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >();
  void TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::~TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >();
  class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >& operator=(class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<NAMEPLATEDESC,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  void Set(unsigned int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ANIMENDDATA> : class TSBaseArray<ANIMENDDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ANIMENDDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ANIMENDDATA>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ANIMENDDATA>(class TSBaseArray<ANIMENDDATA>&);
  void TSFixedArray<ANIMENDDATA>(class TSFixedArray<ANIMENDDATA>&);
  void TSFixedArray<ANIMENDDATA>();
  void ~TSFixedArray<ANIMENDDATA>();
  class TSFixedArray<ANIMENDDATA>& operator=(class TSBaseArray<ANIMENDDATA>&);
  class TSFixedArray<ANIMENDDATA>& operator=(class TSFixedArray<ANIMENDDATA>&);
  void Clear();
  void Detach(struct ANIMENDDATA**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ANIMENDDATA>*);
  void Set(unsigned int, int, struct ANIMENDDATA*);
  void Set(unsigned int, struct ANIMENDDATA*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct ANIMENDDATA*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<DEATTHUDSOUNDINFO> : class TSBaseArray<DEATTHUDSOUNDINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<DEATTHUDSOUNDINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<DEATTHUDSOUNDINFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<DEATTHUDSOUNDINFO>(class TSBaseArray<DEATTHUDSOUNDINFO>&);
  void TSFixedArray<DEATTHUDSOUNDINFO>(class TSFixedArray<DEATTHUDSOUNDINFO>&);
  void TSFixedArray<DEATTHUDSOUNDINFO>();
  void ~TSFixedArray<DEATTHUDSOUNDINFO>();
  class TSFixedArray<DEATTHUDSOUNDINFO>& operator=(class TSBaseArray<DEATTHUDSOUNDINFO>&);
  class TSFixedArray<DEATTHUDSOUNDINFO>& operator=(class TSFixedArray<DEATTHUDSOUNDINFO>&);
  void Clear();
  void Detach(struct DEATTHUDSOUNDINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<DEATTHUDSOUNDINFO>*);
  void Set(unsigned int, int, struct DEATTHUDSOUNDINFO*);
  void Set(unsigned int, struct DEATTHUDSOUNDINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct DEATTHUDSOUNDINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> > : class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >(class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >(class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >();
  void TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::~TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >();
  class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >& operator=(class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  void Set(unsigned int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<VERTDATA> : class TSBaseArray<VERTDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<VERTDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<VERTDATA>(class TSBaseArray<VERTDATA>&);
  void TSFixedArray<VERTDATA>(class TSFixedArray<VERTDATA>&);
  void TSFixedArray<VERTDATA>::TSFixedArray<VERTDATA>();
  void ~TSFixedArray<VERTDATA>();
  class TSFixedArray<VERTDATA>& operator=(class TSBaseArray<VERTDATA>&);
  class TSFixedArray<VERTDATA>& operator=(class TSFixedArray<VERTDATA>&);
  void Clear();
  void Detach(struct VERTDATA**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<VERTDATA>*);
  void Set(unsigned int, int, struct VERTDATA*);
  void Set(unsigned int, struct VERTDATA*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct VERTDATA*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TIMEDTEXTURE> : class TSBaseArray<TIMEDTEXTURE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TIMEDTEXTURE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TIMEDTEXTURE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TIMEDTEXTURE>(class TSBaseArray<TIMEDTEXTURE>&);
  void TSFixedArray<TIMEDTEXTURE>(class TSFixedArray<TIMEDTEXTURE>&);
  void TSFixedArray<TIMEDTEXTURE>();
  void ~TSFixedArray<TIMEDTEXTURE>();
  class TSFixedArray<TIMEDTEXTURE>& operator=(class TSBaseArray<TIMEDTEXTURE>&);
  class TSFixedArray<TIMEDTEXTURE>& operator=(class TSFixedArray<TIMEDTEXTURE>&);
  void Clear();
  void Detach(struct TIMEDTEXTURE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TIMEDTEXTURE>*);
  void Set(unsigned int, int, struct TIMEDTEXTURE*);
  void Set(unsigned int, struct TIMEDTEXTURE*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TIMEDTEXTURE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<PERSISTENTTEXTURE> : class TSBaseArray<PERSISTENTTEXTURE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<PERSISTENTTEXTURE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<PERSISTENTTEXTURE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<PERSISTENTTEXTURE>(class TSBaseArray<PERSISTENTTEXTURE>&);
  void TSFixedArray<PERSISTENTTEXTURE>(class TSFixedArray<PERSISTENTTEXTURE>&);
  void TSFixedArray<PERSISTENTTEXTURE>();
  void ~TSFixedArray<PERSISTENTTEXTURE>();
  class TSFixedArray<PERSISTENTTEXTURE>& operator=(class TSBaseArray<PERSISTENTTEXTURE>&);
  class TSFixedArray<PERSISTENTTEXTURE>& operator=(class TSFixedArray<PERSISTENTTEXTURE>&);
  void Clear();
  void Detach(struct PERSISTENTTEXTURE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<PERSISTENTTEXTURE>*);
  void Set(unsigned int, int, struct PERSISTENTTEXTURE*);
  void Set(unsigned int, struct PERSISTENTTEXTURE*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct PERSISTENTTEXTURE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<UNITHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ENCHANTMENTLOGDESC> : class TSBaseArray<ENCHANTMENTLOGDESC>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ENCHANTMENTLOGDESC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ENCHANTMENTLOGDESC>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ENCHANTMENTLOGDESC>(class TSBaseArray<ENCHANTMENTLOGDESC>&);
  void TSFixedArray<ENCHANTMENTLOGDESC>(class TSFixedArray<ENCHANTMENTLOGDESC>&);
  void TSFixedArray<ENCHANTMENTLOGDESC>();
  void ~TSFixedArray<ENCHANTMENTLOGDESC>();
  class TSFixedArray<ENCHANTMENTLOGDESC>& operator=(class TSBaseArray<ENCHANTMENTLOGDESC>&);
  class TSFixedArray<ENCHANTMENTLOGDESC>& operator=(class TSFixedArray<ENCHANTMENTLOGDESC>&);
  void Clear();
  void Detach(struct ENCHANTMENTLOGDESC**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ENCHANTMENTLOGDESC>*);
  void Set(unsigned int, int, struct ENCHANTMENTLOGDESC*);
  void Set(unsigned int, struct ENCHANTMENTLOGDESC*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct ENCHANTMENTLOGDESC*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHANCES> : class TSBaseArray<CHANCES>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHANCES>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHANCES>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHANCES>(class TSBaseArray<CHANCES>&);
  void TSFixedArray<CHANCES>(class TSFixedArray<CHANCES>&);
  void TSFixedArray<CHANCES>();
  void TSFixedArray<CHANCES>::~TSFixedArray<CHANCES>();
  class TSFixedArray<CHANCES>& operator=(class TSBaseArray<CHANCES>&);
  class TSFixedArray<CHANCES>& operator=(class TSFixedArray<CHANCES>&);
  void Clear();
  void Detach(struct CHANCES**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHANCES>*);
  void Set(unsigned int, int, struct CHANCES*);
  void Set(unsigned int, struct CHANCES*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHANCES*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> > : class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >(class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >(class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >();
  void TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >::~TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >();
  class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ANIMKIT,-572662307> >&);
  class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ANIMKIT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ANIMKIT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ANIMKIT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ANIMKIT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CLightList> : class TSBaseArray<CLightList>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CLightList>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CLightList>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CLightList>(class TSBaseArray<CLightList>&);
  void TSFixedArray<CLightList>(class TSFixedArray<CLightList>&);
  void TSFixedArray<CLightList>();
  void TSFixedArray<CLightList>::~TSFixedArray<CLightList>();
  class TSFixedArray<CLightList>& operator=(class TSBaseArray<CLightList>&);
  class TSFixedArray<CLightList>& operator=(class TSFixedArray<CLightList>&);
  void Clear();
  void Detach(struct CLightList**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CLightList>*);
  void Set(unsigned int, int, struct CLightList*);
  void Set(unsigned int, struct CLightList*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CLightList*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CLightList,-572662307> > : class TSBaseArray<TSExplicitList<CLightList,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CLightList,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CLightList,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CLightList,-572662307> >(class TSBaseArray<TSExplicitList<CLightList,-572662307> >&);
  void TSFixedArray<TSExplicitList<CLightList,-572662307> >(class TSFixedArray<TSExplicitList<CLightList,-572662307> >&);
  void TSFixedArray<TSExplicitList<CLightList,-572662307> >::TSFixedArray<TSExplicitList<CLightList,-572662307> >();
  void TSFixedArray<TSExplicitList<CLightList,-572662307> >::~TSFixedArray<TSExplicitList<CLightList,-572662307> >();
  class TSFixedArray<TSExplicitList<CLightList,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CLightList,-572662307> >&);
  class TSFixedArray<TSExplicitList<CLightList,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CLightList,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CLightList,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CLightList,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CLightList,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CLightList,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CLightList,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> > : class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >(class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >(class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >();
  void TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::~TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >();
  class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >& operator=(class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  void Set(unsigned int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxuLight *> : class TSBaseArray<CGxuLight *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxuLight *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CGxuLight *>(class TSBaseArray<CGxuLight *>&);
  void TSFixedArray<CGxuLight *>(class TSFixedArray<CGxuLight *>&);
  void TSFixedArray<CGxuLight *>();
  void ~TSFixedArray<CGxuLight *>();
  class TSFixedArray<CGxuLight *>& operator=(class TSBaseArray<CGxuLight *>&);
  class TSFixedArray<CGxuLight *>& operator=(class TSFixedArray<CGxuLight *>&);
  void Clear();
  void Detach(struct CGxuLight***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxuLight *>*);
  void Set(unsigned int, int, struct CGxuLight**);
  void Set(unsigned int, struct CGxuLight**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxuLight**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> > : class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >(class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >(class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >();
  void TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::~TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >();
  class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >& operator=(class TSBaseArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >& operator=(class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<STRINGVIEWMATRICES,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  void Set(unsigned int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TEXTLINETEXTURE *> : class TSBaseArray<TEXTLINETEXTURE *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TEXTLINETEXTURE *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TEXTLINETEXTURE *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TEXTLINETEXTURE *>(class TSBaseArray<TEXTLINETEXTURE *>&);
  void TSFixedArray<TEXTLINETEXTURE *>(class TSFixedArray<TEXTLINETEXTURE *>&);
  void TSFixedArray<TEXTLINETEXTURE *>();
  void TSFixedArray<TEXTLINETEXTURE *>::~TSFixedArray<TEXTLINETEXTURE *>();
  class TSFixedArray<TEXTLINETEXTURE *>& operator=(class TSBaseArray<TEXTLINETEXTURE *>&);
  class TSFixedArray<TEXTLINETEXTURE *>& operator=(class TSFixedArray<TEXTLINETEXTURE *>&);
  void Clear();
  void Detach(struct TEXTLINETEXTURE***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TEXTLINETEXTURE *>*);
  void Set(unsigned int, int, struct TEXTLINETEXTURE**);
  void Set(unsigned int, struct TEXTLINETEXTURE**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TEXTLINETEXTURE**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<KERNNODE,-572662307> > : class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<KERNNODE,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<KERNNODE,-572662307> >(class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >&);
  void TSFixedArray<TSExplicitList<KERNNODE,-572662307> >(class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >&);
  void TSFixedArray<TSExplicitList<KERNNODE,-572662307> >();
  void TSFixedArray<TSExplicitList<KERNNODE,-572662307> >::~TSFixedArray<TSExplicitList<KERNNODE,-572662307> >();
  class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KERNNODE,-572662307> >&);
  class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >& operator=(class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<KERNNODE,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<KERNNODE,-572662307>*);
  void Set(unsigned int, class TSExplicitList<KERNNODE,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<KERNNODE,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> > : class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >(class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >(class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >();
  void TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >::~TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >();
  class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CHARCODEDESC,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> > : class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >(class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >(class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >();
  void TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::~TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >();
  class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >& operator=(class TSBaseArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >& operator=(class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<GLYPHBITMAPDATA,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  void Set(unsigned int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<IGXUTEXTLINE *> : class TSBaseArray<IGXUTEXTLINE *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<IGXUTEXTLINE *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<IGXUTEXTLINE *>(class TSBaseArray<IGXUTEXTLINE *>&);
  void TSFixedArray<IGXUTEXTLINE *>(class TSFixedArray<IGXUTEXTLINE *>&);
  void TSFixedArray<IGXUTEXTLINE *>::TSFixedArray<IGXUTEXTLINE *>();
  void TSFixedArray<IGXUTEXTLINE *>::~TSFixedArray<IGXUTEXTLINE *>();
  class TSFixedArray<IGXUTEXTLINE *>& operator=(class TSBaseArray<IGXUTEXTLINE *>&);
  class TSFixedArray<IGXUTEXTLINE *>& operator=(class TSFixedArray<IGXUTEXTLINE *>&);
  void Clear();
  void Detach(struct IGXUTEXTLINE***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<IGXUTEXTLINE *>*);
  void Set(unsigned int, int, struct IGXUTEXTLINE**);
  void Set(unsigned int, struct IGXUTEXTLINE**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct IGXUTEXTLINE**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TEXTURECACHEROW> : class TSBaseArray<TEXTURECACHEROW>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TEXTURECACHEROW>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TEXTURECACHEROW>(class TSBaseArray<TEXTURECACHEROW>&);
  void TSFixedArray<TEXTURECACHEROW>(class TSFixedArray<TEXTURECACHEROW>&);
  void TSFixedArray<TEXTURECACHEROW>();
  void TSFixedArray<TEXTURECACHEROW>::~TSFixedArray<TEXTURECACHEROW>();
  class TSFixedArray<TEXTURECACHEROW>& operator=(class TSBaseArray<TEXTURECACHEROW>&);
  class TSFixedArray<TEXTURECACHEROW>& operator=(class TSFixedArray<TEXTURECACHEROW>&);
  void Clear();
  void Detach(struct TEXTURECACHEROW**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TEXTURECACHEROW>*);
  void Set(unsigned int, int, struct TEXTURECACHEROW*);
  void Set(unsigned int, struct TEXTURECACHEROW*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TEXTURECACHEROW*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<GXUFONTHYPERLINKINFO> : class TSBaseArray<GXUFONTHYPERLINKINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<GXUFONTHYPERLINKINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<GXUFONTHYPERLINKINFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<GXUFONTHYPERLINKINFO>(class TSBaseArray<GXUFONTHYPERLINKINFO>&);
  void TSFixedArray<GXUFONTHYPERLINKINFO>(class TSFixedArray<GXUFONTHYPERLINKINFO>&);
  void TSFixedArray<GXUFONTHYPERLINKINFO>();
  void TSFixedArray<GXUFONTHYPERLINKINFO>::~TSFixedArray<GXUFONTHYPERLINKINFO>();
  class TSFixedArray<GXUFONTHYPERLINKINFO>& operator=(class TSBaseArray<GXUFONTHYPERLINKINFO>&);
  class TSFixedArray<GXUFONTHYPERLINKINFO>& operator=(class TSFixedArray<GXUFONTHYPERLINKINFO>&);
  void Clear();
  void Detach(struct GXUFONTHYPERLINKINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<GXUFONTHYPERLINKINFO>*);
  void Set(unsigned int, int, struct GXUFONTHYPERLINKINFO*);
  void Set(unsigned int, struct GXUFONTHYPERLINKINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct GXUFONTHYPERLINKINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::CImVector *> : class TSBaseArray<NTempest::CImVector *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::CImVector *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::CImVector *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::CImVector *>(class TSBaseArray<NTempest::CImVector *>&);
  void TSFixedArray<NTempest::CImVector *>(class TSFixedArray<NTempest::CImVector *>&);
  void TSFixedArray<NTempest::CImVector *>();
  void TSFixedArray<NTempest::CImVector *>::~TSFixedArray<NTempest::CImVector *>();
  class TSFixedArray<NTempest::CImVector *>& operator=(class TSBaseArray<NTempest::CImVector *>&);
  class TSFixedArray<NTempest::CImVector *>& operator=(class TSFixedArray<NTempest::CImVector *>&);
  void Clear();
  void Detach(class NTempest::CImVector***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::CImVector *>*);
  void Set(unsigned int, int, class NTempest::CImVector**);
  void Set(unsigned int, class NTempest::CImVector**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::CImVector**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<VERT> : class TSBaseArray<VERT>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<VERT>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<VERT>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<VERT>(class TSBaseArray<VERT>&);
  void TSFixedArray<VERT>(class TSFixedArray<VERT>&);
  void TSFixedArray<VERT>::TSFixedArray<VERT>();
  void TSFixedArray<VERT>::~TSFixedArray<VERT>();
  class TSFixedArray<VERT>& operator=(class TSBaseArray<VERT>&);
  class TSFixedArray<VERT>& operator=(class TSFixedArray<VERT>&);
  void Clear();
  void Detach(struct VERT**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<VERT>*);
  void Set(unsigned int, int, struct VERT*);
  void Set(unsigned int, struct VERT*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct VERT*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FACEDATA,-572662307> > : class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<FACEDATA,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<FACEDATA,-572662307> >(class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >&);
  void TSFixedArray<TSExplicitList<FACEDATA,-572662307> >(class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >&);
  void TSFixedArray<TSExplicitList<FACEDATA,-572662307> >();
  void TSFixedArray<TSExplicitList<FACEDATA,-572662307> >::~TSFixedArray<TSExplicitList<FACEDATA,-572662307> >();
  class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FACEDATA,-572662307> >&);
  class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<FACEDATA,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FACEDATA,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FACEDATA,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FACEDATA,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<WowConnection *> : class TSBaseArray<WowConnection *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<WowConnection *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<WowConnection *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<WowConnection *>(class TSBaseArray<WowConnection *>&);
  void TSFixedArray<WowConnection *>(class TSFixedArray<WowConnection *>&);
  void TSFixedArray<WowConnection *>();
  void ~TSFixedArray<WowConnection *>();
  class TSFixedArray<WowConnection *>& operator=(class TSBaseArray<WowConnection *>&);
  class TSFixedArray<WowConnection *>& operator=(class TSFixedArray<WowConnection *>&);
  void Clear();
  void Detach(class WowConnection***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<WowConnection *>*);
  void Set(unsigned int, int, class WowConnection**);
  void Set(unsigned int, class WowConnection**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class WowConnection**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHARACTER_INFO> : class TSBaseArray<CHARACTER_INFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHARACTER_INFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHARACTER_INFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHARACTER_INFO>(class TSBaseArray<CHARACTER_INFO>&);
  void TSFixedArray<CHARACTER_INFO>(class TSFixedArray<CHARACTER_INFO>&);
  void TSFixedArray<CHARACTER_INFO>();
  void TSFixedArray<CHARACTER_INFO>::~TSFixedArray<CHARACTER_INFO>();
  class TSFixedArray<CHARACTER_INFO>& operator=(class TSBaseArray<CHARACTER_INFO>&);
  class TSFixedArray<CHARACTER_INFO>& operator=(class TSFixedArray<CHARACTER_INFO>&);
  void Clear();
  void Detach(struct CHARACTER_INFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHARACTER_INFO>*);
  void Set(unsigned int, int, struct CHARACTER_INFO*);
  void Set(unsigned int, struct CHARACTER_INFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHARACTER_INFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<REALM_INFO> : class TSBaseArray<REALM_INFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<REALM_INFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<REALM_INFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<REALM_INFO>(class TSBaseArray<REALM_INFO>&);
  void TSFixedArray<REALM_INFO>(class TSFixedArray<REALM_INFO>&);
  void TSFixedArray<REALM_INFO>();
  void TSFixedArray<REALM_INFO>::~TSFixedArray<REALM_INFO>();
  class TSFixedArray<REALM_INFO>& operator=(class TSBaseArray<REALM_INFO>&);
  class TSFixedArray<REALM_INFO>& operator=(class TSFixedArray<REALM_INFO>&);
  void Clear();
  void Detach(struct REALM_INFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<REALM_INFO>*);
  void Set(unsigned int, int, struct REALM_INFO*);
  void Set(unsigned int, struct REALM_INFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct REALM_INFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxFormat> : class TSBaseArray<CGxFormat>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxFormat>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxFormat>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxFormat>(class TSBaseArray<CGxFormat>&);
  void TSFixedArray<CGxFormat>(class TSFixedArray<CGxFormat>&);
  void TSFixedArray<CGxFormat>();
  void ~TSFixedArray<CGxFormat>();
  class TSFixedArray<CGxFormat>& operator=(class TSBaseArray<CGxFormat>&);
  class TSFixedArray<CGxFormat>& operator=(class TSFixedArray<CGxFormat>&);
  void Clear();
  void Detach(struct CGxFormat**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxFormat>*);
  void Set(unsigned int, int, struct CGxFormat*);
  void Set(unsigned int, struct CGxFormat*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxFormat*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxVertexShader> : class TSBaseArray<CGxVertexShader>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxVertexShader>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxVertexShader>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxVertexShader>(class TSBaseArray<CGxVertexShader>&);
  void TSFixedArray<CGxVertexShader>(class TSFixedArray<CGxVertexShader>&);
  void TSFixedArray<CGxVertexShader>();
  void TSFixedArray<CGxVertexShader>::~TSFixedArray<CGxVertexShader>();
  class TSFixedArray<CGxVertexShader>& operator=(class TSBaseArray<CGxVertexShader>&);
  class TSFixedArray<CGxVertexShader>& operator=(class TSFixedArray<CGxVertexShader>&);
  void Clear();
  void Detach(class CGxVertexShader**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxVertexShader>*);
  void Set(unsigned int, int, class CGxVertexShader*);
  void Set(unsigned int, class CGxVertexShader*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CGxVertexShader*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxPixelShader> : class TSBaseArray<CGxPixelShader>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxPixelShader>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxPixelShader>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxPixelShader>(class TSBaseArray<CGxPixelShader>&);
  void TSFixedArray<CGxPixelShader>(class TSFixedArray<CGxPixelShader>&);
  void TSFixedArray<CGxPixelShader>();
  void TSFixedArray<CGxPixelShader>::~TSFixedArray<CGxPixelShader>();
  class TSFixedArray<CGxPixelShader>& operator=(class TSBaseArray<CGxPixelShader>&);
  class TSFixedArray<CGxPixelShader>& operator=(class TSFixedArray<CGxPixelShader>&);
  void Clear();
  void Detach(class CGxPixelShader**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxPixelShader>*);
  void Set(unsigned int, int, class CGxPixelShader*);
  void Set(unsigned int, class CGxPixelShader*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CGxPixelShader*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxPushedRenderState> : class TSBaseArray<CGxPushedRenderState>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxPushedRenderState>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxPushedRenderState>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxPushedRenderState>(class TSBaseArray<CGxPushedRenderState>&);
  void TSFixedArray<CGxPushedRenderState>(class TSFixedArray<CGxPushedRenderState>&);
  void TSFixedArray<CGxPushedRenderState>();
  void ~TSFixedArray<CGxPushedRenderState>();
  class TSFixedArray<CGxPushedRenderState>& operator=(class TSBaseArray<CGxPushedRenderState>&);
  class TSFixedArray<CGxPushedRenderState>& operator=(class TSFixedArray<CGxPushedRenderState>&);
  void Clear();
  void Detach(struct CGxPushedRenderState**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxPushedRenderState>*);
  void Set(unsigned int, int, struct CGxPushedRenderState*);
  void Set(unsigned int, struct CGxPushedRenderState*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxPushedRenderState*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> > : class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >(class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >(class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >();
  void TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >::~TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >();
  class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CGxPixelShader,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CGxPixelShader,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CGxPixelShader,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CGxPixelShader,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> > : class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >(class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >(class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >();
  void TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >::~TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >();
  class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CGxVertexShader,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CGxVertexShader,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CGxVertexShader,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CGxVertexShader,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxAppRenderState> : class TSBaseArray<CGxAppRenderState>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxAppRenderState>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxAppRenderState>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxAppRenderState>(class TSBaseArray<CGxAppRenderState>&);
  void TSFixedArray<CGxAppRenderState>(class TSFixedArray<CGxAppRenderState>&);
  void TSFixedArray<CGxAppRenderState>();
  void ~TSFixedArray<CGxAppRenderState>();
  class TSFixedArray<CGxAppRenderState>& operator=(class TSBaseArray<CGxAppRenderState>&);
  class TSFixedArray<CGxAppRenderState>& operator=(class TSFixedArray<CGxAppRenderState>&);
  void Clear();
  void Detach(struct CGxAppRenderState**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxAppRenderState>*);
  void Set(unsigned int, int, struct CGxAppRenderState*);
  void Set(unsigned int, struct CGxAppRenderState*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxAppRenderState*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxStateBom> : class TSBaseArray<CGxStateBom>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxStateBom>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxStateBom>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxStateBom>(class TSBaseArray<CGxStateBom>&);
  void TSFixedArray<CGxStateBom>(class TSFixedArray<CGxStateBom>&);
  void TSFixedArray<CGxStateBom>();
  void ~TSFixedArray<CGxStateBom>();
  class TSFixedArray<CGxStateBom>& operator=(class TSBaseArray<CGxStateBom>&);
  class TSFixedArray<CGxStateBom>& operator=(class TSFixedArray<CGxStateBom>&);
  void Clear();
  void Detach(class CGxStateBom**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxStateBom>*);
  void Set(unsigned int, int, class CGxStateBom*);
  void Set(unsigned int, class CGxStateBom*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CGxStateBom*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxTex *> : class TSBaseArray<CGxTex *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxTex *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxTex *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxTex *>(class TSBaseArray<CGxTex *>&);
  void TSFixedArray<CGxTex *>(class TSFixedArray<CGxTex *>&);
  void TSFixedArray<CGxTex *>();
  void TSFixedArray<CGxTex *>::~TSFixedArray<CGxTex *>();
  class TSFixedArray<CGxTex *>& operator=(class TSBaseArray<CGxTex *>&);
  class TSFixedArray<CGxTex *>& operator=(class TSFixedArray<CGxTex *>&);
  void Clear();
  void Detach(class CGxTex***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxTex *>*);
  void Set(unsigned int, int, class CGxTex**);
  void Set(unsigned int, class CGxTex**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CGxTex**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<enum EGxRenderState> : class TSBaseArray<enum EGxRenderState>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<enum EGxRenderState>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<enum EGxRenderState>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<enum EGxRenderState>(class TSBaseArray<enum EGxRenderState>&);
  void TSFixedArray<enum EGxRenderState>(class TSFixedArray<enum EGxRenderState>&);
  void TSFixedArray<enum EGxRenderState>();
  void TSFixedArray<enum EGxRenderState>::~TSFixedArray<enum EGxRenderState>();
  class TSFixedArray<enum EGxRenderState>& operator=(class TSBaseArray<enum EGxRenderState>&);
  class TSFixedArray<enum EGxRenderState>& operator=(class TSFixedArray<enum EGxRenderState>&);
  void Clear();
  void Detach(enum EGxRenderState**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<enum EGxRenderState>*);
  void Set(unsigned int, int, enum EGxRenderState*);
  void Set(unsigned int, enum EGxRenderState*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, enum EGxRenderState*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxMonitorMode> : class TSBaseArray<CGxMonitorMode>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxMonitorMode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxMonitorMode>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxMonitorMode>(class TSBaseArray<CGxMonitorMode>&);
  void TSFixedArray<CGxMonitorMode>(class TSFixedArray<CGxMonitorMode>&);
  void TSFixedArray<CGxMonitorMode>();
  void ~TSFixedArray<CGxMonitorMode>();
  class TSFixedArray<CGxMonitorMode>& operator=(class TSBaseArray<CGxMonitorMode>&);
  class TSFixedArray<CGxMonitorMode>& operator=(class TSFixedArray<CGxMonitorMode>&);
  void Clear();
  void Detach(struct CGxMonitorMode**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxMonitorMode>*);
  void Set(unsigned int, int, struct CGxMonitorMode*);
  void Set(unsigned int, struct CGxMonitorMode*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGxMonitorMode*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGxVertexBuffer_D3d *> : class TSBaseArray<CGxVertexBuffer_D3d *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGxVertexBuffer_D3d *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGxVertexBuffer_D3d *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGxVertexBuffer_D3d *>(class TSBaseArray<CGxVertexBuffer_D3d *>&);
  void TSFixedArray<CGxVertexBuffer_D3d *>(class TSFixedArray<CGxVertexBuffer_D3d *>&);
  void TSFixedArray<CGxVertexBuffer_D3d *>();
  void ~TSFixedArray<CGxVertexBuffer_D3d *>();
  class TSFixedArray<CGxVertexBuffer_D3d *>& operator=(class TSBaseArray<CGxVertexBuffer_D3d *>&);
  class TSFixedArray<CGxVertexBuffer_D3d *>& operator=(class TSFixedArray<CGxVertexBuffer_D3d *>&);
  void Clear();
  void Detach(class CGxVertexBuffer_D3d***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGxVertexBuffer_D3d *>*);
  void Set(unsigned int, int, class CGxVertexBuffer_D3d**);
  void Set(unsigned int, class CGxVertexBuffer_D3d**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CGxVertexBuffer_D3d**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ResistancesRec const *> : class TSBaseArray<ResistancesRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ResistancesRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ResistancesRec const *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ResistancesRec const *>(class TSBaseArray<ResistancesRec const *>&);
  void TSFixedArray<ResistancesRec const *>(class TSFixedArray<ResistancesRec const *>&);
  void TSFixedArray<ResistancesRec const *>();
  void TSFixedArray<ResistancesRec const *>::~TSFixedArray<ResistancesRec const *>();
  class TSFixedArray<ResistancesRec const *>& operator=(class TSBaseArray<ResistancesRec const *>&);
  class TSFixedArray<ResistancesRec const *>& operator=(class TSFixedArray<ResistancesRec const *>&);
  void Clear();
  void Detach(class ResistancesRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ResistancesRec const *>*);
  void Set(unsigned int, int, class ResistancesRec**);
  void Set(unsigned int, class ResistancesRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class ResistancesRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::~TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ItemSubClassRec const *> : class TSBaseArray<ItemSubClassRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ItemSubClassRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ItemSubClassRec const *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ItemSubClassRec const *>(class TSBaseArray<ItemSubClassRec const *>&);
  void TSFixedArray<ItemSubClassRec const *>(class TSFixedArray<ItemSubClassRec const *>&);
  void TSFixedArray<ItemSubClassRec const *>();
  void TSFixedArray<ItemSubClassRec const *>::~TSFixedArray<ItemSubClassRec const *>();
  class TSFixedArray<ItemSubClassRec const *>& operator=(class TSBaseArray<ItemSubClassRec const *>&);
  class TSFixedArray<ItemSubClassRec const *>& operator=(class TSFixedArray<ItemSubClassRec const *>&);
  void Clear();
  void Detach(class ItemSubClassRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ItemSubClassRec const *>*);
  void Set(unsigned int, int, class ItemSubClassRec**);
  void Set(unsigned int, class ItemSubClassRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class ItemSubClassRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSimpleFontString *> : class TSBaseArray<CSimpleFontString *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSimpleFontString *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSimpleFontString *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSimpleFontString *>(class TSBaseArray<CSimpleFontString *>&);
  void TSFixedArray<CSimpleFontString *>(class TSFixedArray<CSimpleFontString *>&);
  void TSFixedArray<CSimpleFontString *>();
  void TSFixedArray<CSimpleFontString *>::~TSFixedArray<CSimpleFontString *>();
  class TSFixedArray<CSimpleFontString *>& operator=(class TSBaseArray<CSimpleFontString *>&);
  class TSFixedArray<CSimpleFontString *>& operator=(class TSFixedArray<CSimpleFontString *>&);
  void Clear();
  void Detach(class CSimpleFontString***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSimpleFontString *>*);
  void Set(unsigned int, int, class CSimpleFontString**);
  void Set(unsigned int, class CSimpleFontString**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CSimpleFontString**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::CRect> : class TSBaseArray<NTempest::CRect>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::CRect>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::CRect>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::CRect>(class TSBaseArray<NTempest::CRect>&);
  void TSFixedArray<NTempest::CRect>(class TSFixedArray<NTempest::CRect>&);
  void TSFixedArray<NTempest::CRect>();
  void ~TSFixedArray<NTempest::CRect>();
  class TSFixedArray<NTempest::CRect>& operator=(class TSBaseArray<NTempest::CRect>&);
  class TSFixedArray<NTempest::CRect>& operator=(class TSFixedArray<NTempest::CRect>&);
  void Clear();
  void Detach(class NTempest::CRect**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::CRect>*);
  void Set(unsigned int, int, class NTempest::CRect*);
  void Set(unsigned int, class NTempest::CRect*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::CRect*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<unsigned __int64> : class TSBaseArray<unsigned __int64>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<unsigned __int64>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<unsigned __int64>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned __int64>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned __int64>(class TSBaseArray<unsigned __int64>&);
  void TSFixedArray<unsigned __int64>(class TSFixedArray<unsigned __int64>&);
  void TSFixedArray<unsigned __int64>();
  void TSFixedArray<unsigned __int64>::~TSFixedArray<unsigned __int64>();
  class TSFixedArray<unsigned __int64>& operator=(class TSBaseArray<unsigned __int64>&);
  class TSFixedArray<unsigned __int64>& operator=(class TSFixedArray<unsigned __int64>&);
  void Clear();
  void Detach(unsigned __int64**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<unsigned __int64>*);
  void Set(unsigned int, int, unsigned __int64*);
  void Set(unsigned int, unsigned __int64*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, unsigned __int64*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::CFacet> : class TSBaseArray<NTempest::CFacet>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::CFacet>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::CFacet>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::CFacet>(class TSBaseArray<NTempest::CFacet>&);
  void TSFixedArray<NTempest::CFacet>(class TSFixedArray<NTempest::CFacet>&);
  void TSFixedArray<NTempest::CFacet>();
  void TSFixedArray<NTempest::CFacet>::~TSFixedArray<NTempest::CFacet>();
  class TSFixedArray<NTempest::CFacet>& operator=(class TSBaseArray<NTempest::CFacet>&);
  class TSFixedArray<NTempest::CFacet>& operator=(class TSFixedArray<NTempest::CFacet>&);
  void Clear();
  void Detach(struct NTempest::CFacet**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::CFacet>*);
  void Set(unsigned int, int, struct NTempest::CFacet*);
  void Set(unsigned int, struct NTempest::CFacet*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct NTempest::CFacet*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> > : class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >(class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >(class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >();
  void TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >::~TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >();
  class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CACHEENTRY,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CACHEENTRY,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CACHEENTRY,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CACHEENTRY,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> > : class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >(class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >();
  void TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::~TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >();
  class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ITEMPORTRAIT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> > : class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >(class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >();
  void TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::~TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >();
  class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<PLAYERPORTRAIT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> > : class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >(class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >(class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >();
  void TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >::~TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >();
  class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >& operator=(class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<UNITPORTRAIT,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  void Set(unsigned int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NearestEnemyData> : class TSBaseArray<NearestEnemyData>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NearestEnemyData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NearestEnemyData>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NearestEnemyData>(class TSBaseArray<NearestEnemyData>&);
  void TSFixedArray<NearestEnemyData>(class TSFixedArray<NearestEnemyData>&);
  void TSFixedArray<NearestEnemyData>();
  void ~TSFixedArray<NearestEnemyData>();
  class TSFixedArray<NearestEnemyData>& operator=(class TSBaseArray<NearestEnemyData>&);
  class TSFixedArray<NearestEnemyData>& operator=(class TSFixedArray<NearestEnemyData>&);
  void Clear();
  void Detach(struct NearestEnemyData**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NearestEnemyData>*);
  void Set(unsigned int, int, struct NearestEnemyData*);
  void Set(unsigned int, struct NearestEnemyData*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct NearestEnemyData*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<LanguageWordsRec const *> : class TSBaseArray<LanguageWordsRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<LanguageWordsRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<LanguageWordsRec const *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<LanguageWordsRec const *>(class TSBaseArray<LanguageWordsRec const *>&);
  void TSFixedArray<LanguageWordsRec const *>(class TSFixedArray<LanguageWordsRec const *>&);
  void TSFixedArray<LanguageWordsRec const *>();
  void ~TSFixedArray<LanguageWordsRec const *>();
  class TSFixedArray<LanguageWordsRec const *>& operator=(class TSBaseArray<LanguageWordsRec const *>&);
  class TSFixedArray<LanguageWordsRec const *>& operator=(class TSFixedArray<LanguageWordsRec const *>&);
  void Clear();
  void Detach(class LanguageWordsRec***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<LanguageWordsRec const *>*);
  void Set(unsigned int, int, class LanguageWordsRec**);
  void Set(unsigned int, class LanguageWordsRec**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class LanguageWordsRec**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<WORDLIST,-572662307> > : class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<WORDLIST,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<WORDLIST,-572662307> >(class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >&);
  void TSFixedArray<TSExplicitList<WORDLIST,-572662307> >(class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >&);
  void TSFixedArray<TSExplicitList<WORDLIST,-572662307> >();
  void TSFixedArray<TSExplicitList<WORDLIST,-572662307> >::~TSFixedArray<TSExplicitList<WORDLIST,-572662307> >();
  class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >& operator=(class TSBaseArray<TSExplicitList<WORDLIST,-572662307> >&);
  class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >& operator=(class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<WORDLIST,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<WORDLIST,-572662307>*);
  void Set(unsigned int, class TSExplicitList<WORDLIST,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<WORDLIST,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<ChatChannel> : class TSBaseArray<ChatChannel>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<ChatChannel>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<ChatChannel>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<ChatChannel>(class TSBaseArray<ChatChannel>&);
  void TSFixedArray<ChatChannel>(class TSFixedArray<ChatChannel>&);
  void TSFixedArray<ChatChannel>();
  void ~TSFixedArray<ChatChannel>();
  class TSFixedArray<ChatChannel>& operator=(class TSBaseArray<ChatChannel>&);
  class TSFixedArray<ChatChannel>& operator=(class TSFixedArray<ChatChannel>&);
  void Clear();
  void Detach(struct ChatChannel**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<ChatChannel>*);
  void Set(unsigned int, int, struct ChatChannel*);
  void Set(unsigned int, struct ChatChannel*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct ChatChannel*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<regex_t> : class TSBaseArray<regex_t>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<regex_t>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<regex_t>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<regex_t>(class TSBaseArray<regex_t>&);
  void TSFixedArray<regex_t>(class TSFixedArray<regex_t>&);
  void TSFixedArray<regex_t>();
  void TSFixedArray<regex_t>::~TSFixedArray<regex_t>();
  class TSFixedArray<regex_t>& operator=(class TSBaseArray<regex_t>&);
  class TSFixedArray<regex_t>& operator=(class TSFixedArray<regex_t>&);
  void Clear();
  void Detach(struct regex_t**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<regex_t>*);
  void Set(unsigned int, int, struct regex_t*);
  void Set(unsigned int, struct regex_t*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct regex_t*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<FADEOUTHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<WorldMapContinentInfo> : class TSBaseArray<WorldMapContinentInfo>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<WorldMapContinentInfo>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<WorldMapContinentInfo>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<WorldMapContinentInfo>(class TSBaseArray<WorldMapContinentInfo>&);
  void TSFixedArray<WorldMapContinentInfo>(class TSFixedArray<WorldMapContinentInfo>&);
  void TSFixedArray<WorldMapContinentInfo>();
  void ~TSFixedArray<WorldMapContinentInfo>();
  class TSFixedArray<WorldMapContinentInfo>& operator=(class TSBaseArray<WorldMapContinentInfo>&);
  class TSFixedArray<WorldMapContinentInfo>& operator=(class TSFixedArray<WorldMapContinentInfo>&);
  void Clear();
  void Detach(struct WorldMapContinentInfo**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<WorldMapContinentInfo>*);
  void Set(unsigned int, int, struct WorldMapContinentInfo*);
  void Set(unsigned int, struct WorldMapContinentInfo*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct WorldMapContinentInfo*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<WorldMapLandmarkInfo> : class TSBaseArray<WorldMapLandmarkInfo>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<WorldMapLandmarkInfo>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<WorldMapLandmarkInfo>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<WorldMapLandmarkInfo>(class TSBaseArray<WorldMapLandmarkInfo>&);
  void TSFixedArray<WorldMapLandmarkInfo>(class TSFixedArray<WorldMapLandmarkInfo>&);
  void TSFixedArray<WorldMapLandmarkInfo>();
  void ~TSFixedArray<WorldMapLandmarkInfo>();
  class TSFixedArray<WorldMapLandmarkInfo>& operator=(class TSBaseArray<WorldMapLandmarkInfo>&);
  class TSFixedArray<WorldMapLandmarkInfo>& operator=(class TSFixedArray<WorldMapLandmarkInfo>&);
  void Clear();
  void Detach(struct WorldMapLandmarkInfo**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<WorldMapLandmarkInfo>*);
  void Set(unsigned int, int, struct WorldMapLandmarkInfo*);
  void Set(unsigned int, struct WorldMapLandmarkInfo*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct WorldMapLandmarkInfo*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TrainerSkillLineInfo *> : class TSBaseArray<TrainerSkillLineInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TrainerSkillLineInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TrainerSkillLineInfo *>(class TSBaseArray<TrainerSkillLineInfo *>&);
  void TSFixedArray<TrainerSkillLineInfo *>(class TSFixedArray<TrainerSkillLineInfo *>&);
  void TSFixedArray<TrainerSkillLineInfo *>();
  void ~TSFixedArray<TrainerSkillLineInfo *>();
  class TSFixedArray<TrainerSkillLineInfo *>& operator=(class TSBaseArray<TrainerSkillLineInfo *>&);
  class TSFixedArray<TrainerSkillLineInfo *>& operator=(class TSFixedArray<TrainerSkillLineInfo *>&);
  void Clear();
  void Detach(struct TrainerSkillLineInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TrainerSkillLineInfo *>*);
  void Set(unsigned int, int, struct TrainerSkillLineInfo**);
  void Set(unsigned int, struct TrainerSkillLineInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TrainerSkillLineInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TrainerServiceInfo *> : class TSBaseArray<TrainerServiceInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TrainerServiceInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TrainerServiceInfo *>(class TSBaseArray<TrainerServiceInfo *>&);
  void TSFixedArray<TrainerServiceInfo *>(class TSFixedArray<TrainerServiceInfo *>&);
  void TSFixedArray<TrainerServiceInfo *>();
  void ~TSFixedArray<TrainerServiceInfo *>();
  class TSFixedArray<TrainerServiceInfo *>& operator=(class TSBaseArray<TrainerServiceInfo *>&);
  class TSFixedArray<TrainerServiceInfo *>& operator=(class TSFixedArray<TrainerServiceInfo *>&);
  void Clear();
  void Detach(struct TrainerServiceInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TrainerServiceInfo *>*);
  void Set(unsigned int, int, struct TrainerServiceInfo**);
  void Set(unsigned int, struct TrainerServiceInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TrainerServiceInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> > : class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >(class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >(class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >();
  void TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >::~TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >();
  class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KEYBINDING,-572662307> >&);
  class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >& operator=(class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<KEYBINDING,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<KEYBINDING,-572662307>*);
  void Set(unsigned int, class TSExplicitList<KEYBINDING,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<KEYBINDING,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> > : class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >(class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >(class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >();
  void TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >::~TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >();
  class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >& operator=(class TSBaseArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >& operator=(class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<KEYCOMMAND,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  void Set(unsigned int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<PetitionSignerInfo> : class TSBaseArray<PetitionSignerInfo>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<PetitionSignerInfo>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<PetitionSignerInfo>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<PetitionSignerInfo>(class TSBaseArray<PetitionSignerInfo>&);
  void TSFixedArray<PetitionSignerInfo>(class TSFixedArray<PetitionSignerInfo>&);
  void TSFixedArray<PetitionSignerInfo>();
  void ~TSFixedArray<PetitionSignerInfo>();
  class TSFixedArray<PetitionSignerInfo>& operator=(class TSBaseArray<PetitionSignerInfo>&);
  class TSFixedArray<PetitionSignerInfo>& operator=(class TSFixedArray<PetitionSignerInfo>&);
  void Clear();
  void Detach(struct PetitionSignerInfo**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<PetitionSignerInfo>*);
  void Set(unsigned int, int, struct PetitionSignerInfo*);
  void Set(unsigned int, struct PetitionSignerInfo*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct PetitionSignerInfo*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CraftSkillLineInfo *> : class TSBaseArray<CraftSkillLineInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CraftSkillLineInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CraftSkillLineInfo *>(class TSBaseArray<CraftSkillLineInfo *>&);
  void TSFixedArray<CraftSkillLineInfo *>(class TSFixedArray<CraftSkillLineInfo *>&);
  void TSFixedArray<CraftSkillLineInfo *>();
  void ~TSFixedArray<CraftSkillLineInfo *>();
  class TSFixedArray<CraftSkillLineInfo *>& operator=(class TSBaseArray<CraftSkillLineInfo *>&);
  class TSFixedArray<CraftSkillLineInfo *>& operator=(class TSFixedArray<CraftSkillLineInfo *>&);
  void Clear();
  void Detach(struct CraftSkillLineInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CraftSkillLineInfo *>*);
  void Set(unsigned int, int, struct CraftSkillLineInfo**);
  void Set(unsigned int, struct CraftSkillLineInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CraftSkillLineInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CraftInfo *> : class TSBaseArray<CraftInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CraftInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CraftInfo *>(class TSBaseArray<CraftInfo *>&);
  void TSFixedArray<CraftInfo *>(class TSFixedArray<CraftInfo *>&);
  void TSFixedArray<CraftInfo *>();
  void ~TSFixedArray<CraftInfo *>();
  class TSFixedArray<CraftInfo *>& operator=(class TSBaseArray<CraftInfo *>&);
  class TSFixedArray<CraftInfo *>& operator=(class TSFixedArray<CraftInfo *>&);
  void Clear();
  void Detach(struct CraftInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CraftInfo *>*);
  void Set(unsigned int, int, struct CraftInfo**);
  void Set(unsigned int, struct CraftInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CraftInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TradeSkillSubClassInfo *> : class TSBaseArray<TradeSkillSubClassInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TradeSkillSubClassInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TradeSkillSubClassInfo *>(class TSBaseArray<TradeSkillSubClassInfo *>&);
  void TSFixedArray<TradeSkillSubClassInfo *>(class TSFixedArray<TradeSkillSubClassInfo *>&);
  void TSFixedArray<TradeSkillSubClassInfo *>();
  void ~TSFixedArray<TradeSkillSubClassInfo *>();
  class TSFixedArray<TradeSkillSubClassInfo *>& operator=(class TSBaseArray<TradeSkillSubClassInfo *>&);
  class TSFixedArray<TradeSkillSubClassInfo *>& operator=(class TSFixedArray<TradeSkillSubClassInfo *>&);
  void Clear();
  void Detach(struct TradeSkillSubClassInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TradeSkillSubClassInfo *>*);
  void Set(unsigned int, int, struct TradeSkillSubClassInfo**);
  void Set(unsigned int, struct TradeSkillSubClassInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TradeSkillSubClassInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TradeSkillInfo *> : class TSBaseArray<TradeSkillInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TradeSkillInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TradeSkillInfo *>(class TSBaseArray<TradeSkillInfo *>&);
  void TSFixedArray<TradeSkillInfo *>(class TSFixedArray<TradeSkillInfo *>&);
  void TSFixedArray<TradeSkillInfo *>();
  void ~TSFixedArray<TradeSkillInfo *>();
  class TSFixedArray<TradeSkillInfo *>& operator=(class TSBaseArray<TradeSkillInfo *>&);
  class TSFixedArray<TradeSkillInfo *>& operator=(class TSFixedArray<TradeSkillInfo *>&);
  void Clear();
  void Detach(struct TradeSkillInfo***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TradeSkillInfo *>*);
  void Set(unsigned int, int, struct TradeSkillInfo**);
  void Set(unsigned int, struct TradeSkillInfo**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct TradeSkillInfo**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> > : class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >(class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >(class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >();
  void TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >::~TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >();
  class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<FrameScriptObject_Variable,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OBJINFO> : class TSBaseArray<OBJINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OBJINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<OBJINFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<OBJINFO>(class TSBaseArray<OBJINFO>&);
  void TSFixedArray<OBJINFO>(class TSFixedArray<OBJINFO>&);
  void TSFixedArray<OBJINFO>();
  void ~TSFixedArray<OBJINFO>();
  class TSFixedArray<OBJINFO>& operator=(class TSBaseArray<OBJINFO>&);
  class TSFixedArray<OBJINFO>& operator=(class TSFixedArray<OBJINFO>&);
  void Clear();
  void Detach(struct OBJINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OBJINFO>*);
  void Set(unsigned int, int, struct OBJINFO*);
  void Set(unsigned int, struct OBJINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OBJINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<POIDIRECTIONDATA> : class TSBaseArray<POIDIRECTIONDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<POIDIRECTIONDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<POIDIRECTIONDATA>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<POIDIRECTIONDATA>(class TSBaseArray<POIDIRECTIONDATA>&);
  void TSFixedArray<POIDIRECTIONDATA>(class TSFixedArray<POIDIRECTIONDATA>&);
  void TSFixedArray<POIDIRECTIONDATA>();
  void ~TSFixedArray<POIDIRECTIONDATA>();
  class TSFixedArray<POIDIRECTIONDATA>& operator=(class TSBaseArray<POIDIRECTIONDATA>&);
  class TSFixedArray<POIDIRECTIONDATA>& operator=(class TSFixedArray<POIDIRECTIONDATA>&);
  void Clear();
  void Detach(struct POIDIRECTIONDATA**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<POIDIRECTIONDATA>*);
  void Set(unsigned int, int, struct POIDIRECTIONDATA*);
  void Set(unsigned int, struct POIDIRECTIONDATA*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct POIDIRECTIONDATA*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<POIINFO> : class TSBaseArray<POIINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<POIINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<POIINFO>(class TSBaseArray<POIINFO>&);
  void TSFixedArray<POIINFO>(class TSFixedArray<POIINFO>&);
  void TSFixedArray<POIINFO>();
  void ~TSFixedArray<POIINFO>();
  class TSFixedArray<POIINFO>& operator=(class TSBaseArray<POIINFO>&);
  class TSFixedArray<POIINFO>& operator=(class TSFixedArray<POIINFO>&);
  void Clear();
  void Detach(struct POIINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<POIINFO>*);
  void Set(unsigned int, int, struct POIINFO*);
  void Set(unsigned int, struct POIINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct POIINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CWalkableSurface> : class TSBaseArray<CWalkableSurface>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CWalkableSurface>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CWalkableSurface>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CWalkableSurface>(class TSBaseArray<CWalkableSurface>&);
  void TSFixedArray<CWalkableSurface>(class TSFixedArray<CWalkableSurface>&);
  void TSFixedArray<CWalkableSurface>::TSFixedArray<CWalkableSurface>();
  void ~TSFixedArray<CWalkableSurface>();
  class TSFixedArray<CWalkableSurface>& operator=(class TSBaseArray<CWalkableSurface>&);
  class TSFixedArray<CWalkableSurface>& operator=(class TSFixedArray<CWalkableSurface>&);
  void Clear();
  void Detach(struct CWalkableSurface**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CWalkableSurface>*);
  void Set(unsigned int, int, struct CWalkableSurface*);
  void Set(unsigned int, struct CWalkableSurface*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CWalkableSurface*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::CImVector> : class TSBaseArray<NTempest::CImVector>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::CImVector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::CImVector>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::CImVector>(class TSBaseArray<NTempest::CImVector>&);
  void TSFixedArray<NTempest::CImVector>(class TSFixedArray<NTempest::CImVector>&);
  void TSFixedArray<NTempest::CImVector>::TSFixedArray<NTempest::CImVector>();
  void TSFixedArray<NTempest::CImVector>::~TSFixedArray<NTempest::CImVector>();
  class TSFixedArray<NTempest::CImVector>& operator=(class TSBaseArray<NTempest::CImVector>&);
  class TSFixedArray<NTempest::CImVector>& operator=(class TSFixedArray<NTempest::CImVector>&);
  void Clear();
  void Detach(class NTempest::CImVector**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::CImVector>*);
  void Set(unsigned int, int, class NTempest::CImVector*);
  void Set(unsigned int, class NTempest::CImVector*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::CImVector*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<enum FACET_COLOR> : class TSBaseArray<enum FACET_COLOR>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<enum FACET_COLOR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<enum FACET_COLOR>(class TSBaseArray<enum FACET_COLOR>&);
  void TSFixedArray<enum FACET_COLOR>(class TSFixedArray<enum FACET_COLOR>&);
  void TSFixedArray<enum FACET_COLOR>();
  void ~TSFixedArray<enum FACET_COLOR>();
  class TSFixedArray<enum FACET_COLOR>& operator=(class TSBaseArray<enum FACET_COLOR>&);
  class TSFixedArray<enum FACET_COLOR>& operator=(class TSFixedArray<enum FACET_COLOR>&);
  void Clear();
  void Detach(enum FACET_COLOR**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<enum FACET_COLOR>*);
  void Set(unsigned int, int, enum FACET_COLOR*);
  void Set(unsigned int, enum FACET_COLOR*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, enum FACET_COLOR*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<INTDATA> : class TSBaseArray<INTDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<INTDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<INTDATA>(class TSBaseArray<INTDATA>&);
  void TSFixedArray<INTDATA>(class TSFixedArray<INTDATA>&);
  void TSFixedArray<INTDATA>();
  void TSFixedArray<INTDATA>::~TSFixedArray<INTDATA>();
  class TSFixedArray<INTDATA>& operator=(class TSBaseArray<INTDATA>&);
  class TSFixedArray<INTDATA>& operator=(class TSFixedArray<INTDATA>&);
  void Clear();
  void Detach(struct INTDATA**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<INTDATA>*);
  void Set(unsigned int, int, struct INTDATA*);
  void Set(unsigned int, struct INTDATA*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct INTDATA*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<STRINGWANNABE> : class TSBaseArray<STRINGWANNABE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<STRINGWANNABE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<STRINGWANNABE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<STRINGWANNABE>(class TSBaseArray<STRINGWANNABE>&);
  void TSFixedArray<STRINGWANNABE>(class TSFixedArray<STRINGWANNABE>&);
  void TSFixedArray<STRINGWANNABE>();
  void TSFixedArray<STRINGWANNABE>::~TSFixedArray<STRINGWANNABE>();
  class TSFixedArray<STRINGWANNABE>& operator=(class TSBaseArray<STRINGWANNABE>&);
  class TSFixedArray<STRINGWANNABE>& operator=(class TSFixedArray<STRINGWANNABE>&);
  void Clear();
  void Detach(struct STRINGWANNABE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<STRINGWANNABE>*);
  void Set(unsigned int, int, struct STRINGWANNABE*);
  void TSFixedArray<STRINGWANNABE>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct STRINGWANNABE* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct STRINGWANNABE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<FACIALGEOSETS> : class TSBaseArray<FACIALGEOSETS>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<FACIALGEOSETS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<FACIALGEOSETS>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<FACIALGEOSETS>(class TSBaseArray<FACIALGEOSETS>&);
  void TSFixedArray<FACIALGEOSETS>(class TSFixedArray<FACIALGEOSETS>&);
  void TSFixedArray<FACIALGEOSETS>::TSFixedArray<FACIALGEOSETS>();
  void TSFixedArray<FACIALGEOSETS>::~TSFixedArray<FACIALGEOSETS>();
  class TSFixedArray<FACIALGEOSETS>& operator=(class TSBaseArray<FACIALGEOSETS>&);
  class TSFixedArray<FACIALGEOSETS>& operator=(class TSFixedArray<FACIALGEOSETS>&);
  void Clear();
  void Detach(struct FACIALGEOSETS**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<FACIALGEOSETS>*);
  void Set(unsigned int, int, struct FACIALGEOSETS*);
  void Set(unsigned int, struct FACIALGEOSETS*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct FACIALGEOSETS*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHARACTERVARIATIONS> : class TSBaseArray<CHARACTERVARIATIONS>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHARACTERVARIATIONS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<CHARACTERVARIATIONS>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHARACTERVARIATIONS>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHARACTERVARIATIONS>(class TSBaseArray<CHARACTERVARIATIONS>&);
  void TSFixedArray<CHARACTERVARIATIONS>(class TSFixedArray<CHARACTERVARIATIONS>&);
  void TSFixedArray<CHARACTERVARIATIONS>();
  void ~TSFixedArray<CHARACTERVARIATIONS>();
  class TSFixedArray<CHARACTERVARIATIONS>& operator=(class TSBaseArray<CHARACTERVARIATIONS>&);
  class TSFixedArray<CHARACTERVARIATIONS>& operator=(class TSFixedArray<CHARACTERVARIATIONS>&);
  void Clear();
  void Detach(struct CHARACTERVARIATIONS**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHARACTERVARIATIONS>*);
  void Set(unsigned int, int, struct CHARACTERVARIATIONS*);
  void Set(unsigned int, struct CHARACTERVARIATIONS*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHARACTERVARIATIONS*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSFixedArray<VARIATIONS> > : class TSBaseArray<TSFixedArray<VARIATIONS> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSFixedArray<VARIATIONS> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSFixedArray<VARIATIONS> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSFixedArray<VARIATIONS> >(class TSBaseArray<TSFixedArray<VARIATIONS> >&);
  void TSFixedArray<TSFixedArray<VARIATIONS> >(class TSFixedArray<TSFixedArray<VARIATIONS> >&);
  void TSFixedArray<TSFixedArray<VARIATIONS> >();
  void TSFixedArray<TSFixedArray<VARIATIONS> >::~TSFixedArray<TSFixedArray<VARIATIONS> >();
  class TSFixedArray<TSFixedArray<VARIATIONS> >& operator=(class TSBaseArray<TSFixedArray<VARIATIONS> >&);
  class TSFixedArray<TSFixedArray<VARIATIONS> >& operator=(class TSFixedArray<TSFixedArray<VARIATIONS> >&);
  void Clear();
  void Detach(class TSFixedArray<VARIATIONS>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSFixedArray<VARIATIONS> >*);
  void Set(unsigned int, int, class TSFixedArray<VARIATIONS>*);
  void Set(unsigned int, class TSFixedArray<VARIATIONS>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSFixedArray<VARIATIONS>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<VARIATIONS> : class TSBaseArray<VARIATIONS>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<VARIATIONS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<VARIATIONS>(class TSBaseArray<VARIATIONS>&);
  void TSFixedArray<VARIATIONS>(class TSFixedArray<VARIATIONS>&);
  void TSFixedArray<VARIATIONS>();
  void TSFixedArray<VARIATIONS>::~TSFixedArray<VARIATIONS>();
  class TSFixedArray<VARIATIONS>& operator=(class TSBaseArray<VARIATIONS>&);
  class TSFixedArray<VARIATIONS>& operator=(class TSFixedArray<VARIATIONS>&);
  void Clear();
  void Detach(struct VARIATIONS**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<VARIATIONS>*);
  void Set(unsigned int, int, struct VARIATIONS*);
  void Set(unsigned int, struct VARIATIONS*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct VARIATIONS*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAMERAFILENAMES> : class TSBaseArray<CAMERAFILENAMES>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAMERAFILENAMES>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CAMERAFILENAMES>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CAMERAFILENAMES>(class TSBaseArray<CAMERAFILENAMES>&);
  void TSFixedArray<CAMERAFILENAMES>(class TSFixedArray<CAMERAFILENAMES>&);
  void TSFixedArray<CAMERAFILENAMES>();
  void TSFixedArray<CAMERAFILENAMES>::~TSFixedArray<CAMERAFILENAMES>();
  class TSFixedArray<CAMERAFILENAMES>& operator=(class TSBaseArray<CAMERAFILENAMES>&);
  class TSFixedArray<CAMERAFILENAMES>& operator=(class TSFixedArray<CAMERAFILENAMES>&);
  void Clear();
  void Detach(struct CAMERAFILENAMES**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAMERAFILENAMES>*);
  void Set(unsigned int, int, struct CAMERAFILENAMES*);
  void Set(unsigned int, struct CAMERAFILENAMES*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAMERAFILENAMES*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHARACTERRACEVARIATIONS> : class TSBaseArray<CHARACTERRACEVARIATIONS>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHARACTERRACEVARIATIONS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHARACTERRACEVARIATIONS>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHARACTERRACEVARIATIONS>(class TSBaseArray<CHARACTERRACEVARIATIONS>&);
  void TSFixedArray<CHARACTERRACEVARIATIONS>(class TSFixedArray<CHARACTERRACEVARIATIONS>&);
  void TSFixedArray<CHARACTERRACEVARIATIONS>();
  void ~TSFixedArray<CHARACTERRACEVARIATIONS>();
  class TSFixedArray<CHARACTERRACEVARIATIONS>& operator=(class TSBaseArray<CHARACTERRACEVARIATIONS>&);
  class TSFixedArray<CHARACTERRACEVARIATIONS>& operator=(class TSFixedArray<CHARACTERRACEVARIATIONS>&);
  void Clear();
  void Detach(struct CHARACTERRACEVARIATIONS**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHARACTERRACEVARIATIONS>*);
  void Set(unsigned int, int, struct CHARACTERRACEVARIATIONS*);
  void Set(unsigned int, struct CHARACTERRACEVARIATIONS*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHARACTERRACEVARIATIONS*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHARINFO> : class TSBaseArray<CHARINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHARINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHARINFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHARINFO>(class TSBaseArray<CHARINFO>&);
  void TSFixedArray<CHARINFO>(class TSFixedArray<CHARINFO>&);
  void TSFixedArray<CHARINFO>();
  void ~TSFixedArray<CHARINFO>();
  class TSFixedArray<CHARINFO>& operator=(class TSBaseArray<CHARINFO>&);
  class TSFixedArray<CHARINFO>& operator=(class TSFixedArray<CHARINFO>&);
  void Clear();
  void Detach(struct CHARINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHARINFO>*);
  void Set(unsigned int, int, struct CHARINFO*);
  void Set(unsigned int, struct CHARINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHARINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> > : class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >(class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >(class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >::~TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<C_OBJECTHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CObjectHeap> : class TSBaseArray<CObjectHeap>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CObjectHeap>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<CObjectHeap>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void ReallocData(unsigned int);
  void TSFixedArray<CObjectHeap>(class TSBaseArray<CObjectHeap>&);
  void TSFixedArray<CObjectHeap>(class TSFixedArray<CObjectHeap>&);
  void TSFixedArray<CObjectHeap>();
  void TSFixedArray<CObjectHeap>::~TSFixedArray<CObjectHeap>();
  class TSFixedArray<CObjectHeap>& operator=(class TSBaseArray<CObjectHeap>&);
  class TSFixedArray<CObjectHeap>& operator=(class TSFixedArray<CObjectHeap>&);
  void Clear();
  void Detach(class CObjectHeap**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CObjectHeap>*);
  void Set(unsigned int, int, class CObjectHeap*);
  void Set(unsigned int, class CObjectHeap*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CObjectHeap*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CObjectHeapList> : class TSBaseArray<CObjectHeapList>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CObjectHeapList>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CObjectHeapList>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CObjectHeapList>(class TSBaseArray<CObjectHeapList>&);
  void TSFixedArray<CObjectHeapList>(class TSFixedArray<CObjectHeapList>&);
  void TSFixedArray<CObjectHeapList>();
  void ~TSFixedArray<CObjectHeapList>();
  class TSFixedArray<CObjectHeapList>& operator=(class TSBaseArray<CObjectHeapList>&);
  class TSFixedArray<CObjectHeapList>& operator=(class TSFixedArray<CObjectHeapList>&);
  void Clear();
  void Detach(class CObjectHeapList**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CObjectHeapList>*);
  void Set(unsigned int, int, class CObjectHeapList*);
  void Set(unsigned int, class CObjectHeapList*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CObjectHeapList*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> > : class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >(class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >(class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >();
  void TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::~TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >();
  class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> > : class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >(class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >(class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::~TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SHEATHSOUNDHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> > : class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >(class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >(class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >();
  void TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::~TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >();
  class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >& operator=(class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<UISOUNDLOOKUP,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  void Set(unsigned int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> > : class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >(class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >(class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >();
  void TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::~TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >();
  class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SOUNDDEFINITION,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<IMPACTSOUNDARRAY> : class TSBaseArray<IMPACTSOUNDARRAY>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<IMPACTSOUNDARRAY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<IMPACTSOUNDARRAY>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<IMPACTSOUNDARRAY>(class TSBaseArray<IMPACTSOUNDARRAY>&);
  void TSFixedArray<IMPACTSOUNDARRAY>(class TSFixedArray<IMPACTSOUNDARRAY>&);
  void TSFixedArray<IMPACTSOUNDARRAY>();
  void TSFixedArray<IMPACTSOUNDARRAY>::~TSFixedArray<IMPACTSOUNDARRAY>();
  class TSFixedArray<IMPACTSOUNDARRAY>& operator=(class TSBaseArray<IMPACTSOUNDARRAY>&);
  class TSFixedArray<IMPACTSOUNDARRAY>& operator=(class TSFixedArray<IMPACTSOUNDARRAY>&);
  void Clear();
  void Detach(struct IMPACTSOUNDARRAY**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<IMPACTSOUNDARRAY>*);
  void Set(unsigned int, int, struct IMPACTSOUNDARRAY*);
  void Set(unsigned int, struct IMPACTSOUNDARRAY*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct IMPACTSOUNDARRAY*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<REVERBINFO> : class TSBaseArray<REVERBINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<REVERBINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<REVERBINFO>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<REVERBINFO>(class TSBaseArray<REVERBINFO>&);
  void TSFixedArray<REVERBINFO>(class TSFixedArray<REVERBINFO>&);
  void TSFixedArray<REVERBINFO>();
  void ~TSFixedArray<REVERBINFO>();
  class TSFixedArray<REVERBINFO>& operator=(class TSBaseArray<REVERBINFO>&);
  class TSFixedArray<REVERBINFO>& operator=(class TSFixedArray<REVERBINFO>&);
  void Clear();
  void Detach(struct REVERBINFO**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<REVERBINFO>*);
  void Set(unsigned int, int, struct REVERBINFO*);
  void Set(unsigned int, struct REVERBINFO*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct REVERBINFO*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OUTDOORSCHUNKHASHOBJ *> : class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<OUTDOORSCHUNKHASHOBJ *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<OUTDOORSCHUNKHASHOBJ *>(class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>&);
  void TSFixedArray<OUTDOORSCHUNKHASHOBJ *>(class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>&);
  void TSFixedArray<OUTDOORSCHUNKHASHOBJ *>();
  void ~TSFixedArray<OUTDOORSCHUNKHASHOBJ *>();
  class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>& operator=(class TSBaseArray<OUTDOORSCHUNKHASHOBJ *>&);
  class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>& operator=(class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>&);
  void Clear();
  void Detach(struct OUTDOORSCHUNKHASHOBJ***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>*);
  void Set(unsigned int, int, struct OUTDOORSCHUNKHASHOBJ**);
  void Set(unsigned int, struct OUTDOORSCHUNKHASHOBJ**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OUTDOORSCHUNKHASHOBJ**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CHUNKHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHUNKHASHOBJ *> : class TSBaseArray<CHUNKHASHOBJ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHUNKHASHOBJ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHUNKHASHOBJ *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHUNKHASHOBJ *>(class TSBaseArray<CHUNKHASHOBJ *>&);
  void TSFixedArray<CHUNKHASHOBJ *>(class TSFixedArray<CHUNKHASHOBJ *>&);
  void TSFixedArray<CHUNKHASHOBJ *>();
  void ~TSFixedArray<CHUNKHASHOBJ *>();
  class TSFixedArray<CHUNKHASHOBJ *>& operator=(class TSBaseArray<CHUNKHASHOBJ *>&);
  class TSFixedArray<CHUNKHASHOBJ *>& operator=(class TSFixedArray<CHUNKHASHOBJ *>&);
  void Clear();
  void Detach(struct CHUNKHASHOBJ***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHUNKHASHOBJ *>*);
  void Set(unsigned int, int, struct CHUNKHASHOBJ**);
  void Set(unsigned int, struct CHUNKHASHOBJ**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHUNKHASHOBJ**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MACRODESC> : class TSBaseArray<MACRODESC>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MACRODESC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MACRODESC>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MACRODESC>(class TSBaseArray<MACRODESC>&);
  void TSFixedArray<MACRODESC>(class TSFixedArray<MACRODESC>&);
  void TSFixedArray<MACRODESC>();
  void ~TSFixedArray<MACRODESC>();
  class TSFixedArray<MACRODESC>& operator=(class TSBaseArray<MACRODESC>&);
  class TSFixedArray<MACRODESC>& operator=(class TSFixedArray<MACRODESC>&);
  void Clear();
  void Detach(struct MACRODESC**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MACRODESC>*);
  void Set(unsigned int, int, struct MACRODESC*);
  void Set(unsigned int, struct MACRODESC*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MACRODESC*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSolidTextureHash> : class TSBaseArray<CSolidTextureHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSolidTextureHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSolidTextureHash>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSolidTextureHash>(class TSBaseArray<CSolidTextureHash>&);
  void TSFixedArray<CSolidTextureHash>(class TSFixedArray<CSolidTextureHash>&);
  void TSFixedArray<CSolidTextureHash>();
  void TSFixedArray<CSolidTextureHash>::~TSFixedArray<CSolidTextureHash>();
  class TSFixedArray<CSolidTextureHash>& operator=(class TSBaseArray<CSolidTextureHash>&);
  class TSFixedArray<CSolidTextureHash>& operator=(class TSFixedArray<CSolidTextureHash>&);
  void Clear();
  void Detach(struct CSolidTextureHash**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSolidTextureHash>*);
  void Set(unsigned int, int, struct CSolidTextureHash*);
  void Set(unsigned int, struct CSolidTextureHash*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CSolidTextureHash*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CTextureHash> : class TSBaseArray<CTextureHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CTextureHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CTextureHash>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CTextureHash>(class TSBaseArray<CTextureHash>&);
  void TSFixedArray<CTextureHash>(class TSFixedArray<CTextureHash>&);
  void TSFixedArray<CTextureHash>();
  void TSFixedArray<CTextureHash>::~TSFixedArray<CTextureHash>();
  class TSFixedArray<CTextureHash>& operator=(class TSBaseArray<CTextureHash>&);
  class TSFixedArray<CTextureHash>& operator=(class TSFixedArray<CTextureHash>&);
  void Clear();
  void Detach(struct CTextureHash**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CTextureHash>*);
  void Set(unsigned int, int, struct CTextureHash*);
  void Set(unsigned int, struct CTextureHash*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CTextureHash*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CTextureHash,-572662307> > : class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CTextureHash,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CTextureHash,-572662307> >(class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CTextureHash,-572662307> >(class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CTextureHash,-572662307> >::TSFixedArray<TSExplicitList<CTextureHash,-572662307> >();
  void TSFixedArray<TSExplicitList<CTextureHash,-572662307> >::~TSFixedArray<TSExplicitList<CTextureHash,-572662307> >();
  class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CTextureHash,-572662307> >&);
  class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CTextureHash,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CTextureHash,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CTextureHash,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CTextureHash,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> > : class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >(class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >(class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >::TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >();
  void TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >::~TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >();
  class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CSolidTextureHash,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CTexture *> : class TSBaseArray<CTexture *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CTexture *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CTexture *>(class TSBaseArray<CTexture *>&);
  void TSFixedArray<CTexture *>(class TSFixedArray<CTexture *>&);
  void TSFixedArray<CTexture *>();
  void ~TSFixedArray<CTexture *>();
  class TSFixedArray<CTexture *>& operator=(class TSBaseArray<CTexture *>&);
  class TSFixedArray<CTexture *>& operator=(class TSFixedArray<CTexture *>&);
  void Clear();
  void Detach(class CTexture***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CTexture *>*);
  void Set(unsigned int, int, class CTexture**);
  void Set(unsigned int, class CTexture**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CTexture**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<void (__fastcall*)(void)> : class TSBaseArray<void (__fastcall*)(void)>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<void (__fastcall*)(void)>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<void (__fastcall*)(void)>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<void (__fastcall*)(void)>(class TSBaseArray<void (__fastcall*)(void)>&);
  void TSFixedArray<void (__fastcall*)(void)>(class TSFixedArray<void (__fastcall*)(void)>&);
  void TSFixedArray<void (__fastcall*)(void)>();
  void ~TSFixedArray<void (__fastcall*)(void)>();
  class TSFixedArray<void (__fastcall*)(void)>& operator=(class TSBaseArray<void (__fastcall*)(void)>&);
  class TSFixedArray<void (__fastcall*)(void)>& operator=(class TSFixedArray<void (__fastcall*)(void)>&);
  void Clear();
  void Detach(void  (***)(), unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<void (__fastcall*)(void)>*);
  void Set(unsigned int, int, void  (**)());
  void Set(unsigned int, void  (**)());
  void SetCount(unsigned int);
  void SetOptional(unsigned int, void  (**)());
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CParticleEmitter *> : class TSBaseArray<CParticleEmitter *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CParticleEmitter *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CParticleEmitter *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CParticleEmitter *>(class TSBaseArray<CParticleEmitter *>&);
  void TSFixedArray<CParticleEmitter *>(class TSFixedArray<CParticleEmitter *>&);
  void TSFixedArray<CParticleEmitter *>::TSFixedArray<CParticleEmitter *>();
  void ~TSFixedArray<CParticleEmitter *>();
  class TSFixedArray<CParticleEmitter *>& operator=(class TSBaseArray<CParticleEmitter *>&);
  class TSFixedArray<CParticleEmitter *>& operator=(class TSFixedArray<CParticleEmitter *>&);
  void Clear();
  void Detach(class CParticleEmitter***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CParticleEmitter *>*);
  void Set(unsigned int, int, class CParticleEmitter**);
  void Set(unsigned int, class CParticleEmitter**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CParticleEmitter**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CRibbonVertex> : class TSBaseArray<CRibbonVertex>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CRibbonVertex>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CRibbonVertex>(class TSBaseArray<CRibbonVertex>&);
  void TSFixedArray<CRibbonVertex>(class TSFixedArray<CRibbonVertex>&);
  void TSFixedArray<CRibbonVertex>();
  void ~TSFixedArray<CRibbonVertex>();
  class TSFixedArray<CRibbonVertex>& operator=(class TSBaseArray<CRibbonVertex>&);
  class TSFixedArray<CRibbonVertex>& operator=(class TSFixedArray<CRibbonVertex>&);
  void Clear();
  void Detach(struct CRibbonVertex**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CRibbonVertex>*);
  void Set(unsigned int, int, struct CRibbonVertex*);
  void TSFixedArray<CRibbonVertex>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CRibbonVertex* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CRibbonVertex*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<float> : class TSBaseArray<float>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<float>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<float>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<float>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<float>(class TSBaseArray<float>&);
  void TSFixedArray<float>(class TSFixedArray<float>&);
  void TSFixedArray<float>();
  void TSFixedArray<float>::~TSFixedArray<float>();
  class TSFixedArray<float>& operator=(class TSBaseArray<float>&);
  class TSFixedArray<float>& TSFixedArray<float>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<float>& source);
  void Clear();
  void Detach(float**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<float>*);
  void Set(unsigned int, int, float*);
  void Set(unsigned int, float*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, float*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CParticle2> : class TSBaseArray<CParticle2>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CParticle2>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CParticle2>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CParticle2>(class TSBaseArray<CParticle2>&);
  void TSFixedArray<CParticle2>(class TSFixedArray<CParticle2>&);
  void TSFixedArray<CParticle2>();
  void ~TSFixedArray<CParticle2>();
  class TSFixedArray<CParticle2>& operator=(class TSBaseArray<CParticle2>&);
  class TSFixedArray<CParticle2>& operator=(class TSFixedArray<CParticle2>&);
  void Clear();
  void Detach(class CParticle2**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CParticle2>*);
  void Set(unsigned int, int, class CParticle2*);
  void Set(unsigned int, class CParticle2*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CParticle2*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CParticle2_Model> : class TSBaseArray<CParticle2_Model>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CParticle2_Model>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CParticle2_Model>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CParticle2_Model>(class TSBaseArray<CParticle2_Model>&);
  void TSFixedArray<CParticle2_Model>(class TSFixedArray<CParticle2_Model>&);
  void TSFixedArray<CParticle2_Model>();
  void ~TSFixedArray<CParticle2_Model>();
  class TSFixedArray<CParticle2_Model>& operator=(class TSBaseArray<CParticle2_Model>&);
  class TSFixedArray<CParticle2_Model>& operator=(class TSFixedArray<CParticle2_Model>&);
  void Clear();
  void Detach(class CParticle2_Model**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CParticle2_Model>*);
  void Set(unsigned int, int, class CParticle2_Model*);
  void Set(unsigned int, class CParticle2_Model*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CParticle2_Model*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CBaseManaged *> : class TSBaseArray<CBaseManaged *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CBaseManaged *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CBaseManaged *>(class TSBaseArray<CBaseManaged *>&);
  void TSFixedArray<CBaseManaged *>(class TSFixedArray<CBaseManaged *>&);
  void TSFixedArray<CBaseManaged *>::TSFixedArray<CBaseManaged *>();
  void TSFixedArray<CBaseManaged *>::~TSFixedArray<CBaseManaged *>();
  class TSFixedArray<CBaseManaged *>& operator=(class TSBaseArray<CBaseManaged *>&);
  class TSFixedArray<CBaseManaged *>& operator=(class TSFixedArray<CBaseManaged *>&);
  void Clear();
  void Detach(class CBaseManaged***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CBaseManaged *>*);
  void Set(unsigned int, int, class CBaseManaged**);
  void Set(unsigned int, class CBaseManaged**);
  void TSFixedArray<CBaseManaged *>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void SetOptional(unsigned int, class CBaseManaged**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<FONTHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CParticle> : class TSBaseArray<CParticle>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CParticle>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CParticle>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CParticle>(class TSBaseArray<CParticle>&);
  void TSFixedArray<CParticle>(class TSFixedArray<CParticle>&);
  void TSFixedArray<CParticle>();
  void ~TSFixedArray<CParticle>();
  class TSFixedArray<CParticle>& operator=(class TSBaseArray<CParticle>&);
  class TSFixedArray<CParticle>& operator=(class TSFixedArray<CParticle>&);
  void Clear();
  void Detach(class CParticle**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CParticle>*);
  void Set(unsigned int, int, class CParticle*);
  void Set(unsigned int, class CParticle*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CParticle*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> > : class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >(class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >(class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >();
  void TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::~TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >();
  class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> > : class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >(class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >(class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >();
  void TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::~TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >();
  class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ProfileInternal::SECTION,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OsGuiTreeItemParams> : class TSBaseArray<OsGuiTreeItemParams>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OsGuiTreeItemParams>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<OsGuiTreeItemParams>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<OsGuiTreeItemParams>(class TSBaseArray<OsGuiTreeItemParams>&);
  void TSFixedArray<OsGuiTreeItemParams>(class TSFixedArray<OsGuiTreeItemParams>&);
  void TSFixedArray<OsGuiTreeItemParams>();
  void ~TSFixedArray<OsGuiTreeItemParams>();
  class TSFixedArray<OsGuiTreeItemParams>& operator=(class TSBaseArray<OsGuiTreeItemParams>&);
  class TSFixedArray<OsGuiTreeItemParams>& operator=(class TSFixedArray<OsGuiTreeItemParams>&);
  void Clear();
  void Detach(struct OsGuiTreeItemParams**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OsGuiTreeItemParams>*);
  void Set(unsigned int, int, struct OsGuiTreeItemParams*);
  void Set(unsigned int, struct OsGuiTreeItemParams*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OsGuiTreeItemParams*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::CiRect> : class TSBaseArray<NTempest::CiRect>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::CiRect>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::CiRect>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::CiRect>(class TSBaseArray<NTempest::CiRect>&);
  void TSFixedArray<NTempest::CiRect>(class TSFixedArray<NTempest::CiRect>&);
  void TSFixedArray<NTempest::CiRect>();
  void ~TSFixedArray<NTempest::CiRect>();
  class TSFixedArray<NTempest::CiRect>& operator=(class TSBaseArray<NTempest::CiRect>&);
  class TSFixedArray<NTempest::CiRect>& operator=(class TSFixedArray<NTempest::CiRect>&);
  void Clear();
  void Detach(class NTempest::CiRect**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::CiRect>*);
  void Set(unsigned int, int, class NTempest::CiRect*);
  void Set(unsigned int, class NTempest::CiRect*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::CiRect*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<int> : class TSBaseArray<int>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<int>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<int>(class TSBaseArray<int>&);
  void TSFixedArray<int>(class TSFixedArray<int>&);
  void TSFixedArray<int>::TSFixedArray<int>();
  void TSFixedArray<int>::~TSFixedArray<int>();
  class TSFixedArray<int>& operator=(class TSBaseArray<int>&);
  class TSFixedArray<int>& operator=(class TSFixedArray<int>&);
  void Clear();
  void Detach(int**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<int>*);
  void Set(unsigned int, int, int*);
  void TSFixedArray<int>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, int*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OsGuiMenuHotkey> : class TSBaseArray<OsGuiMenuHotkey>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OsGuiMenuHotkey>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<OsGuiMenuHotkey>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<OsGuiMenuHotkey>(class TSBaseArray<OsGuiMenuHotkey>&);
  void TSFixedArray<OsGuiMenuHotkey>(class TSFixedArray<OsGuiMenuHotkey>&);
  void TSFixedArray<OsGuiMenuHotkey>();
  void ~TSFixedArray<OsGuiMenuHotkey>();
  class TSFixedArray<OsGuiMenuHotkey>& operator=(class TSBaseArray<OsGuiMenuHotkey>&);
  class TSFixedArray<OsGuiMenuHotkey>& operator=(class TSFixedArray<OsGuiMenuHotkey>&);
  void Clear();
  void Detach(struct OsGuiMenuHotkey**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OsGuiMenuHotkey>*);
  void Set(unsigned int, int, struct OsGuiMenuHotkey*);
  void Set(unsigned int, struct OsGuiMenuHotkey*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OsGuiMenuHotkey*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<COsControl *> : class TSBaseArray<COsControl *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<COsControl *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<COsControl *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<COsControl *>(class TSBaseArray<COsControl *>&);
  void TSFixedArray<COsControl *>(class TSFixedArray<COsControl *>&);
  void TSFixedArray<COsControl *>();
  void TSFixedArray<COsControl *>::~TSFixedArray<COsControl *>();
  class TSFixedArray<COsControl *>& operator=(class TSBaseArray<COsControl *>&);
  class TSFixedArray<COsControl *>& operator=(class TSFixedArray<COsControl *>&);
  void Clear();
  void Detach(class COsControl***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<COsControl *>*);
  void Set(unsigned int, int, class COsControl**);
  void Set(unsigned int, class COsControl**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class COsControl**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<tagACCEL> : class TSBaseArray<tagACCEL>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<tagACCEL>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<tagACCEL>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<tagACCEL>(class TSBaseArray<tagACCEL>&);
  void TSFixedArray<tagACCEL>(class TSFixedArray<tagACCEL>&);
  void TSFixedArray<tagACCEL>();
  void ~TSFixedArray<tagACCEL>();
  class TSFixedArray<tagACCEL>& operator=(class TSBaseArray<tagACCEL>&);
  class TSFixedArray<tagACCEL>& operator=(class TSFixedArray<tagACCEL>&);
  void Clear();
  void Detach(struct tagACCEL**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<tagACCEL>*);
  void Set(unsigned int, int, struct tagACCEL*);
  void Set(unsigned int, struct tagACCEL*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct tagACCEL*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<COsMenuBar *> : class TSBaseArray<COsMenuBar *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<COsMenuBar *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<COsMenuBar *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<COsMenuBar *>(class TSBaseArray<COsMenuBar *>&);
  void TSFixedArray<COsMenuBar *>(class TSFixedArray<COsMenuBar *>&);
  void TSFixedArray<COsMenuBar *>();
  void ~TSFixedArray<COsMenuBar *>();
  class TSFixedArray<COsMenuBar *>& operator=(class TSBaseArray<COsMenuBar *>&);
  class TSFixedArray<COsMenuBar *>& operator=(class TSFixedArray<COsMenuBar *>&);
  void Clear();
  void Detach(class COsMenuBar***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<COsMenuBar *>*);
  void Set(unsigned int, int, class COsMenuBar**);
  void Set(unsigned int, class COsMenuBar**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class COsMenuBar**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<COsDialog *> : class TSBaseArray<COsDialog *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<COsDialog *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<COsDialog *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<COsDialog *>(class TSBaseArray<COsDialog *>&);
  void TSFixedArray<COsDialog *>(class TSFixedArray<COsDialog *>&);
  void TSFixedArray<COsDialog *>();
  void ~TSFixedArray<COsDialog *>();
  class TSFixedArray<COsDialog *>& operator=(class TSBaseArray<COsDialog *>&);
  class TSFixedArray<COsDialog *>& operator=(class TSFixedArray<COsDialog *>&);
  void Clear();
  void Detach(class COsDialog***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<COsDialog *>*);
  void Set(unsigned int, int, class COsDialog**);
  void Set(unsigned int, class COsDialog**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class COsDialog**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OsNet::NETSELSOCKPTR> : class TSBaseArray<OsNet::NETSELSOCKPTR>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OsNet::NETSELSOCKPTR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<OsNet::NETSELSOCKPTR>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<OsNet::NETSELSOCKPTR>(class TSBaseArray<OsNet::NETSELSOCKPTR>&);
  void TSFixedArray<OsNet::NETSELSOCKPTR>(class TSFixedArray<OsNet::NETSELSOCKPTR>&);
  void TSFixedArray<OsNet::NETSELSOCKPTR>();
  void TSFixedArray<OsNet::NETSELSOCKPTR>::~TSFixedArray<OsNet::NETSELSOCKPTR>();
  class TSFixedArray<OsNet::NETSELSOCKPTR>& operator=(class TSBaseArray<OsNet::NETSELSOCKPTR>&);
  class TSFixedArray<OsNet::NETSELSOCKPTR>& operator=(class TSFixedArray<OsNet::NETSELSOCKPTR>&);
  void Clear();
  void Detach(struct OsNet::NETSELSOCKPTR**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OsNet::NETSELSOCKPTR>*);
  void Set(unsigned int, int, struct OsNet::NETSELSOCKPTR*);
  void Set(unsigned int, struct OsNet::NETSELSOCKPTR*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OsNet::NETSELSOCKPTR*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> > : class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >(class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >(class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >();
  void TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::~TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >();
  class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >& operator=(class TSBaseArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >& operator=(class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  void Set(unsigned int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NETADDR> : class TSBaseArray<NETADDR>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NETADDR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NETADDR>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NETADDR>(class TSBaseArray<NETADDR>&);
  void TSFixedArray<NETADDR>(class TSFixedArray<NETADDR>&);
  void TSFixedArray<NETADDR>();
  void TSFixedArray<NETADDR>::~TSFixedArray<NETADDR>();
  class TSFixedArray<NETADDR>& operator=(class TSBaseArray<NETADDR>&);
  class TSFixedArray<NETADDR>& operator=(class TSFixedArray<NETADDR>&);
  void Clear();
  void Detach(union NETADDR**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NETADDR>*);
  void Set(unsigned int, int, union NETADDR*);
  void Set(unsigned int, union NETADDR*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, union NETADDR*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<W32Joystick> : class TSBaseArray<W32Joystick>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<W32Joystick>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<W32Joystick>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<W32Joystick>(class TSBaseArray<W32Joystick>&);
  void TSFixedArray<W32Joystick>(class TSFixedArray<W32Joystick>&);
  void TSFixedArray<W32Joystick>();
  void ~TSFixedArray<W32Joystick>();
  class TSFixedArray<W32Joystick>& operator=(class TSBaseArray<W32Joystick>&);
  class TSFixedArray<W32Joystick>& operator=(class TSFixedArray<W32Joystick>&);
  void Clear();
  void Detach(struct W32Joystick**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<W32Joystick>*);
  void Set(unsigned int, int, struct W32Joystick*);
  void Set(unsigned int, struct W32Joystick*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct W32Joystick*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SoundFileObjectCacheNode> : class TSBaseArray<SoundFileObjectCacheNode>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SoundFileObjectCacheNode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SoundFileObjectCacheNode>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SoundFileObjectCacheNode>(class TSBaseArray<SoundFileObjectCacheNode>&);
  void TSFixedArray<SoundFileObjectCacheNode>(class TSFixedArray<SoundFileObjectCacheNode>&);
  void TSFixedArray<SoundFileObjectCacheNode>();
  void TSFixedArray<SoundFileObjectCacheNode>::~TSFixedArray<SoundFileObjectCacheNode>();
  class TSFixedArray<SoundFileObjectCacheNode>& operator=(class TSBaseArray<SoundFileObjectCacheNode>&);
  class TSFixedArray<SoundFileObjectCacheNode>& operator=(class TSFixedArray<SoundFileObjectCacheNode>&);
  void Clear();
  void Detach(struct SoundFileObjectCacheNode**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SoundFileObjectCacheNode>*);
  void Set(unsigned int, int, struct SoundFileObjectCacheNode*);
  void Set(unsigned int, struct SoundFileObjectCacheNode*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SoundFileObjectCacheNode*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SoundFileDataCacheBlock> : class TSBaseArray<SoundFileDataCacheBlock>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SoundFileDataCacheBlock>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SoundFileDataCacheBlock>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SoundFileDataCacheBlock>(class TSBaseArray<SoundFileDataCacheBlock>&);
  void TSFixedArray<SoundFileDataCacheBlock>(class TSFixedArray<SoundFileDataCacheBlock>&);
  void TSFixedArray<SoundFileDataCacheBlock>();
  void TSFixedArray<SoundFileDataCacheBlock>::~TSFixedArray<SoundFileDataCacheBlock>();
  class TSFixedArray<SoundFileDataCacheBlock>& operator=(class TSBaseArray<SoundFileDataCacheBlock>&);
  class TSFixedArray<SoundFileDataCacheBlock>& operator=(class TSFixedArray<SoundFileDataCacheBlock>&);
  void Clear();
  void Detach(struct SoundFileDataCacheBlock**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SoundFileDataCacheBlock>*);
  void Set(unsigned int, int, struct SoundFileDataCacheBlock*);
  void Set(unsigned int, struct SoundFileDataCacheBlock*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SoundFileDataCacheBlock*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> > : class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >(class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >(class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >();
  void TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::~TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >();
  class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SoundFileObjectCacheNode,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> > : class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >(class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >(class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >();
  void TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::~TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >();
  class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SoundFileDataCacheBlock,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SoundFileObject> : class TSBaseArray<SoundFileObject>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SoundFileObject>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SoundFileObject>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SoundFileObject>(class TSBaseArray<SoundFileObject>&);
  void TSFixedArray<SoundFileObject>(class TSFixedArray<SoundFileObject>&);
  void TSFixedArray<SoundFileObject>();
  void TSFixedArray<SoundFileObject>::~TSFixedArray<SoundFileObject>();
  class TSFixedArray<SoundFileObject>& operator=(class TSBaseArray<SoundFileObject>&);
  class TSFixedArray<SoundFileObject>& operator=(class TSFixedArray<SoundFileObject>&);
  void Clear();
  void Detach(struct SoundFileObject**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SoundFileObject>*);
  void Set(unsigned int, int, struct SoundFileObject*);
  void Set(unsigned int, struct SoundFileObject*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct SoundFileObject*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CModelHash> : class TSBaseArray<CModelHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CModelHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CModelHash>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CModelHash>(class TSBaseArray<CModelHash>&);
  void TSFixedArray<CModelHash>(class TSFixedArray<CModelHash>&);
  void TSFixedArray<CModelHash>();
  void TSFixedArray<CModelHash>::~TSFixedArray<CModelHash>();
  class TSFixedArray<CModelHash>& operator=(class TSBaseArray<CModelHash>&);
  class TSFixedArray<CModelHash>& operator=(class TSFixedArray<CModelHash>&);
  void Clear();
  void Detach(struct CModelHash**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CModelHash>*);
  void Set(unsigned int, int, struct CModelHash*);
  void Set(unsigned int, struct CModelHash*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CModelHash*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CBoundsData> : class TSBaseArray<CBoundsData>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CBoundsData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CBoundsData>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CBoundsData>(class TSBaseArray<CBoundsData>&);
  void TSFixedArray<CBoundsData>(class TSFixedArray<CBoundsData>&);
  void TSFixedArray<CBoundsData>();
  void TSFixedArray<CBoundsData>::~TSFixedArray<CBoundsData>();
  class TSFixedArray<CBoundsData>& operator=(class TSBaseArray<CBoundsData>&);
  class TSFixedArray<CBoundsData>& operator=(class TSFixedArray<CBoundsData>&);
  void Clear();
  void Detach(struct CBoundsData**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CBoundsData>*);
  void Set(unsigned int, int, struct CBoundsData*);
  void Set(unsigned int, struct CBoundsData*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CBoundsData*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CModelHash,-572662307> > : class TSBaseArray<TSExplicitList<CModelHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CModelHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CModelHash,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CModelHash,-572662307> >(class TSBaseArray<TSExplicitList<CModelHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CModelHash,-572662307> >(class TSFixedArray<TSExplicitList<CModelHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CModelHash,-572662307> >::TSFixedArray<TSExplicitList<CModelHash,-572662307> >();
  void TSFixedArray<TSExplicitList<CModelHash,-572662307> >::~TSFixedArray<TSExplicitList<CModelHash,-572662307> >();
  class TSFixedArray<TSExplicitList<CModelHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CModelHash,-572662307> >&);
  class TSFixedArray<TSExplicitList<CModelHash,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CModelHash,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CModelHash,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CModelHash,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CModelHash,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CModelHash,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CModelHash,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CTexLayerShared> : class TSBaseArray<CTexLayerShared>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CTexLayerShared>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CTexLayerShared>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CTexLayerShared>(class TSBaseArray<CTexLayerShared>&);
  void TSFixedArray<CTexLayerShared>(class TSFixedArray<CTexLayerShared>&);
  void TSFixedArray<CTexLayerShared>();
  void ~TSFixedArray<CTexLayerShared>();
  class TSFixedArray<CTexLayerShared>& operator=(class TSBaseArray<CTexLayerShared>&);
  class TSFixedArray<CTexLayerShared>& operator=(class TSFixedArray<CTexLayerShared>&);
  void Clear();
  void Detach(struct CTexLayerShared**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CTexLayerShared>*);
  void Set(unsigned int, int, struct CTexLayerShared*);
  void Set(unsigned int, struct CTexLayerShared*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CTexLayerShared*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CHitTest> : class TSBaseArray<CHitTest>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CHitTest>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CHitTest>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CHitTest>(class TSBaseArray<CHitTest>&);
  void TSFixedArray<CHitTest>(class TSFixedArray<CHitTest>&);
  void TSFixedArray<CHitTest>::TSFixedArray<CHitTest>();
  void TSFixedArray<CHitTest>::~TSFixedArray<CHitTest>();
  class TSFixedArray<CHitTest>& operator=(class TSBaseArray<CHitTest>&);
  class TSFixedArray<CHitTest>& operator=(class TSFixedArray<CHitTest>&);
  void Clear();
  void Detach(struct CHitTest**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CHitTest>*);
  void Set(unsigned int, int, struct CHitTest*);
  void Set(unsigned int, struct CHitTest*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CHitTest*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CTransparentObject> : class TSBaseArray<CTransparentObject>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CTransparentObject>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CTransparentObject>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CTransparentObject>(class TSBaseArray<CTransparentObject>&);
  void TSFixedArray<CTransparentObject>(class TSFixedArray<CTransparentObject>&);
  void TSFixedArray<CTransparentObject>();
  void ~TSFixedArray<CTransparentObject>();
  class TSFixedArray<CTransparentObject>& operator=(class TSBaseArray<CTransparentObject>&);
  class TSFixedArray<CTransparentObject>& operator=(class TSFixedArray<CTransparentObject>&);
  void Clear();
  void Detach(struct CTransparentObject**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CTransparentObject>*);
  void Set(unsigned int, int, struct CTransparentObject*);
  void Set(unsigned int, struct CTransparentObject*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CTransparentObject*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<COpaqueLayer> : class TSBaseArray<COpaqueLayer>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<COpaqueLayer>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<COpaqueLayer>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<COpaqueLayer>(class TSBaseArray<COpaqueLayer>&);
  void TSFixedArray<COpaqueLayer>(class TSFixedArray<COpaqueLayer>&);
  void TSFixedArray<COpaqueLayer>();
  void ~TSFixedArray<COpaqueLayer>();
  class TSFixedArray<COpaqueLayer>& operator=(class TSBaseArray<COpaqueLayer>&);
  class TSFixedArray<COpaqueLayer>& operator=(class TSFixedArray<COpaqueLayer>&);
  void Clear();
  void Detach(struct COpaqueLayer**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<COpaqueLayer>*);
  void Set(unsigned int, int, struct COpaqueLayer*);
  void Set(unsigned int, struct COpaqueLayer*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct COpaqueLayer*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > > : class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >(class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);
  void TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >(class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);
  void TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >::TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >();
  void ~TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >();
  class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >& operator=(class TSBaseArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);
  class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >& operator=(class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >&);
  void Clear();
  void Detach(class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> > >*);
  void Set(unsigned int, int, class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >*);
  void Set(unsigned int, class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSList<LINKUNIQUE,TSGetLink<LINKUNIQUE> >*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> > : class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >(class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >(class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >();
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::~TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >();
  class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >& operator=(class TSBaseArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >& operator=(class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  void Clear();
  void Detach(class TSFixedArray_<NTempest::C2Vector,1229811556,266>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >*);
  void Set(unsigned int, int, class TSFixedArray_<NTempest::C2Vector,1229811556,266>*);
  void TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ class TSFixedArray_<NTempest::C2Vector,1229811556,266>* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSFixedArray_<NTempest::C2Vector,1229811556,266>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CMatrixGroup> : class TSBaseArray<CMatrixGroup>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CMatrixGroup>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CMatrixGroup>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CMatrixGroup>(class TSBaseArray<CMatrixGroup>&);
  void TSFixedArray<CMatrixGroup>(class TSFixedArray<CMatrixGroup>&);
  void TSFixedArray<CMatrixGroup>();
  void ~TSFixedArray<CMatrixGroup>();
  class TSFixedArray<CMatrixGroup>& operator=(class TSBaseArray<CMatrixGroup>&);
  class TSFixedArray<CMatrixGroup>& operator=(class TSFixedArray<CMatrixGroup>&);
  void Clear();
  void Detach(struct CMatrixGroup**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CMatrixGroup>*);
  void Set(unsigned int, int, struct CMatrixGroup*);
  void Set(unsigned int, struct CMatrixGroup*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CMatrixGroup*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGeoset> : class TSBaseArray<CGeoset>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGeoset>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGeoset>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGeoset>(class TSBaseArray<CGeoset>&);
  void TSFixedArray<CGeoset>(class TSFixedArray<CGeoset>&);
  void TSFixedArray<CGeoset>::TSFixedArray<CGeoset>();
  void ~TSFixedArray<CGeoset>();
  class TSFixedArray<CGeoset>& operator=(class TSBaseArray<CGeoset>&);
  class TSFixedArray<CGeoset>& TSFixedArray<CGeoset>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<CGeoset>& source);
  void Clear();
  void Detach(struct CGeoset**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGeoset>*);
  void Set(unsigned int, int, struct CGeoset*);
  void TSFixedArray<CGeoset>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGeoset* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGeoset*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CCustomGeoset> : class TSBaseArray<CCustomGeoset>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CCustomGeoset>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CCustomGeoset>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CCustomGeoset>(class TSBaseArray<CCustomGeoset>&);
  void TSFixedArray<CCustomGeoset>(class TSFixedArray<CCustomGeoset>&);
  void TSFixedArray<CCustomGeoset>::TSFixedArray<CCustomGeoset>();
  void TSFixedArray<CCustomGeoset>::~TSFixedArray<CCustomGeoset>();
  class TSFixedArray<CCustomGeoset>& operator=(class TSBaseArray<CCustomGeoset>&);
  class TSFixedArray<CCustomGeoset>& operator=(class TSFixedArray<CCustomGeoset>&);
  void Clear();
  void Detach(struct CCustomGeoset**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CCustomGeoset>*);
  void Set(unsigned int, int, struct CCustomGeoset*);
  void Set(unsigned int, struct CCustomGeoset*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CCustomGeoset*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<HMATERIAL__ *> : class TSBaseArray<HMATERIAL__ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<HMATERIAL__ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<HMATERIAL__ *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<HMATERIAL__ *>(class TSBaseArray<HMATERIAL__ *>&);
  void TSFixedArray<HMATERIAL__ *>(class TSFixedArray<HMATERIAL__ *>&);
  void TSFixedArray<HMATERIAL__ *>::TSFixedArray<HMATERIAL__ *>();
  void TSFixedArray<HMATERIAL__ *>::~TSFixedArray<HMATERIAL__ *>();
  class TSFixedArray<HMATERIAL__ *>& operator=(class TSBaseArray<HMATERIAL__ *>&);
  class TSFixedArray<HMATERIAL__ *>& operator=(class TSFixedArray<HMATERIAL__ *>&);
  void Clear();
  void Detach(struct HMATERIAL__***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<HMATERIAL__ *>*);
  void Set(unsigned int, int, struct HMATERIAL__**);
  void Set(unsigned int, struct HMATERIAL__**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct HMATERIAL__**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CModelTexture> : class TSBaseArray<CModelTexture>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CModelTexture>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<CModelTexture>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CModelTexture>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CModelTexture>(class TSBaseArray<CModelTexture>&);
  void TSFixedArray<CModelTexture>(class TSFixedArray<CModelTexture>&);
  void TSFixedArray<CModelTexture>::TSFixedArray<CModelTexture>();
  void TSFixedArray<CModelTexture>::~TSFixedArray<CModelTexture>();
  class TSFixedArray<CModelTexture>& operator=(class TSBaseArray<CModelTexture>&);
  class TSFixedArray<CModelTexture>& TSFixedArray<CModelTexture>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<CModelTexture>& source);
  void Clear();
  void Detach(struct CModelTexture**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CModelTexture>*);
  void Set(unsigned int, int, struct CModelTexture*);
  void Set(unsigned int, struct CModelTexture*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CModelTexture*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<unsigned long> : class TSBaseArray<unsigned long>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<unsigned long>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<unsigned long>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned long>(class TSBaseArray<unsigned long>&);
  void TSFixedArray<unsigned long>(class TSFixedArray<unsigned long>&);
  void TSFixedArray<unsigned long>::TSFixedArray<unsigned long>();
  void TSFixedArray<unsigned long>::~TSFixedArray<unsigned long>();
  class TSFixedArray<unsigned long>& operator=(class TSBaseArray<unsigned long>&);
  class TSFixedArray<unsigned long>& operator=(class TSFixedArray<unsigned long>&);
  void Clear();
  void Detach(unsigned long**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<unsigned long>*);
  void Set(unsigned int, int, unsigned long*);
  void Set(unsigned int, unsigned long*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, unsigned long*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::C34Matrix> : class TSBaseArray<NTempest::C34Matrix>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::C34Matrix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<NTempest::C34Matrix>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C34Matrix>(class TSBaseArray<NTempest::C34Matrix>&);
  void TSFixedArray<NTempest::C34Matrix>(class TSFixedArray<NTempest::C34Matrix>&);
  void TSFixedArray<NTempest::C34Matrix>::TSFixedArray<NTempest::C34Matrix>();
  void ~TSFixedArray<NTempest::C34Matrix>();
  class TSFixedArray<NTempest::C34Matrix>& operator=(class TSBaseArray<NTempest::C34Matrix>&);
  class TSFixedArray<NTempest::C34Matrix>& TSFixedArray<NTempest::C34Matrix>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C34Matrix>& source);
  void Clear();
  void Detach(class NTempest::C34Matrix**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::C34Matrix>*);
  void Set(unsigned int, int, class NTempest::C34Matrix*);
  void Set(unsigned int, class NTempest::C34Matrix*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::C34Matrix*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CParticleEmitter2 *> : class TSBaseArray<CParticleEmitter2 *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CParticleEmitter2 *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CParticleEmitter2 *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CParticleEmitter2 *>(class TSBaseArray<CParticleEmitter2 *>&);
  void TSFixedArray<CParticleEmitter2 *>(class TSFixedArray<CParticleEmitter2 *>&);
  void TSFixedArray<CParticleEmitter2 *>::TSFixedArray<CParticleEmitter2 *>();
  void TSFixedArray<CParticleEmitter2 *>::~TSFixedArray<CParticleEmitter2 *>();
  class TSFixedArray<CParticleEmitter2 *>& operator=(class TSBaseArray<CParticleEmitter2 *>&);
  class TSFixedArray<CParticleEmitter2 *>& operator=(class TSFixedArray<CParticleEmitter2 *>&);
  void Clear();
  void Detach(class CParticleEmitter2***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CParticleEmitter2 *>*);
  void Set(unsigned int, int, class CParticleEmitter2**);
  void Set(unsigned int, class CParticleEmitter2**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CParticleEmitter2**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CRibbonEmitter *> : class TSBaseArray<CRibbonEmitter *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CRibbonEmitter *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CRibbonEmitter *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CRibbonEmitter *>(class TSBaseArray<CRibbonEmitter *>&);
  void TSFixedArray<CRibbonEmitter *>(class TSFixedArray<CRibbonEmitter *>&);
  void TSFixedArray<CRibbonEmitter *>::TSFixedArray<CRibbonEmitter *>();
  void TSFixedArray<CRibbonEmitter *>::~TSFixedArray<CRibbonEmitter *>();
  class TSFixedArray<CRibbonEmitter *>& operator=(class TSBaseArray<CRibbonEmitter *>&);
  class TSFixedArray<CRibbonEmitter *>& operator=(class TSFixedArray<CRibbonEmitter *>&);
  void Clear();
  void Detach(class CRibbonEmitter***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CRibbonEmitter *>*);
  void Set(unsigned int, int, class CRibbonEmitter**);
  void Set(unsigned int, class CRibbonEmitter**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CRibbonEmitter**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<HTEXTURE__ *> : class TSBaseArray<HTEXTURE__ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<HTEXTURE__ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<HTEXTURE__ *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<HTEXTURE__ *>(class TSBaseArray<HTEXTURE__ *>&);
  void TSFixedArray<HTEXTURE__ *>(class TSFixedArray<HTEXTURE__ *>&);
  void TSFixedArray<HTEXTURE__ *>::TSFixedArray<HTEXTURE__ *>();
  void TSFixedArray<HTEXTURE__ *>::~TSFixedArray<HTEXTURE__ *>();
  class TSFixedArray<HTEXTURE__ *>& operator=(class TSBaseArray<HTEXTURE__ *>&);
  class TSFixedArray<HTEXTURE__ *>& operator=(class TSFixedArray<HTEXTURE__ *>&);
  void Clear();
  void Detach(struct HTEXTURE__***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<HTEXTURE__ *>*);
  void Set(unsigned int, int, struct HTEXTURE__**);
  void Set(unsigned int, struct HTEXTURE__**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct HTEXTURE__**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CTexLayer> : class TSBaseArray<CTexLayer>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CTexLayer>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<CTexLayer>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CTexLayer>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CTexLayer>(class TSBaseArray<CTexLayer>&);
  void TSFixedArray<CTexLayer>(class TSFixedArray<CTexLayer>&);
  void TSFixedArray<CTexLayer>::TSFixedArray<CTexLayer>();
  void ~TSFixedArray<CTexLayer>();
  class TSFixedArray<CTexLayer>& operator=(class TSBaseArray<CTexLayer>&);
  class TSFixedArray<CTexLayer>& operator=(class TSFixedArray<CTexLayer>&);
  void Clear();
  void Detach(struct CTexLayer**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CTexLayer>*);
  void Set(unsigned int, int, struct CTexLayer*);
  void Set(unsigned int, struct CTexLayer*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CTexLayer*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::C2Vector> : class TSBaseArray<NTempest::C2Vector>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::C2Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<NTempest::C2Vector>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C2Vector>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C2Vector>(class TSBaseArray<NTempest::C2Vector>&);
  void TSFixedArray<NTempest::C2Vector>::TSFixedArray<NTempest::C2Vector>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C2Vector>& source);
  void TSFixedArray<NTempest::C2Vector>::TSFixedArray<NTempest::C2Vector>();
  void TSFixedArray<NTempest::C2Vector>::~TSFixedArray<NTempest::C2Vector>();
  class TSFixedArray<NTempest::C2Vector>& operator=(class TSBaseArray<NTempest::C2Vector>&);
  class TSFixedArray<NTempest::C2Vector>& TSFixedArray<NTempest::C2Vector>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C2Vector>& source);
  void Clear();
  void Detach(class NTempest::C2Vector**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::C2Vector>*);
  void Set(unsigned int, int, class NTempest::C2Vector*);
  void TSFixedArray<NTempest::C2Vector>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C2Vector* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::C2Vector*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CPrimitive> : class TSBaseArray<CPrimitive>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CPrimitive>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CPrimitive>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CPrimitive>(class TSBaseArray<CPrimitive>&);
  void TSFixedArray<CPrimitive>::TSFixedArray<CPrimitive>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<CPrimitive>& source);
  void TSFixedArray<CPrimitive>::TSFixedArray<CPrimitive>();
  void TSFixedArray<CPrimitive>::~TSFixedArray<CPrimitive>();
  class TSFixedArray<CPrimitive>& operator=(class TSBaseArray<CPrimitive>&);
  class TSFixedArray<CPrimitive>& operator=(class TSFixedArray<CPrimitive>&);
  void Clear();
  void Detach(struct CPrimitive**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CPrimitive>*);
  void Set(unsigned int, int, struct CPrimitive*);
  void TSFixedArray<CPrimitive>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CPrimitive* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CPrimitive*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGeosetShared> : class TSBaseArray<CGeosetShared>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGeosetShared>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGeosetShared>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGeosetShared>(class TSBaseArray<CGeosetShared>&);
  void TSFixedArray<CGeosetShared>(class TSFixedArray<CGeosetShared>&);
  void TSFixedArray<CGeosetShared>::TSFixedArray<CGeosetShared>();
  void TSFixedArray<CGeosetShared>::~TSFixedArray<CGeosetShared>();
  class TSFixedArray<CGeosetShared>& operator=(class TSBaseArray<CGeosetShared>&);
  class TSFixedArray<CGeosetShared>& operator=(class TSFixedArray<CGeosetShared>&);
  void Clear();
  void Detach(struct CGeosetShared**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGeosetShared>*);
  void Set(unsigned int, int, struct CGeosetShared*);
  void Set(unsigned int, struct CGeosetShared*);
  void TSFixedArray<CGeosetShared>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void SetOptional(unsigned int, struct CGeosetShared*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CGeosetColor> : class TSBaseArray<CGeosetColor>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CGeosetColor>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CGeosetColor>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CGeosetColor>(class TSBaseArray<CGeosetColor>&);
  void TSFixedArray<CGeosetColor>(class TSFixedArray<CGeosetColor>&);
  void TSFixedArray<CGeosetColor>::TSFixedArray<CGeosetColor>();
  void TSFixedArray<CGeosetColor>::~TSFixedArray<CGeosetColor>();
  class TSFixedArray<CGeosetColor>& operator=(class TSBaseArray<CGeosetColor>&);
  class TSFixedArray<CGeosetColor>& TSFixedArray<CGeosetColor>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<CGeosetColor>& source);
  void Clear();
  void Detach(struct CGeosetColor**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CGeosetColor>*);
  void Set(unsigned int, int, struct CGeosetColor*);
  void TSFixedArray<CGeosetColor>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CGeosetColor* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CGeosetColor*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CRibbonMat> : class TSBaseArray<CRibbonMat>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CRibbonMat>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<CRibbonMat>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void ReallocData(unsigned int);
  void TSFixedArray<CRibbonMat>(class TSBaseArray<CRibbonMat>&);
  void TSFixedArray<CRibbonMat>(class TSFixedArray<CRibbonMat>&);
  void TSFixedArray<CRibbonMat>::TSFixedArray<CRibbonMat>();
  void TSFixedArray<CRibbonMat>::~TSFixedArray<CRibbonMat>();
  class TSFixedArray<CRibbonMat>& operator=(class TSBaseArray<CRibbonMat>&);
  class TSFixedArray<CRibbonMat>& operator=(class TSFixedArray<CRibbonMat>&);
  void Clear();
  void Detach(struct CRibbonMat**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CRibbonMat>*);
  void Set(unsigned int, int, struct CRibbonMat*);
  void TSFixedArray<CRibbonMat>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CRibbonMat* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CRibbonMat*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<unsigned char> : class TSBaseArray<unsigned char>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<unsigned char>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned char>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned char>(class TSBaseArray<unsigned char>&);
  void TSFixedArray<unsigned char>::TSFixedArray<unsigned char>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned char>& source);
  void TSFixedArray<unsigned char>::TSFixedArray<unsigned char>();
  void TSFixedArray<unsigned char>::~TSFixedArray<unsigned char>();
  class TSFixedArray<unsigned char>& operator=(class TSBaseArray<unsigned char>&);
  class TSFixedArray<unsigned char>& TSFixedArray<unsigned char>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned char>& source);
  void Clear();
  void Detach(unsigned char**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<unsigned char>*);
  void Set(unsigned int, int, unsigned char*);
  void TSFixedArray<unsigned char>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, unsigned char*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<unsigned short> : class TSBaseArray<unsigned short>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<unsigned short>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<unsigned short>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned short>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned short>(class TSBaseArray<unsigned short>&);
  void TSFixedArray<unsigned short>::TSFixedArray<unsigned short>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned short>& source);
  void TSFixedArray<unsigned short>::TSFixedArray<unsigned short>();
  void TSFixedArray<unsigned short>::~TSFixedArray<unsigned short>();
  class TSFixedArray<unsigned short>& operator=(class TSBaseArray<unsigned short>&);
  class TSFixedArray<unsigned short>& TSFixedArray<unsigned short>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned short>& source);
  void Clear();
  void Detach(unsigned short**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<unsigned short>*);
  void Set(unsigned int, int, unsigned short*);
  void TSFixedArray<unsigned short>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned short* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, unsigned short*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<char> : class TSBaseArray<char>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<char>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<char>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<char>(class TSBaseArray<char>&);
  void TSFixedArray<char>(class TSFixedArray<char>&);
  void TSFixedArray<char>();
  void TSFixedArray<char>::~TSFixedArray<char>();
  class TSFixedArray<char>& operator=(class TSBaseArray<char>&);
  class TSFixedArray<char>& operator=(class TSFixedArray<char>&);
  void Clear();
  void Detach(char**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<char>*);
  void Set(unsigned int, int, char*);
  void TSFixedArray<char>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, char*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLHITTESTSHAPE> : class TSBaseArray<MDLHITTESTSHAPE>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLHITTESTSHAPE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLHITTESTSHAPE>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLHITTESTSHAPE>(class TSBaseArray<MDLHITTESTSHAPE>&);
  void TSFixedArray<MDLHITTESTSHAPE>(class TSFixedArray<MDLHITTESTSHAPE>&);
  void TSFixedArray<MDLHITTESTSHAPE>();
  void TSFixedArray<MDLHITTESTSHAPE>::~TSFixedArray<MDLHITTESTSHAPE>();
  class TSFixedArray<MDLHITTESTSHAPE>& operator=(class TSBaseArray<MDLHITTESTSHAPE>&);
  class TSFixedArray<MDLHITTESTSHAPE>& operator=(class TSFixedArray<MDLHITTESTSHAPE>&);
  void Clear();
  void Detach(struct MDLHITTESTSHAPE**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLHITTESTSHAPE>*);
  void Set(unsigned int, int, struct MDLHITTESTSHAPE*);
  void Set(unsigned int, struct MDLHITTESTSHAPE*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLHITTESTSHAPE*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLGENOBJECT *> : class TSBaseArray<MDLGENOBJECT *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLGENOBJECT *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLGENOBJECT *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLGENOBJECT *>(class TSBaseArray<MDLGENOBJECT *>&);
  void TSFixedArray<MDLGENOBJECT *>(class TSFixedArray<MDLGENOBJECT *>&);
  void TSFixedArray<MDLGENOBJECT *>::TSFixedArray<MDLGENOBJECT *>();
  void TSFixedArray<MDLGENOBJECT *>::~TSFixedArray<MDLGENOBJECT *>();
  class TSFixedArray<MDLGENOBJECT *>& operator=(class TSBaseArray<MDLGENOBJECT *>&);
  class TSFixedArray<MDLGENOBJECT *>& operator=(class TSFixedArray<MDLGENOBJECT *>&);
  void Clear();
  void Detach(struct MDLGENOBJECT***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLGENOBJECT *>*);
  void Set(unsigned int, int, struct MDLGENOBJECT**);
  void Set(unsigned int, struct MDLGENOBJECT**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLGENOBJECT**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLEVENTSECTION> : class TSBaseArray<MDLEVENTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLEVENTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLEVENTSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLEVENTSECTION>(class TSBaseArray<MDLEVENTSECTION>&);
  void TSFixedArray<MDLEVENTSECTION>(class TSFixedArray<MDLEVENTSECTION>&);
  void TSFixedArray<MDLEVENTSECTION>();
  void TSFixedArray<MDLEVENTSECTION>::~TSFixedArray<MDLEVENTSECTION>();
  class TSFixedArray<MDLEVENTSECTION>& operator=(class TSBaseArray<MDLEVENTSECTION>&);
  class TSFixedArray<MDLEVENTSECTION>& operator=(class TSFixedArray<MDLEVENTSECTION>&);
  void Clear();
  void Detach(struct MDLEVENTSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLEVENTSECTION>*);
  void Set(unsigned int, int, struct MDLEVENTSECTION*);
  void Set(unsigned int, struct MDLEVENTSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLEVENTSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLEVENTKEY> : class TSBaseArray<MDLEVENTKEY>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLEVENTKEY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLEVENTKEY>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLEVENTKEY>(class TSBaseArray<MDLEVENTKEY>&);
  void TSFixedArray<MDLEVENTKEY>(class TSFixedArray<MDLEVENTKEY>&);
  void TSFixedArray<MDLEVENTKEY>();
  void TSFixedArray<MDLEVENTKEY>::~TSFixedArray<MDLEVENTKEY>();
  class TSFixedArray<MDLEVENTKEY>& operator=(class TSBaseArray<MDLEVENTKEY>&);
  class TSFixedArray<MDLEVENTKEY>& operator=(class TSFixedArray<MDLEVENTKEY>&);
  void Clear();
  void Detach(struct MDLEVENTKEY**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLEVENTKEY>*);
  void Set(unsigned int, int, struct MDLEVENTKEY*);
  void Set(unsigned int, struct MDLEVENTKEY*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLEVENTKEY*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLRIBBONEMITTER> : class TSBaseArray<MDLRIBBONEMITTER>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLRIBBONEMITTER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLRIBBONEMITTER>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLRIBBONEMITTER>(class TSBaseArray<MDLRIBBONEMITTER>&);
  void TSFixedArray<MDLRIBBONEMITTER>(class TSFixedArray<MDLRIBBONEMITTER>&);
  void TSFixedArray<MDLRIBBONEMITTER>();
  void TSFixedArray<MDLRIBBONEMITTER>::~TSFixedArray<MDLRIBBONEMITTER>();
  class TSFixedArray<MDLRIBBONEMITTER>& operator=(class TSBaseArray<MDLRIBBONEMITTER>&);
  class TSFixedArray<MDLRIBBONEMITTER>& operator=(class TSFixedArray<MDLRIBBONEMITTER>&);
  void Clear();
  void Detach(struct MDLRIBBONEMITTER**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLRIBBONEMITTER>*);
  void Set(unsigned int, int, struct MDLRIBBONEMITTER*);
  void Set(unsigned int, struct MDLRIBBONEMITTER*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLRIBBONEMITTER*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLKEYFRAME<C3Color> > : class TSBaseArray<MDLKEYFRAME<C3Color> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLKEYFRAME<C3Color> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLKEYFRAME<C3Color> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLKEYFRAME<C3Color> >(class TSBaseArray<MDLKEYFRAME<C3Color> >&);
  void TSFixedArray<MDLKEYFRAME<C3Color> >(class TSFixedArray<MDLKEYFRAME<C3Color> >&);
  void TSFixedArray<MDLKEYFRAME<C3Color> >::TSFixedArray<MDLKEYFRAME<C3Color> >();
  void TSFixedArray<MDLKEYFRAME<C3Color> >::~TSFixedArray<MDLKEYFRAME<C3Color> >();
  class TSFixedArray<MDLKEYFRAME<C3Color> >& operator=(class TSBaseArray<MDLKEYFRAME<C3Color> >&);
  class TSFixedArray<MDLKEYFRAME<C3Color> >& operator=(class TSFixedArray<MDLKEYFRAME<C3Color> >&);
  void Clear();
  void Detach(struct MDLKEYFRAME<C3Color>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLKEYFRAME<C3Color> >*);
  void Set(unsigned int, int, struct MDLKEYFRAME<C3Color>*);
  void Set(unsigned int, struct MDLKEYFRAME<C3Color>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLKEYFRAME<C3Color>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLCAMERASECTION> : class TSBaseArray<MDLCAMERASECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLCAMERASECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLCAMERASECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLCAMERASECTION>(class TSBaseArray<MDLCAMERASECTION>&);
  void TSFixedArray<MDLCAMERASECTION>(class TSFixedArray<MDLCAMERASECTION>&);
  void TSFixedArray<MDLCAMERASECTION>::TSFixedArray<MDLCAMERASECTION>();
  void TSFixedArray<MDLCAMERASECTION>::~TSFixedArray<MDLCAMERASECTION>();
  class TSFixedArray<MDLCAMERASECTION>& operator=(class TSBaseArray<MDLCAMERASECTION>&);
  class TSFixedArray<MDLCAMERASECTION>& operator=(class TSFixedArray<MDLCAMERASECTION>&);
  void Clear();
  void Detach(struct MDLCAMERASECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLCAMERASECTION>*);
  void Set(unsigned int, int, struct MDLCAMERASECTION*);
  void Set(unsigned int, struct MDLCAMERASECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLCAMERASECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLPARTICLEEMITTER2> : class TSBaseArray<MDLPARTICLEEMITTER2>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLPARTICLEEMITTER2>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLPARTICLEEMITTER2>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLPARTICLEEMITTER2>(class TSBaseArray<MDLPARTICLEEMITTER2>&);
  void TSFixedArray<MDLPARTICLEEMITTER2>(class TSFixedArray<MDLPARTICLEEMITTER2>&);
  void TSFixedArray<MDLPARTICLEEMITTER2>();
  void TSFixedArray<MDLPARTICLEEMITTER2>::~TSFixedArray<MDLPARTICLEEMITTER2>();
  class TSFixedArray<MDLPARTICLEEMITTER2>& operator=(class TSBaseArray<MDLPARTICLEEMITTER2>&);
  class TSFixedArray<MDLPARTICLEEMITTER2>& operator=(class TSFixedArray<MDLPARTICLEEMITTER2>&);
  void Clear();
  void Detach(struct MDLPARTICLEEMITTER2**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLPARTICLEEMITTER2>*);
  void Set(unsigned int, int, struct MDLPARTICLEEMITTER2*);
  void Set(unsigned int, struct MDLPARTICLEEMITTER2*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLPARTICLEEMITTER2*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLKEYFRAME<float> > : class TSBaseArray<MDLKEYFRAME<float> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLKEYFRAME<float> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLKEYFRAME<float> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLKEYFRAME<float> >(class TSBaseArray<MDLKEYFRAME<float> >&);
  void TSFixedArray<MDLKEYFRAME<float> >::TSFixedArray<MDLKEYFRAME<float> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<MDLKEYFRAME<float> >& source);
  void TSFixedArray<MDLKEYFRAME<float> >::TSFixedArray<MDLKEYFRAME<float> >();
  void TSFixedArray<MDLKEYFRAME<float> >::~TSFixedArray<MDLKEYFRAME<float> >();
  class TSFixedArray<MDLKEYFRAME<float> >& operator=(class TSBaseArray<MDLKEYFRAME<float> >&);
  class TSFixedArray<MDLKEYFRAME<float> >& operator=(class TSFixedArray<MDLKEYFRAME<float> >&);
  void Clear();
  void Detach(struct MDLKEYFRAME<float>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLKEYFRAME<float> >*);
  void Set(unsigned int, int, struct MDLKEYFRAME<float>*);
  void Set(unsigned int, struct MDLKEYFRAME<float>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLKEYFRAME<float>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLPARTICLEEMITTER> : class TSBaseArray<MDLPARTICLEEMITTER>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLPARTICLEEMITTER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLPARTICLEEMITTER>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLPARTICLEEMITTER>(class TSBaseArray<MDLPARTICLEEMITTER>&);
  void TSFixedArray<MDLPARTICLEEMITTER>(class TSFixedArray<MDLPARTICLEEMITTER>&);
  void TSFixedArray<MDLPARTICLEEMITTER>::TSFixedArray<MDLPARTICLEEMITTER>();
  void TSFixedArray<MDLPARTICLEEMITTER>::~TSFixedArray<MDLPARTICLEEMITTER>();
  class TSFixedArray<MDLPARTICLEEMITTER>& operator=(class TSBaseArray<MDLPARTICLEEMITTER>&);
  class TSFixedArray<MDLPARTICLEEMITTER>& operator=(class TSFixedArray<MDLPARTICLEEMITTER>&);
  void Clear();
  void Detach(struct MDLPARTICLEEMITTER**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLPARTICLEEMITTER>*);
  void Set(unsigned int, int, struct MDLPARTICLEEMITTER*);
  void Set(unsigned int, struct MDLPARTICLEEMITTER*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLPARTICLEEMITTER*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> > : class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >(class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >&);
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >::TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >& source);
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >::TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >();
  void TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >::~TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >();
  class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >& operator=(class TSBaseArray<MDLKEYFRAME<NTempest::C3Vector> >&);
  class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >& operator=(class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >&);
  void Clear();
  void Detach(struct MDLKEYFRAME<NTempest::C3Vector>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >*);
  void Set(unsigned int, int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  void Set(unsigned int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLGENOBJECT> : class TSBaseArray<MDLGENOBJECT>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLGENOBJECT>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLGENOBJECT>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLGENOBJECT>(class TSBaseArray<MDLGENOBJECT>&);
  void TSFixedArray<MDLGENOBJECT>(class TSFixedArray<MDLGENOBJECT>&);
  void TSFixedArray<MDLGENOBJECT>::TSFixedArray<MDLGENOBJECT>();
  void TSFixedArray<MDLGENOBJECT>::~TSFixedArray<MDLGENOBJECT>();
  class TSFixedArray<MDLGENOBJECT>& operator=(class TSBaseArray<MDLGENOBJECT>&);
  class TSFixedArray<MDLGENOBJECT>& operator=(class TSFixedArray<MDLGENOBJECT>&);
  void Clear();
  void Detach(struct MDLGENOBJECT**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLGENOBJECT>*);
  void Set(unsigned int, int, struct MDLGENOBJECT*);
  void Set(unsigned int, struct MDLGENOBJECT*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLGENOBJECT*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLLIGHTSECTION> : class TSBaseArray<MDLLIGHTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLLIGHTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLLIGHTSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLLIGHTSECTION>(class TSBaseArray<MDLLIGHTSECTION>&);
  void TSFixedArray<MDLLIGHTSECTION>(class TSFixedArray<MDLLIGHTSECTION>&);
  void TSFixedArray<MDLLIGHTSECTION>::TSFixedArray<MDLLIGHTSECTION>();
  void TSFixedArray<MDLLIGHTSECTION>::~TSFixedArray<MDLLIGHTSECTION>();
  class TSFixedArray<MDLLIGHTSECTION>& operator=(class TSBaseArray<MDLLIGHTSECTION>&);
  class TSFixedArray<MDLLIGHTSECTION>& operator=(class TSFixedArray<MDLLIGHTSECTION>&);
  void Clear();
  void Detach(struct MDLLIGHTSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLLIGHTSECTION>*);
  void Set(unsigned int, int, struct MDLLIGHTSECTION*);
  void Set(unsigned int, struct MDLLIGHTSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLLIGHTSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLBONESECTION> : class TSBaseArray<MDLBONESECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLBONESECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLBONESECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLBONESECTION>(class TSBaseArray<MDLBONESECTION>&);
  void TSFixedArray<MDLBONESECTION>(class TSFixedArray<MDLBONESECTION>&);
  void TSFixedArray<MDLBONESECTION>::TSFixedArray<MDLBONESECTION>();
  void TSFixedArray<MDLBONESECTION>::~TSFixedArray<MDLBONESECTION>();
  class TSFixedArray<MDLBONESECTION>& operator=(class TSBaseArray<MDLBONESECTION>&);
  class TSFixedArray<MDLBONESECTION>& operator=(class TSFixedArray<MDLBONESECTION>&);
  void Clear();
  void Detach(struct MDLBONESECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLBONESECTION>*);
  void Set(unsigned int, int, struct MDLBONESECTION*);
  void Set(unsigned int, struct MDLBONESECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLBONESECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CMdlBounds> : class TSBaseArray<CMdlBounds>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CMdlBounds>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CMdlBounds>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CMdlBounds>(class TSBaseArray<CMdlBounds>&);
  void TSFixedArray<CMdlBounds>(class TSFixedArray<CMdlBounds>&);
  void TSFixedArray<CMdlBounds>();
  void TSFixedArray<CMdlBounds>::~TSFixedArray<CMdlBounds>();
  class TSFixedArray<CMdlBounds>& operator=(class TSBaseArray<CMdlBounds>&);
  class TSFixedArray<CMdlBounds>& operator=(class TSFixedArray<CMdlBounds>&);
  void Clear();
  void Detach(struct CMdlBounds**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CMdlBounds>*);
  void Set(unsigned int, int, struct CMdlBounds*);
  void Set(unsigned int, struct CMdlBounds*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CMdlBounds*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSGrowableArray<NTempest::C2Vector> > : class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSGrowableArray<NTempest::C2Vector> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSGrowableArray<NTempest::C2Vector> >(class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >&);
  void TSFixedArray<TSGrowableArray<NTempest::C2Vector> >(class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >&);
  void TSFixedArray<TSGrowableArray<NTempest::C2Vector> >();
  void TSFixedArray<TSGrowableArray<NTempest::C2Vector> >::~TSFixedArray<TSGrowableArray<NTempest::C2Vector> >();
  class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >& operator=(class TSBaseArray<TSGrowableArray<NTempest::C2Vector> >&);
  class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >& operator=(class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >&);
  void Clear();
  void Detach(class TSGrowableArray<NTempest::C2Vector>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >*);
  void Set(unsigned int, int, class TSGrowableArray<NTempest::C2Vector>*);
  void Set(unsigned int, class TSGrowableArray<NTempest::C2Vector>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSGrowableArray<NTempest::C2Vector>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLGEOSETSECTION> : class TSBaseArray<MDLGEOSETSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLGEOSETSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLGEOSETSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLGEOSETSECTION>(class TSBaseArray<MDLGEOSETSECTION>&);
  void TSFixedArray<MDLGEOSETSECTION>(class TSFixedArray<MDLGEOSETSECTION>&);
  void TSFixedArray<MDLGEOSETSECTION>::TSFixedArray<MDLGEOSETSECTION>();
  void TSFixedArray<MDLGEOSETSECTION>::~TSFixedArray<MDLGEOSETSECTION>();
  class TSFixedArray<MDLGEOSETSECTION>& operator=(class TSBaseArray<MDLGEOSETSECTION>&);
  class TSFixedArray<MDLGEOSETSECTION>& operator=(class TSFixedArray<MDLGEOSETSECTION>&);
  void Clear();
  void Detach(struct MDLGEOSETSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLGEOSETSECTION>*);
  void Set(unsigned int, int, struct MDLGEOSETSECTION*);
  void Set(unsigned int, struct MDLGEOSETSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLGEOSETSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLGEOSETANIMSECTION> : class TSBaseArray<MDLGEOSETANIMSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLGEOSETANIMSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLGEOSETANIMSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLGEOSETANIMSECTION>(class TSBaseArray<MDLGEOSETANIMSECTION>&);
  void TSFixedArray<MDLGEOSETANIMSECTION>(class TSFixedArray<MDLGEOSETANIMSECTION>&);
  void TSFixedArray<MDLGEOSETANIMSECTION>::TSFixedArray<MDLGEOSETANIMSECTION>();
  void TSFixedArray<MDLGEOSETANIMSECTION>::~TSFixedArray<MDLGEOSETANIMSECTION>();
  class TSFixedArray<MDLGEOSETANIMSECTION>& operator=(class TSBaseArray<MDLGEOSETANIMSECTION>&);
  class TSFixedArray<MDLGEOSETANIMSECTION>& operator=(class TSFixedArray<MDLGEOSETANIMSECTION>&);
  void Clear();
  void Detach(struct MDLGEOSETANIMSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLGEOSETANIMSECTION>*);
  void Set(unsigned int, int, struct MDLGEOSETANIMSECTION*);
  void Set(unsigned int, struct MDLGEOSETANIMSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLGEOSETANIMSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLINTKEY> : class TSBaseArray<MDLINTKEY>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLINTKEY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLINTKEY>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLINTKEY>(class TSBaseArray<MDLINTKEY>&);
  void TSFixedArray<MDLINTKEY>::TSFixedArray<MDLINTKEY>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<MDLINTKEY>& source);
  void TSFixedArray<MDLINTKEY>::TSFixedArray<MDLINTKEY>();
  void TSFixedArray<MDLINTKEY>::~TSFixedArray<MDLINTKEY>();
  class TSFixedArray<MDLINTKEY>& operator=(class TSBaseArray<MDLINTKEY>&);
  class TSFixedArray<MDLINTKEY>& operator=(class TSFixedArray<MDLINTKEY>&);
  void Clear();
  void Detach(struct MDLINTKEY**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLINTKEY>*);
  void Set(unsigned int, int, struct MDLINTKEY*);
  void Set(unsigned int, struct MDLINTKEY*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLINTKEY*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLMATERIALSECTION> : class TSBaseArray<MDLMATERIALSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLMATERIALSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLMATERIALSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLMATERIALSECTION>(class TSBaseArray<MDLMATERIALSECTION>&);
  void TSFixedArray<MDLMATERIALSECTION>(class TSFixedArray<MDLMATERIALSECTION>&);
  void TSFixedArray<MDLMATERIALSECTION>::TSFixedArray<MDLMATERIALSECTION>();
  void TSFixedArray<MDLMATERIALSECTION>::~TSFixedArray<MDLMATERIALSECTION>();
  class TSFixedArray<MDLMATERIALSECTION>& operator=(class TSBaseArray<MDLMATERIALSECTION>&);
  class TSFixedArray<MDLMATERIALSECTION>& operator=(class TSFixedArray<MDLMATERIALSECTION>&);
  void Clear();
  void Detach(struct MDLMATERIALSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLMATERIALSECTION>*);
  void Set(unsigned int, int, struct MDLMATERIALSECTION*);
  void Set(unsigned int, struct MDLMATERIALSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLMATERIALSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLTEXANIMSECTION> : class TSBaseArray<MDLTEXANIMSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLTEXANIMSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLTEXANIMSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLTEXANIMSECTION>(class TSBaseArray<MDLTEXANIMSECTION>&);
  void TSFixedArray<MDLTEXANIMSECTION>(class TSFixedArray<MDLTEXANIMSECTION>&);
  void TSFixedArray<MDLTEXANIMSECTION>::TSFixedArray<MDLTEXANIMSECTION>();
  void TSFixedArray<MDLTEXANIMSECTION>::~TSFixedArray<MDLTEXANIMSECTION>();
  class TSFixedArray<MDLTEXANIMSECTION>& operator=(class TSBaseArray<MDLTEXANIMSECTION>&);
  class TSFixedArray<MDLTEXANIMSECTION>& operator=(class TSFixedArray<MDLTEXANIMSECTION>&);
  void Clear();
  void Detach(struct MDLTEXANIMSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLTEXANIMSECTION>*);
  void Set(unsigned int, int, struct MDLTEXANIMSECTION*);
  void Set(unsigned int, struct MDLTEXANIMSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLTEXANIMSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> > : class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void ReallocData(unsigned int);
  void TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >(class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);
  void TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >::TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >& source);
  void TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >();
  void TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >::~TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >();
  class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >& operator=(class TSBaseArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);
  class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >& operator=(class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);
  void Clear();
  void Detach(struct MDLKEYFRAME<NTempest::C4Quaternion>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >*);
  void Set(unsigned int, int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  void Set(unsigned int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLTEXTURESECTION> : class TSBaseArray<MDLTEXTURESECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLTEXTURESECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLTEXTURESECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLTEXTURESECTION>(class TSBaseArray<MDLTEXTURESECTION>&);
  void TSFixedArray<MDLTEXTURESECTION>(class TSFixedArray<MDLTEXTURESECTION>&);
  void TSFixedArray<MDLTEXTURESECTION>::TSFixedArray<MDLTEXTURESECTION>();
  void TSFixedArray<MDLTEXTURESECTION>::~TSFixedArray<MDLTEXTURESECTION>();
  class TSFixedArray<MDLTEXTURESECTION>& operator=(class TSBaseArray<MDLTEXTURESECTION>&);
  class TSFixedArray<MDLTEXTURESECTION>& operator=(class TSFixedArray<MDLTEXTURESECTION>&);
  void Clear();
  void Detach(struct MDLTEXTURESECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLTEXTURESECTION>*);
  void Set(unsigned int, int, struct MDLTEXTURESECTION*);
  void Set(unsigned int, struct MDLTEXTURESECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLTEXTURESECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLTEXLAYER> : class TSBaseArray<MDLTEXLAYER>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLTEXLAYER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<MDLTEXLAYER>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLTEXLAYER>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLTEXLAYER>(class TSBaseArray<MDLTEXLAYER>&);
  void TSFixedArray<MDLTEXLAYER>(class TSFixedArray<MDLTEXLAYER>&);
  void TSFixedArray<MDLTEXLAYER>::TSFixedArray<MDLTEXLAYER>();
  void TSFixedArray<MDLTEXLAYER>::~TSFixedArray<MDLTEXLAYER>();
  class TSFixedArray<MDLTEXLAYER>& operator=(class TSBaseArray<MDLTEXLAYER>&);
  class TSFixedArray<MDLTEXLAYER>& operator=(class TSFixedArray<MDLTEXLAYER>&);
  void Clear();
  void Detach(struct MDLTEXLAYER**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLTEXLAYER>*);
  void Set(unsigned int, int, struct MDLTEXLAYER*);
  void Set(unsigned int, struct MDLTEXLAYER*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLTEXLAYER*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLSEQUENCESSECTION> : class TSBaseArray<MDLSEQUENCESSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLSEQUENCESSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLSEQUENCESSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLSEQUENCESSECTION>(class TSBaseArray<MDLSEQUENCESSECTION>&);
  void TSFixedArray<MDLSEQUENCESSECTION>(class TSFixedArray<MDLSEQUENCESSECTION>&);
  void TSFixedArray<MDLSEQUENCESSECTION>::TSFixedArray<MDLSEQUENCESSECTION>();
  void TSFixedArray<MDLSEQUENCESSECTION>::~TSFixedArray<MDLSEQUENCESSECTION>();
  class TSFixedArray<MDLSEQUENCESSECTION>& operator=(class TSBaseArray<MDLSEQUENCESSECTION>&);
  class TSFixedArray<MDLSEQUENCESSECTION>& operator=(class TSFixedArray<MDLSEQUENCESSECTION>&);
  void Clear();
  void Detach(struct MDLSEQUENCESSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLSEQUENCESSECTION>*);
  void Set(unsigned int, int, struct MDLSEQUENCESSECTION*);
  void Set(unsigned int, struct MDLSEQUENCESSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLSEQUENCESSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MDLGLOBALSEQSECTION> : class TSBaseArray<MDLGLOBALSEQSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MDLGLOBALSEQSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MDLGLOBALSEQSECTION>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MDLGLOBALSEQSECTION>(class TSBaseArray<MDLGLOBALSEQSECTION>&);
  void TSFixedArray<MDLGLOBALSEQSECTION>(class TSFixedArray<MDLGLOBALSEQSECTION>&);
  void TSFixedArray<MDLGLOBALSEQSECTION>::TSFixedArray<MDLGLOBALSEQSECTION>();
  void TSFixedArray<MDLGLOBALSEQSECTION>::~TSFixedArray<MDLGLOBALSEQSECTION>();
  class TSFixedArray<MDLGLOBALSEQSECTION>& operator=(class TSBaseArray<MDLGLOBALSEQSECTION>&);
  class TSFixedArray<MDLGLOBALSEQSECTION>& operator=(class TSFixedArray<MDLGLOBALSEQSECTION>&);
  void Clear();
  void Detach(struct MDLGLOBALSEQSECTION**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MDLGLOBALSEQSECTION>*);
  void Set(unsigned int, int, struct MDLGLOBALSEQSECTION*);
  void Set(unsigned int, struct MDLGLOBALSEQSECTION*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MDLGLOBALSEQSECTION*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<FRAMEPRIORITY *> : class TSBaseArray<FRAMEPRIORITY *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<FRAMEPRIORITY *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<FRAMEPRIORITY *>(class TSBaseArray<FRAMEPRIORITY *>&);
  void TSFixedArray<FRAMEPRIORITY *>(class TSFixedArray<FRAMEPRIORITY *>&);
  void TSFixedArray<FRAMEPRIORITY *>();
  void TSFixedArray<FRAMEPRIORITY *>::~TSFixedArray<FRAMEPRIORITY *>();
  class TSFixedArray<FRAMEPRIORITY *>& operator=(class TSBaseArray<FRAMEPRIORITY *>&);
  class TSFixedArray<FRAMEPRIORITY *>& operator=(class TSFixedArray<FRAMEPRIORITY *>&);
  void Clear();
  void Detach(class FRAMEPRIORITY***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<FRAMEPRIORITY *>*);
  void Set(unsigned int, int, class FRAMEPRIORITY**);
  void Set(unsigned int, class FRAMEPRIORITY**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class FRAMEPRIORITY**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CFrameStrataNode *> : class TSBaseArray<CFrameStrataNode *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CFrameStrataNode *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CFrameStrataNode *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CFrameStrataNode *>(class TSBaseArray<CFrameStrataNode *>&);
  void TSFixedArray<CFrameStrataNode *>(class TSFixedArray<CFrameStrataNode *>&);
  void TSFixedArray<CFrameStrataNode *>();
  void ~TSFixedArray<CFrameStrataNode *>();
  class TSFixedArray<CFrameStrataNode *>& operator=(class TSBaseArray<CFrameStrataNode *>&);
  class TSFixedArray<CFrameStrataNode *>& operator=(class TSFixedArray<CFrameStrataNode *>&);
  void Clear();
  void Detach(class CFrameStrataNode***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CFrameStrataNode *>*);
  void Set(unsigned int, int, class CFrameStrataNode**);
  void Set(unsigned int, class CFrameStrataNode**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CFrameStrataNode**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> > : class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >(class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::~TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> > : class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >(class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::~TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> > : class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >(class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::~TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> > : class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >(class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >(class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >();
  void TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::~TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >();
  class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >& operator=(class TSBaseArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >& operator=(class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  void Set(unsigned int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CFramePoint *> : class TSBaseArray<CFramePoint *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CFramePoint *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CFramePoint *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CFramePoint *>(class TSBaseArray<CFramePoint *>&);
  void TSFixedArray<CFramePoint *>(class TSFixedArray<CFramePoint *>&);
  void TSFixedArray<CFramePoint *>();
  void ~TSFixedArray<CFramePoint *>();
  class TSFixedArray<CFramePoint *>& operator=(class TSBaseArray<CFramePoint *>&);
  class TSFixedArray<CFramePoint *>& operator=(class TSFixedArray<CFramePoint *>&);
  void Clear();
  void Detach(class CFramePoint***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CFramePoint *>*);
  void Set(unsigned int, int, class CFramePoint**);
  void Set(unsigned int, class CFramePoint**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CFramePoint**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSimpleBatchedTexture> : class TSBaseArray<CSimpleBatchedTexture>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSimpleBatchedTexture>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSimpleBatchedTexture>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSimpleBatchedTexture>(class TSBaseArray<CSimpleBatchedTexture>&);
  void TSFixedArray<CSimpleBatchedTexture>(class TSFixedArray<CSimpleBatchedTexture>&);
  void TSFixedArray<CSimpleBatchedTexture>();
  void ~TSFixedArray<CSimpleBatchedTexture>();
  class TSFixedArray<CSimpleBatchedTexture>& operator=(class TSBaseArray<CSimpleBatchedTexture>&);
  class TSFixedArray<CSimpleBatchedTexture>& operator=(class TSFixedArray<CSimpleBatchedTexture>&);
  void Clear();
  void Detach(struct CSimpleBatchedTexture**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSimpleBatchedTexture>*);
  void Set(unsigned int, int, struct CSimpleBatchedTexture*);
  void Set(unsigned int, struct CSimpleBatchedTexture*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CSimpleBatchedTexture*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<char *> : class TSBaseArray<char *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<char *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<char *>(class TSBaseArray<char *>&);
  void TSFixedArray<char *>(class TSFixedArray<char *>&);
  void TSFixedArray<char *>();
  void TSFixedArray<char *>::~TSFixedArray<char *>();
  class TSFixedArray<char *>& operator=(class TSBaseArray<char *>&);
  class TSFixedArray<char *>& operator=(class TSFixedArray<char *>&);
  void Clear();
  void Detach(char***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<char *>*);
  void Set(unsigned int, int, char**);
  void Set(unsigned int, char**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, char**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<OsIMECandidate> : class TSBaseArray<OsIMECandidate>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<OsIMECandidate>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<OsIMECandidate>(class TSBaseArray<OsIMECandidate>&);
  void TSFixedArray<OsIMECandidate>(class TSFixedArray<OsIMECandidate>&);
  void TSFixedArray<OsIMECandidate>();
  void ~TSFixedArray<OsIMECandidate>();
  class TSFixedArray<OsIMECandidate>& operator=(class TSBaseArray<OsIMECandidate>&);
  class TSFixedArray<OsIMECandidate>& operator=(class TSFixedArray<OsIMECandidate>&);
  void Clear();
  void Detach(struct OsIMECandidate**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<OsIMECandidate>*);
  void Set(unsigned int, int, struct OsIMECandidate*);
  void Set(unsigned int, struct OsIMECandidate*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct OsIMECandidate*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<MessageData> : class TSBaseArray<MessageData>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<MessageData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<MessageData>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<MessageData>(class TSBaseArray<MessageData>&);
  void TSFixedArray<MessageData>(class TSFixedArray<MessageData>&);
  void TSFixedArray<MessageData>();
  void ~TSFixedArray<MessageData>();
  class TSFixedArray<MessageData>& operator=(class TSBaseArray<MessageData>&);
  class TSFixedArray<MessageData>& operator=(class TSFixedArray<MessageData>&);
  void Clear();
  void Detach(struct MessageData**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<MessageData>*);
  void Set(unsigned int, int, struct MessageData*);
  void Set(unsigned int, struct MessageData*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct MessageData*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSimpleMessageFrameLine> : class TSBaseArray<CSimpleMessageFrameLine>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSimpleMessageFrameLine>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSimpleMessageFrameLine>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSimpleMessageFrameLine>(class TSBaseArray<CSimpleMessageFrameLine>&);
  void TSFixedArray<CSimpleMessageFrameLine>(class TSFixedArray<CSimpleMessageFrameLine>&);
  void TSFixedArray<CSimpleMessageFrameLine>();
  void TSFixedArray<CSimpleMessageFrameLine>::~TSFixedArray<CSimpleMessageFrameLine>();
  class TSFixedArray<CSimpleMessageFrameLine>& operator=(class TSBaseArray<CSimpleMessageFrameLine>&);
  class TSFixedArray<CSimpleMessageFrameLine>& operator=(class TSFixedArray<CSimpleMessageFrameLine>&);
  void Clear();
  void Detach(class CSimpleMessageFrameLine**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSimpleMessageFrameLine>*);
  void Set(unsigned int, int, class CSimpleMessageFrameLine*);
  void Set(unsigned int, class CSimpleMessageFrameLine*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CSimpleMessageFrameLine*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSimpleMessageScrollFrameLine> : class TSBaseArray<CSimpleMessageScrollFrameLine>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSimpleMessageScrollFrameLine>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSimpleMessageScrollFrameLine>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSimpleMessageScrollFrameLine>(class TSBaseArray<CSimpleMessageScrollFrameLine>&);
  void TSFixedArray<CSimpleMessageScrollFrameLine>(class TSFixedArray<CSimpleMessageScrollFrameLine>&);
  void TSFixedArray<CSimpleMessageScrollFrameLine>();
  void TSFixedArray<CSimpleMessageScrollFrameLine>::~TSFixedArray<CSimpleMessageScrollFrameLine>();
  class TSFixedArray<CSimpleMessageScrollFrameLine>& operator=(class TSBaseArray<CSimpleMessageScrollFrameLine>&);
  class TSFixedArray<CSimpleMessageScrollFrameLine>& operator=(class TSFixedArray<CSimpleMessageScrollFrameLine>&);
  void Clear();
  void Detach(class CSimpleMessageScrollFrameLine**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSimpleMessageScrollFrameLine>*);
  void Set(unsigned int, int, class CSimpleMessageScrollFrameLine*);
  void Set(unsigned int, class CSimpleMessageScrollFrameLine*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CSimpleMessageScrollFrameLine*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSimpleMessageScrollFrameDisplayNode> : class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSimpleMessageScrollFrameDisplayNode>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSimpleMessageScrollFrameDisplayNode>(class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>&);
  void TSFixedArray<CSimpleMessageScrollFrameDisplayNode>(class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>&);
  void TSFixedArray<CSimpleMessageScrollFrameDisplayNode>();
  void TSFixedArray<CSimpleMessageScrollFrameDisplayNode>::~TSFixedArray<CSimpleMessageScrollFrameDisplayNode>();
  class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>& operator=(class TSBaseArray<CSimpleMessageScrollFrameDisplayNode>&);
  class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>& operator=(class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>&);
  void Clear();
  void Detach(class CSimpleMessageScrollFrameDisplayNode**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>*);
  void Set(unsigned int, int, class CSimpleMessageScrollFrameDisplayNode*);
  void Set(unsigned int, class CSimpleMessageScrollFrameDisplayNode*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class CSimpleMessageScrollFrameDisplayNode*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<EvtTimer *> : class TSBaseArray<EvtTimer *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<EvtTimer *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<EvtTimer *>(class TSBaseArray<EvtTimer *>&);
  void TSFixedArray<EvtTimer *>(class TSFixedArray<EvtTimer *>&);
  void TSFixedArray<EvtTimer *>();
  void TSFixedArray<EvtTimer *>::~TSFixedArray<EvtTimer *>();
  class TSFixedArray<EvtTimer *>& operator=(class TSBaseArray<EvtTimer *>&);
  class TSFixedArray<EvtTimer *>& operator=(class TSFixedArray<EvtTimer *>&);
  void Clear();
  void Detach(struct EvtTimer***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<EvtTimer *>*);
  void Set(unsigned int, int, struct EvtTimer**);
  void Set(unsigned int, struct EvtTimer**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct EvtTimer**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<EvtContext *> : class TSBaseArray<EvtContext *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<EvtContext *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<EvtContext *>(class TSBaseArray<EvtContext *>&);
  void TSFixedArray<EvtContext *>(class TSFixedArray<EvtContext *>&);
  void TSFixedArray<EvtContext *>();
  void ~TSFixedArray<EvtContext *>();
  class TSFixedArray<EvtContext *>& operator=(class TSBaseArray<EvtContext *>&);
  class TSFixedArray<EvtContext *>& operator=(class TSFixedArray<EvtContext *>&);
  void Clear();
  void Detach(struct EvtContext***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<EvtContext *>*);
  void Set(unsigned int, int, struct EvtContext**);
  void Set(unsigned int, struct EvtContext**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct EvtContext**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<SThread *> : class TSBaseArray<SThread *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<SThread *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<SThread *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<SThread *>(class TSBaseArray<SThread *>&);
  void TSFixedArray<SThread *>(class TSFixedArray<SThread *>&);
  void TSFixedArray<SThread *>::TSFixedArray<SThread *>();
  void TSFixedArray<SThread *>::~TSFixedArray<SThread *>();
  class TSFixedArray<SThread *>& operator=(class TSBaseArray<SThread *>&);
  class TSFixedArray<SThread *>& operator=(class TSFixedArray<SThread *>&);
  void Clear();
  void Detach(class SThread***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<SThread *>*);
  void Set(unsigned int, int, class SThread**);
  void Set(unsigned int, class SThread**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class SThread**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<EventReg,-572662307> > : class TSBaseArray<TSExplicitList<EventReg,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<EventReg,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<EventReg,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<EventReg,-572662307> >(class TSBaseArray<TSExplicitList<EventReg,-572662307> >&);
  void TSFixedArray<TSExplicitList<EventReg,-572662307> >(class TSFixedArray<TSExplicitList<EventReg,-572662307> >&);
  void TSFixedArray<TSExplicitList<EventReg,-572662307> >();
  void TSFixedArray<TSExplicitList<EventReg,-572662307> >::~TSFixedArray<TSExplicitList<EventReg,-572662307> >();
  class TSFixedArray<TSExplicitList<EventReg,-572662307> >& operator=(class TSBaseArray<TSExplicitList<EventReg,-572662307> >&);
  class TSFixedArray<TSExplicitList<EventReg,-572662307> >& operator=(class TSFixedArray<TSExplicitList<EventReg,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<EventReg,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<EventReg,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<EventReg,-572662307>*);
  void Set(unsigned int, class TSExplicitList<EventReg,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<EventReg,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> > : class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >(class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >(class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >();
  void TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >::~TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >();
  class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<PrefetchNode,-572662307> >&);
  class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >& operator=(class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<PrefetchNode,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<PrefetchNode,-572662307>*);
  void Set(unsigned int, class TSExplicitList<PrefetchNode,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<PrefetchNode,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<UncachableNode,-572662307> > : class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<UncachableNode,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<UncachableNode,-572662307> >(class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<UncachableNode,-572662307> >(class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >&);
  void TSFixedArray<TSExplicitList<UncachableNode,-572662307> >();
  void TSFixedArray<TSExplicitList<UncachableNode,-572662307> >::~TSFixedArray<TSExplicitList<UncachableNode,-572662307> >();
  class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >& operator=(class TSBaseArray<TSExplicitList<UncachableNode,-572662307> >&);
  class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >& operator=(class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<UncachableNode,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<UncachableNode,-572662307>*);
  void Set(unsigned int, class TSExplicitList<UncachableNode,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<UncachableNode,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CStringRep,-572662307> > : class TSBaseArray<TSExplicitList<CStringRep,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CStringRep,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CStringRep,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CStringRep,-572662307> >(class TSBaseArray<TSExplicitList<CStringRep,-572662307> >&);
  void TSFixedArray<TSExplicitList<CStringRep,-572662307> >(class TSFixedArray<TSExplicitList<CStringRep,-572662307> >&);
  void TSFixedArray<TSExplicitList<CStringRep,-572662307> >();
  void TSFixedArray<TSExplicitList<CStringRep,-572662307> >::~TSFixedArray<TSExplicitList<CStringRep,-572662307> >();
  class TSFixedArray<TSExplicitList<CStringRep,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CStringRep,-572662307> >&);
  class TSFixedArray<TSExplicitList<CStringRep,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CStringRep,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CStringRep,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CStringRep,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CStringRep,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CStringRep,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CStringRep,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<enum ACTIVITY> : class TSBaseArray<enum ACTIVITY>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<enum ACTIVITY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<enum ACTIVITY>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<enum ACTIVITY>(class TSBaseArray<enum ACTIVITY>&);
  void TSFixedArray<enum ACTIVITY>(class TSFixedArray<enum ACTIVITY>&);
  void TSFixedArray<enum ACTIVITY>();
  void ~TSFixedArray<enum ACTIVITY>();
  class TSFixedArray<enum ACTIVITY>& operator=(class TSBaseArray<enum ACTIVITY>&);
  class TSFixedArray<enum ACTIVITY>& operator=(class TSFixedArray<enum ACTIVITY>&);
  void Clear();
  void Detach(enum ACTIVITY**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<enum ACTIVITY>*);
  void Set(unsigned int, int, enum ACTIVITY*);
  void Set(unsigned int, enum ACTIVITY*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, enum ACTIVITY*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> > : class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >(class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >(class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >();
  void TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >::~TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >();
  class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >& operator=(class TSBaseArray<TSExplicitList<ANIMHASH,-572662307> >&);
  class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >& operator=(class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<ANIMHASH,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<ANIMHASH,-572662307>*);
  void Set(unsigned int, class TSExplicitList<ANIMHASH,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<ANIMHASH,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<unsigned int> : class TSBaseArray<unsigned int>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<unsigned int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<unsigned int>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned int>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<unsigned int>(class TSBaseArray<unsigned int>&);
  void TSFixedArray<unsigned int>::TSFixedArray<unsigned int>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned int>& source);
  void TSFixedArray<unsigned int>::TSFixedArray<unsigned int>();
  void TSFixedArray<unsigned int>::~TSFixedArray<unsigned int>();
  class TSFixedArray<unsigned int>& operator=(class TSBaseArray<unsigned int>&);
  class TSFixedArray<unsigned int>& TSFixedArray<unsigned int>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<unsigned int>& source);
  void Clear();
  void Detach(unsigned int**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<unsigned int>*);
  void Set(unsigned int, int, unsigned int*);
  void TSFixedArray<unsigned int>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, unsigned int*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> > : class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >(class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >(class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >();
  void TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >::~TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >();
  class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >& operator=(class TSBaseArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >& operator=(class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void Clear();
  void Detach(class TSExplicitList<CAnimNameHash,-572662307>**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >*);
  void Set(unsigned int, int, class TSExplicitList<CAnimNameHash,-572662307>*);
  void Set(unsigned int, class TSExplicitList<CAnimNameHash,-572662307>*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class TSExplicitList<CAnimNameHash,-572662307>*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<NTempest::C3Vector> : class TSBaseArray<NTempest::C3Vector>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSFixedArray<NTempest::C3Vector>::ReallocAndClearData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C3Vector>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<NTempest::C3Vector>(class TSBaseArray<NTempest::C3Vector>&);
  void TSFixedArray<NTempest::C3Vector>::TSFixedArray<NTempest::C3Vector>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C3Vector>& source);
  void TSFixedArray<NTempest::C3Vector>::TSFixedArray<NTempest::C3Vector>();
  void TSFixedArray<NTempest::C3Vector>::~TSFixedArray<NTempest::C3Vector>();
  class TSFixedArray<NTempest::C3Vector>& operator=(class TSBaseArray<NTempest::C3Vector>&);
  class TSFixedArray<NTempest::C3Vector>& TSFixedArray<NTempest::C3Vector>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray<NTempest::C3Vector>& source);
  void Clear();
  void Detach(class NTempest::C3Vector**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<NTempest::C3Vector>*);
  void Set(unsigned int, int, class NTempest::C3Vector*);
  void TSFixedArray<NTempest::C3Vector>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* data);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, class NTempest::C3Vector*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<HCAMERA__ *> : class TSBaseArray<HCAMERA__ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<HCAMERA__ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<HCAMERA__ *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<HCAMERA__ *>(class TSBaseArray<HCAMERA__ *>&);
  void TSFixedArray<HCAMERA__ *>(class TSFixedArray<HCAMERA__ *>&);
  void TSFixedArray<HCAMERA__ *>::TSFixedArray<HCAMERA__ *>();
  void TSFixedArray<HCAMERA__ *>::~TSFixedArray<HCAMERA__ *>();
  class TSFixedArray<HCAMERA__ *>& operator=(class TSBaseArray<HCAMERA__ *>&);
  class TSFixedArray<HCAMERA__ *>& operator=(class TSFixedArray<HCAMERA__ *>&);
  void Clear();
  void Detach(struct HCAMERA__***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<HCAMERA__ *>*);
  void Set(unsigned int, int, struct HCAMERA__**);
  void Set(unsigned int, struct HCAMERA__**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct HCAMERA__**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CSeqOrdering> : class TSBaseArray<CSeqOrdering>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CSeqOrdering>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CSeqOrdering>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CSeqOrdering>(class TSBaseArray<CSeqOrdering>&);
  void TSFixedArray<CSeqOrdering>(class TSFixedArray<CSeqOrdering>&);
  void TSFixedArray<CSeqOrdering>();
  void TSFixedArray<CSeqOrdering>::~TSFixedArray<CSeqOrdering>();
  class TSFixedArray<CSeqOrdering>& operator=(class TSBaseArray<CSeqOrdering>&);
  class TSFixedArray<CSeqOrdering>& operator=(class TSFixedArray<CSeqOrdering>&);
  void Clear();
  void Detach(struct CSeqOrdering**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CSeqOrdering>*);
  void Set(unsigned int, int, struct CSeqOrdering*);
  void Set(unsigned int, struct CSeqOrdering*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CSeqOrdering*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CAnimObj *> : class TSBaseArray<CAnimObj *>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CAnimObj *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void TSFixedArray<CAnimObj *>::ReallocData(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TSFixedArray<CAnimObj *>(class TSBaseArray<CAnimObj *>&);
  void TSFixedArray<CAnimObj *>(class TSFixedArray<CAnimObj *>&);
  void TSFixedArray<CAnimObj *>::TSFixedArray<CAnimObj *>();
  void TSFixedArray<CAnimObj *>::~TSFixedArray<CAnimObj *>();
  class TSFixedArray<CAnimObj *>& operator=(class TSBaseArray<CAnimObj *>&);
  class TSFixedArray<CAnimObj *>& operator=(class TSFixedArray<CAnimObj *>&);
  void Clear();
  void Detach(struct CAnimObj***, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CAnimObj *>*);
  void Set(unsigned int, int, struct CAnimObj**);
  void Set(unsigned int, struct CAnimObj**);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CAnimObj**);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class TSFixedArray<CMemCmdItem> : class TSBaseArray<CMemCmdItem>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSBaseArray<CMemCmdItem>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void ReallocAndClearData(unsigned int);
  void ReallocData(unsigned int);
  void TSFixedArray<CMemCmdItem>(class TSBaseArray<CMemCmdItem>&);
  void TSFixedArray<CMemCmdItem>(class TSFixedArray<CMemCmdItem>&);
  void TSFixedArray<CMemCmdItem>::TSFixedArray<CMemCmdItem>();
  void ~TSFixedArray<CMemCmdItem>();
  class TSFixedArray<CMemCmdItem>& operator=(class TSBaseArray<CMemCmdItem>&);
  class TSFixedArray<CMemCmdItem>& operator=(class TSFixedArray<CMemCmdItem>&);
  void Clear();
  void Detach(struct CMemCmdItem**, unsigned int*, unsigned int*);
  void Exchange(class TSFixedArray<CMemCmdItem>*);
  void Set(unsigned int, int, struct CMemCmdItem*);
  void Set(unsigned int, struct CMemCmdItem*);
  void SetCount(unsigned int);
  void SetOptional(unsigned int, struct CMemCmdItem*);
  void Zero();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>


class TSFixedArray<CAnimGeoset> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimTransform> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimBoneObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimLightObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimModelObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimEmitter2Obj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimRibbonObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimCameraObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimEventObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimMaterialLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CVariations> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CAnimSequence> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSFixedArray<CKeySeq> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>


}

{ // TSFixedArray_ - 19

class TSFixedArray_<unsigned int,1229811556,285> : class TSFixedArray<unsigned int>  {

  // static data ------------------------------------
  static /*<rva 0x434b04>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned int,1229811556,285>& operator=(class TSFixedArray_<unsigned int,1229811556,285>&);
  class TSFixedArray_<unsigned int,1229811556,285>& operator=(class TSFixedArray<unsigned int>&);
  void TSFixedArray_<unsigned int,1229811556,285>::TSFixedArray_<unsigned int,1229811556,285>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned int,1229811556,285>& __that);
  void TSFixedArray_<unsigned int,1229811556,285>::TSFixedArray_<unsigned int,1229811556,285>();
  void ~TSFixedArray_<unsigned int,1229811556,285>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned int,1229811556,285>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned int,1229811556,285>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned int,1229811556,284> : class TSFixedArray<unsigned int>  {

  // static data ------------------------------------
  static /*<rva 0x434afc>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned int,1229811556,284>& operator=(class TSFixedArray_<unsigned int,1229811556,284>&);
  class TSFixedArray_<unsigned int,1229811556,284>& operator=(class TSFixedArray<unsigned int>&);
  void TSFixedArray_<unsigned int,1229811556,284>::TSFixedArray_<unsigned int,1229811556,284>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned int,1229811556,284>& __that);
  void TSFixedArray_<unsigned int,1229811556,284>::TSFixedArray_<unsigned int,1229811556,284>();
  void ~TSFixedArray_<unsigned int,1229811556,284>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned int,1229811556,284>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned int,1229811556,284>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned int,1229811556,283> : class TSFixedArray<unsigned int>  {

  // static data ------------------------------------
  static /*<rva 0x434af4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned int,1229811556,283>& operator=(class TSFixedArray_<unsigned int,1229811556,283>&);
  class TSFixedArray_<unsigned int,1229811556,283>& operator=(class TSFixedArray<unsigned int>&);
  void TSFixedArray_<unsigned int,1229811556,283>::TSFixedArray_<unsigned int,1229811556,283>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned int,1229811556,283>& __that);
  void TSFixedArray_<unsigned int,1229811556,283>::TSFixedArray_<unsigned int,1229811556,283>();
  void ~TSFixedArray_<unsigned int,1229811556,283>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned int,1229811556,283>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned int,1229811556,283>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned int,1229811556,282> : class TSFixedArray<unsigned int>  {

  // static data ------------------------------------
  static /*<rva 0x434aec>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned int,1229811556,282>& operator=(class TSFixedArray_<unsigned int,1229811556,282>&);
  class TSFixedArray_<unsigned int,1229811556,282>& operator=(class TSFixedArray<unsigned int>&);
  void TSFixedArray_<unsigned int,1229811556,282>::TSFixedArray_<unsigned int,1229811556,282>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned int,1229811556,282>& __that);
  void TSFixedArray_<unsigned int,1229811556,282>::TSFixedArray_<unsigned int,1229811556,282>();
  void ~TSFixedArray_<unsigned int,1229811556,282>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned int,1229811556,282>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned int,1229811556,282>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned short,1229811556,281> : class TSFixedArray<unsigned short>  {

  // static data ------------------------------------
  static /*<rva 0x434ae4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned short>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned short,1229811556,281>& operator=(class TSFixedArray_<unsigned short,1229811556,281>&);
  class TSFixedArray_<unsigned short,1229811556,281>& operator=(class TSFixedArray<unsigned short>&);
  void TSFixedArray_<unsigned short,1229811556,281>::TSFixedArray_<unsigned short,1229811556,281>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned short,1229811556,281>& __that);
  void TSFixedArray_<unsigned short,1229811556,281>::TSFixedArray_<unsigned short,1229811556,281>();
  void ~TSFixedArray_<unsigned short,1229811556,281>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned short,1229811556,281>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned short,1229811556,281>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<CPrimitive,1229811556,280> : class TSFixedArray<CPrimitive>  {

  // static data ------------------------------------
  static /*<rva 0x434adc>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CPrimitive>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<CPrimitive,1229811556,280>& operator=(class TSFixedArray_<CPrimitive,1229811556,280>&);
  class TSFixedArray_<CPrimitive,1229811556,280>& operator=(class TSFixedArray<CPrimitive>&);
  void TSFixedArray_<CPrimitive,1229811556,280>::TSFixedArray_<CPrimitive,1229811556,280>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<CPrimitive,1229811556,280>& __that);
  void TSFixedArray_<CPrimitive,1229811556,280>::TSFixedArray_<CPrimitive,1229811556,280>();
  void ~TSFixedArray_<CPrimitive,1229811556,280>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<CPrimitive,1229811556,280>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<CPrimitive,1229811556,280>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279> : class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >  {

  // static data ------------------------------------
  static /*<rva 0x434ad4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>& operator=(class TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>&);
  class TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>& operator=(class TSFixedArray<TSFixedArray_<NTempest::C2Vector,1229811556,266> >&);
  void TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>::TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>& __that);
  void TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>::TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>();
  void ~TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<TSFixedArray_<NTempest::C2Vector,1229811556,266>,1229811556,279>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1199076692,759> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x45c7d4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1199076692,759>& operator=(class TSFixedArray_<NTempest::C3Vector,1199076692,759>&);
  class TSFixedArray_<NTempest::C3Vector,1199076692,759>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1199076692,759>(class TSFixedArray_<NTempest::C3Vector,1199076692,759>&);
  void TSFixedArray_<NTempest::C3Vector,1199076692,759>();
  void ~TSFixedArray_<NTempest::C3Vector,1199076692,759>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1199076692,759>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1199076692,759>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1281976168,38> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x4bec84>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1281976168,38>& operator=(class TSFixedArray_<NTempest::C3Vector,1281976168,38>&);
  class TSFixedArray_<NTempest::C3Vector,1281976168,38>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,38>(class TSFixedArray_<NTempest::C3Vector,1281976168,38>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,38>();
  void ~TSFixedArray_<NTempest::C3Vector,1281976168,38>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1281976168,38>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1281976168,38>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1281976168,39> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x4bec8c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1281976168,39>& operator=(class TSFixedArray_<NTempest::C3Vector,1281976168,39>&);
  class TSFixedArray_<NTempest::C3Vector,1281976168,39>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,39>(class TSFixedArray_<NTempest::C3Vector,1281976168,39>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,39>();
  void ~TSFixedArray_<NTempest::C3Vector,1281976168,39>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1281976168,39>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1281976168,39>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C2Vector,1281976168,40> : class TSFixedArray<NTempest::C2Vector>  {

  // static data ------------------------------------
  static /*<rva 0x4bec94>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C2Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C2Vector,1281976168,40>& operator=(class TSFixedArray_<NTempest::C2Vector,1281976168,40>&);
  class TSFixedArray_<NTempest::C2Vector,1281976168,40>& operator=(class TSFixedArray<NTempest::C2Vector>&);
  void TSFixedArray_<NTempest::C2Vector,1281976168,40>(class TSFixedArray_<NTempest::C2Vector,1281976168,40>&);
  void TSFixedArray_<NTempest::C2Vector,1281976168,40>();
  void ~TSFixedArray_<NTempest::C2Vector,1281976168,40>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C2Vector,1281976168,40>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C2Vector,1281976168,40>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned short,1281976168,41> : class TSFixedArray<unsigned short>  {

  // static data ------------------------------------
  static /*<rva 0x4bec9c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned short>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned short,1281976168,41>& operator=(class TSFixedArray_<unsigned short,1281976168,41>&);
  class TSFixedArray_<unsigned short,1281976168,41>& operator=(class TSFixedArray<unsigned short>&);
  void TSFixedArray_<unsigned short,1281976168,41>(class TSFixedArray_<unsigned short,1281976168,41>&);
  void TSFixedArray_<unsigned short,1281976168,41>();
  void ~TSFixedArray_<unsigned short,1281976168,41>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned short,1281976168,41>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned short,1281976168,41>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1281976168,74> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x4beca4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1281976168,74>& operator=(class TSFixedArray_<NTempest::C3Vector,1281976168,74>&);
  class TSFixedArray_<NTempest::C3Vector,1281976168,74>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,74>(class TSFixedArray_<NTempest::C3Vector,1281976168,74>&);
  void TSFixedArray_<NTempest::C3Vector,1281976168,74>();
  void ~TSFixedArray_<NTempest::C3Vector,1281976168,74>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1281976168,74>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1281976168,74>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned char,1296321606,484> : class TSFixedArray<unsigned char>  {

  // static data ------------------------------------
  static /*<rva 0x434b0c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned char,1296321606,484>& operator=(class TSFixedArray_<unsigned char,1296321606,484>&);
  class TSFixedArray_<unsigned char,1296321606,484>& operator=(class TSFixedArray<unsigned char>&);
  void TSFixedArray_<unsigned char,1296321606,484>(class TSFixedArray_<unsigned char,1296321606,484>&);
  void TSFixedArray_<unsigned char,1296321606,484>::TSFixedArray_<unsigned char,1296321606,484>();
  void ~TSFixedArray_<unsigned char,1296321606,484>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned char,1296321606,484>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned char,1296321606,484>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1229811556,376> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x4348fc>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1229811556,376>& operator=(class TSFixedArray_<NTempest::C3Vector,1229811556,376>&);
  class TSFixedArray_<NTempest::C3Vector,1229811556,376>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1229811556,376>(class TSFixedArray_<NTempest::C3Vector,1229811556,376>&);
  void TSFixedArray_<NTempest::C3Vector,1229811556,376>::TSFixedArray_<NTempest::C3Vector,1229811556,376>();
  void ~TSFixedArray_<NTempest::C3Vector,1229811556,376>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1229811556,376>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1229811556,376>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1229811556,278> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x43492c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1229811556,278>& operator=(class TSFixedArray_<NTempest::C3Vector,1229811556,278>&);
  class TSFixedArray_<NTempest::C3Vector,1229811556,278>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1229811556,278>::TSFixedArray_<NTempest::C3Vector,1229811556,278>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<NTempest::C3Vector,1229811556,278>& __that);
  void TSFixedArray_<NTempest::C3Vector,1229811556,278>();
  void ~TSFixedArray_<NTempest::C3Vector,1229811556,278>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1229811556,278>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1229811556,278>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C3Vector,1229811556,276> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------
  static /*<rva 0x43491c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C3Vector,1229811556,276>& operator=(class TSFixedArray_<NTempest::C3Vector,1229811556,276>&);
  class TSFixedArray_<NTempest::C3Vector,1229811556,276>& operator=(class TSFixedArray<NTempest::C3Vector>&);
  void TSFixedArray_<NTempest::C3Vector,1229811556,276>::TSFixedArray_<NTempest::C3Vector,1229811556,276>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<NTempest::C3Vector,1229811556,276>& __that);
  void TSFixedArray_<NTempest::C3Vector,1229811556,276>();
  void ~TSFixedArray_<NTempest::C3Vector,1229811556,276>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C3Vector,1229811556,276>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C3Vector,1229811556,276>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<unsigned char,1229811556,277> : class TSFixedArray<unsigned char>  {

  // static data ------------------------------------
  static /*<rva 0x434924>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<unsigned char,1229811556,277>& operator=(class TSFixedArray_<unsigned char,1229811556,277>&);
  class TSFixedArray_<unsigned char,1229811556,277>& operator=(class TSFixedArray<unsigned char>&);
  void TSFixedArray_<unsigned char,1229811556,277>::TSFixedArray_<unsigned char,1229811556,277>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSFixedArray_<unsigned char,1229811556,277>& __that);
  void TSFixedArray_<unsigned char,1229811556,277>();
  void ~TSFixedArray_<unsigned char,1229811556,277>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<unsigned char,1229811556,277>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<unsigned char,1229811556,277>::MemLineNo();
};
// <size 0x10>

class TSFixedArray_<NTempest::C2Vector,1229811556,266> : class TSFixedArray<NTempest::C2Vector>  {

  // static data ------------------------------------
  static /*<rva 0x434acc>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C2Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>& operator=(class TSFixedArray_<NTempest::C2Vector,1229811556,266>&);
  class TSFixedArray_<NTempest::C2Vector,1229811556,266>& operator=(class TSFixedArray<NTempest::C2Vector>&);
  void TSFixedArray_<NTempest::C2Vector,1229811556,266>(class TSFixedArray_<NTempest::C2Vector,1229811556,266>&);
  void TSFixedArray_<NTempest::C2Vector,1229811556,266>::TSFixedArray_<NTempest::C2Vector,1229811556,266>();
  void ~TSFixedArray_<NTempest::C2Vector,1229811556,266>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSFixedArray_<NTempest::C2Vector,1229811556,266>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSFixedArray_<NTempest::C2Vector,1229811556,266>::MemLineNo();
};
// <size 0x10>


}

{ // TSGrowableArray - 243

class TSGrowableArray<NTempest::CiRect> : class TSFixedArray<NTempest::CiRect>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::CiRect>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NTempest::CiRect>(class TSGrowableArray<NTempest::CiRect>&);
  void TSGrowableArray<NTempest::CiRect>();
  unsigned int Add(class NTempest::CiRect*);
  unsigned int Add(unsigned int, int, class NTempest::CiRect*);
  unsigned int Add(unsigned int, class NTempest::CiRect*);
  void GrowToFit(unsigned int, int);
  class NTempest::CiRect* New(class NTempest::CiRect&);
  class NTempest::CiRect* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::CiRect*);
  unsigned int AddElements(unsigned int, class NTempest::CiRect*);
  class NTempest::CiRect* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::CiRect>& operator=(class TSGrowableArray<NTempest::CiRect>&);
  void ~TSGrowableArray<NTempest::CiRect>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::CRect> : class TSFixedArray<NTempest::CRect>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::CRect>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NTempest::CRect>(class TSGrowableArray<NTempest::CRect>&);
  void TSGrowableArray<NTempest::CRect>();
  unsigned int Add(class NTempest::CRect*);
  unsigned int Add(unsigned int, int, class NTempest::CRect*);
  unsigned int Add(unsigned int, class NTempest::CRect*);
  void GrowToFit(unsigned int, int);
  class NTempest::CRect* New(class NTempest::CRect&);
  class NTempest::CRect* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::CRect*);
  unsigned int AddElements(unsigned int, class NTempest::CRect*);
  class NTempest::CRect* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::CRect>& operator=(class TSGrowableArray<NTempest::CRect>&);
  void ~TSGrowableArray<NTempest::CRect>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxVertexBuffer_D3d *> : class TSFixedArray<CGxVertexBuffer_D3d *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxVertexBuffer_D3d *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxVertexBuffer_D3d *>(class TSGrowableArray<CGxVertexBuffer_D3d *>&);
  void TSGrowableArray<CGxVertexBuffer_D3d *>();
  unsigned int Add(class CGxVertexBuffer_D3d**);
  unsigned int Add(unsigned int, int, class CGxVertexBuffer_D3d**);
  unsigned int Add(unsigned int, class CGxVertexBuffer_D3d**);
  void GrowToFit(unsigned int, int);
  class CGxVertexBuffer_D3d** New(class CGxVertexBuffer_D3d*&);
  class CGxVertexBuffer_D3d** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CGxVertexBuffer_D3d**);
  unsigned int AddElements(unsigned int, class CGxVertexBuffer_D3d**);
  class CGxVertexBuffer_D3d** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxVertexBuffer_D3d *>& operator=(class TSGrowableArray<CGxVertexBuffer_D3d *>&);
  void ~TSGrowableArray<CGxVertexBuffer_D3d *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TEXTLINETEXTURE *> : class TSFixedArray<TEXTLINETEXTURE *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TEXTLINETEXTURE *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TEXTLINETEXTURE *>(class TSGrowableArray<TEXTLINETEXTURE *>&);
  void TSGrowableArray<TEXTLINETEXTURE *>();
  unsigned int Add(struct TEXTLINETEXTURE**);
  unsigned int Add(unsigned int, int, struct TEXTLINETEXTURE**);
  unsigned int Add(unsigned int, struct TEXTLINETEXTURE**);
  void GrowToFit(unsigned int, int);
  struct TEXTLINETEXTURE** New(struct TEXTLINETEXTURE*&);
  struct TEXTLINETEXTURE** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TEXTLINETEXTURE**);
  unsigned int AddElements(unsigned int, struct TEXTLINETEXTURE**);
  struct TEXTLINETEXTURE** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TEXTLINETEXTURE *>& operator=(class TSGrowableArray<TEXTLINETEXTURE *>&);
  void ~TSGrowableArray<TEXTLINETEXTURE *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<IGXUTEXTLINE *> : class TSFixedArray<IGXUTEXTLINE *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<IGXUTEXTLINE *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<IGXUTEXTLINE *>(class TSGrowableArray<IGXUTEXTLINE *>&);
  void TSGrowableArray<IGXUTEXTLINE *>();
  unsigned int Add(struct IGXUTEXTLINE**);
  unsigned int Add(unsigned int, int, struct IGXUTEXTLINE**);
  unsigned int Add(unsigned int, struct IGXUTEXTLINE**);
  void GrowToFit(unsigned int, int);
  struct IGXUTEXTLINE** New(struct IGXUTEXTLINE*&);
  struct IGXUTEXTLINE** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct IGXUTEXTLINE**);
  unsigned int AddElements(unsigned int, struct IGXUTEXTLINE**);
  struct IGXUTEXTLINE** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<IGXUTEXTLINE *>& operator=(class TSGrowableArray<IGXUTEXTLINE *>&);
  void ~TSGrowableArray<IGXUTEXTLINE *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<GXUFONTHYPERLINKINFO> : class TSFixedArray<GXUFONTHYPERLINKINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<GXUFONTHYPERLINKINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<GXUFONTHYPERLINKINFO>(class TSGrowableArray<GXUFONTHYPERLINKINFO>&);
  void TSGrowableArray<GXUFONTHYPERLINKINFO>();
  unsigned int Add(struct GXUFONTHYPERLINKINFO*);
  unsigned int Add(unsigned int, int, struct GXUFONTHYPERLINKINFO*);
  unsigned int Add(unsigned int, struct GXUFONTHYPERLINKINFO*);
  void GrowToFit(unsigned int, int);
  struct GXUFONTHYPERLINKINFO* New(struct GXUFONTHYPERLINKINFO&);
  struct GXUFONTHYPERLINKINFO* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct GXUFONTHYPERLINKINFO*);
  unsigned int AddElements(unsigned int, struct GXUFONTHYPERLINKINFO*);
  struct GXUFONTHYPERLINKINFO* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<GXUFONTHYPERLINKINFO>& operator=(class TSGrowableArray<GXUFONTHYPERLINKINFO>&);
  void ~TSGrowableArray<GXUFONTHYPERLINKINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<ANIMENDDATA> : class TSFixedArray<ANIMENDDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<ANIMENDDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<ANIMENDDATA>(class TSGrowableArray<ANIMENDDATA>&);
  void TSGrowableArray<ANIMENDDATA>();
  unsigned int Add(struct ANIMENDDATA*);
  unsigned int Add(unsigned int, int, struct ANIMENDDATA*);
  unsigned int Add(unsigned int, struct ANIMENDDATA*);
  void GrowToFit(unsigned int, int);
  struct ANIMENDDATA* New(struct ANIMENDDATA&);
  struct ANIMENDDATA* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct ANIMENDDATA*);
  unsigned int AddElements(unsigned int, struct ANIMENDDATA*);
  struct ANIMENDDATA* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<ANIMENDDATA>& operator=(class TSGrowableArray<ANIMENDDATA>&);
  void ~TSGrowableArray<ANIMENDDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<LightningObject::Bolt> : class TSFixedArray<LightningObject::Bolt>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<LightningObject::Bolt>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<LightningObject::Bolt>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<LightningObject::Bolt>(class TSGrowableArray<LightningObject::Bolt>&);
  void TSGrowableArray<LightningObject::Bolt>();
  unsigned int Add(struct LightningObject::Bolt*);
  unsigned int Add(unsigned int, int, struct LightningObject::Bolt*);
  unsigned int Add(unsigned int, struct LightningObject::Bolt*);
  void GrowToFit(unsigned int, int);
  struct LightningObject::Bolt* New(struct LightningObject::Bolt&);
  struct LightningObject::Bolt* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct LightningObject::Bolt*);
  unsigned int AddElements(unsigned int, struct LightningObject::Bolt*);
  struct LightningObject::Bolt* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<LightningObject::Bolt>& operator=(class TSGrowableArray<LightningObject::Bolt>&);
  void ~TSGrowableArray<LightningObject::Bolt>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SpellAuraNamesRec const *> : class TSFixedArray<SpellAuraNamesRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SpellAuraNamesRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<SpellAuraNamesRec const *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<SpellAuraNamesRec const *>(class TSGrowableArray<SpellAuraNamesRec const *>&);
  void TSGrowableArray<SpellAuraNamesRec const *>();
  unsigned int Add(class SpellAuraNamesRec**);
  unsigned int Add(unsigned int, int, class SpellAuraNamesRec**);
  unsigned int Add(unsigned int, class SpellAuraNamesRec**);
  void GrowToFit(unsigned int, int);
  class SpellAuraNamesRec** New(class SpellAuraNamesRec*&);
  class SpellAuraNamesRec** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class SpellAuraNamesRec**);
  unsigned int AddElements(unsigned int, class SpellAuraNamesRec**);
  class SpellAuraNamesRec** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SpellAuraNamesRec const *>& operator=(class TSGrowableArray<SpellAuraNamesRec const *>&);
  void ~TSGrowableArray<SpellAuraNamesRec const *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> > : class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >(class TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >();
  unsigned int Add(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* New(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>&);
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>*);
  class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<VERTEX> : class TSFixedArray<VERTEX>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<VERTEX>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<VERTEX>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<VERTEX>(class TSGrowableArray<VERTEX>&);
  void TSGrowableArray<VERTEX>();
  unsigned int Add(struct VERTEX*);
  unsigned int Add(unsigned int, int, struct VERTEX*);
  unsigned int Add(unsigned int, struct VERTEX*);
  void GrowToFit(unsigned int, int);
  struct VERTEX* New(struct VERTEX&);
  struct VERTEX* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct VERTEX*);
  unsigned int AddElements(unsigned int, struct VERTEX*);
  struct VERTEX* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<VERTEX>& operator=(class TSGrowableArray<VERTEX>&);
  void ~TSGrowableArray<VERTEX>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TAXILINE> : class TSFixedArray<TAXILINE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TAXILINE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TAXILINE>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TAXILINE>(class TSGrowableArray<TAXILINE>&);
  void TSGrowableArray<TAXILINE>();
  unsigned int Add(struct TAXILINE*);
  unsigned int Add(unsigned int, int, struct TAXILINE*);
  unsigned int Add(unsigned int, struct TAXILINE*);
  void GrowToFit(unsigned int, int);
  struct TAXILINE* New(struct TAXILINE&);
  struct TAXILINE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TAXILINE*);
  unsigned int AddElements(unsigned int, struct TAXILINE*);
  struct TAXILINE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TAXILINE>& operator=(class TSGrowableArray<TAXILINE>&);
  void ~TSGrowableArray<TAXILINE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> > : class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >(class TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >();
  unsigned int Add(class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* New(class TSExplicitList<MINIMAPMD5NAME,-572662307>&);
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<MINIMAPMD5NAME,-572662307>*);
  class TSExplicitList<MINIMAPMD5NAME,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> > : class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<AREAHASHOBJECT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >(class TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >();
  unsigned int Add(class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<AREAHASHOBJECT,-572662307>* New(class TSExplicitList<AREAHASHOBJECT,-572662307>&);
  class TSExplicitList<AREAHASHOBJECT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<AREAHASHOBJECT,-572662307>*);
  class TSExplicitList<AREAHASHOBJECT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<LODIndexFix> : class TSFixedArray<LODIndexFix>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<LODIndexFix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<LODIndexFix>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<LODIndexFix>(class TSGrowableArray<LODIndexFix>&);
  void TSGrowableArray<LODIndexFix>::TSGrowableArray<LODIndexFix>();
  unsigned int Add(struct LODIndexFix*);
  unsigned int Add(unsigned int, int, struct LODIndexFix*);
  unsigned int Add(unsigned int, struct LODIndexFix*);
  void GrowToFit(unsigned int, int);
  struct LODIndexFix* New(struct LODIndexFix&);
  struct LODIndexFix* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct LODIndexFix*);
  unsigned int AddElements(unsigned int, struct LODIndexFix*);
  struct LODIndexFix* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<LODIndexFix>& operator=(class TSGrowableArray<LODIndexFix>&);
  void ~TSGrowableArray<LODIndexFix>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<LODArrays> : class TSFixedArray<LODArrays>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<LODArrays>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<LODArrays>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<LODArrays>(class TSGrowableArray<LODArrays>&);
  void TSGrowableArray<LODArrays>();
  unsigned int Add(struct LODArrays*);
  unsigned int Add(unsigned int, int, struct LODArrays*);
  unsigned int Add(unsigned int, struct LODArrays*);
  void GrowToFit(unsigned int, int);
  struct LODArrays* New(struct LODArrays&);
  struct LODArrays* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct LODArrays*);
  unsigned int AddElements(unsigned int, struct LODArrays*);
  struct LODArrays* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<LODArrays>& operator=(class TSGrowableArray<LODArrays>&);
  void ~TSGrowableArray<LODArrays>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CMapLight *> : class TSFixedArray<CMapLight *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CMapLight *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CMapLight *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CMapLight *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CMapLight *>(class TSGrowableArray<CMapLight *>&);
  void TSGrowableArray<CMapLight *>();
  unsigned int Add(class CMapLight**);
  unsigned int Add(unsigned int, int, class CMapLight**);
  unsigned int Add(unsigned int, class CMapLight**);
  void GrowToFit(unsigned int, int);
  class CMapLight** New(class CMapLight*&);
  class CMapLight** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<CMapLight *>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class CMapLight**);
  unsigned int AddElements(unsigned int, class CMapLight**);
  class CMapLight** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CMapLight *>& operator=(class TSGrowableArray<CMapLight *>&);
  void ~TSGrowableArray<CMapLight *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> > : class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CMapObjDef,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >(class TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >();
  unsigned int Add(class TSExplicitList<CMapObjDef,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CMapObjDef,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CMapObjDef,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CMapObjDef,-572662307>* New(class TSExplicitList<CMapObjDef,-572662307>&);
  class TSExplicitList<CMapObjDef,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CMapObjDef,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CMapObjDef,-572662307>*);
  class TSExplicitList<CMapObjDef,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> > : class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CMapDoodadDef,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >(class TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >();
  unsigned int Add(class TSExplicitList<CMapDoodadDef,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CMapDoodadDef,-572662307>* New(class TSExplicitList<CMapDoodadDef,-572662307>&);
  class TSExplicitList<CMapDoodadDef,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CMapDoodadDef,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CMapDoodadDef,-572662307>*);
  class TSExplicitList<CMapDoodadDef,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CMapObj,-572662307> > : class TSFixedArray<TSExplicitList<CMapObj,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CMapObj,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<CMapObj,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CMapObj,-572662307> >(class TSGrowableArray<TSExplicitList<CMapObj,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CMapObj,-572662307> >();
  unsigned int Add(class TSExplicitList<CMapObj,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CMapObj,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CMapObj,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CMapObj,-572662307>* New(class TSExplicitList<CMapObj,-572662307>&);
  class TSExplicitList<CMapObj,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CMapObj,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CMapObj,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CMapObj,-572662307>*);
  class TSExplicitList<CMapObj,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CMapObj,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CMapObj,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CMapObj,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SGroupPtr> : class TSFixedArray<SGroupPtr>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SGroupPtr>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<SGroupPtr>(class TSGrowableArray<SGroupPtr>&);
  void TSGrowableArray<SGroupPtr>();
  unsigned int Add(struct SGroupPtr*);
  unsigned int Add(unsigned int, int, struct SGroupPtr*);
  unsigned int Add(unsigned int, struct SGroupPtr*);
  void GrowToFit(unsigned int, int);
  struct SGroupPtr* New(struct SGroupPtr&);
  struct SGroupPtr* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct SGroupPtr*);
  unsigned int AddElements(unsigned int, struct SGroupPtr*);
  struct SGroupPtr* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SGroupPtr>& operator=(class TSGrowableArray<SGroupPtr>&);
  void ~TSGrowableArray<SGroupPtr>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxVertexPC> : class TSFixedArray<CGxVertexPC>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxVertexPC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGxVertexPC>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGxVertexPC>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CGxVertexPC>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CGxVertexPC>(class TSGrowableArray<CGxVertexPC>&);
  void TSGrowableArray<CGxVertexPC>();
  unsigned int Add(struct CGxVertexPC*);
  unsigned int Add(unsigned int, int, struct CGxVertexPC*);
  unsigned int Add(unsigned int, struct CGxVertexPC*);
  void GrowToFit(unsigned int, int);
  struct CGxVertexPC* New(struct CGxVertexPC&);
  struct CGxVertexPC* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxVertexPC*);
  unsigned int AddElements(unsigned int, struct CGxVertexPC*);
  struct CGxVertexPC* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxVertexPC>& operator=(class TSGrowableArray<CGxVertexPC>&);
  void ~TSGrowableArray<CGxVertexPC>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxBuf *> : class TSFixedArray<CGxBuf *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxBuf *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxBuf *>(class TSGrowableArray<CGxBuf *>&);
  void TSGrowableArray<CGxBuf *>();
  unsigned int Add(struct CGxBuf**);
  unsigned int Add(unsigned int, int, struct CGxBuf**);
  unsigned int Add(unsigned int, struct CGxBuf**);
  void GrowToFit(unsigned int, int);
  struct CGxBuf** New(struct CGxBuf*&);
  struct CGxBuf** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxBuf**);
  unsigned int AddElements(unsigned int, struct CGxBuf**);
  struct CGxBuf** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxBuf *>& operator=(class TSGrowableArray<CGxBuf *>&);
  void ~TSGrowableArray<CGxBuf *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CDetailDoodadData *> : class TSFixedArray<CDetailDoodadData *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CDetailDoodadData *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CDetailDoodadData *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CDetailDoodadData *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CDetailDoodadData *>(class TSGrowableArray<CDetailDoodadData *>&);
  void TSGrowableArray<CDetailDoodadData *>();
  unsigned int Add(class CDetailDoodadData**);
  unsigned int Add(unsigned int, int, class CDetailDoodadData**);
  unsigned int Add(unsigned int, class CDetailDoodadData**);
  void GrowToFit(unsigned int, int);
  class CDetailDoodadData** New(class CDetailDoodadData*&);
  class CDetailDoodadData** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CDetailDoodadData**);
  unsigned int AddElements(unsigned int, class CDetailDoodadData**);
  class CDetailDoodadData** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CDetailDoodadData *>& operator=(class TSGrowableArray<CDetailDoodadData *>&);
  void ~TSGrowableArray<CDetailDoodadData *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CMapDoodadDef *> : class TSFixedArray<CMapDoodadDef *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CMapDoodadDef *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CMapDoodadDef *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CMapDoodadDef *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CMapDoodadDef *>(class TSGrowableArray<CMapDoodadDef *>&);
  void TSGrowableArray<CMapDoodadDef *>::TSGrowableArray<CMapDoodadDef *>();
  unsigned int Add(class CMapDoodadDef**);
  unsigned int Add(unsigned int, int, class CMapDoodadDef**);
  unsigned int Add(unsigned int, class CMapDoodadDef**);
  void GrowToFit(unsigned int, int);
  class CMapDoodadDef** New(class CMapDoodadDef*&);
  class CMapDoodadDef** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CMapDoodadDef**);
  unsigned int AddElements(unsigned int, class CMapDoodadDef**);
  class CMapDoodadDef** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CMapDoodadDef *>& operator=(class TSGrowableArray<CMapDoodadDef *>&);
  void ~TSGrowableArray<CMapDoodadDef *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::C44Matrix> : class TSFixedArray<NTempest::C44Matrix>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C44Matrix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NTempest::C44Matrix>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NTempest::C44Matrix>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NTempest::C44Matrix>(class TSGrowableArray<NTempest::C44Matrix>&);
  void TSGrowableArray<NTempest::C44Matrix>();
  unsigned int Add(class NTempest::C44Matrix*);
  unsigned int Add(unsigned int, int, class NTempest::C44Matrix*);
  unsigned int Add(unsigned int, class NTempest::C44Matrix*);
  void GrowToFit(unsigned int, int);
  class NTempest::C44Matrix* New(class NTempest::C44Matrix&);
  class NTempest::C44Matrix* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::C44Matrix*);
  unsigned int AddElements(unsigned int, class NTempest::C44Matrix*);
  class NTempest::C44Matrix* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::C44Matrix>& operator=(class TSGrowableArray<NTempest::C44Matrix>&);
  void ~TSGrowableArray<NTempest::C44Matrix>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SMDoodadDef> : class TSFixedArray<SMDoodadDef>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SMDoodadDef>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<SMDoodadDef>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<SMDoodadDef>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<SMDoodadDef>(class TSGrowableArray<SMDoodadDef>&);
  void TSGrowableArray<SMDoodadDef>();
  unsigned int Add(struct SMDoodadDef*);
  unsigned int Add(unsigned int, int, struct SMDoodadDef*);
  unsigned int Add(unsigned int, struct SMDoodadDef*);
  void GrowToFit(unsigned int, int);
  struct SMDoodadDef* New(struct SMDoodadDef&);
  struct SMDoodadDef* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct SMDoodadDef*);
  unsigned int AddElements(unsigned int, struct SMDoodadDef*);
  struct SMDoodadDef* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SMDoodadDef>& operator=(class TSGrowableArray<SMDoodadDef>&);
  void ~TSGrowableArray<SMDoodadDef>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SMMapObjDef> : class TSFixedArray<SMMapObjDef>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SMMapObjDef>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<SMMapObjDef>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<SMMapObjDef>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<SMMapObjDef>(class TSGrowableArray<SMMapObjDef>&);
  void TSGrowableArray<SMMapObjDef>();
  unsigned int Add(struct SMMapObjDef*);
  unsigned int Add(unsigned int, int, struct SMMapObjDef*);
  unsigned int Add(unsigned int, struct SMMapObjDef*);
  void GrowToFit(unsigned int, int);
  struct SMMapObjDef* New(struct SMMapObjDef&);
  struct SMMapObjDef* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct SMMapObjDef*);
  unsigned int AddElements(unsigned int, struct SMMapObjDef*);
  struct SMMapObjDef* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SMMapObjDef>& operator=(class TSGrowableArray<SMMapObjDef>&);
  void ~TSGrowableArray<SMMapObjDef>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> > : class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CSimpleDoodad,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >(class TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >();
  unsigned int Add(class TSExplicitList<CSimpleDoodad,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CSimpleDoodad,-572662307>* New(class TSExplicitList<CSimpleDoodad,-572662307>&);
  class TSExplicitList<CSimpleDoodad,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CSimpleDoodad,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CSimpleDoodad,-572662307>*);
  class TSExplicitList<CSimpleDoodad,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FILEMAP,-572662307> > : class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FILEMAP,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >(class TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >();
  unsigned int Add(class TSExplicitList<FILEMAP,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FILEMAP,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FILEMAP,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FILEMAP,-572662307>* New(class TSExplicitList<FILEMAP,-572662307>&);
  class TSExplicitList<FILEMAP,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FILEMAP,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FILEMAP,-572662307>*);
  class TSExplicitList<FILEMAP,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >::~TSGrowableArray<TSExplicitList<FILEMAP,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<RGN,-572662307> > : class TSFixedArray<TSExplicitList<RGN,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<RGN,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<RGN,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<RGN,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<RGN,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<RGN,-572662307> >(class TSGrowableArray<TSExplicitList<RGN,-572662307> >&);
  void TSGrowableArray<TSExplicitList<RGN,-572662307> >::TSGrowableArray<TSExplicitList<RGN,-572662307> >();
  unsigned int Add(class TSExplicitList<RGN,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<RGN,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<RGN,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<RGN,-572662307>* New(class TSExplicitList<RGN,-572662307>&);
  class TSExplicitList<RGN,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<RGN,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<RGN,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<RGN,-572662307>*);
  class TSExplicitList<RGN,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<RGN,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<RGN,-572662307> >&);
  void TSGrowableArray<TSExplicitList<RGN,-572662307> >::~TSGrowableArray<TSExplicitList<RGN,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<RGN> : class TSFixedArray<RGN>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<RGN>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<RGN>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<RGN>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<RGN>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<RGN>(class TSGrowableArray<RGN>&);
  void TSGrowableArray<RGN>::TSGrowableArray<RGN>();
  unsigned int Add(struct RGN*);
  unsigned int Add(unsigned int, int, struct RGN*);
  unsigned int Add(unsigned int, struct RGN*);
  void GrowToFit(unsigned int, int);
  struct RGN* New(struct RGN&);
  struct RGN* TSGrowableArray<RGN>::New();
  unsigned int TSGrowableArray<RGN>::Reserved();
  void TSGrowableArray<RGN>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct RGN*);
  unsigned int AddElements(unsigned int, struct RGN*);
  struct RGN* TSGrowableArray<RGN>::NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<RGN>& operator=(class TSGrowableArray<RGN>&);
  void TSGrowableArray<RGN>::~TSGrowableArray<RGN>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<_SOURCE> : class TSFixedArray<_SOURCE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<_SOURCE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<_SOURCE>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<_SOURCE>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<_SOURCE>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<_SOURCE>::TSGrowableArray<_SOURCE>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<_SOURCE>& __that);
  void TSGrowableArray<_SOURCE>::TSGrowableArray<_SOURCE>();
  unsigned int Add(struct _SOURCE*);
  unsigned int Add(unsigned int, int, struct _SOURCE*);
  unsigned int Add(unsigned int, struct _SOURCE*);
  void GrowToFit(unsigned int, int);
  struct _SOURCE* New(struct _SOURCE&);
  struct _SOURCE* TSGrowableArray<_SOURCE>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<_SOURCE>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct _SOURCE*);
  unsigned int AddElements(unsigned int, struct _SOURCE*);
  struct _SOURCE* TSGrowableArray<_SOURCE>::NewElement();
  void TSGrowableArray<_SOURCE>::SetNumElements(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  class TSGrowableArray<_SOURCE>& TSGrowableArray<_SOURCE>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<_SOURCE>& __that);
  void TSGrowableArray<_SOURCE>::~TSGrowableArray<_SOURCE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<RECTF> : class TSFixedArray<RECTF>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<RECTF>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<RECTF>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<RECTF>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<RECTF>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<RECTF>::TSGrowableArray<RECTF>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<RECTF>& __that);
  void TSGrowableArray<RECTF>::TSGrowableArray<RECTF>();
  unsigned int Add(struct RECTF*);
  unsigned int Add(unsigned int, int, struct RECTF*);
  unsigned int Add(unsigned int, struct RECTF*);
  void GrowToFit(unsigned int, int);
  struct RECTF* New(struct RECTF&);
  struct RECTF* TSGrowableArray<RECTF>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<RECTF>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct RECTF*);
  unsigned int AddElements(unsigned int, struct RECTF*);
  struct RECTF* TSGrowableArray<RECTF>::NewElement();
  void TSGrowableArray<RECTF>::SetNumElements(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  class TSGrowableArray<RECTF>& TSGrowableArray<RECTF>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<RECTF>& __that);
  void TSGrowableArray<RECTF>::~TSGrowableArray<RECTF>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<_FOUNDPARAM> : class TSFixedArray<_FOUNDPARAM>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<_FOUNDPARAM>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<_FOUNDPARAM>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<_FOUNDPARAM>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<_FOUNDPARAM>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<_FOUNDPARAM>::TSGrowableArray<_FOUNDPARAM>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<_FOUNDPARAM>& __that);
  void TSGrowableArray<_FOUNDPARAM>::TSGrowableArray<_FOUNDPARAM>();
  unsigned int Add(struct _FOUNDPARAM*);
  unsigned int Add(unsigned int, int, struct _FOUNDPARAM*);
  unsigned int Add(unsigned int, struct _FOUNDPARAM*);
  void GrowToFit(unsigned int, int);
  struct _FOUNDPARAM* New(struct _FOUNDPARAM&);
  struct _FOUNDPARAM* TSGrowableArray<_FOUNDPARAM>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<_FOUNDPARAM>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct _FOUNDPARAM*);
  unsigned int AddElements(unsigned int, struct _FOUNDPARAM*);
  struct _FOUNDPARAM* TSGrowableArray<_FOUNDPARAM>::NewElement();
  void TSGrowableArray<_FOUNDPARAM>::SetNumElements(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  class TSGrowableArray<_FOUNDPARAM>& TSGrowableArray<_FOUNDPARAM>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<_FOUNDPARAM>& __that);
  void TSGrowableArray<_FOUNDPARAM>::~TSGrowableArray<_FOUNDPARAM>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> > : class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ZipFileDirEntry,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >(class TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >();
  unsigned int Add(class TSExplicitList<ZipFileDirEntry,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ZipFileDirEntry,-572662307>* New(class TSExplicitList<ZipFileDirEntry,-572662307>&);
  class TSExplicitList<ZipFileDirEntry,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ZipFileDirEntry,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ZipFileDirEntry,-572662307>*);
  class TSExplicitList<ZipFileDirEntry,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >::~TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> > : class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >(class TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >();
  unsigned int Add(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* New(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>&);
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<TIMESTAMPSTRUCT,-572662307>*);
  class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CVar,-572662307> > : class TSFixedArray<TSExplicitList<CVar,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CVar,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CVar,-572662307> >(class TSGrowableArray<TSExplicitList<CVar,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CVar,-572662307> >();
  unsigned int Add(class TSExplicitList<CVar,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CVar,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CVar,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CVar,-572662307>* New(class TSExplicitList<CVar,-572662307>&);
  class TSExplicitList<CVar,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CVar,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CVar,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CVar,-572662307>*);
  class TSExplicitList<CVar,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CVar,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CVar,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CVar,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> > : class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CONSOLECOMMAND,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >(class TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >();
  unsigned int Add(class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CONSOLECOMMAND,-572662307>* New(class TSExplicitList<CONSOLECOMMAND,-572662307>&);
  class TSExplicitList<CONSOLECOMMAND,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CONSOLECOMMAND,-572662307>*);
  class TSExplicitList<CONSOLECOMMAND,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> > : class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<TRADESKILLLINE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >(class TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >::TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >();
  unsigned int Add(class TSExplicitList<TRADESKILLLINE,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<TRADESKILLLINE,-572662307>* New(class TSExplicitList<TRADESKILLLINE,-572662307>&);
  class TSExplicitList<TRADESKILLLINE,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<TRADESKILLLINE,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<TRADESKILLLINE,-572662307>*);
  class TSExplicitList<TRADESKILLLINE,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> > : class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<INVENTORYART,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >(class TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >();
  unsigned int Add(class TSExplicitList<INVENTORYART,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<INVENTORYART,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<INVENTORYART,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<INVENTORYART,-572662307>* New(class TSExplicitList<INVENTORYART,-572662307>&);
  class TSExplicitList<INVENTORYART,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<INVENTORYART,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<INVENTORYART,-572662307>*);
  class TSExplicitList<INVENTORYART,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<ITEMSWAP> : class TSFixedArray<ITEMSWAP>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<ITEMSWAP>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<ITEMSWAP>(class TSGrowableArray<ITEMSWAP>&);
  void TSGrowableArray<ITEMSWAP>();
  unsigned int Add(struct ITEMSWAP*);
  unsigned int Add(unsigned int, int, struct ITEMSWAP*);
  unsigned int Add(unsigned int, struct ITEMSWAP*);
  void GrowToFit(unsigned int, int);
  struct ITEMSWAP* New(struct ITEMSWAP&);
  struct ITEMSWAP* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct ITEMSWAP*);
  unsigned int AddElements(unsigned int, struct ITEMSWAP*);
  struct ITEMSWAP* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<ITEMSWAP>& operator=(class TSGrowableArray<ITEMSWAP>&);
  void ~TSGrowableArray<ITEMSWAP>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::C4Plane> : class TSFixedArray<NTempest::C4Plane>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C4Plane>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<NTempest::C4Plane>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<NTempest::C4Plane>(class TSGrowableArray<NTempest::C4Plane>&);
  void TSGrowableArray<NTempest::C4Plane>();
  unsigned int Add(class NTempest::C4Plane*);
  unsigned int Add(unsigned int, int, class NTempest::C4Plane*);
  unsigned int Add(unsigned int, class NTempest::C4Plane*);
  void GrowToFit(unsigned int, int);
  class NTempest::C4Plane* New(class NTempest::C4Plane&);
  class NTempest::C4Plane* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::C4Plane*);
  unsigned int AddElements(unsigned int, class NTempest::C4Plane*);
  class NTempest::C4Plane* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::C4Plane>& operator=(class TSGrowableArray<NTempest::C4Plane>&);
  void ~TSGrowableArray<NTempest::C4Plane>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<InitialSpellStruct> : class TSFixedArray<InitialSpellStruct>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<InitialSpellStruct>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<InitialSpellStruct>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<InitialSpellStruct>(class TSGrowableArray<InitialSpellStruct>&);
  void TSGrowableArray<InitialSpellStruct>();
  unsigned int Add(struct InitialSpellStruct*);
  unsigned int Add(unsigned int, int, struct InitialSpellStruct*);
  unsigned int Add(unsigned int, struct InitialSpellStruct*);
  void GrowToFit(unsigned int, int);
  struct InitialSpellStruct* New(struct InitialSpellStruct&);
  struct InitialSpellStruct* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct InitialSpellStruct*);
  unsigned int AddElements(unsigned int, struct InitialSpellStruct*);
  struct InitialSpellStruct* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<InitialSpellStruct>& operator=(class TSGrowableArray<InitialSpellStruct>&);
  void ~TSGrowableArray<InitialSpellStruct>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> > : class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ITEMEXPIRATION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >(class TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >();
  unsigned int Add(class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ITEMEXPIRATION,-572662307>* New(class TSExplicitList<ITEMEXPIRATION,-572662307>&);
  class TSExplicitList<ITEMEXPIRATION,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ITEMEXPIRATION,-572662307>*);
  class TSExplicitList<ITEMEXPIRATION,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<QUESTGIVEREMOTENODE> : class TSFixedArray<QUESTGIVEREMOTENODE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<QUESTGIVEREMOTENODE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<QUESTGIVEREMOTENODE>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<QUESTGIVEREMOTENODE>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<QUESTGIVEREMOTENODE>(class TSGrowableArray<QUESTGIVEREMOTENODE>&);
  void TSGrowableArray<QUESTGIVEREMOTENODE>();
  unsigned int Add(struct QUESTGIVEREMOTENODE*);
  unsigned int Add(unsigned int, int, struct QUESTGIVEREMOTENODE*);
  unsigned int Add(unsigned int, struct QUESTGIVEREMOTENODE*);
  void GrowToFit(unsigned int, int);
  struct QUESTGIVEREMOTENODE* New(struct QUESTGIVEREMOTENODE&);
  struct QUESTGIVEREMOTENODE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct QUESTGIVEREMOTENODE*);
  unsigned int AddElements(unsigned int, struct QUESTGIVEREMOTENODE*);
  struct QUESTGIVEREMOTENODE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<QUESTGIVEREMOTENODE>& operator=(class TSGrowableArray<QUESTGIVEREMOTENODE>&);
  void ~TSGrowableArray<QUESTGIVEREMOTENODE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> > : class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<NAMEPLATEDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >(class TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >();
  unsigned int Add(class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<NAMEPLATEDESC,-572662307>* New(class TSExplicitList<NAMEPLATEDESC,-572662307>&);
  class TSExplicitList<NAMEPLATEDESC,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<NAMEPLATEDESC,-572662307>*);
  class TSExplicitList<NAMEPLATEDESC,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<VERTDATA> : class TSFixedArray<VERTDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<VERTDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<VERTDATA>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<VERTDATA>(class TSGrowableArray<VERTDATA>&);
  void TSGrowableArray<VERTDATA>();
  unsigned int Add(struct VERTDATA*);
  unsigned int Add(unsigned int, int, struct VERTDATA*);
  unsigned int Add(unsigned int, struct VERTDATA*);
  void GrowToFit(unsigned int, int);
  struct VERTDATA* New(struct VERTDATA&);
  struct VERTDATA* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct VERTDATA*);
  unsigned int AddElements(unsigned int, struct VERTDATA*);
  struct VERTDATA* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<VERTDATA>& operator=(class TSGrowableArray<VERTDATA>&);
  void ~TSGrowableArray<VERTDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> > : class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >(class TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >();
  unsigned int Add(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* New(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>&);
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>*);
  class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<UNITHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<UNITHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<UNITHASHOBJ,-572662307>* New(class TSExplicitList<UNITHASHOBJ,-572662307>&);
  class TSExplicitList<UNITHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<UNITHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<UNITHASHOBJ,-572662307>*);
  class TSExplicitList<UNITHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<PERSISTENTTEXTURE> : class TSFixedArray<PERSISTENTTEXTURE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<PERSISTENTTEXTURE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<PERSISTENTTEXTURE>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<PERSISTENTTEXTURE>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<PERSISTENTTEXTURE>(class TSGrowableArray<PERSISTENTTEXTURE>&);
  void TSGrowableArray<PERSISTENTTEXTURE>();
  unsigned int Add(struct PERSISTENTTEXTURE*);
  unsigned int Add(unsigned int, int, struct PERSISTENTTEXTURE*);
  unsigned int Add(unsigned int, struct PERSISTENTTEXTURE*);
  void GrowToFit(unsigned int, int);
  struct PERSISTENTTEXTURE* New(struct PERSISTENTTEXTURE&);
  struct PERSISTENTTEXTURE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct PERSISTENTTEXTURE*);
  unsigned int AddElements(unsigned int, struct PERSISTENTTEXTURE*);
  struct PERSISTENTTEXTURE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<PERSISTENTTEXTURE>& operator=(class TSGrowableArray<PERSISTENTTEXTURE>&);
  void ~TSGrowableArray<PERSISTENTTEXTURE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TIMEDTEXTURE> : class TSFixedArray<TIMEDTEXTURE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TIMEDTEXTURE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TIMEDTEXTURE>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TIMEDTEXTURE>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TIMEDTEXTURE>(class TSGrowableArray<TIMEDTEXTURE>&);
  void TSGrowableArray<TIMEDTEXTURE>();
  unsigned int Add(struct TIMEDTEXTURE*);
  unsigned int Add(unsigned int, int, struct TIMEDTEXTURE*);
  unsigned int Add(unsigned int, struct TIMEDTEXTURE*);
  void GrowToFit(unsigned int, int);
  struct TIMEDTEXTURE* New(struct TIMEDTEXTURE&);
  struct TIMEDTEXTURE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TIMEDTEXTURE*);
  unsigned int AddElements(unsigned int, struct TIMEDTEXTURE*);
  struct TIMEDTEXTURE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TIMEDTEXTURE>& operator=(class TSGrowableArray<TIMEDTEXTURE>&);
  void ~TSGrowableArray<TIMEDTEXTURE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CHANCES> : class TSFixedArray<CHANCES>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CHANCES>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CHANCES>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CHANCES>(class TSGrowableArray<CHANCES>&);
  void TSGrowableArray<CHANCES>();
  unsigned int Add(struct CHANCES*);
  unsigned int Add(unsigned int, int, struct CHANCES*);
  unsigned int Add(unsigned int, struct CHANCES*);
  void GrowToFit(unsigned int, int);
  struct CHANCES* New(struct CHANCES&);
  struct CHANCES* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CHANCES*);
  unsigned int AddElements(unsigned int, struct CHANCES*);
  struct CHANCES* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CHANCES>& operator=(class TSGrowableArray<CHANCES>&);
  void ~TSGrowableArray<CHANCES>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<ENCHANTMENTLOGDESC> : class TSFixedArray<ENCHANTMENTLOGDESC>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<ENCHANTMENTLOGDESC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<ENCHANTMENTLOGDESC>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<ENCHANTMENTLOGDESC>(class TSGrowableArray<ENCHANTMENTLOGDESC>&);
  void TSGrowableArray<ENCHANTMENTLOGDESC>();
  unsigned int Add(struct ENCHANTMENTLOGDESC*);
  unsigned int Add(unsigned int, int, struct ENCHANTMENTLOGDESC*);
  unsigned int Add(unsigned int, struct ENCHANTMENTLOGDESC*);
  void GrowToFit(unsigned int, int);
  struct ENCHANTMENTLOGDESC* New(struct ENCHANTMENTLOGDESC&);
  struct ENCHANTMENTLOGDESC* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct ENCHANTMENTLOGDESC*);
  unsigned int AddElements(unsigned int, struct ENCHANTMENTLOGDESC*);
  struct ENCHANTMENTLOGDESC* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<ENCHANTMENTLOGDESC>& operator=(class TSGrowableArray<ENCHANTMENTLOGDESC>&);
  void ~TSGrowableArray<ENCHANTMENTLOGDESC>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> > : class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ANIMKIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >(class TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >();
  unsigned int Add(class TSExplicitList<ANIMKIT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ANIMKIT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ANIMKIT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ANIMKIT,-572662307>* New(class TSExplicitList<ANIMKIT,-572662307>&);
  class TSExplicitList<ANIMKIT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ANIMKIT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ANIMKIT,-572662307>*);
  class TSExplicitList<ANIMKIT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CLightList,-572662307> > : class TSFixedArray<TSExplicitList<CLightList,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CLightList,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<CLightList,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CLightList,-572662307> >(class TSGrowableArray<TSExplicitList<CLightList,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CLightList,-572662307> >();
  unsigned int Add(class TSExplicitList<CLightList,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CLightList,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CLightList,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CLightList,-572662307>* New(class TSExplicitList<CLightList,-572662307>&);
  class TSExplicitList<CLightList,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CLightList,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CLightList,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CLightList,-572662307>*);
  class TSExplicitList<CLightList,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CLightList,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CLightList,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CLightList,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CLightList> : class TSFixedArray<CLightList>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CLightList>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CLightList>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CLightList>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CLightList>(class TSGrowableArray<CLightList>&);
  void TSGrowableArray<CLightList>::TSGrowableArray<CLightList>();
  unsigned int Add(struct CLightList*);
  unsigned int Add(unsigned int, int, struct CLightList*);
  unsigned int Add(unsigned int, struct CLightList*);
  void GrowToFit(unsigned int, int);
  struct CLightList* New(struct CLightList&);
  struct CLightList* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CLightList*);
  unsigned int AddElements(unsigned int, struct CLightList*);
  struct CLightList* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CLightList>& operator=(class TSGrowableArray<CLightList>&);
  void ~TSGrowableArray<CLightList>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> > : class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >(class TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >();
  unsigned int Add(class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* New(class TSExplicitList<GLYPHBITMAPDATA,-572662307>&);
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<GLYPHBITMAPDATA,-572662307>*);
  class TSExplicitList<GLYPHBITMAPDATA,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> > : class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >(class TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >();
  unsigned int Add(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* New(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>&);
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>*);
  class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxuLight *> : class TSFixedArray<CGxuLight *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxuLight *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxuLight *>(class TSGrowableArray<CGxuLight *>&);
  void TSGrowableArray<CGxuLight *>();
  unsigned int Add(struct CGxuLight**);
  unsigned int Add(unsigned int, int, struct CGxuLight**);
  unsigned int Add(unsigned int, struct CGxuLight**);
  void GrowToFit(unsigned int, int);
  struct CGxuLight** New(struct CGxuLight*&);
  struct CGxuLight** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxuLight**);
  unsigned int AddElements(unsigned int, struct CGxuLight**);
  struct CGxuLight** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxuLight *>& operator=(class TSGrowableArray<CGxuLight *>&);
  void ~TSGrowableArray<CGxuLight *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> > : class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CHARCODEDESC,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >(class TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >::TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >();
  unsigned int Add(class TSExplicitList<CHARCODEDESC,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CHARCODEDESC,-572662307>* New(class TSExplicitList<CHARCODEDESC,-572662307>&);
  class TSExplicitList<CHARCODEDESC,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CHARCODEDESC,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CHARCODEDESC,-572662307>*);
  class TSExplicitList<CHARCODEDESC,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<KERNNODE,-572662307> > : class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<KERNNODE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >(class TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >&);
  void TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >::TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >();
  unsigned int Add(class TSExplicitList<KERNNODE,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<KERNNODE,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<KERNNODE,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<KERNNODE,-572662307>* New(class TSExplicitList<KERNNODE,-572662307>&);
  class TSExplicitList<KERNNODE,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<KERNNODE,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<KERNNODE,-572662307>*);
  class TSExplicitList<KERNNODE,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<KERNNODE,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::CImVector *> : class TSFixedArray<NTempest::CImVector *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::CImVector *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NTempest::CImVector *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NTempest::CImVector *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NTempest::CImVector *>(class TSGrowableArray<NTempest::CImVector *>&);
  void TSGrowableArray<NTempest::CImVector *>();
  unsigned int Add(class NTempest::CImVector**);
  unsigned int Add(unsigned int, int, class NTempest::CImVector**);
  unsigned int Add(unsigned int, class NTempest::CImVector**);
  void GrowToFit(unsigned int, int);
  class NTempest::CImVector** New(class NTempest::CImVector*&);
  class NTempest::CImVector** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::CImVector**);
  unsigned int AddElements(unsigned int, class NTempest::CImVector**);
  class NTempest::CImVector** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::CImVector *>& operator=(class TSGrowableArray<NTempest::CImVector *>&);
  void ~TSGrowableArray<NTempest::CImVector *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<VERT> : class TSFixedArray<VERT>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<VERT>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<VERT>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<VERT>(class TSGrowableArray<VERT>&);
  void TSGrowableArray<VERT>();
  unsigned int Add(struct VERT*);
  unsigned int Add(unsigned int, int, struct VERT*);
  unsigned int Add(unsigned int, struct VERT*);
  void GrowToFit(unsigned int, int);
  struct VERT* New(struct VERT&);
  struct VERT* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct VERT*);
  unsigned int AddElements(unsigned int, struct VERT*);
  struct VERT* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<VERT>& operator=(class TSGrowableArray<VERT>&);
  void ~TSGrowableArray<VERT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> > : class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >(class TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >();
  unsigned int Add(class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* New(class TSExplicitList<STRINGVIEWMATRICES,-572662307>&);
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<STRINGVIEWMATRICES,-572662307>*);
  class TSExplicitList<STRINGVIEWMATRICES,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FACEDATA,-572662307> > : class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FACEDATA,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >(class TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >();
  unsigned int Add(class TSExplicitList<FACEDATA,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FACEDATA,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FACEDATA,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FACEDATA,-572662307>* New(class TSExplicitList<FACEDATA,-572662307>&);
  class TSExplicitList<FACEDATA,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FACEDATA,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FACEDATA,-572662307>*);
  class TSExplicitList<FACEDATA,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<FACEDATA,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<WowConnection *> : class TSFixedArray<WowConnection *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<WowConnection *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<WowConnection *>(class TSGrowableArray<WowConnection *>&);
  void TSGrowableArray<WowConnection *>();
  unsigned int Add(class WowConnection**);
  unsigned int Add(unsigned int, int, class WowConnection**);
  unsigned int Add(unsigned int, class WowConnection**);
  void GrowToFit(unsigned int, int);
  class WowConnection** New(class WowConnection*&);
  class WowConnection** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class WowConnection**);
  unsigned int AddElements(unsigned int, class WowConnection**);
  class WowConnection** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<WowConnection *>& operator=(class TSGrowableArray<WowConnection *>&);
  void ~TSGrowableArray<WowConnection *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxTex *> : class TSFixedArray<CGxTex *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxTex *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<CGxTex *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxTex *>(class TSGrowableArray<CGxTex *>&);
  void TSGrowableArray<CGxTex *>();
  unsigned int Add(class CGxTex**);
  unsigned int Add(unsigned int, int, class CGxTex**);
  unsigned int Add(unsigned int, class CGxTex**);
  void GrowToFit(unsigned int, int);
  class CGxTex** New(class CGxTex*&);
  class CGxTex** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CGxTex**);
  unsigned int AddElements(unsigned int, class CGxTex**);
  class CGxTex** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxTex *>& operator=(class TSGrowableArray<CGxTex *>&);
  void ~TSGrowableArray<CGxTex *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> > : class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CGxPixelShader,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >(class TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >();
  unsigned int Add(class TSExplicitList<CGxPixelShader,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CGxPixelShader,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CGxPixelShader,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CGxPixelShader,-572662307>* New(class TSExplicitList<CGxPixelShader,-572662307>&);
  class TSExplicitList<CGxPixelShader,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CGxPixelShader,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CGxPixelShader,-572662307>*);
  class TSExplicitList<CGxPixelShader,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> > : class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CGxVertexShader,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >(class TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >();
  unsigned int Add(class TSExplicitList<CGxVertexShader,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CGxVertexShader,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CGxVertexShader,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CGxVertexShader,-572662307>* New(class TSExplicitList<CGxVertexShader,-572662307>&);
  class TSExplicitList<CGxVertexShader,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CGxVertexShader,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CGxVertexShader,-572662307>*);
  class TSExplicitList<CGxVertexShader,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxVertexShader> : class TSFixedArray<CGxVertexShader>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxVertexShader>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGxVertexShader>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGxVertexShader>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxVertexShader>(class TSGrowableArray<CGxVertexShader>&);
  void TSGrowableArray<CGxVertexShader>::TSGrowableArray<CGxVertexShader>();
  unsigned int Add(class CGxVertexShader*);
  unsigned int Add(unsigned int, int, class CGxVertexShader*);
  unsigned int Add(unsigned int, class CGxVertexShader*);
  void GrowToFit(unsigned int, int);
  class CGxVertexShader* New(class CGxVertexShader&);
  class CGxVertexShader* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CGxVertexShader*);
  unsigned int AddElements(unsigned int, class CGxVertexShader*);
  class CGxVertexShader* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxVertexShader>& operator=(class TSGrowableArray<CGxVertexShader>&);
  void ~TSGrowableArray<CGxVertexShader>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxPushedRenderState> : class TSFixedArray<CGxPushedRenderState>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxPushedRenderState>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGxPushedRenderState>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGxPushedRenderState>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxPushedRenderState>(class TSGrowableArray<CGxPushedRenderState>&);
  void TSGrowableArray<CGxPushedRenderState>();
  unsigned int Add(struct CGxPushedRenderState*);
  unsigned int Add(unsigned int, int, struct CGxPushedRenderState*);
  unsigned int Add(unsigned int, struct CGxPushedRenderState*);
  void GrowToFit(unsigned int, int);
  struct CGxPushedRenderState* New(struct CGxPushedRenderState&);
  struct CGxPushedRenderState* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxPushedRenderState*);
  unsigned int AddElements(unsigned int, struct CGxPushedRenderState*);
  struct CGxPushedRenderState* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxPushedRenderState>& operator=(class TSGrowableArray<CGxPushedRenderState>&);
  void ~TSGrowableArray<CGxPushedRenderState>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<unsigned long> : class TSFixedArray<unsigned long>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned long>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<unsigned long>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<unsigned long>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<unsigned long>(class TSGrowableArray<unsigned long>&);
  void TSGrowableArray<unsigned long>();
  unsigned int Add(unsigned long*);
  unsigned int Add(unsigned int, int, unsigned long*);
  unsigned int Add(unsigned int, unsigned long*);
  void GrowToFit(unsigned int, int);
  unsigned long* New(unsigned long&);
  unsigned long* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(unsigned long*);
  unsigned int AddElements(unsigned int, unsigned long*);
  unsigned long* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<unsigned long>& operator=(class TSGrowableArray<unsigned long>&);
  void ~TSGrowableArray<unsigned long>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<enum EGxRenderState> : class TSFixedArray<enum EGxRenderState>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<enum EGxRenderState>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<enum EGxRenderState>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<enum EGxRenderState>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<enum EGxRenderState>(class TSGrowableArray<enum EGxRenderState>&);
  void TSGrowableArray<enum EGxRenderState>();
  unsigned int Add(enum EGxRenderState*);
  unsigned int Add(unsigned int, int, enum EGxRenderState*);
  unsigned int Add(unsigned int, enum EGxRenderState*);
  void GrowToFit(unsigned int, int);
  enum EGxRenderState* New(enum EGxRenderState&);
  enum EGxRenderState* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(enum EGxRenderState*);
  unsigned int AddElements(unsigned int, enum EGxRenderState*);
  enum EGxRenderState* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<enum EGxRenderState>& operator=(class TSGrowableArray<enum EGxRenderState>&);
  void ~TSGrowableArray<enum EGxRenderState>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxPixelShader> : class TSFixedArray<CGxPixelShader>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxPixelShader>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGxPixelShader>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGxPixelShader>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxPixelShader>(class TSGrowableArray<CGxPixelShader>&);
  void TSGrowableArray<CGxPixelShader>::TSGrowableArray<CGxPixelShader>();
  unsigned int Add(class CGxPixelShader*);
  unsigned int Add(unsigned int, int, class CGxPixelShader*);
  unsigned int Add(unsigned int, class CGxPixelShader*);
  void GrowToFit(unsigned int, int);
  class CGxPixelShader* New(class CGxPixelShader&);
  class CGxPixelShader* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CGxPixelShader*);
  unsigned int AddElements(unsigned int, class CGxPixelShader*);
  class CGxPixelShader* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxPixelShader>& operator=(class TSGrowableArray<CGxPixelShader>&);
  void ~TSGrowableArray<CGxPixelShader>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxFormat> : class TSFixedArray<CGxFormat>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxFormat>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<CGxFormat>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxFormat>(class TSGrowableArray<CGxFormat>&);
  void TSGrowableArray<CGxFormat>();
  unsigned int Add(struct CGxFormat*);
  unsigned int Add(unsigned int, int, struct CGxFormat*);
  unsigned int Add(unsigned int, struct CGxFormat*);
  void GrowToFit(unsigned int, int);
  struct CGxFormat* New(struct CGxFormat&);
  struct CGxFormat* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxFormat*);
  unsigned int AddElements(unsigned int, struct CGxFormat*);
  struct CGxFormat* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxFormat>& operator=(class TSGrowableArray<CGxFormat>&);
  void ~TSGrowableArray<CGxFormat>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGxMonitorMode> : class TSFixedArray<CGxMonitorMode>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGxMonitorMode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGxMonitorMode>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGxMonitorMode>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CGxMonitorMode>(class TSGrowableArray<CGxMonitorMode>&);
  void TSGrowableArray<CGxMonitorMode>();
  unsigned int Add(struct CGxMonitorMode*);
  unsigned int Add(unsigned int, int, struct CGxMonitorMode*);
  unsigned int Add(unsigned int, struct CGxMonitorMode*);
  void GrowToFit(unsigned int, int);
  struct CGxMonitorMode* New(struct CGxMonitorMode&);
  struct CGxMonitorMode* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGxMonitorMode*);
  unsigned int AddElements(unsigned int, struct CGxMonitorMode*);
  struct CGxMonitorMode* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGxMonitorMode>& operator=(class TSGrowableArray<CGxMonitorMode>&);
  void ~TSGrowableArray<CGxMonitorMode>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > : class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >(class TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>&);
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>*);
  class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> > : class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CACHEENTRY,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >(class TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >();
  unsigned int Add(class TSExplicitList<CACHEENTRY,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CACHEENTRY,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CACHEENTRY,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CACHEENTRY,-572662307>* New(class TSExplicitList<CACHEENTRY,-572662307>&);
  class TSExplicitList<CACHEENTRY,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CACHEENTRY,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CACHEENTRY,-572662307>*);
  class TSExplicitList<CACHEENTRY,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> > : class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<UNITPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >(class TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >();
  unsigned int Add(class TSExplicitList<UNITPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<UNITPORTRAIT,-572662307>* New(class TSExplicitList<UNITPORTRAIT,-572662307>&);
  class TSExplicitList<UNITPORTRAIT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<UNITPORTRAIT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<UNITPORTRAIT,-572662307>*);
  class TSExplicitList<UNITPORTRAIT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> > : class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >(class TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >();
  unsigned int Add(class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* New(class TSExplicitList<PLAYERPORTRAIT,-572662307>&);
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<PLAYERPORTRAIT,-572662307>*);
  class TSExplicitList<PLAYERPORTRAIT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> > : class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ITEMPORTRAIT,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >(class TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >();
  unsigned int Add(class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ITEMPORTRAIT,-572662307>* New(class TSExplicitList<ITEMPORTRAIT,-572662307>&);
  class TSExplicitList<ITEMPORTRAIT,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ITEMPORTRAIT,-572662307>*);
  class TSExplicitList<ITEMPORTRAIT,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NearestEnemyData> : class TSFixedArray<NearestEnemyData>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NearestEnemyData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<NearestEnemyData>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NearestEnemyData>(class TSGrowableArray<NearestEnemyData>&);
  void TSGrowableArray<NearestEnemyData>();
  unsigned int Add(struct NearestEnemyData*);
  unsigned int Add(unsigned int, int, struct NearestEnemyData*);
  unsigned int Add(unsigned int, struct NearestEnemyData*);
  void GrowToFit(unsigned int, int);
  struct NearestEnemyData* New(struct NearestEnemyData&);
  struct NearestEnemyData* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct NearestEnemyData*);
  unsigned int AddElements(unsigned int, struct NearestEnemyData*);
  struct NearestEnemyData* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NearestEnemyData>& operator=(class TSGrowableArray<NearestEnemyData>&);
  void ~TSGrowableArray<NearestEnemyData>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<LanguageWordsRec const *> : class TSFixedArray<LanguageWordsRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<LanguageWordsRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<LanguageWordsRec const *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<LanguageWordsRec const *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<LanguageWordsRec const *>(class TSGrowableArray<LanguageWordsRec const *>&);
  void TSGrowableArray<LanguageWordsRec const *>();
  unsigned int Add(class LanguageWordsRec**);
  unsigned int Add(unsigned int, int, class LanguageWordsRec**);
  unsigned int Add(unsigned int, class LanguageWordsRec**);
  void GrowToFit(unsigned int, int);
  class LanguageWordsRec** New(class LanguageWordsRec*&);
  class LanguageWordsRec** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class LanguageWordsRec**);
  unsigned int AddElements(unsigned int, class LanguageWordsRec**);
  class LanguageWordsRec** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<LanguageWordsRec const *>& operator=(class TSGrowableArray<LanguageWordsRec const *>&);
  void ~TSGrowableArray<LanguageWordsRec const *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<ChatChannel> : class TSFixedArray<ChatChannel>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<ChatChannel>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<ChatChannel>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<ChatChannel>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<ChatChannel>(class TSGrowableArray<ChatChannel>&);
  void TSGrowableArray<ChatChannel>();
  unsigned int Add(struct ChatChannel*);
  unsigned int Add(unsigned int, int, struct ChatChannel*);
  unsigned int Add(unsigned int, struct ChatChannel*);
  void GrowToFit(unsigned int, int);
  struct ChatChannel* New(struct ChatChannel&);
  struct ChatChannel* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct ChatChannel*);
  unsigned int AddElements(unsigned int, struct ChatChannel*);
  struct ChatChannel* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<ChatChannel>& operator=(class TSGrowableArray<ChatChannel>&);
  void ~TSGrowableArray<ChatChannel>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<WORDLIST,-572662307> > : class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<WORDLIST,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >(class TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >&);
  void TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >();
  unsigned int Add(class TSExplicitList<WORDLIST,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<WORDLIST,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<WORDLIST,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<WORDLIST,-572662307>* New(class TSExplicitList<WORDLIST,-572662307>&);
  class TSExplicitList<WORDLIST,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<WORDLIST,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<WORDLIST,-572662307>*);
  class TSExplicitList<WORDLIST,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<WORDLIST,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* New(class TSExplicitList<FADEOUTHASHOBJ,-572662307>&);
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FADEOUTHASHOBJ,-572662307>*);
  class TSExplicitList<FADEOUTHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TrainerServiceInfo *> : class TSFixedArray<TrainerServiceInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TrainerServiceInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TrainerServiceInfo *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TrainerServiceInfo *>(class TSGrowableArray<TrainerServiceInfo *>&);
  void TSGrowableArray<TrainerServiceInfo *>();
  unsigned int Add(struct TrainerServiceInfo**);
  unsigned int Add(unsigned int, int, struct TrainerServiceInfo**);
  unsigned int TSGrowableArray<TrainerServiceInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct TrainerServiceInfo** data);
  void GrowToFit(unsigned int, int);
  struct TrainerServiceInfo** New(struct TrainerServiceInfo*&);
  struct TrainerServiceInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TrainerServiceInfo**);
  unsigned int AddElements(unsigned int, struct TrainerServiceInfo**);
  struct TrainerServiceInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TrainerServiceInfo *>& operator=(class TSGrowableArray<TrainerServiceInfo *>&);
  void ~TSGrowableArray<TrainerServiceInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TrainerSkillLineInfo *> : class TSFixedArray<TrainerSkillLineInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TrainerSkillLineInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TrainerSkillLineInfo *>(class TSGrowableArray<TrainerSkillLineInfo *>&);
  void TSGrowableArray<TrainerSkillLineInfo *>();
  unsigned int Add(struct TrainerSkillLineInfo**);
  unsigned int Add(unsigned int, int, struct TrainerSkillLineInfo**);
  unsigned int TSGrowableArray<TrainerSkillLineInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct TrainerSkillLineInfo** data);
  void GrowToFit(unsigned int, int);
  struct TrainerSkillLineInfo** New(struct TrainerSkillLineInfo*&);
  struct TrainerSkillLineInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TrainerSkillLineInfo**);
  unsigned int AddElements(unsigned int, struct TrainerSkillLineInfo**);
  struct TrainerSkillLineInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TrainerSkillLineInfo *>& operator=(class TSGrowableArray<TrainerSkillLineInfo *>&);
  void ~TSGrowableArray<TrainerSkillLineInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> > : class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<KEYBINDING,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >(class TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >();
  unsigned int Add(class TSExplicitList<KEYBINDING,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<KEYBINDING,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<KEYBINDING,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<KEYBINDING,-572662307>* New(class TSExplicitList<KEYBINDING,-572662307>&);
  class TSExplicitList<KEYBINDING,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<KEYBINDING,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<KEYBINDING,-572662307>*);
  class TSExplicitList<KEYBINDING,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> > : class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<KEYCOMMAND,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >(class TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >();
  unsigned int Add(class TSExplicitList<KEYCOMMAND,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<KEYCOMMAND,-572662307>* New(class TSExplicitList<KEYCOMMAND,-572662307>&);
  class TSExplicitList<KEYCOMMAND,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<KEYCOMMAND,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<KEYCOMMAND,-572662307>*);
  class TSExplicitList<KEYCOMMAND,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<PetitionSignerInfo> : class TSFixedArray<PetitionSignerInfo>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<PetitionSignerInfo>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<PetitionSignerInfo>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<PetitionSignerInfo>(class TSGrowableArray<PetitionSignerInfo>&);
  void TSGrowableArray<PetitionSignerInfo>();
  unsigned int Add(struct PetitionSignerInfo*);
  unsigned int Add(unsigned int, int, struct PetitionSignerInfo*);
  unsigned int Add(unsigned int, struct PetitionSignerInfo*);
  void GrowToFit(unsigned int, int);
  struct PetitionSignerInfo* New(struct PetitionSignerInfo&);
  struct PetitionSignerInfo* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct PetitionSignerInfo*);
  unsigned int AddElements(unsigned int, struct PetitionSignerInfo*);
  struct PetitionSignerInfo* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<PetitionSignerInfo>& operator=(class TSGrowableArray<PetitionSignerInfo>&);
  void ~TSGrowableArray<PetitionSignerInfo>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CraftInfo *> : class TSFixedArray<CraftInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CraftInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CraftInfo *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CraftInfo *>(class TSGrowableArray<CraftInfo *>&);
  void TSGrowableArray<CraftInfo *>();
  unsigned int Add(struct CraftInfo**);
  unsigned int Add(unsigned int, int, struct CraftInfo**);
  unsigned int TSGrowableArray<CraftInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CraftInfo** data);
  void GrowToFit(unsigned int, int);
  struct CraftInfo** New(struct CraftInfo*&);
  struct CraftInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CraftInfo**);
  unsigned int AddElements(unsigned int, struct CraftInfo**);
  struct CraftInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CraftInfo *>& operator=(class TSGrowableArray<CraftInfo *>&);
  void ~TSGrowableArray<CraftInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CraftSkillLineInfo *> : class TSFixedArray<CraftSkillLineInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CraftSkillLineInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CraftSkillLineInfo *>(class TSGrowableArray<CraftSkillLineInfo *>&);
  void TSGrowableArray<CraftSkillLineInfo *>();
  unsigned int Add(struct CraftSkillLineInfo**);
  unsigned int Add(unsigned int, int, struct CraftSkillLineInfo**);
  unsigned int TSGrowableArray<CraftSkillLineInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CraftSkillLineInfo** data);
  void GrowToFit(unsigned int, int);
  struct CraftSkillLineInfo** New(struct CraftSkillLineInfo*&);
  struct CraftSkillLineInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CraftSkillLineInfo**);
  unsigned int AddElements(unsigned int, struct CraftSkillLineInfo**);
  struct CraftSkillLineInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CraftSkillLineInfo *>& operator=(class TSGrowableArray<CraftSkillLineInfo *>&);
  void ~TSGrowableArray<CraftSkillLineInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<int> : class TSFixedArray<int>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<int>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<int>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<int>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<int>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<int>(class TSGrowableArray<int>&);
  void TSGrowableArray<int>();
  unsigned int Add(int*);
  unsigned int Add(unsigned int, int, int*);
  unsigned int Add(unsigned int, int*);
  void GrowToFit(unsigned int, int);
  int* New(int&);
  int* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(int*);
  unsigned int AddElements(unsigned int, int*);
  int* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<int>& operator=(class TSGrowableArray<int>&);
  void ~TSGrowableArray<int>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TradeSkillSubClassInfo *> : class TSFixedArray<TradeSkillSubClassInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TradeSkillSubClassInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TradeSkillSubClassInfo *>(class TSGrowableArray<TradeSkillSubClassInfo *>&);
  void TSGrowableArray<TradeSkillSubClassInfo *>();
  unsigned int Add(struct TradeSkillSubClassInfo**);
  unsigned int Add(unsigned int, int, struct TradeSkillSubClassInfo**);
  unsigned int TSGrowableArray<TradeSkillSubClassInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct TradeSkillSubClassInfo** data);
  void GrowToFit(unsigned int, int);
  struct TradeSkillSubClassInfo** New(struct TradeSkillSubClassInfo*&);
  struct TradeSkillSubClassInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TradeSkillSubClassInfo**);
  unsigned int AddElements(unsigned int, struct TradeSkillSubClassInfo**);
  struct TradeSkillSubClassInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TradeSkillSubClassInfo *>& operator=(class TSGrowableArray<TradeSkillSubClassInfo *>&);
  void ~TSGrowableArray<TradeSkillSubClassInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TradeSkillInfo *> : class TSFixedArray<TradeSkillInfo *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TradeSkillInfo *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TradeSkillInfo *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TradeSkillInfo *>(class TSGrowableArray<TradeSkillInfo *>&);
  void TSGrowableArray<TradeSkillInfo *>();
  unsigned int Add(struct TradeSkillInfo**);
  unsigned int Add(unsigned int, int, struct TradeSkillInfo**);
  unsigned int TSGrowableArray<TradeSkillInfo *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct TradeSkillInfo** data);
  void GrowToFit(unsigned int, int);
  struct TradeSkillInfo** New(struct TradeSkillInfo*&);
  struct TradeSkillInfo** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct TradeSkillInfo**);
  unsigned int AddElements(unsigned int, struct TradeSkillInfo**);
  struct TradeSkillInfo** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TradeSkillInfo *>& operator=(class TSGrowableArray<TradeSkillInfo *>&);
  void ~TSGrowableArray<TradeSkillInfo *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<AreaPOIRec const *> : class TSFixedArray<AreaPOIRec const *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<AreaPOIRec const *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<AreaPOIRec const *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<AreaPOIRec const *>(class TSGrowableArray<AreaPOIRec const *>&);
  void TSGrowableArray<AreaPOIRec const *>();
  unsigned int Add(class AreaPOIRec**);
  unsigned int Add(unsigned int, int, class AreaPOIRec**);
  unsigned int Add(unsigned int, class AreaPOIRec**);
  void GrowToFit(unsigned int, int);
  class AreaPOIRec** New(class AreaPOIRec*&);
  class AreaPOIRec** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class AreaPOIRec**);
  unsigned int AddElements(unsigned int, class AreaPOIRec**);
  class AreaPOIRec** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<AreaPOIRec const *>& operator=(class TSGrowableArray<AreaPOIRec const *>&);
  void ~TSGrowableArray<AreaPOIRec const *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<POIINFO> : class TSFixedArray<POIINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<POIINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<POIINFO>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<POIINFO>(class TSGrowableArray<POIINFO>&);
  void TSGrowableArray<POIINFO>();
  unsigned int Add(struct POIINFO*);
  unsigned int Add(unsigned int, int, struct POIINFO*);
  unsigned int Add(unsigned int, struct POIINFO*);
  void GrowToFit(unsigned int, int);
  struct POIINFO* New(struct POIINFO&);
  struct POIINFO* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct POIINFO*);
  unsigned int AddElements(unsigned int, struct POIINFO*);
  struct POIINFO* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<POIINFO>& operator=(class TSGrowableArray<POIINFO>&);
  void ~TSGrowableArray<POIINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<POIDIRECTIONDATA> : class TSFixedArray<POIDIRECTIONDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<POIDIRECTIONDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<POIDIRECTIONDATA>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<POIDIRECTIONDATA>(class TSGrowableArray<POIDIRECTIONDATA>&);
  void TSGrowableArray<POIDIRECTIONDATA>();
  unsigned int Add(struct POIDIRECTIONDATA*);
  unsigned int Add(unsigned int, int, struct POIDIRECTIONDATA*);
  unsigned int Add(unsigned int, struct POIDIRECTIONDATA*);
  void GrowToFit(unsigned int, int);
  struct POIDIRECTIONDATA* New(struct POIDIRECTIONDATA&);
  struct POIDIRECTIONDATA* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct POIDIRECTIONDATA*);
  unsigned int AddElements(unsigned int, struct POIDIRECTIONDATA*);
  struct POIDIRECTIONDATA* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<POIDIRECTIONDATA>& operator=(class TSGrowableArray<POIDIRECTIONDATA>&);
  void ~TSGrowableArray<POIDIRECTIONDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OBJINFO> : class TSFixedArray<OBJINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OBJINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<OBJINFO>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<OBJINFO>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OBJINFO>(class TSGrowableArray<OBJINFO>&);
  void TSGrowableArray<OBJINFO>();
  unsigned int Add(struct OBJINFO*);
  unsigned int Add(unsigned int, int, struct OBJINFO*);
  unsigned int Add(unsigned int, struct OBJINFO*);
  void GrowToFit(unsigned int, int);
  struct OBJINFO* New(struct OBJINFO&);
  struct OBJINFO* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OBJINFO*);
  unsigned int AddElements(unsigned int, struct OBJINFO*);
  struct OBJINFO* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OBJINFO>& operator=(class TSGrowableArray<OBJINFO>&);
  void ~TSGrowableArray<OBJINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<unsigned __int64> : class TSFixedArray<unsigned __int64>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned __int64>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<unsigned __int64>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<unsigned __int64>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<unsigned __int64>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<unsigned __int64>(class TSGrowableArray<unsigned __int64>&);
  void TSGrowableArray<unsigned __int64>::TSGrowableArray<unsigned __int64>();
  unsigned int Add(unsigned __int64*);
  unsigned int Add(unsigned int, int, unsigned __int64*);
  unsigned int Add(unsigned int, unsigned __int64*);
  void GrowToFit(unsigned int, int);
  unsigned __int64* New(unsigned __int64&);
  unsigned __int64* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(unsigned __int64*);
  unsigned int AddElements(unsigned int, unsigned __int64*);
  unsigned __int64* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<unsigned __int64>& operator=(class TSGrowableArray<unsigned __int64>&);
  void ~TSGrowableArray<unsigned __int64>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<enum FACET_COLOR> : class TSFixedArray<enum FACET_COLOR>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<enum FACET_COLOR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<enum FACET_COLOR>(class TSGrowableArray<enum FACET_COLOR>&);
  void TSGrowableArray<enum FACET_COLOR>();
  unsigned int Add(enum FACET_COLOR*);
  unsigned int Add(unsigned int, int, enum FACET_COLOR*);
  unsigned int Add(unsigned int, enum FACET_COLOR*);
  void GrowToFit(unsigned int, int);
  enum FACET_COLOR* New(enum FACET_COLOR&);
  enum FACET_COLOR* TSGrowableArray<enum FACET_COLOR>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<enum FACET_COLOR>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(enum FACET_COLOR*);
  unsigned int AddElements(unsigned int, enum FACET_COLOR*);
  enum FACET_COLOR* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<enum FACET_COLOR>& operator=(class TSGrowableArray<enum FACET_COLOR>&);
  void ~TSGrowableArray<enum FACET_COLOR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::CImVector> : class TSFixedArray<NTempest::CImVector>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::CImVector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NTempest::CImVector>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NTempest::CImVector>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<NTempest::CImVector>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<NTempest::CImVector>(class TSGrowableArray<NTempest::CImVector>&);
  void TSGrowableArray<NTempest::CImVector>::TSGrowableArray<NTempest::CImVector>();
  unsigned int Add(class NTempest::CImVector*);
  unsigned int Add(unsigned int, int, class NTempest::CImVector*);
  unsigned int Add(unsigned int, class NTempest::CImVector*);
  void GrowToFit(unsigned int, int);
  class NTempest::CImVector* New(class NTempest::CImVector&);
  class NTempest::CImVector* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<NTempest::CImVector>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::CImVector*);
  unsigned int AddElements(unsigned int, class NTempest::CImVector*);
  class NTempest::CImVector* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::CImVector>& operator=(class TSGrowableArray<NTempest::CImVector>&);
  void ~TSGrowableArray<NTempest::CImVector>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CWalkableSurface> : class TSFixedArray<CWalkableSurface>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CWalkableSurface>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CWalkableSurface>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CWalkableSurface>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CWalkableSurface>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CWalkableSurface>(class TSGrowableArray<CWalkableSurface>&);
  void TSGrowableArray<CWalkableSurface>();
  unsigned int Add(struct CWalkableSurface*);
  unsigned int Add(unsigned int, int, struct CWalkableSurface*);
  unsigned int Add(unsigned int, struct CWalkableSurface*);
  void GrowToFit(unsigned int, int);
  struct CWalkableSurface* New(struct CWalkableSurface&);
  struct CWalkableSurface* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CWalkableSurface*);
  unsigned int AddElements(unsigned int, struct CWalkableSurface*);
  struct CWalkableSurface* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CWalkableSurface>& operator=(class TSGrowableArray<CWalkableSurface>&);
  void ~TSGrowableArray<CWalkableSurface>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CHARACTERVARIATIONS> : class TSFixedArray<CHARACTERVARIATIONS>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CHARACTERVARIATIONS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CHARACTERVARIATIONS>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CHARACTERVARIATIONS>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CHARACTERVARIATIONS>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CHARACTERVARIATIONS>(class TSGrowableArray<CHARACTERVARIATIONS>&);
  void TSGrowableArray<CHARACTERVARIATIONS>::TSGrowableArray<CHARACTERVARIATIONS>();
  unsigned int Add(struct CHARACTERVARIATIONS*);
  unsigned int Add(unsigned int, int, struct CHARACTERVARIATIONS*);
  unsigned int Add(unsigned int, struct CHARACTERVARIATIONS*);
  void GrowToFit(unsigned int, int);
  struct CHARACTERVARIATIONS* New(struct CHARACTERVARIATIONS&);
  struct CHARACTERVARIATIONS* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CHARACTERVARIATIONS*);
  unsigned int AddElements(unsigned int, struct CHARACTERVARIATIONS*);
  struct CHARACTERVARIATIONS* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CHARACTERVARIATIONS>& operator=(class TSGrowableArray<CHARACTERVARIATIONS>&);
  void TSGrowableArray<CHARACTERVARIATIONS>::~TSGrowableArray<CHARACTERVARIATIONS>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<STRINGWANNABE> : class TSFixedArray<STRINGWANNABE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<STRINGWANNABE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<STRINGWANNABE>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<STRINGWANNABE>(class TSGrowableArray<STRINGWANNABE>&);
  void TSGrowableArray<STRINGWANNABE>::TSGrowableArray<STRINGWANNABE>();
  unsigned int Add(struct STRINGWANNABE*);
  unsigned int Add(unsigned int, int, struct STRINGWANNABE*);
  unsigned int Add(unsigned int, struct STRINGWANNABE*);
  void GrowToFit(unsigned int, int);
  struct STRINGWANNABE* New(struct STRINGWANNABE&);
  struct STRINGWANNABE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<STRINGWANNABE>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct STRINGWANNABE*);
  unsigned int AddElements(unsigned int, struct STRINGWANNABE*);
  struct STRINGWANNABE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<STRINGWANNABE>& operator=(class TSGrowableArray<STRINGWANNABE>&);
  void ~TSGrowableArray<STRINGWANNABE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<INTDATA> : class TSFixedArray<INTDATA>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<INTDATA>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<INTDATA>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<INTDATA>::TSGrowableArray<INTDATA>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<INTDATA>& __that);
  void TSGrowableArray<INTDATA>::TSGrowableArray<INTDATA>();
  unsigned int Add(struct INTDATA*);
  unsigned int Add(unsigned int, int, struct INTDATA*);
  unsigned int Add(unsigned int, struct INTDATA*);
  void GrowToFit(unsigned int, int);
  struct INTDATA* New(struct INTDATA&);
  struct INTDATA* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct INTDATA*);
  unsigned int AddElements(unsigned int, struct INTDATA*);
  struct INTDATA* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<INTDATA>& operator=(class TSGrowableArray<INTDATA>&);
  void ~TSGrowableArray<INTDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CHARACTERRACEVARIATIONS> : class TSFixedArray<CHARACTERRACEVARIATIONS>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CHARACTERRACEVARIATIONS>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CHARACTERRACEVARIATIONS>(class TSGrowableArray<CHARACTERRACEVARIATIONS>&);
  void TSGrowableArray<CHARACTERRACEVARIATIONS>();
  unsigned int Add(struct CHARACTERRACEVARIATIONS*);
  unsigned int Add(unsigned int, int, struct CHARACTERRACEVARIATIONS*);
  unsigned int Add(unsigned int, struct CHARACTERRACEVARIATIONS*);
  void GrowToFit(unsigned int, int);
  struct CHARACTERRACEVARIATIONS* New(struct CHARACTERRACEVARIATIONS&);
  struct CHARACTERRACEVARIATIONS* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CHARACTERRACEVARIATIONS*);
  unsigned int AddElements(unsigned int, struct CHARACTERRACEVARIATIONS*);
  struct CHARACTERRACEVARIATIONS* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CHARACTERRACEVARIATIONS>& operator=(class TSGrowableArray<CHARACTERRACEVARIATIONS>&);
  void ~TSGrowableArray<CHARACTERRACEVARIATIONS>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CHARINFO> : class TSFixedArray<CHARINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CHARINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<CHARINFO>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CHARINFO>(class TSGrowableArray<CHARINFO>&);
  void TSGrowableArray<CHARINFO>();
  unsigned int Add(struct CHARINFO*);
  unsigned int Add(unsigned int, int, struct CHARINFO*);
  unsigned int Add(unsigned int, struct CHARINFO*);
  void GrowToFit(unsigned int, int);
  struct CHARINFO* New(struct CHARINFO&);
  struct CHARINFO* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CHARINFO*);
  unsigned int AddElements(unsigned int, struct CHARINFO*);
  struct CHARINFO* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CHARINFO>& operator=(class TSGrowableArray<CHARINFO>&);
  void ~TSGrowableArray<CHARINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> > : class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<C_OBJECTHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >(class TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >::TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<C_OBJECTHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<C_OBJECTHASH,-572662307>* New(class TSExplicitList<C_OBJECTHASH,-572662307>&);
  class TSExplicitList<C_OBJECTHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<C_OBJECTHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<C_OBJECTHASH,-572662307>*);
  class TSExplicitList<C_OBJECTHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CObjectHeap> : class TSFixedArray<CObjectHeap>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CObjectHeap>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CObjectHeap>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CObjectHeap>(class TSGrowableArray<CObjectHeap>&);
  void TSGrowableArray<CObjectHeap>::TSGrowableArray<CObjectHeap>();
  unsigned int Add(class CObjectHeap*);
  unsigned int Add(unsigned int, int, class CObjectHeap*);
  unsigned int Add(unsigned int, class CObjectHeap*);
  void GrowToFit(unsigned int, int);
  class CObjectHeap* New(class CObjectHeap&);
  class CObjectHeap* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CObjectHeap*);
  unsigned int AddElements(unsigned int, class CObjectHeap*);
  class CObjectHeap* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CObjectHeap>& operator=(class TSGrowableArray<CObjectHeap>&);
  void ~TSGrowableArray<CObjectHeap>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CObjectHeapList> : class TSFixedArray<CObjectHeapList>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CObjectHeapList>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CObjectHeapList>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CObjectHeapList>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CObjectHeapList>(class TSGrowableArray<CObjectHeapList>&);
  void TSGrowableArray<CObjectHeapList>();
  unsigned int Add(class CObjectHeapList*);
  unsigned int Add(unsigned int, int, class CObjectHeapList*);
  unsigned int Add(unsigned int, class CObjectHeapList*);
  void GrowToFit(unsigned int, int);
  class CObjectHeapList* New(class CObjectHeapList&);
  class CObjectHeapList* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CObjectHeapList*);
  unsigned int AddElements(unsigned int, class CObjectHeapList*);
  class CObjectHeapList* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CObjectHeapList>& operator=(class TSGrowableArray<CObjectHeapList>&);
  void ~TSGrowableArray<CObjectHeapList>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> > : class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >(class TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >();
  unsigned int Add(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* New(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>&);
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>*);
  class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> > : class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >(class TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* New(class TSExplicitList<SHEATHSOUNDHASH,-572662307>&);
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SHEATHSOUNDHASH,-572662307>*);
  class TSExplicitList<SHEATHSOUNDHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<REVERBINFO> : class TSFixedArray<REVERBINFO>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<REVERBINFO>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<REVERBINFO>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<REVERBINFO>(class TSGrowableArray<REVERBINFO>&);
  void TSGrowableArray<REVERBINFO>();
  unsigned int Add(struct REVERBINFO*);
  unsigned int Add(unsigned int, int, struct REVERBINFO*);
  unsigned int Add(unsigned int, struct REVERBINFO*);
  void GrowToFit(unsigned int, int);
  struct REVERBINFO* New(struct REVERBINFO&);
  struct REVERBINFO* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct REVERBINFO*);
  unsigned int AddElements(unsigned int, struct REVERBINFO*);
  struct REVERBINFO* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<REVERBINFO>& operator=(class TSGrowableArray<REVERBINFO>&);
  void ~TSGrowableArray<REVERBINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> > : class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SOUNDDEFINITION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >(class TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >();
  unsigned int Add(class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SOUNDDEFINITION,-572662307>* New(class TSExplicitList<SOUNDDEFINITION,-572662307>&);
  class TSExplicitList<SOUNDDEFINITION,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SOUNDDEFINITION,-572662307>*);
  class TSExplicitList<SOUNDDEFINITION,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> > : class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >(class TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >();
  unsigned int Add(class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* New(class TSExplicitList<UISOUNDLOOKUP,-572662307>&);
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<UISOUNDLOOKUP,-572662307>*);
  class TSExplicitList<UISOUNDLOOKUP,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OUTDOORSCHUNKHASHOBJ *> : class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OUTDOORSCHUNKHASHOBJ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>(class TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>&);
  void TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>();
  unsigned int Add(struct OUTDOORSCHUNKHASHOBJ**);
  unsigned int Add(unsigned int, int, struct OUTDOORSCHUNKHASHOBJ**);
  unsigned int Add(unsigned int, struct OUTDOORSCHUNKHASHOBJ**);
  void GrowToFit(unsigned int, int);
  struct OUTDOORSCHUNKHASHOBJ** New(struct OUTDOORSCHUNKHASHOBJ*&);
  struct OUTDOORSCHUNKHASHOBJ** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OUTDOORSCHUNKHASHOBJ**);
  unsigned int AddElements(unsigned int, struct OUTDOORSCHUNKHASHOBJ**);
  struct OUTDOORSCHUNKHASHOBJ** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>& operator=(class TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>&);
  void ~TSGrowableArray<OUTDOORSCHUNKHASHOBJ *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* New(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>&);
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>*);
  class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CHUNKHASHOBJ *> : class TSFixedArray<CHUNKHASHOBJ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CHUNKHASHOBJ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CHUNKHASHOBJ *>(class TSGrowableArray<CHUNKHASHOBJ *>&);
  void TSGrowableArray<CHUNKHASHOBJ *>();
  unsigned int Add(struct CHUNKHASHOBJ**);
  unsigned int Add(unsigned int, int, struct CHUNKHASHOBJ**);
  unsigned int Add(unsigned int, struct CHUNKHASHOBJ**);
  void GrowToFit(unsigned int, int);
  struct CHUNKHASHOBJ** New(struct CHUNKHASHOBJ*&);
  struct CHUNKHASHOBJ** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CHUNKHASHOBJ**);
  unsigned int AddElements(unsigned int, struct CHUNKHASHOBJ**);
  struct CHUNKHASHOBJ** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CHUNKHASHOBJ *>& operator=(class TSGrowableArray<CHUNKHASHOBJ *>&);
  void ~TSGrowableArray<CHUNKHASHOBJ *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MACRODESC> : class TSFixedArray<MACRODESC>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MACRODESC>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MACRODESC>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MACRODESC>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MACRODESC>(class TSGrowableArray<MACRODESC>&);
  void TSGrowableArray<MACRODESC>();
  unsigned int Add(struct MACRODESC*);
  unsigned int Add(unsigned int, int, struct MACRODESC*);
  unsigned int Add(unsigned int, struct MACRODESC*);
  void GrowToFit(unsigned int, int);
  struct MACRODESC* New(struct MACRODESC&);
  struct MACRODESC* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MACRODESC*);
  unsigned int AddElements(unsigned int, struct MACRODESC*);
  struct MACRODESC* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MACRODESC>& operator=(class TSGrowableArray<MACRODESC>&);
  void ~TSGrowableArray<MACRODESC>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* New(class TSExplicitList<CHUNKHASHOBJ,-572662307>&);
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CHUNKHASHOBJ,-572662307>*);
  class TSExplicitList<CHUNKHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CTextureHash,-572662307> > : class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CTextureHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >(class TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >();
  unsigned int Add(class TSExplicitList<CTextureHash,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CTextureHash,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CTextureHash,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CTextureHash,-572662307>* New(class TSExplicitList<CTextureHash,-572662307>&);
  class TSExplicitList<CTextureHash,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CTextureHash,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CTextureHash,-572662307>*);
  class TSExplicitList<CTextureHash,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CTextureHash,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> > : class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CSolidTextureHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >(class TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >();
  unsigned int Add(class TSExplicitList<CSolidTextureHash,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CSolidTextureHash,-572662307>* New(class TSExplicitList<CSolidTextureHash,-572662307>&);
  class TSExplicitList<CSolidTextureHash,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CSolidTextureHash,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CSolidTextureHash,-572662307>*);
  class TSExplicitList<CSolidTextureHash,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSolidTextureHash> : class TSFixedArray<CSolidTextureHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSolidTextureHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CSolidTextureHash>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CSolidTextureHash>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSolidTextureHash>(class TSGrowableArray<CSolidTextureHash>&);
  void TSGrowableArray<CSolidTextureHash>::TSGrowableArray<CSolidTextureHash>();
  unsigned int Add(struct CSolidTextureHash*);
  unsigned int Add(unsigned int, int, struct CSolidTextureHash*);
  unsigned int Add(unsigned int, struct CSolidTextureHash*);
  void GrowToFit(unsigned int, int);
  struct CSolidTextureHash* New(struct CSolidTextureHash&);
  struct CSolidTextureHash* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CSolidTextureHash*);
  unsigned int AddElements(unsigned int, struct CSolidTextureHash*);
  struct CSolidTextureHash* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSolidTextureHash>& operator=(class TSGrowableArray<CSolidTextureHash>&);
  void ~TSGrowableArray<CSolidTextureHash>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CTextureHash> : class TSFixedArray<CTextureHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CTextureHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CTextureHash>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CTextureHash>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CTextureHash>(class TSGrowableArray<CTextureHash>&);
  void TSGrowableArray<CTextureHash>::TSGrowableArray<CTextureHash>();
  unsigned int Add(struct CTextureHash*);
  unsigned int Add(unsigned int, int, struct CTextureHash*);
  unsigned int Add(unsigned int, struct CTextureHash*);
  void GrowToFit(unsigned int, int);
  struct CTextureHash* New(struct CTextureHash&);
  struct CTextureHash* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CTextureHash*);
  unsigned int AddElements(unsigned int, struct CTextureHash*);
  struct CTextureHash* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CTextureHash>& operator=(class TSGrowableArray<CTextureHash>&);
  void ~TSGrowableArray<CTextureHash>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CTexture *> : class TSFixedArray<CTexture *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CTexture *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CTexture *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CTexture *>(class TSGrowableArray<CTexture *>&);
  void TSGrowableArray<CTexture *>();
  unsigned int Add(class CTexture**);
  unsigned int Add(unsigned int, int, class CTexture**);
  unsigned int Add(unsigned int, class CTexture**);
  void GrowToFit(unsigned int, int);
  class CTexture** New(class CTexture*&);
  class CTexture** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CTexture**);
  unsigned int AddElements(unsigned int, class CTexture**);
  class CTexture** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CTexture *>& operator=(class TSGrowableArray<CTexture *>&);
  void ~TSGrowableArray<CTexture *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CParticleEmitter2 *> : class TSFixedArray<CParticleEmitter2 *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CParticleEmitter2 *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CParticleEmitter2 *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CParticleEmitter2 *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CParticleEmitter2 *>(class TSGrowableArray<CParticleEmitter2 *>&);
  void TSGrowableArray<CParticleEmitter2 *>::TSGrowableArray<CParticleEmitter2 *>();
  unsigned int Add(class CParticleEmitter2**);
  unsigned int Add(unsigned int, int, class CParticleEmitter2**);
  unsigned int Add(unsigned int, class CParticleEmitter2**);
  void GrowToFit(unsigned int, int);
  class CParticleEmitter2** New(class CParticleEmitter2*&);
  class CParticleEmitter2** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CParticleEmitter2**);
  unsigned int AddElements(unsigned int, class CParticleEmitter2**);
  class CParticleEmitter2** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CParticleEmitter2 *>& operator=(class TSGrowableArray<CParticleEmitter2 *>&);
  void ~TSGrowableArray<CParticleEmitter2 *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CParticleEmitter *> : class TSFixedArray<CParticleEmitter *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CParticleEmitter *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CParticleEmitter *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CParticleEmitter *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CParticleEmitter *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CParticleEmitter *>(class TSGrowableArray<CParticleEmitter *>&);
  void TSGrowableArray<CParticleEmitter *>();
  unsigned int Add(class CParticleEmitter**);
  unsigned int Add(unsigned int, int, class CParticleEmitter**);
  unsigned int Add(unsigned int, class CParticleEmitter**);
  void GrowToFit(unsigned int, int);
  class CParticleEmitter** New(class CParticleEmitter*&);
  class CParticleEmitter** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CParticleEmitter**);
  unsigned int AddElements(unsigned int, class CParticleEmitter**);
  class CParticleEmitter** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CParticleEmitter *>& operator=(class TSGrowableArray<CParticleEmitter *>&);
  void ~TSGrowableArray<CParticleEmitter *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CRibbonEmitter *> : class TSFixedArray<CRibbonEmitter *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CRibbonEmitter *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CRibbonEmitter *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CRibbonEmitter *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CRibbonEmitter *>(class TSGrowableArray<CRibbonEmitter *>&);
  void TSGrowableArray<CRibbonEmitter *>();
  unsigned int Add(class CRibbonEmitter**);
  unsigned int Add(unsigned int, int, class CRibbonEmitter**);
  unsigned int Add(unsigned int, class CRibbonEmitter**);
  void GrowToFit(unsigned int, int);
  class CRibbonEmitter** New(class CRibbonEmitter*&);
  class CRibbonEmitter** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CRibbonEmitter**);
  unsigned int AddElements(unsigned int, class CRibbonEmitter**);
  class CRibbonEmitter** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CRibbonEmitter *>& operator=(class TSGrowableArray<CRibbonEmitter *>&);
  void ~TSGrowableArray<CRibbonEmitter *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<void (__fastcall*)(void)> : class TSFixedArray<void (__fastcall*)(void)>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<void (__fastcall*)(void)>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<void (__fastcall*)(void)>(class TSGrowableArray<void (__fastcall*)(void)>&);
  void TSGrowableArray<void (__fastcall*)(void)>();
  unsigned int Add(void  (**)());
  unsigned int Add(unsigned int, int, void  (**)());
  unsigned int Add(unsigned int, void  (**)());
  void GrowToFit(unsigned int, int);
  void  (**)() New(void  (*)()&);
  void  (**)() New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(void  (**)());
  unsigned int AddElements(unsigned int, void  (**)());
  void  (**)() NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<void (__fastcall*)(void)>& operator=(class TSGrowableArray<void (__fastcall*)(void)>&);
  void ~TSGrowableArray<void (__fastcall*)(void)>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<float> : class TSFixedArray<float>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<float>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<float>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<float>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<float>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<float>(class TSGrowableArray<float>&);
  void TSGrowableArray<float>::TSGrowableArray<float>();
  unsigned int Add(float*);
  unsigned int Add(unsigned int, int, float*);
  unsigned int Add(unsigned int, float*);
  void GrowToFit(unsigned int, int);
  float* New(float&);
  float* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(float*);
  unsigned int AddElements(unsigned int, float*);
  float* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<float>& operator=(class TSGrowableArray<float>&);
  void ~TSGrowableArray<float>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CRibbonVertex> : class TSFixedArray<CRibbonVertex>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CRibbonVertex>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CRibbonVertex>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CRibbonVertex>(class TSGrowableArray<CRibbonVertex>&);
  void TSGrowableArray<CRibbonVertex>();
  unsigned int Add(struct CRibbonVertex*);
  unsigned int Add(unsigned int, int, struct CRibbonVertex*);
  unsigned int Add(unsigned int, struct CRibbonVertex*);
  void GrowToFit(unsigned int, int);
  struct CRibbonVertex* New(struct CRibbonVertex&);
  struct CRibbonVertex* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CRibbonVertex*);
  unsigned int AddElements(unsigned int, struct CRibbonVertex*);
  struct CRibbonVertex* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CRibbonVertex>& operator=(class TSGrowableArray<CRibbonVertex>&);
  void ~TSGrowableArray<CRibbonVertex>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CParticle2> : class TSFixedArray<CParticle2>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CParticle2>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CParticle2>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CParticle2>(class TSGrowableArray<CParticle2>&);
  void TSGrowableArray<CParticle2>();
  unsigned int Add(class CParticle2*);
  unsigned int Add(unsigned int, int, class CParticle2*);
  unsigned int Add(unsigned int, class CParticle2*);
  void GrowToFit(unsigned int, int);
  class CParticle2* New(class CParticle2&);
  class CParticle2* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CParticle2*);
  unsigned int AddElements(unsigned int, class CParticle2*);
  class CParticle2* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CParticle2>& operator=(class TSGrowableArray<CParticle2>&);
  void ~TSGrowableArray<CParticle2>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CParticle2_Model> : class TSFixedArray<CParticle2_Model>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CParticle2_Model>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CParticle2_Model>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CParticle2_Model>(class TSGrowableArray<CParticle2_Model>&);
  void TSGrowableArray<CParticle2_Model>();
  unsigned int Add(class CParticle2_Model*);
  unsigned int Add(unsigned int, int, class CParticle2_Model*);
  unsigned int Add(unsigned int, class CParticle2_Model*);
  void GrowToFit(unsigned int, int);
  class CParticle2_Model* New(class CParticle2_Model&);
  class CParticle2_Model* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CParticle2_Model*);
  unsigned int AddElements(unsigned int, class CParticle2_Model*);
  class CParticle2_Model* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CParticle2_Model>& operator=(class TSGrowableArray<CParticle2_Model>&);
  void ~TSGrowableArray<CParticle2_Model>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CParticle> : class TSFixedArray<CParticle>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CParticle>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CParticle>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CParticle>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CParticle>(class TSGrowableArray<CParticle>&);
  void TSGrowableArray<CParticle>();
  unsigned int Add(class CParticle*);
  unsigned int Add(unsigned int, int, class CParticle*);
  unsigned int Add(unsigned int, class CParticle*);
  void GrowToFit(unsigned int, int);
  class CParticle* New(class CParticle&);
  class CParticle* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CParticle*);
  unsigned int AddElements(unsigned int, class CParticle*);
  class CParticle* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CParticle>& operator=(class TSGrowableArray<CParticle>&);
  void ~TSGrowableArray<CParticle>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FONTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<FONTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FONTHASHOBJ,-572662307>* New(class TSExplicitList<FONTHASHOBJ,-572662307>&);
  class TSExplicitList<FONTHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FONTHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FONTHASHOBJ,-572662307>*);
  class TSExplicitList<FONTHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<char *> : class TSFixedArray<char *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<char *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<char *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<char *>(class TSGrowableArray<char *>&);
  void TSGrowableArray<char *>();
  unsigned int Add(char**);
  unsigned int Add(unsigned int, int, char**);
  unsigned int Add(unsigned int, char**);
  void GrowToFit(unsigned int, int);
  char** New(char*&);
  char** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(char**);
  unsigned int AddElements(unsigned int, char**);
  char** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<char *>& operator=(class TSGrowableArray<char *>&);
  void ~TSGrowableArray<char *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> > : class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >(class TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >();
  unsigned int Add(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* New(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>&);
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>*);
  class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> > : class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >(class TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >();
  unsigned int Add(class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* New(class TSExplicitList<ProfileInternal::SECTION,-572662307>&);
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ProfileInternal::SECTION,-572662307>*);
  class TSExplicitList<ProfileInternal::SECTION,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CLightning *> : class TSFixedArray<CLightning *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CLightning *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CLightning *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CLightning *>(class TSGrowableArray<CLightning *>&);
  void TSGrowableArray<CLightning *>();
  unsigned int Add(class CLightning**);
  unsigned int Add(unsigned int, int, class CLightning**);
  unsigned int Add(unsigned int, class CLightning**);
  void GrowToFit(unsigned int, int);
  class CLightning** New(class CLightning*&);
  class CLightning** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CLightning**);
  unsigned int AddElements(unsigned int, class CLightning**);
  class CLightning** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CLightning *>& operator=(class TSGrowableArray<CLightning *>&);
  void ~TSGrowableArray<CLightning *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OsGuiMenuHotkey> : class TSFixedArray<OsGuiMenuHotkey>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OsGuiMenuHotkey>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<OsGuiMenuHotkey>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<OsGuiMenuHotkey>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OsGuiMenuHotkey>(class TSGrowableArray<OsGuiMenuHotkey>&);
  void TSGrowableArray<OsGuiMenuHotkey>();
  unsigned int Add(struct OsGuiMenuHotkey*);
  unsigned int Add(unsigned int, int, struct OsGuiMenuHotkey*);
  unsigned int Add(unsigned int, struct OsGuiMenuHotkey*);
  void GrowToFit(unsigned int, int);
  struct OsGuiMenuHotkey* New(struct OsGuiMenuHotkey&);
  struct OsGuiMenuHotkey* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OsGuiMenuHotkey*);
  unsigned int AddElements(unsigned int, struct OsGuiMenuHotkey*);
  struct OsGuiMenuHotkey* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OsGuiMenuHotkey>& operator=(class TSGrowableArray<OsGuiMenuHotkey>&);
  void ~TSGrowableArray<OsGuiMenuHotkey>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<COsControl *> : class TSFixedArray<COsControl *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<COsControl *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<COsControl *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<COsControl *>(class TSGrowableArray<COsControl *>&);
  void TSGrowableArray<COsControl *>();
  unsigned int Add(class COsControl**);
  unsigned int Add(unsigned int, int, class COsControl**);
  unsigned int Add(unsigned int, class COsControl**);
  void GrowToFit(unsigned int, int);
  class COsControl** New(class COsControl*&);
  class COsControl** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class COsControl**);
  unsigned int AddElements(unsigned int, class COsControl**);
  class COsControl** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<COsControl *>& operator=(class TSGrowableArray<COsControl *>&);
  void ~TSGrowableArray<COsControl *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OsGuiTreeItemParams> : class TSFixedArray<OsGuiTreeItemParams>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OsGuiTreeItemParams>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<OsGuiTreeItemParams>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<OsGuiTreeItemParams>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OsGuiTreeItemParams>(class TSGrowableArray<OsGuiTreeItemParams>&);
  void TSGrowableArray<OsGuiTreeItemParams>();
  unsigned int Add(struct OsGuiTreeItemParams*);
  unsigned int Add(unsigned int, int, struct OsGuiTreeItemParams*);
  unsigned int Add(unsigned int, struct OsGuiTreeItemParams*);
  void GrowToFit(unsigned int, int);
  struct OsGuiTreeItemParams* New(struct OsGuiTreeItemParams&);
  struct OsGuiTreeItemParams* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OsGuiTreeItemParams*);
  unsigned int AddElements(unsigned int, struct OsGuiTreeItemParams*);
  struct OsGuiTreeItemParams* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OsGuiTreeItemParams>& operator=(class TSGrowableArray<OsGuiTreeItemParams>&);
  void ~TSGrowableArray<OsGuiTreeItemParams>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<COsMenu *> : class TSFixedArray<COsMenu *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<COsMenu *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<COsMenu *>(class TSGrowableArray<COsMenu *>&);
  void TSGrowableArray<COsMenu *>();
  unsigned int Add(class COsMenu**);
  unsigned int Add(unsigned int, int, class COsMenu**);
  unsigned int Add(unsigned int, class COsMenu**);
  void GrowToFit(unsigned int, int);
  class COsMenu** New(class COsMenu*&);
  class COsMenu** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class COsMenu**);
  unsigned int AddElements(unsigned int, class COsMenu**);
  class COsMenu** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<COsMenu *>& operator=(class TSGrowableArray<COsMenu *>&);
  void ~TSGrowableArray<COsMenu *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<tagACCEL> : class TSFixedArray<tagACCEL>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<tagACCEL>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<tagACCEL>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<tagACCEL>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<tagACCEL>(class TSGrowableArray<tagACCEL>&);
  void TSGrowableArray<tagACCEL>();
  unsigned int Add(struct tagACCEL*);
  unsigned int Add(unsigned int, int, struct tagACCEL*);
  unsigned int Add(unsigned int, struct tagACCEL*);
  void GrowToFit(unsigned int, int);
  struct tagACCEL* New(struct tagACCEL&);
  struct tagACCEL* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct tagACCEL*);
  unsigned int AddElements(unsigned int, struct tagACCEL*);
  struct tagACCEL* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<tagACCEL>& operator=(class TSGrowableArray<tagACCEL>&);
  void ~TSGrowableArray<tagACCEL>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<COsMenuBar *> : class TSFixedArray<COsMenuBar *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<COsMenuBar *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<COsMenuBar *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<COsMenuBar *>(class TSGrowableArray<COsMenuBar *>&);
  void TSGrowableArray<COsMenuBar *>();
  unsigned int Add(class COsMenuBar**);
  unsigned int Add(unsigned int, int, class COsMenuBar**);
  unsigned int Add(unsigned int, class COsMenuBar**);
  void GrowToFit(unsigned int, int);
  class COsMenuBar** New(class COsMenuBar*&);
  class COsMenuBar** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class COsMenuBar**);
  unsigned int AddElements(unsigned int, class COsMenuBar**);
  class COsMenuBar** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<COsMenuBar *>& operator=(class TSGrowableArray<COsMenuBar *>&);
  void ~TSGrowableArray<COsMenuBar *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<COsDialog *> : class TSFixedArray<COsDialog *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<COsDialog *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<COsDialog *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<COsDialog *>(class TSGrowableArray<COsDialog *>&);
  void TSGrowableArray<COsDialog *>();
  unsigned int Add(class COsDialog**);
  unsigned int Add(unsigned int, int, class COsDialog**);
  unsigned int Add(unsigned int, class COsDialog**);
  void GrowToFit(unsigned int, int);
  class COsDialog** New(class COsDialog*&);
  class COsDialog** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class COsDialog**);
  unsigned int AddElements(unsigned int, class COsDialog**);
  class COsDialog** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<COsDialog *>& operator=(class TSGrowableArray<COsDialog *>&);
  void ~TSGrowableArray<COsDialog *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> > : class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >(class TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >();
  unsigned int Add(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* New(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>&);
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>*);
  class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OsNet::NETSELSOCKPTR> : class TSFixedArray<OsNet::NETSELSOCKPTR>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OsNet::NETSELSOCKPTR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<OsNet::NETSELSOCKPTR>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<OsNet::NETSELSOCKPTR>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OsNet::NETSELSOCKPTR>(class TSGrowableArray<OsNet::NETSELSOCKPTR>&);
  void TSGrowableArray<OsNet::NETSELSOCKPTR>::TSGrowableArray<OsNet::NETSELSOCKPTR>();
  unsigned int Add(struct OsNet::NETSELSOCKPTR*);
  unsigned int Add(unsigned int, int, struct OsNet::NETSELSOCKPTR*);
  unsigned int Add(unsigned int, struct OsNet::NETSELSOCKPTR*);
  void GrowToFit(unsigned int, int);
  struct OsNet::NETSELSOCKPTR* New(struct OsNet::NETSELSOCKPTR&);
  struct OsNet::NETSELSOCKPTR* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OsNet::NETSELSOCKPTR*);
  unsigned int AddElements(unsigned int, struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OsNet::NETSELSOCKPTR>& operator=(class TSGrowableArray<OsNet::NETSELSOCKPTR>&);
  void ~TSGrowableArray<OsNet::NETSELSOCKPTR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NETADDR> : class TSFixedArray<NETADDR>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NETADDR>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NETADDR>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NETADDR>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NETADDR>(class TSGrowableArray<NETADDR>&);
  void TSGrowableArray<NETADDR>::TSGrowableArray<NETADDR>();
  unsigned int Add(union NETADDR*);
  unsigned int Add(unsigned int, int, union NETADDR*);
  unsigned int Add(unsigned int, union NETADDR*);
  void GrowToFit(unsigned int, int);
  union NETADDR* New(union NETADDR&);
  union NETADDR* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(union NETADDR*);
  unsigned int AddElements(unsigned int, union NETADDR*);
  union NETADDR* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NETADDR>& operator=(class TSGrowableArray<NETADDR>&);
  void ~TSGrowableArray<NETADDR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<W32Joystick> : class TSFixedArray<W32Joystick>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<W32Joystick>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<W32Joystick>(class TSGrowableArray<W32Joystick>&);
  void TSGrowableArray<W32Joystick>();
  unsigned int Add(struct W32Joystick*);
  unsigned int Add(unsigned int, int, struct W32Joystick*);
  unsigned int Add(unsigned int, struct W32Joystick*);
  void GrowToFit(unsigned int, int);
  struct W32Joystick* New(struct W32Joystick&);
  struct W32Joystick* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct W32Joystick*);
  unsigned int AddElements(unsigned int, struct W32Joystick*);
  struct W32Joystick* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<W32Joystick>& operator=(class TSGrowableArray<W32Joystick>&);
  void ~TSGrowableArray<W32Joystick>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> > : class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >(class TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >();
  unsigned int Add(class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* New(class TSExplicitList<SoundFileObjectCacheNode,-572662307>&);
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SoundFileObjectCacheNode,-572662307>*);
  class TSExplicitList<SoundFileObjectCacheNode,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SoundFileObjectCacheNode> : class TSFixedArray<SoundFileObjectCacheNode>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SoundFileObjectCacheNode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<SoundFileObjectCacheNode>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<SoundFileObjectCacheNode>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<SoundFileObjectCacheNode>(class TSGrowableArray<SoundFileObjectCacheNode>&);
  void TSGrowableArray<SoundFileObjectCacheNode>::TSGrowableArray<SoundFileObjectCacheNode>();
  unsigned int Add(struct SoundFileObjectCacheNode*);
  unsigned int Add(unsigned int, int, struct SoundFileObjectCacheNode*);
  unsigned int Add(unsigned int, struct SoundFileObjectCacheNode*);
  void GrowToFit(unsigned int, int);
  struct SoundFileObjectCacheNode* New(struct SoundFileObjectCacheNode&);
  struct SoundFileObjectCacheNode* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct SoundFileObjectCacheNode*);
  unsigned int AddElements(unsigned int, struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SoundFileObjectCacheNode>& operator=(class TSGrowableArray<SoundFileObjectCacheNode>&);
  void ~TSGrowableArray<SoundFileObjectCacheNode>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> > : class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >(class TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >();
  unsigned int Add(class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* New(class TSExplicitList<SoundFileDataCacheBlock,-572662307>&);
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SoundFileDataCacheBlock,-572662307>*);
  class TSExplicitList<SoundFileDataCacheBlock,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SoundFileDataCacheBlock> : class TSFixedArray<SoundFileDataCacheBlock>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SoundFileDataCacheBlock>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<SoundFileDataCacheBlock>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<SoundFileDataCacheBlock>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<SoundFileDataCacheBlock>(class TSGrowableArray<SoundFileDataCacheBlock>&);
  void TSGrowableArray<SoundFileDataCacheBlock>::TSGrowableArray<SoundFileDataCacheBlock>();
  unsigned int Add(struct SoundFileDataCacheBlock*);
  unsigned int Add(unsigned int, int, struct SoundFileDataCacheBlock*);
  unsigned int Add(unsigned int, struct SoundFileDataCacheBlock*);
  void GrowToFit(unsigned int, int);
  struct SoundFileDataCacheBlock* New(struct SoundFileDataCacheBlock&);
  struct SoundFileDataCacheBlock* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct SoundFileDataCacheBlock*);
  unsigned int AddElements(unsigned int, struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SoundFileDataCacheBlock>& operator=(class TSGrowableArray<SoundFileDataCacheBlock>&);
  void ~TSGrowableArray<SoundFileDataCacheBlock>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CModelHash,-572662307> > : class TSFixedArray<TSExplicitList<CModelHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CModelHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CModelHash,-572662307> >(class TSGrowableArray<TSExplicitList<CModelHash,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CModelHash,-572662307> >();
  unsigned int Add(class TSExplicitList<CModelHash,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CModelHash,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CModelHash,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CModelHash,-572662307>* New(class TSExplicitList<CModelHash,-572662307>&);
  class TSExplicitList<CModelHash,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CModelHash,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CModelHash,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CModelHash,-572662307>*);
  class TSExplicitList<CModelHash,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CModelHash,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CModelHash,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CModelHash,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CModelHash> : class TSFixedArray<CModelHash>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CModelHash>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CModelHash>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CModelHash>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CModelHash>(class TSGrowableArray<CModelHash>&);
  void TSGrowableArray<CModelHash>::TSGrowableArray<CModelHash>();
  unsigned int Add(struct CModelHash*);
  unsigned int Add(unsigned int, int, struct CModelHash*);
  unsigned int Add(unsigned int, struct CModelHash*);
  void GrowToFit(unsigned int, int);
  struct CModelHash* New(struct CModelHash&);
  struct CModelHash* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CModelHash*);
  unsigned int AddElements(unsigned int, struct CModelHash*);
  struct CModelHash* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CModelHash>& operator=(class TSGrowableArray<CModelHash>&);
  void ~TSGrowableArray<CModelHash>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CPrimitive> : class TSFixedArray<CPrimitive>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CPrimitive>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CPrimitive>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CPrimitive>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CPrimitive>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CPrimitive>(class TSGrowableArray<CPrimitive>&);
  void TSGrowableArray<CPrimitive>();
  unsigned int Add(struct CPrimitive*);
  unsigned int Add(unsigned int, int, struct CPrimitive*);
  unsigned int Add(unsigned int, struct CPrimitive*);
  void GrowToFit(unsigned int, int);
  struct CPrimitive* New(struct CPrimitive&);
  struct CPrimitive* TSGrowableArray<CPrimitive>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CPrimitive*);
  unsigned int AddElements(unsigned int, struct CPrimitive*);
  struct CPrimitive* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CPrimitive>& operator=(class TSGrowableArray<CPrimitive>&);
  void ~TSGrowableArray<CPrimitive>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CMatrixGroup> : class TSFixedArray<CMatrixGroup>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CMatrixGroup>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CMatrixGroup>(class TSGrowableArray<CMatrixGroup>&);
  void TSGrowableArray<CMatrixGroup>::TSGrowableArray<CMatrixGroup>();
  unsigned int Add(struct CMatrixGroup*);
  unsigned int Add(unsigned int, int, struct CMatrixGroup*);
  unsigned int Add(unsigned int, struct CMatrixGroup*);
  void GrowToFit(unsigned int, int);
  struct CMatrixGroup* New(struct CMatrixGroup&);
  struct CMatrixGroup* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CMatrixGroup*);
  unsigned int AddElements(unsigned int, struct CMatrixGroup*);
  struct CMatrixGroup* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CMatrixGroup>& operator=(class TSGrowableArray<CMatrixGroup>&);
  void ~TSGrowableArray<CMatrixGroup>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGeoset> : class TSFixedArray<CGeoset>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGeoset>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGeoset>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CGeoset>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CGeoset>(class TSGrowableArray<CGeoset>&);
  void TSGrowableArray<CGeoset>::TSGrowableArray<CGeoset>();
  unsigned int Add(struct CGeoset*);
  unsigned int Add(unsigned int, int, struct CGeoset*);
  unsigned int Add(unsigned int, struct CGeoset*);
  void GrowToFit(unsigned int, int);
  struct CGeoset* New(struct CGeoset&);
  struct CGeoset* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<CGeoset>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGeoset*);
  unsigned int AddElements(unsigned int, struct CGeoset*);
  struct CGeoset* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGeoset>& operator=(class TSGrowableArray<CGeoset>&);
  void ~TSGrowableArray<CGeoset>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CCustomGeoset> : class TSFixedArray<CCustomGeoset>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CCustomGeoset>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CCustomGeoset>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CCustomGeoset>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CCustomGeoset>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CCustomGeoset>(class TSGrowableArray<CCustomGeoset>&);
  void TSGrowableArray<CCustomGeoset>::TSGrowableArray<CCustomGeoset>();
  unsigned int Add(struct CCustomGeoset*);
  unsigned int Add(unsigned int, int, struct CCustomGeoset*);
  unsigned int Add(unsigned int, struct CCustomGeoset*);
  void GrowToFit(unsigned int, int);
  struct CCustomGeoset* New(struct CCustomGeoset&);
  struct CCustomGeoset* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CCustomGeoset*);
  unsigned int AddElements(unsigned int, struct CCustomGeoset*);
  struct CCustomGeoset* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CCustomGeoset>& operator=(class TSGrowableArray<CCustomGeoset>&);
  void ~TSGrowableArray<CCustomGeoset>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<HMATERIAL__ *> : class TSFixedArray<HMATERIAL__ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<HMATERIAL__ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<HMATERIAL__ *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<HMATERIAL__ *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<HMATERIAL__ *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<HMATERIAL__ *>(class TSGrowableArray<HMATERIAL__ *>&);
  void TSGrowableArray<HMATERIAL__ *>::TSGrowableArray<HMATERIAL__ *>();
  unsigned int Add(struct HMATERIAL__**);
  unsigned int Add(unsigned int, int, struct HMATERIAL__**);
  unsigned int Add(unsigned int, struct HMATERIAL__**);
  void GrowToFit(unsigned int, int);
  struct HMATERIAL__** New(struct HMATERIAL__*&);
  struct HMATERIAL__** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<HMATERIAL__ *>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct HMATERIAL__**);
  unsigned int AddElements(unsigned int, struct HMATERIAL__**);
  struct HMATERIAL__** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<HMATERIAL__ *>& operator=(class TSGrowableArray<HMATERIAL__ *>&);
  void ~TSGrowableArray<HMATERIAL__ *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<COpaqueLayer> : class TSFixedArray<COpaqueLayer>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<COpaqueLayer>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<COpaqueLayer>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<COpaqueLayer>(class TSGrowableArray<COpaqueLayer>&);
  void TSGrowableArray<COpaqueLayer>();
  unsigned int Add(struct COpaqueLayer*);
  unsigned int Add(unsigned int, int, struct COpaqueLayer*);
  unsigned int Add(unsigned int, struct COpaqueLayer*);
  void GrowToFit(unsigned int, int);
  struct COpaqueLayer* New(struct COpaqueLayer&);
  struct COpaqueLayer* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct COpaqueLayer*);
  unsigned int AddElements(unsigned int, struct COpaqueLayer*);
  struct COpaqueLayer* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<COpaqueLayer>& operator=(class TSGrowableArray<COpaqueLayer>&);
  void ~TSGrowableArray<COpaqueLayer>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CTransparentObject> : class TSFixedArray<CTransparentObject>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CTransparentObject>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<CTransparentObject>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CTransparentObject>(class TSGrowableArray<CTransparentObject>&);
  void TSGrowableArray<CTransparentObject>();
  unsigned int Add(struct CTransparentObject*);
  unsigned int Add(unsigned int, int, struct CTransparentObject*);
  unsigned int Add(unsigned int, struct CTransparentObject*);
  void GrowToFit(unsigned int, int);
  struct CTransparentObject* New(struct CTransparentObject&);
  struct CTransparentObject* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CTransparentObject*);
  unsigned int AddElements(unsigned int, struct CTransparentObject*);
  struct CTransparentObject* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CTransparentObject>& operator=(class TSGrowableArray<CTransparentObject>&);
  void ~TSGrowableArray<CTransparentObject>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGeosetShared> : class TSFixedArray<CGeosetShared>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGeosetShared>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CGeosetShared>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CGeosetShared>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CGeosetShared>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CGeosetShared>(class TSGrowableArray<CGeosetShared>&);
  void TSGrowableArray<CGeosetShared>::TSGrowableArray<CGeosetShared>();
  unsigned int Add(struct CGeosetShared*);
  unsigned int Add(unsigned int, int, struct CGeosetShared*);
  unsigned int Add(unsigned int, struct CGeosetShared*);
  void GrowToFit(unsigned int, int);
  struct CGeosetShared* New(struct CGeosetShared&);
  struct CGeosetShared* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<CGeosetShared>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGeosetShared*);
  unsigned int AddElements(unsigned int, struct CGeosetShared*);
  struct CGeosetShared* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGeosetShared>& TSGrowableArray<CGeosetShared>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<CGeosetShared>& __that);
  void ~TSGrowableArray<CGeosetShared>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::CFacet> : class TSFixedArray<NTempest::CFacet>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::CFacet>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<NTempest::CFacet>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<NTempest::CFacet>(class TSGrowableArray<NTempest::CFacet>&);
  void TSGrowableArray<NTempest::CFacet>::TSGrowableArray<NTempest::CFacet>();
  unsigned int Add(struct NTempest::CFacet*);
  unsigned int Add(unsigned int, int, struct NTempest::CFacet*);
  unsigned int Add(unsigned int, struct NTempest::CFacet*);
  void GrowToFit(unsigned int, int);
  struct NTempest::CFacet* New(struct NTempest::CFacet&);
  struct NTempest::CFacet* TSGrowableArray<NTempest::CFacet>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct NTempest::CFacet*);
  unsigned int AddElements(unsigned int, struct NTempest::CFacet*);
  struct NTempest::CFacet* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::CFacet>& operator=(class TSGrowableArray<NTempest::CFacet>&);
  void ~TSGrowableArray<NTempest::CFacet>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CModelTexture> : class TSFixedArray<CModelTexture>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CModelTexture>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CModelTexture>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CModelTexture>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CModelTexture>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CModelTexture>(class TSGrowableArray<CModelTexture>&);
  void TSGrowableArray<CModelTexture>::TSGrowableArray<CModelTexture>();
  unsigned int Add(struct CModelTexture*);
  unsigned int Add(unsigned int, int, struct CModelTexture*);
  unsigned int Add(unsigned int, struct CModelTexture*);
  void GrowToFit(unsigned int, int);
  struct CModelTexture* New(struct CModelTexture&);
  struct CModelTexture* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CModelTexture*);
  unsigned int AddElements(unsigned int, struct CModelTexture*);
  struct CModelTexture* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CModelTexture>& operator=(class TSGrowableArray<CModelTexture>&);
  void ~TSGrowableArray<CModelTexture>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CGeosetColor> : class TSFixedArray<CGeosetColor>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CGeosetColor>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CGeosetColor>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CGeosetColor>(class TSGrowableArray<CGeosetColor>&);
  void TSGrowableArray<CGeosetColor>::TSGrowableArray<CGeosetColor>();
  unsigned int Add(struct CGeosetColor*);
  unsigned int Add(unsigned int, int, struct CGeosetColor*);
  unsigned int Add(unsigned int, struct CGeosetColor*);
  void GrowToFit(unsigned int, int);
  struct CGeosetColor* New(struct CGeosetColor&);
  struct CGeosetColor* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<CGeosetColor>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CGeosetColor*);
  unsigned int AddElements(unsigned int, struct CGeosetColor*);
  struct CGeosetColor* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CGeosetColor>& operator=(class TSGrowableArray<CGeosetColor>&);
  void ~TSGrowableArray<CGeosetColor>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CTexLayerShared> : class TSFixedArray<CTexLayerShared>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CTexLayerShared>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CTexLayerShared>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CTexLayerShared>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CTexLayerShared>(class TSGrowableArray<CTexLayerShared>&);
  void TSGrowableArray<CTexLayerShared>();
  unsigned int Add(struct CTexLayerShared*);
  unsigned int Add(unsigned int, int, struct CTexLayerShared*);
  unsigned int Add(unsigned int, struct CTexLayerShared*);
  void GrowToFit(unsigned int, int);
  struct CTexLayerShared* New(struct CTexLayerShared&);
  struct CTexLayerShared* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CTexLayerShared*);
  unsigned int AddElements(unsigned int, struct CTexLayerShared*);
  struct CTexLayerShared* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CTexLayerShared>& operator=(class TSGrowableArray<CTexLayerShared>&);
  void ~TSGrowableArray<CTexLayerShared>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CTexLayer> : class TSFixedArray<CTexLayer>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CTexLayer>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CTexLayer>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CTexLayer>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<CTexLayer>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CTexLayer>(class TSGrowableArray<CTexLayer>&);
  void TSGrowableArray<CTexLayer>();
  unsigned int Add(struct CTexLayer*);
  unsigned int Add(unsigned int, int, struct CTexLayer*);
  unsigned int Add(unsigned int, struct CTexLayer*);
  void GrowToFit(unsigned int, int);
  struct CTexLayer* New(struct CTexLayer&);
  struct CTexLayer* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CTexLayer*);
  unsigned int AddElements(unsigned int, struct CTexLayer*);
  struct CTexLayer* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CTexLayer>& operator=(class TSGrowableArray<CTexLayer>&);
  void ~TSGrowableArray<CTexLayer>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CRibbonMat> : class TSFixedArray<CRibbonMat>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CRibbonMat>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<CRibbonMat>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<CRibbonMat>(class TSGrowableArray<CRibbonMat>&);
  void TSGrowableArray<CRibbonMat>();
  unsigned int Add(struct CRibbonMat*);
  unsigned int Add(unsigned int, int, struct CRibbonMat*);
  unsigned int Add(unsigned int, struct CRibbonMat*);
  void GrowToFit(unsigned int, int);
  struct CRibbonMat* New(struct CRibbonMat&);
  struct CRibbonMat* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CRibbonMat*);
  unsigned int AddElements(unsigned int, struct CRibbonMat*);
  struct CRibbonMat* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CRibbonMat>& operator=(class TSGrowableArray<CRibbonMat>&);
  void ~TSGrowableArray<CRibbonMat>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<HTEXTURE__ *> : class TSFixedArray<HTEXTURE__ *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<HTEXTURE__ *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<HTEXTURE__ *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<HTEXTURE__ *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<HTEXTURE__ *>(class TSGrowableArray<HTEXTURE__ *>&);
  void TSGrowableArray<HTEXTURE__ *>();
  unsigned int Add(struct HTEXTURE__**);
  unsigned int Add(unsigned int, int, struct HTEXTURE__**);
  unsigned int Add(unsigned int, struct HTEXTURE__**);
  void GrowToFit(unsigned int, int);
  struct HTEXTURE__** New(struct HTEXTURE__*&);
  struct HTEXTURE__** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct HTEXTURE__**);
  unsigned int AddElements(unsigned int, struct HTEXTURE__**);
  struct HTEXTURE__** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<HTEXTURE__ *>& operator=(class TSGrowableArray<HTEXTURE__ *>&);
  void ~TSGrowableArray<HTEXTURE__ *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<char> : class TSFixedArray<char>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<char>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<char>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<char>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<char>(class TSGrowableArray<char>&);
  void TSGrowableArray<char>();
  unsigned int Add(char*);
  unsigned int Add(unsigned int, int, char*);
  unsigned int TSGrowableArray<char>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* data);
  void GrowToFit(unsigned int, int);
  char* New(char&);
  char* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(char*);
  unsigned int AddElements(unsigned int, char*);
  char* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<char>& operator=(class TSGrowableArray<char>&);
  void ~TSGrowableArray<char>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLGEOSETSECTION> : class TSFixedArray<MDLGEOSETSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLGEOSETSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLGEOSETSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLGEOSETSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLGEOSETSECTION>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLGEOSETSECTION>(class TSGrowableArray<MDLGEOSETSECTION>&);
  void TSGrowableArray<MDLGEOSETSECTION>();
  unsigned int Add(struct MDLGEOSETSECTION*);
  unsigned int Add(unsigned int, int, struct MDLGEOSETSECTION*);
  unsigned int Add(unsigned int, struct MDLGEOSETSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLGEOSETSECTION* New(struct MDLGEOSETSECTION&);
  struct MDLGEOSETSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLGEOSETSECTION*);
  unsigned int AddElements(unsigned int, struct MDLGEOSETSECTION*);
  struct MDLGEOSETSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLGEOSETSECTION>& operator=(class TSGrowableArray<MDLGEOSETSECTION>&);
  void ~TSGrowableArray<MDLGEOSETSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLGENOBJECT *> : class TSFixedArray<MDLGENOBJECT *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLGENOBJECT *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<MDLGENOBJECT *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLGENOBJECT *>(class TSGrowableArray<MDLGENOBJECT *>&);
  void TSGrowableArray<MDLGENOBJECT *>();
  unsigned int Add(struct MDLGENOBJECT**);
  unsigned int Add(unsigned int, int, struct MDLGENOBJECT**);
  unsigned int Add(unsigned int, struct MDLGENOBJECT**);
  void GrowToFit(unsigned int, int);
  struct MDLGENOBJECT** New(struct MDLGENOBJECT*&);
  struct MDLGENOBJECT** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLGENOBJECT**);
  unsigned int AddElements(unsigned int, struct MDLGENOBJECT**);
  struct MDLGENOBJECT** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLGENOBJECT *>& operator=(class TSGrowableArray<MDLGENOBJECT *>&);
  void ~TSGrowableArray<MDLGENOBJECT *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLTEXTURESECTION> : class TSFixedArray<MDLTEXTURESECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLTEXTURESECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLTEXTURESECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLTEXTURESECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLTEXTURESECTION>(class TSGrowableArray<MDLTEXTURESECTION>&);
  void TSGrowableArray<MDLTEXTURESECTION>();
  unsigned int Add(struct MDLTEXTURESECTION*);
  unsigned int Add(unsigned int, int, struct MDLTEXTURESECTION*);
  unsigned int Add(unsigned int, struct MDLTEXTURESECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLTEXTURESECTION* New(struct MDLTEXTURESECTION&);
  struct MDLTEXTURESECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLTEXTURESECTION*);
  unsigned int AddElements(unsigned int, struct MDLTEXTURESECTION*);
  struct MDLTEXTURESECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLTEXTURESECTION>& operator=(class TSGrowableArray<MDLTEXTURESECTION>&);
  void ~TSGrowableArray<MDLTEXTURESECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLINTKEY> : class TSFixedArray<MDLINTKEY>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLINTKEY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLINTKEY>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<MDLINTKEY>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLINTKEY>(class TSGrowableArray<MDLINTKEY>&);
  void TSGrowableArray<MDLINTKEY>::TSGrowableArray<MDLINTKEY>();
  unsigned int Add(struct MDLINTKEY*);
  unsigned int Add(unsigned int, int, struct MDLINTKEY*);
  unsigned int Add(unsigned int, struct MDLINTKEY*);
  void GrowToFit(unsigned int, int);
  struct MDLINTKEY* New(struct MDLINTKEY&);
  struct MDLINTKEY* TSGrowableArray<MDLINTKEY>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLINTKEY*);
  unsigned int AddElements(unsigned int, struct MDLINTKEY*);
  struct MDLINTKEY* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLINTKEY>& operator=(class TSGrowableArray<MDLINTKEY>&);
  void ~TSGrowableArray<MDLINTKEY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLTEXLAYER> : class TSFixedArray<MDLTEXLAYER>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLTEXLAYER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLTEXLAYER>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLTEXLAYER>(class TSGrowableArray<MDLTEXLAYER>&);
  void TSGrowableArray<MDLTEXLAYER>();
  unsigned int Add(struct MDLTEXLAYER*);
  unsigned int Add(unsigned int, int, struct MDLTEXLAYER*);
  unsigned int Add(unsigned int, struct MDLTEXLAYER*);
  void GrowToFit(unsigned int, int);
  struct MDLTEXLAYER* New(struct MDLTEXLAYER&);
  struct MDLTEXLAYER* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLTEXLAYER*);
  unsigned int AddElements(unsigned int, struct MDLTEXLAYER*);
  struct MDLTEXLAYER* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLTEXLAYER>& operator=(class TSGrowableArray<MDLTEXLAYER>&);
  void ~TSGrowableArray<MDLTEXLAYER>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::C3Vector> : class TSFixedArray<NTempest::C3Vector>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C3Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NTempest::C3Vector>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NTempest::C3Vector>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<NTempest::C3Vector>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<NTempest::C3Vector>::TSGrowableArray<NTempest::C3Vector>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<NTempest::C3Vector>& __that);
  void TSGrowableArray<NTempest::C3Vector>::TSGrowableArray<NTempest::C3Vector>();
  unsigned int Add(class NTempest::C3Vector*);
  unsigned int Add(unsigned int, int, class NTempest::C3Vector*);
  unsigned int Add(unsigned int, class NTempest::C3Vector*);
  void GrowToFit(unsigned int, int);
  class NTempest::C3Vector* New(class NTempest::C3Vector&);
  class NTempest::C3Vector* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<NTempest::C3Vector>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::C3Vector*);
  unsigned int AddElements(unsigned int, class NTempest::C3Vector*);
  class NTempest::C3Vector* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::C3Vector>& operator=(class TSGrowableArray<NTempest::C3Vector>&);
  void ~TSGrowableArray<NTempest::C3Vector>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::C2Vector> : class TSFixedArray<NTempest::C2Vector>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C2Vector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<NTempest::C2Vector>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<NTempest::C2Vector>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<NTempest::C2Vector>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<NTempest::C2Vector>(class TSGrowableArray<NTempest::C2Vector>&);
  void TSGrowableArray<NTempest::C2Vector>::TSGrowableArray<NTempest::C2Vector>();
  unsigned int Add(class NTempest::C2Vector*);
  unsigned int Add(unsigned int, int, class NTempest::C2Vector*);
  unsigned int Add(unsigned int, class NTempest::C2Vector*);
  void GrowToFit(unsigned int, int);
  class NTempest::C2Vector* New(class NTempest::C2Vector&);
  class NTempest::C2Vector* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<NTempest::C2Vector>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::C2Vector*);
  unsigned int AddElements(unsigned int, class NTempest::C2Vector*);
  class NTempest::C2Vector* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::C2Vector>& operator=(class TSGrowableArray<NTempest::C2Vector>&);
  void ~TSGrowableArray<NTempest::C2Vector>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<unsigned short> : class TSFixedArray<unsigned short>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned short>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<unsigned short>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<unsigned short>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<unsigned short>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<unsigned short>(class TSGrowableArray<unsigned short>&);
  void TSGrowableArray<unsigned short>::TSGrowableArray<unsigned short>();
  unsigned int Add(unsigned short*);
  unsigned int Add(unsigned int, int, unsigned short*);
  unsigned int Add(unsigned int, unsigned short*);
  void GrowToFit(unsigned int, int);
  unsigned short* New(unsigned short&);
  unsigned short* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<unsigned short>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(unsigned short*);
  unsigned int AddElements(unsigned int, unsigned short*);
  unsigned short* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<unsigned short>& operator=(class TSGrowableArray<unsigned short>&);
  void ~TSGrowableArray<unsigned short>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<unsigned char> : class TSFixedArray<unsigned char>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<unsigned char>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<unsigned char>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<unsigned char>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<unsigned char>::TSGrowableArray<unsigned char>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<unsigned char>& __that);
  void TSGrowableArray<unsigned char>::TSGrowableArray<unsigned char>();
  unsigned int TSGrowableArray<unsigned char>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned char* data);
  unsigned int Add(unsigned int, int, unsigned char*);
  unsigned int TSGrowableArray<unsigned char>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned char* data);
  void GrowToFit(unsigned int, int);
  unsigned char* New(unsigned char&);
  unsigned char* TSGrowableArray<unsigned char>::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<unsigned char>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(unsigned char*);
  unsigned int AddElements(unsigned int, unsigned char*);
  unsigned char* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<unsigned char>& operator=(class TSGrowableArray<unsigned char>&);
  void TSGrowableArray<unsigned char>::~TSGrowableArray<unsigned char>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CMdlBounds> : class TSFixedArray<CMdlBounds>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CMdlBounds>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CMdlBounds>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CMdlBounds>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CMdlBounds>::TSGrowableArray<CMdlBounds>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<CMdlBounds>& __that);
  void TSGrowableArray<CMdlBounds>::TSGrowableArray<CMdlBounds>();
  unsigned int Add(struct CMdlBounds*);
  unsigned int Add(unsigned int, int, struct CMdlBounds*);
  unsigned int Add(unsigned int, struct CMdlBounds*);
  void GrowToFit(unsigned int, int);
  struct CMdlBounds* New(struct CMdlBounds&);
  struct CMdlBounds* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CMdlBounds*);
  unsigned int AddElements(unsigned int, struct CMdlBounds*);
  struct CMdlBounds* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CMdlBounds>& operator=(class TSGrowableArray<CMdlBounds>&);
  void ~TSGrowableArray<CMdlBounds>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSGrowableArray<NTempest::C2Vector> > : class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSGrowableArray<NTempest::C2Vector> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >::TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >& __that);
  void TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >();
  unsigned int Add(class TSGrowableArray<NTempest::C2Vector>*);
  unsigned int Add(unsigned int, int, class TSGrowableArray<NTempest::C2Vector>*);
  unsigned int Add(unsigned int, class TSGrowableArray<NTempest::C2Vector>*);
  void GrowToFit(unsigned int, int);
  class TSGrowableArray<NTempest::C2Vector>* New(class TSGrowableArray<NTempest::C2Vector>&);
  class TSGrowableArray<NTempest::C2Vector>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSGrowableArray<NTempest::C2Vector>*);
  unsigned int AddElements(unsigned int, class TSGrowableArray<NTempest::C2Vector>*);
  class TSGrowableArray<NTempest::C2Vector>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >& operator=(class TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >&);
  void ~TSGrowableArray<TSGrowableArray<NTempest::C2Vector> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLKEYFRAME<C3Color> > : class TSFixedArray<MDLKEYFRAME<C3Color> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLKEYFRAME<C3Color> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLKEYFRAME<C3Color> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLKEYFRAME<C3Color> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLKEYFRAME<C3Color> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLKEYFRAME<C3Color> >::TSGrowableArray<MDLKEYFRAME<C3Color> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<MDLKEYFRAME<C3Color> >& __that);
  void TSGrowableArray<MDLKEYFRAME<C3Color> >::TSGrowableArray<MDLKEYFRAME<C3Color> >();
  unsigned int Add(struct MDLKEYFRAME<C3Color>*);
  unsigned int Add(unsigned int, int, struct MDLKEYFRAME<C3Color>*);
  unsigned int Add(unsigned int, struct MDLKEYFRAME<C3Color>*);
  void GrowToFit(unsigned int, int);
  struct MDLKEYFRAME<C3Color>* New(struct MDLKEYFRAME<C3Color>&);
  struct MDLKEYFRAME<C3Color>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<MDLKEYFRAME<C3Color> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLKEYFRAME<C3Color>*);
  unsigned int AddElements(unsigned int, struct MDLKEYFRAME<C3Color>*);
  struct MDLKEYFRAME<C3Color>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLKEYFRAME<C3Color> >& operator=(class TSGrowableArray<MDLKEYFRAME<C3Color> >&);
  void ~TSGrowableArray<MDLKEYFRAME<C3Color> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLBONESECTION> : class TSFixedArray<MDLBONESECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLBONESECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLBONESECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLBONESECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLBONESECTION>(class TSGrowableArray<MDLBONESECTION>&);
  void TSGrowableArray<MDLBONESECTION>();
  unsigned int Add(struct MDLBONESECTION*);
  unsigned int Add(unsigned int, int, struct MDLBONESECTION*);
  unsigned int Add(unsigned int, struct MDLBONESECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLBONESECTION* New(struct MDLBONESECTION&);
  struct MDLBONESECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLBONESECTION*);
  unsigned int AddElements(unsigned int, struct MDLBONESECTION*);
  struct MDLBONESECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLBONESECTION>& operator=(class TSGrowableArray<MDLBONESECTION>&);
  void ~TSGrowableArray<MDLBONESECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLLIGHTSECTION> : class TSFixedArray<MDLLIGHTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLLIGHTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLLIGHTSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLLIGHTSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLLIGHTSECTION>(class TSGrowableArray<MDLLIGHTSECTION>&);
  void TSGrowableArray<MDLLIGHTSECTION>();
  unsigned int Add(struct MDLLIGHTSECTION*);
  unsigned int Add(unsigned int, int, struct MDLLIGHTSECTION*);
  unsigned int Add(unsigned int, struct MDLLIGHTSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLLIGHTSECTION* New(struct MDLLIGHTSECTION&);
  struct MDLLIGHTSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLLIGHTSECTION*);
  unsigned int AddElements(unsigned int, struct MDLLIGHTSECTION*);
  struct MDLLIGHTSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLLIGHTSECTION>& operator=(class TSGrowableArray<MDLLIGHTSECTION>&);
  void ~TSGrowableArray<MDLLIGHTSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLGENOBJECT> : class TSFixedArray<MDLGENOBJECT>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLGENOBJECT>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLGENOBJECT>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLGENOBJECT>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLGENOBJECT>(class TSGrowableArray<MDLGENOBJECT>&);
  void TSGrowableArray<MDLGENOBJECT>();
  unsigned int Add(struct MDLGENOBJECT*);
  unsigned int Add(unsigned int, int, struct MDLGENOBJECT*);
  unsigned int Add(unsigned int, struct MDLGENOBJECT*);
  void GrowToFit(unsigned int, int);
  struct MDLGENOBJECT* New(struct MDLGENOBJECT&);
  struct MDLGENOBJECT* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLGENOBJECT*);
  unsigned int AddElements(unsigned int, struct MDLGENOBJECT*);
  struct MDLGENOBJECT* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLGENOBJECT>& operator=(class TSGrowableArray<MDLGENOBJECT>&);
  void ~TSGrowableArray<MDLGENOBJECT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> > : class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLKEYFRAME<NTempest::C4Quaternion> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >::TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >& __that);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >::TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >();
  unsigned int Add(struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  unsigned int Add(unsigned int, int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  unsigned int Add(unsigned int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  void GrowToFit(unsigned int, int);
  struct MDLKEYFRAME<NTempest::C4Quaternion>* New(struct MDLKEYFRAME<NTempest::C4Quaternion>&);
  struct MDLKEYFRAME<NTempest::C4Quaternion>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  unsigned int AddElements(unsigned int, struct MDLKEYFRAME<NTempest::C4Quaternion>*);
  struct MDLKEYFRAME<NTempest::C4Quaternion>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >& operator=(class TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >&);
  void ~TSGrowableArray<MDLKEYFRAME<NTempest::C4Quaternion> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLATTACHMENTSECTION> : class TSFixedArray<MDLATTACHMENTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLATTACHMENTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLATTACHMENTSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLATTACHMENTSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLATTACHMENTSECTION>(class TSGrowableArray<MDLATTACHMENTSECTION>&);
  void TSGrowableArray<MDLATTACHMENTSECTION>();
  unsigned int Add(struct MDLATTACHMENTSECTION*);
  unsigned int Add(unsigned int, int, struct MDLATTACHMENTSECTION*);
  unsigned int Add(unsigned int, struct MDLATTACHMENTSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLATTACHMENTSECTION* New(struct MDLATTACHMENTSECTION&);
  struct MDLATTACHMENTSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLATTACHMENTSECTION*);
  unsigned int AddElements(unsigned int, struct MDLATTACHMENTSECTION*);
  struct MDLATTACHMENTSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLATTACHMENTSECTION>& operator=(class TSGrowableArray<MDLATTACHMENTSECTION>&);
  void ~TSGrowableArray<MDLATTACHMENTSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLKEYFRAME<float> > : class TSFixedArray<MDLKEYFRAME<float> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLKEYFRAME<float> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLKEYFRAME<float> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLKEYFRAME<float> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLKEYFRAME<float> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLKEYFRAME<float> >::TSGrowableArray<MDLKEYFRAME<float> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<MDLKEYFRAME<float> >& __that);
  void TSGrowableArray<MDLKEYFRAME<float> >::TSGrowableArray<MDLKEYFRAME<float> >();
  unsigned int Add(struct MDLKEYFRAME<float>*);
  unsigned int Add(unsigned int, int, struct MDLKEYFRAME<float>*);
  unsigned int Add(unsigned int, struct MDLKEYFRAME<float>*);
  void GrowToFit(unsigned int, int);
  struct MDLKEYFRAME<float>* New(struct MDLKEYFRAME<float>&);
  struct MDLKEYFRAME<float>* TSGrowableArray<MDLKEYFRAME<float> >::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<MDLKEYFRAME<float> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLKEYFRAME<float>*);
  unsigned int AddElements(unsigned int, struct MDLKEYFRAME<float>*);
  struct MDLKEYFRAME<float>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLKEYFRAME<float> >& operator=(class TSGrowableArray<MDLKEYFRAME<float> >&);
  void ~TSGrowableArray<MDLKEYFRAME<float> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLPARTICLEEMITTER> : class TSFixedArray<MDLPARTICLEEMITTER>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLPARTICLEEMITTER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLPARTICLEEMITTER>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLPARTICLEEMITTER>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLPARTICLEEMITTER>(class TSGrowableArray<MDLPARTICLEEMITTER>&);
  void TSGrowableArray<MDLPARTICLEEMITTER>();
  unsigned int Add(struct MDLPARTICLEEMITTER*);
  unsigned int Add(unsigned int, int, struct MDLPARTICLEEMITTER*);
  unsigned int Add(unsigned int, struct MDLPARTICLEEMITTER*);
  void GrowToFit(unsigned int, int);
  struct MDLPARTICLEEMITTER* New(struct MDLPARTICLEEMITTER&);
  struct MDLPARTICLEEMITTER* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLPARTICLEEMITTER*);
  unsigned int AddElements(unsigned int, struct MDLPARTICLEEMITTER*);
  struct MDLPARTICLEEMITTER* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLPARTICLEEMITTER>& operator=(class TSGrowableArray<MDLPARTICLEEMITTER>&);
  void ~TSGrowableArray<MDLPARTICLEEMITTER>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLPARTICLEEMITTER2> : class TSFixedArray<MDLPARTICLEEMITTER2>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLPARTICLEEMITTER2>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLPARTICLEEMITTER2>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLPARTICLEEMITTER2>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLPARTICLEEMITTER2>(class TSGrowableArray<MDLPARTICLEEMITTER2>&);
  void TSGrowableArray<MDLPARTICLEEMITTER2>::TSGrowableArray<MDLPARTICLEEMITTER2>();
  unsigned int Add(struct MDLPARTICLEEMITTER2*);
  unsigned int Add(unsigned int, int, struct MDLPARTICLEEMITTER2*);
  unsigned int Add(unsigned int, struct MDLPARTICLEEMITTER2*);
  void GrowToFit(unsigned int, int);
  struct MDLPARTICLEEMITTER2* New(struct MDLPARTICLEEMITTER2&);
  struct MDLPARTICLEEMITTER2* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLPARTICLEEMITTER2*);
  unsigned int AddElements(unsigned int, struct MDLPARTICLEEMITTER2*);
  struct MDLPARTICLEEMITTER2* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLPARTICLEEMITTER2>& operator=(class TSGrowableArray<MDLPARTICLEEMITTER2>&);
  void ~TSGrowableArray<MDLPARTICLEEMITTER2>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLRIBBONEMITTER> : class TSFixedArray<MDLRIBBONEMITTER>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLRIBBONEMITTER>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLRIBBONEMITTER>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLRIBBONEMITTER>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLRIBBONEMITTER>(class TSGrowableArray<MDLRIBBONEMITTER>&);
  void TSGrowableArray<MDLRIBBONEMITTER>::TSGrowableArray<MDLRIBBONEMITTER>();
  unsigned int Add(struct MDLRIBBONEMITTER*);
  unsigned int Add(unsigned int, int, struct MDLRIBBONEMITTER*);
  unsigned int Add(unsigned int, struct MDLRIBBONEMITTER*);
  void GrowToFit(unsigned int, int);
  struct MDLRIBBONEMITTER* New(struct MDLRIBBONEMITTER&);
  struct MDLRIBBONEMITTER* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLRIBBONEMITTER*);
  unsigned int AddElements(unsigned int, struct MDLRIBBONEMITTER*);
  struct MDLRIBBONEMITTER* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLRIBBONEMITTER>& operator=(class TSGrowableArray<MDLRIBBONEMITTER>&);
  void ~TSGrowableArray<MDLRIBBONEMITTER>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> > : class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLKEYFRAME<NTempest::C3Vector> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >& __that);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >();
  unsigned int Add(struct MDLKEYFRAME<NTempest::C3Vector>*);
  unsigned int Add(unsigned int, int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  unsigned int Add(unsigned int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  void GrowToFit(unsigned int, int);
  struct MDLKEYFRAME<NTempest::C3Vector>* New(struct MDLKEYFRAME<NTempest::C3Vector>&);
  struct MDLKEYFRAME<NTempest::C3Vector>* TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLKEYFRAME<NTempest::C3Vector>*);
  unsigned int AddElements(unsigned int, struct MDLKEYFRAME<NTempest::C3Vector>*);
  struct MDLKEYFRAME<NTempest::C3Vector>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >& operator=(class TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >&);
  void ~TSGrowableArray<MDLKEYFRAME<NTempest::C3Vector> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLEVENTKEY> : class TSFixedArray<MDLEVENTKEY>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLEVENTKEY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<MDLEVENTKEY>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLEVENTKEY>::TSGrowableArray<MDLEVENTKEY>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSGrowableArray<MDLEVENTKEY>& __that);
  void TSGrowableArray<MDLEVENTKEY>();
  unsigned int Add(struct MDLEVENTKEY*);
  unsigned int Add(unsigned int, int, struct MDLEVENTKEY*);
  unsigned int Add(unsigned int, struct MDLEVENTKEY*);
  void GrowToFit(unsigned int, int);
  struct MDLEVENTKEY* New(struct MDLEVENTKEY&);
  struct MDLEVENTKEY* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLEVENTKEY*);
  unsigned int AddElements(unsigned int, struct MDLEVENTKEY*);
  struct MDLEVENTKEY* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLEVENTKEY>& operator=(class TSGrowableArray<MDLEVENTKEY>&);
  void ~TSGrowableArray<MDLEVENTKEY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLEVENTSECTION> : class TSFixedArray<MDLEVENTSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLEVENTSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLEVENTSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLEVENTSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLEVENTSECTION>(class TSGrowableArray<MDLEVENTSECTION>&);
  void TSGrowableArray<MDLEVENTSECTION>::TSGrowableArray<MDLEVENTSECTION>();
  unsigned int Add(struct MDLEVENTSECTION*);
  unsigned int Add(unsigned int, int, struct MDLEVENTSECTION*);
  unsigned int Add(unsigned int, struct MDLEVENTSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLEVENTSECTION* New(struct MDLEVENTSECTION&);
  struct MDLEVENTSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLEVENTSECTION*);
  unsigned int AddElements(unsigned int, struct MDLEVENTSECTION*);
  struct MDLEVENTSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLEVENTSECTION>& operator=(class TSGrowableArray<MDLEVENTSECTION>&);
  void ~TSGrowableArray<MDLEVENTSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLHITTESTSHAPE> : class TSFixedArray<MDLHITTESTSHAPE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLHITTESTSHAPE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLHITTESTSHAPE>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLHITTESTSHAPE>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLHITTESTSHAPE>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLHITTESTSHAPE>(class TSGrowableArray<MDLHITTESTSHAPE>&);
  void TSGrowableArray<MDLHITTESTSHAPE>::TSGrowableArray<MDLHITTESTSHAPE>();
  unsigned int Add(struct MDLHITTESTSHAPE*);
  unsigned int Add(unsigned int, int, struct MDLHITTESTSHAPE*);
  unsigned int Add(unsigned int, struct MDLHITTESTSHAPE*);
  void GrowToFit(unsigned int, int);
  struct MDLHITTESTSHAPE* New(struct MDLHITTESTSHAPE&);
  struct MDLHITTESTSHAPE* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLHITTESTSHAPE*);
  unsigned int AddElements(unsigned int, struct MDLHITTESTSHAPE*);
  struct MDLHITTESTSHAPE* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLHITTESTSHAPE>& operator=(class TSGrowableArray<MDLHITTESTSHAPE>&);
  void ~TSGrowableArray<MDLHITTESTSHAPE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<FRAMEPRIORITY *> : class TSFixedArray<FRAMEPRIORITY *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<FRAMEPRIORITY *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<FRAMEPRIORITY *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<FRAMEPRIORITY *>(class TSGrowableArray<FRAMEPRIORITY *>&);
  void TSGrowableArray<FRAMEPRIORITY *>();
  unsigned int Add(class FRAMEPRIORITY**);
  unsigned int Add(unsigned int, int, class FRAMEPRIORITY**);
  unsigned int Add(unsigned int, class FRAMEPRIORITY**);
  void GrowToFit(unsigned int, int);
  class FRAMEPRIORITY** New(class FRAMEPRIORITY*&);
  class FRAMEPRIORITY** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class FRAMEPRIORITY**);
  unsigned int AddElements(unsigned int, class FRAMEPRIORITY**);
  class FRAMEPRIORITY** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<FRAMEPRIORITY *>& operator=(class TSGrowableArray<FRAMEPRIORITY *>&);
  void ~TSGrowableArray<FRAMEPRIORITY *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> > : class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >(class TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* New(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>&);
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>*);
  class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> > : class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >(class TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* New(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>&);
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>*);
  class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> > : class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >(class TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* New(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>&);
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>*);
  class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> > : class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >(class TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >();
  unsigned int Add(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* New(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>&);
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>*);
  class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSimpleBatchedTexture> : class TSFixedArray<CSimpleBatchedTexture>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSimpleBatchedTexture>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CSimpleBatchedTexture>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CSimpleBatchedTexture>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSimpleBatchedTexture>(class TSGrowableArray<CSimpleBatchedTexture>&);
  void TSGrowableArray<CSimpleBatchedTexture>();
  unsigned int Add(struct CSimpleBatchedTexture*);
  unsigned int Add(unsigned int, int, struct CSimpleBatchedTexture*);
  unsigned int Add(unsigned int, struct CSimpleBatchedTexture*);
  void GrowToFit(unsigned int, int);
  struct CSimpleBatchedTexture* New(struct CSimpleBatchedTexture&);
  struct CSimpleBatchedTexture* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CSimpleBatchedTexture*);
  unsigned int AddElements(unsigned int, struct CSimpleBatchedTexture*);
  struct CSimpleBatchedTexture* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSimpleBatchedTexture>& operator=(class TSGrowableArray<CSimpleBatchedTexture>&);
  void ~TSGrowableArray<CSimpleBatchedTexture>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MessageData> : class TSFixedArray<MessageData>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MessageData>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<MessageData>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MessageData>(class TSGrowableArray<MessageData>&);
  void TSGrowableArray<MessageData>();
  unsigned int Add(struct MessageData*);
  unsigned int Add(unsigned int, int, struct MessageData*);
  unsigned int Add(unsigned int, struct MessageData*);
  void GrowToFit(unsigned int, int);
  struct MessageData* New(struct MessageData&);
  struct MessageData* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MessageData*);
  unsigned int AddElements(unsigned int, struct MessageData*);
  struct MessageData* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MessageData>& operator=(class TSGrowableArray<MessageData>&);
  void ~TSGrowableArray<MessageData>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSimpleMessageFrameLine> : class TSFixedArray<CSimpleMessageFrameLine>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSimpleMessageFrameLine>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CSimpleMessageFrameLine>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CSimpleMessageFrameLine>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSimpleMessageFrameLine>(class TSGrowableArray<CSimpleMessageFrameLine>&);
  void TSGrowableArray<CSimpleMessageFrameLine>();
  unsigned int Add(class CSimpleMessageFrameLine*);
  unsigned int Add(unsigned int, int, class CSimpleMessageFrameLine*);
  unsigned int Add(unsigned int, class CSimpleMessageFrameLine*);
  void GrowToFit(unsigned int, int);
  class CSimpleMessageFrameLine* New(class CSimpleMessageFrameLine&);
  class CSimpleMessageFrameLine* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CSimpleMessageFrameLine*);
  unsigned int AddElements(unsigned int, class CSimpleMessageFrameLine*);
  class CSimpleMessageFrameLine* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSimpleMessageFrameLine>& operator=(class TSGrowableArray<CSimpleMessageFrameLine>&);
  void ~TSGrowableArray<CSimpleMessageFrameLine>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<OsIMECandidate> : class TSFixedArray<OsIMECandidate>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<OsIMECandidate>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<OsIMECandidate>(class TSGrowableArray<OsIMECandidate>&);
  void TSGrowableArray<OsIMECandidate>();
  unsigned int Add(struct OsIMECandidate*);
  unsigned int Add(unsigned int, int, struct OsIMECandidate*);
  unsigned int Add(unsigned int, struct OsIMECandidate*);
  void GrowToFit(unsigned int, int);
  struct OsIMECandidate* New(struct OsIMECandidate&);
  struct OsIMECandidate* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct OsIMECandidate*);
  unsigned int AddElements(unsigned int, struct OsIMECandidate*);
  struct OsIMECandidate* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<OsIMECandidate>& operator=(class TSGrowableArray<OsIMECandidate>&);
  void ~TSGrowableArray<OsIMECandidate>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSimpleMessageScrollFrameLine> : class TSFixedArray<CSimpleMessageScrollFrameLine>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSimpleMessageScrollFrameLine>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<CSimpleMessageScrollFrameLine>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSimpleMessageScrollFrameLine>(class TSGrowableArray<CSimpleMessageScrollFrameLine>&);
  void TSGrowableArray<CSimpleMessageScrollFrameLine>();
  unsigned int Add(class CSimpleMessageScrollFrameLine*);
  unsigned int Add(unsigned int, int, class CSimpleMessageScrollFrameLine*);
  unsigned int Add(unsigned int, class CSimpleMessageScrollFrameLine*);
  void GrowToFit(unsigned int, int);
  class CSimpleMessageScrollFrameLine* New(class CSimpleMessageScrollFrameLine&);
  class CSimpleMessageScrollFrameLine* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<CSimpleMessageScrollFrameLine>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class CSimpleMessageScrollFrameLine*);
  unsigned int AddElements(unsigned int, class CSimpleMessageScrollFrameLine*);
  class CSimpleMessageScrollFrameLine* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSimpleMessageScrollFrameLine>& operator=(class TSGrowableArray<CSimpleMessageScrollFrameLine>&);
  void ~TSGrowableArray<CSimpleMessageScrollFrameLine>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSimpleMessageScrollFrameDisplayNode> : class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSimpleMessageScrollFrameDisplayNode>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>(class TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>&);
  void TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>();
  unsigned int Add(class CSimpleMessageScrollFrameDisplayNode*);
  unsigned int Add(unsigned int, int, class CSimpleMessageScrollFrameDisplayNode*);
  unsigned int Add(unsigned int, class CSimpleMessageScrollFrameDisplayNode*);
  void GrowToFit(unsigned int, int);
  class CSimpleMessageScrollFrameDisplayNode* New(class CSimpleMessageScrollFrameDisplayNode&);
  class CSimpleMessageScrollFrameDisplayNode* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class CSimpleMessageScrollFrameDisplayNode*);
  unsigned int AddElements(unsigned int, class CSimpleMessageScrollFrameDisplayNode*);
  class CSimpleMessageScrollFrameDisplayNode* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>& operator=(class TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>&);
  void ~TSGrowableArray<CSimpleMessageScrollFrameDisplayNode>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> > : class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >(class TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >();
  unsigned int Add(class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* New(class TSExplicitList<FrameScriptObject_Variable,-572662307>&);
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<FrameScriptObject_Variable,-572662307>*);
  class TSExplicitList<FrameScriptObject_Variable,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<void *> : class TSFixedArray<void *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<void *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<void *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<void *>(class TSGrowableArray<void *>&);
  void TSGrowableArray<void *>();
  unsigned int Add(void**);
  unsigned int Add(unsigned int, int, void**);
  unsigned int Add(unsigned int, void**);
  void TSGrowableArray<void *>::GrowToFit(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int zero);
  void** New(void*&);
  void** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<void *>::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(void**);
  unsigned int AddElements(unsigned int, void**);
  void** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<void *>& operator=(class TSGrowableArray<void *>&);
  void ~TSGrowableArray<void *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<EvtContext *> : class TSFixedArray<EvtContext *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<EvtContext *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<EvtContext *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<EvtContext *>(class TSGrowableArray<EvtContext *>&);
  void TSGrowableArray<EvtContext *>();
  unsigned int Add(struct EvtContext**);
  unsigned int Add(unsigned int, int, struct EvtContext**);
  unsigned int TSGrowableArray<EvtContext *>::Add(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct EvtContext** data);
  void GrowToFit(unsigned int, int);
  struct EvtContext** New(struct EvtContext*&);
  struct EvtContext** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct EvtContext**);
  unsigned int AddElements(unsigned int, struct EvtContext**);
  struct EvtContext** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<EvtContext *>& operator=(class TSGrowableArray<EvtContext *>&);
  void ~TSGrowableArray<EvtContext *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<SThread *> : class TSFixedArray<SThread *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<SThread *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<SThread *>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<SThread *>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<SThread *>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<SThread *>(class TSGrowableArray<SThread *>&);
  void TSGrowableArray<SThread *>();
  unsigned int Add(class SThread**);
  unsigned int Add(unsigned int, int, class SThread**);
  unsigned int Add(unsigned int, class SThread**);
  void GrowToFit(unsigned int, int);
  class SThread** New(class SThread*&);
  class SThread** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class SThread**);
  unsigned int AddElements(unsigned int, class SThread**);
  class SThread** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<SThread *>& operator=(class TSGrowableArray<SThread *>&);
  void ~TSGrowableArray<SThread *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<EventReg,-572662307> > : class TSFixedArray<TSExplicitList<EventReg,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<EventReg,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<EventReg,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<EventReg,-572662307> >(class TSGrowableArray<TSExplicitList<EventReg,-572662307> >&);
  void TSGrowableArray<TSExplicitList<EventReg,-572662307> >();
  unsigned int Add(class TSExplicitList<EventReg,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<EventReg,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<EventReg,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<EventReg,-572662307>* New(class TSExplicitList<EventReg,-572662307>&);
  class TSExplicitList<EventReg,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<EventReg,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<EventReg,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<EventReg,-572662307>*);
  class TSExplicitList<EventReg,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<EventReg,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<EventReg,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<EventReg,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<EvtTimer *> : class TSFixedArray<EvtTimer *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<EvtTimer *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<EvtTimer *>(class TSGrowableArray<EvtTimer *>&);
  void TSGrowableArray<EvtTimer *>::TSGrowableArray<EvtTimer *>();
  unsigned int Add(struct EvtTimer**);
  unsigned int Add(unsigned int, int, struct EvtTimer**);
  unsigned int Add(unsigned int, struct EvtTimer**);
  void TSGrowableArray<EvtTimer *>::GrowToFit(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index, /*<regrel ebp+0xc>*/ /*|0x4|*/ int zero);
  struct EvtTimer** New(struct EvtTimer*&);
  struct EvtTimer** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct EvtTimer**);
  unsigned int AddElements(unsigned int, struct EvtTimer**);
  struct EvtTimer** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<EvtTimer *>& operator=(class TSGrowableArray<EvtTimer *>&);
  void ~TSGrowableArray<EvtTimer *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class CSBasePriorityQueue : class TSGrowableArray<void *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_linkOffset;

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<void *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int Child(unsigned int);
  unsigned int Parent(unsigned int);
  class CSBasePriority* CSBasePriorityQueue::Link(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  class CSBasePriority* Link(void*);
  void CSBasePriorityQueue::SetLink(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  void UnsetLink(unsigned int);
  int Compare(class CSBasePriority*, class CSBasePriority*);
  void CSBasePriorityQueue(class CSBasePriorityQueue&);
  void CSBasePriorityQueue(int);
  void CSBasePriorityQueue::~CSBasePriorityQueue();
  void* Root();
  void* CSBasePriorityQueue::Dequeue();
  void CSBasePriorityQueue::Enqueue(/*<regrel ebp+0x8>*/ /*|0x4|*/ void* val);
  void CSBasePriorityQueue::Remove(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  class CSBasePriorityQueue& operator=(class CSBasePriorityQueue&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSGrowableArray<TSExplicitList<UncachableNode,-572662307> > : class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<UncachableNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >(class TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >&);
  void TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >();
  unsigned int Add(class TSExplicitList<UncachableNode,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<UncachableNode,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<UncachableNode,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<UncachableNode,-572662307>* New(class TSExplicitList<UncachableNode,-572662307>&);
  class TSExplicitList<UncachableNode,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<UncachableNode,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<UncachableNode,-572662307>*);
  class TSExplicitList<UncachableNode,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<UncachableNode,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CStringRep,-572662307> > : class TSFixedArray<TSExplicitList<CStringRep,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CStringRep,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<CStringRep,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<CStringRep,-572662307> >(class TSGrowableArray<TSExplicitList<CStringRep,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CStringRep,-572662307> >();
  unsigned int Add(class TSExplicitList<CStringRep,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CStringRep,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CStringRep,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CStringRep,-572662307>* New(class TSExplicitList<CStringRep,-572662307>&);
  class TSExplicitList<CStringRep,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CStringRep,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CStringRep,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CStringRep,-572662307>*);
  class TSExplicitList<CStringRep,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CStringRep,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CStringRep,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CStringRep,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> > : class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<PrefetchNode,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >(class TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >();
  unsigned int Add(class TSExplicitList<PrefetchNode,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<PrefetchNode,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<PrefetchNode,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<PrefetchNode,-572662307>* New(class TSExplicitList<PrefetchNode,-572662307>&);
  class TSExplicitList<PrefetchNode,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<PrefetchNode,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<PrefetchNode,-572662307>*);
  class TSExplicitList<PrefetchNode,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<enum ACTIVITY> : class TSFixedArray<enum ACTIVITY>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<enum ACTIVITY>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<enum ACTIVITY>(class TSGrowableArray<enum ACTIVITY>&);
  void TSGrowableArray<enum ACTIVITY>();
  unsigned int Add(enum ACTIVITY*);
  unsigned int Add(unsigned int, int, enum ACTIVITY*);
  unsigned int Add(unsigned int, enum ACTIVITY*);
  void GrowToFit(unsigned int, int);
  enum ACTIVITY* New(enum ACTIVITY&);
  enum ACTIVITY* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(enum ACTIVITY*);
  unsigned int AddElements(unsigned int, enum ACTIVITY*);
  enum ACTIVITY* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<enum ACTIVITY>& operator=(class TSGrowableArray<enum ACTIVITY>&);
  void ~TSGrowableArray<enum ACTIVITY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLMATERIALSECTION> : class TSFixedArray<MDLMATERIALSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLMATERIALSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLMATERIALSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLMATERIALSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLMATERIALSECTION>(class TSGrowableArray<MDLMATERIALSECTION>&);
  void TSGrowableArray<MDLMATERIALSECTION>();
  unsigned int Add(struct MDLMATERIALSECTION*);
  unsigned int Add(unsigned int, int, struct MDLMATERIALSECTION*);
  unsigned int Add(unsigned int, struct MDLMATERIALSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLMATERIALSECTION* New(struct MDLMATERIALSECTION&);
  struct MDLMATERIALSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLMATERIALSECTION*);
  unsigned int AddElements(unsigned int, struct MDLMATERIALSECTION*);
  struct MDLMATERIALSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLMATERIALSECTION>& operator=(class TSGrowableArray<MDLMATERIALSECTION>&);
  void ~TSGrowableArray<MDLMATERIALSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLGEOSETANIMSECTION> : class TSFixedArray<MDLGEOSETANIMSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLGEOSETANIMSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLGEOSETANIMSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLGEOSETANIMSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLGEOSETANIMSECTION>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLGEOSETANIMSECTION>(class TSGrowableArray<MDLGEOSETANIMSECTION>&);
  void TSGrowableArray<MDLGEOSETANIMSECTION>();
  unsigned int Add(struct MDLGEOSETANIMSECTION*);
  unsigned int Add(unsigned int, int, struct MDLGEOSETANIMSECTION*);
  unsigned int Add(unsigned int, struct MDLGEOSETANIMSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLGEOSETANIMSECTION* New(struct MDLGEOSETANIMSECTION&);
  struct MDLGEOSETANIMSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLGEOSETANIMSECTION*);
  unsigned int AddElements(unsigned int, struct MDLGEOSETANIMSECTION*);
  struct MDLGEOSETANIMSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLGEOSETANIMSECTION>& operator=(class TSGrowableArray<MDLGEOSETANIMSECTION>&);
  void ~TSGrowableArray<MDLGEOSETANIMSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLCAMERASECTION> : class TSFixedArray<MDLCAMERASECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLCAMERASECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLCAMERASECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLCAMERASECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLCAMERASECTION>(class TSGrowableArray<MDLCAMERASECTION>&);
  void TSGrowableArray<MDLCAMERASECTION>();
  unsigned int Add(struct MDLCAMERASECTION*);
  unsigned int Add(unsigned int, int, struct MDLCAMERASECTION*);
  unsigned int Add(unsigned int, struct MDLCAMERASECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLCAMERASECTION* New(struct MDLCAMERASECTION&);
  struct MDLCAMERASECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLCAMERASECTION*);
  unsigned int AddElements(unsigned int, struct MDLCAMERASECTION*);
  struct MDLCAMERASECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLCAMERASECTION>& operator=(class TSGrowableArray<MDLCAMERASECTION>&);
  void ~TSGrowableArray<MDLCAMERASECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> > : class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<ANIMHASH,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >(class TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >();
  unsigned int Add(class TSExplicitList<ANIMHASH,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<ANIMHASH,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<ANIMHASH,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<ANIMHASH,-572662307>* New(class TSExplicitList<ANIMHASH,-572662307>&);
  class TSExplicitList<ANIMHASH,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<ANIMHASH,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<ANIMHASH,-572662307>*);
  class TSExplicitList<ANIMHASH,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<NTempest::C34Matrix> : class TSFixedArray<NTempest::C34Matrix>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<NTempest::C34Matrix>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<NTempest::C34Matrix>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<NTempest::C34Matrix>(class TSGrowableArray<NTempest::C34Matrix>&);
  void TSGrowableArray<NTempest::C34Matrix>();
  unsigned int Add(class NTempest::C34Matrix*);
  unsigned int Add(unsigned int, int, class NTempest::C34Matrix*);
  unsigned int Add(unsigned int, class NTempest::C34Matrix*);
  void GrowToFit(unsigned int, int);
  class NTempest::C34Matrix* New(class NTempest::C34Matrix&);
  class NTempest::C34Matrix* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(class NTempest::C34Matrix*);
  unsigned int AddElements(unsigned int, class NTempest::C34Matrix*);
  class NTempest::C34Matrix* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<NTempest::C34Matrix>& operator=(class TSGrowableArray<NTempest::C34Matrix>&);
  void ~TSGrowableArray<NTempest::C34Matrix>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> > : class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<TSExplicitList<CAnimNameHash,-572662307> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >(class TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >::TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >();
  unsigned int Add(class TSExplicitList<CAnimNameHash,-572662307>*);
  unsigned int Add(unsigned int, int, class TSExplicitList<CAnimNameHash,-572662307>*);
  unsigned int Add(unsigned int, class TSExplicitList<CAnimNameHash,-572662307>*);
  void GrowToFit(unsigned int, int);
  class TSExplicitList<CAnimNameHash,-572662307>* New(class TSExplicitList<CAnimNameHash,-572662307>&);
  class TSExplicitList<CAnimNameHash,-572662307>* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >::SetCount(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  void TrimUnusedSpace();
  unsigned int AddElement(class TSExplicitList<CAnimNameHash,-572662307>*);
  unsigned int AddElements(unsigned int, class TSExplicitList<CAnimNameHash,-572662307>*);
  class TSExplicitList<CAnimNameHash,-572662307>* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >& operator=(class TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >&);
  void ~TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> >();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLSEQUENCESSECTION> : class TSFixedArray<MDLSEQUENCESSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLSEQUENCESSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLSEQUENCESSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLSEQUENCESSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void TSGrowableArray<MDLSEQUENCESSECTION>::Reserve(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ int round);
  void TSGrowableArray<MDLSEQUENCESSECTION>(class TSGrowableArray<MDLSEQUENCESSECTION>&);
  void TSGrowableArray<MDLSEQUENCESSECTION>();
  unsigned int Add(struct MDLSEQUENCESSECTION*);
  unsigned int Add(unsigned int, int, struct MDLSEQUENCESSECTION*);
  unsigned int Add(unsigned int, struct MDLSEQUENCESSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLSEQUENCESSECTION* New(struct MDLSEQUENCESSECTION&);
  struct MDLSEQUENCESSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLSEQUENCESSECTION*);
  unsigned int AddElements(unsigned int, struct MDLSEQUENCESSECTION*);
  struct MDLSEQUENCESSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLSEQUENCESSECTION>& operator=(class TSGrowableArray<MDLSEQUENCESSECTION>&);
  void ~TSGrowableArray<MDLSEQUENCESSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLGLOBALSEQSECTION> : class TSFixedArray<MDLGLOBALSEQSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLGLOBALSEQSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int TSGrowableArray<MDLGLOBALSEQSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLGLOBALSEQSECTION>(class TSGrowableArray<MDLGLOBALSEQSECTION>&);
  void TSGrowableArray<MDLGLOBALSEQSECTION>();
  unsigned int Add(struct MDLGLOBALSEQSECTION*);
  unsigned int Add(unsigned int, int, struct MDLGLOBALSEQSECTION*);
  unsigned int Add(unsigned int, struct MDLGLOBALSEQSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLGLOBALSEQSECTION* New(struct MDLGLOBALSEQSECTION&);
  struct MDLGLOBALSEQSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLGLOBALSEQSECTION*);
  unsigned int AddElements(unsigned int, struct MDLGLOBALSEQSECTION*);
  struct MDLGLOBALSEQSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLGLOBALSEQSECTION>& operator=(class TSGrowableArray<MDLGLOBALSEQSECTION>&);
  void ~TSGrowableArray<MDLGLOBALSEQSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<MDLTEXANIMSECTION> : class TSFixedArray<MDLTEXANIMSECTION>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<MDLTEXANIMSECTION>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<MDLTEXANIMSECTION>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<MDLTEXANIMSECTION>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<MDLTEXANIMSECTION>(class TSGrowableArray<MDLTEXANIMSECTION>&);
  void TSGrowableArray<MDLTEXANIMSECTION>();
  unsigned int Add(struct MDLTEXANIMSECTION*);
  unsigned int Add(unsigned int, int, struct MDLTEXANIMSECTION*);
  unsigned int Add(unsigned int, struct MDLTEXANIMSECTION*);
  void GrowToFit(unsigned int, int);
  struct MDLTEXANIMSECTION* New(struct MDLTEXANIMSECTION&);
  struct MDLTEXANIMSECTION* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct MDLTEXANIMSECTION*);
  unsigned int AddElements(unsigned int, struct MDLTEXANIMSECTION*);
  struct MDLTEXANIMSECTION* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<MDLTEXANIMSECTION>& operator=(class TSGrowableArray<MDLTEXANIMSECTION>&);
  void ~TSGrowableArray<MDLTEXANIMSECTION>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CAnimObj *> : class TSFixedArray<CAnimObj *>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CAnimObj *>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CAnimObj *>(class TSGrowableArray<CAnimObj *>&);
  void TSGrowableArray<CAnimObj *>::TSGrowableArray<CAnimObj *>();
  unsigned int Add(struct CAnimObj**);
  unsigned int Add(unsigned int, int, struct CAnimObj**);
  unsigned int Add(unsigned int, struct CAnimObj**);
  void GrowToFit(unsigned int, int);
  struct CAnimObj** New(struct CAnimObj*&);
  struct CAnimObj** New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CAnimObj**);
  unsigned int AddElements(unsigned int, struct CAnimObj**);
  struct CAnimObj** NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CAnimObj *>& operator=(class TSGrowableArray<CAnimObj *>&);
  void ~TSGrowableArray<CAnimObj *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CSeqOrdering> : class TSFixedArray<CSeqOrdering>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CSeqOrdering>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int TSGrowableArray<CSeqOrdering>::CalcChunkSize(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count);
  unsigned int TSGrowableArray<CSeqOrdering>::RoundToChunk(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int chunk);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CSeqOrdering>(class TSGrowableArray<CSeqOrdering>&);
  void TSGrowableArray<CSeqOrdering>::TSGrowableArray<CSeqOrdering>();
  unsigned int Add(struct CSeqOrdering*);
  unsigned int Add(unsigned int, int, struct CSeqOrdering*);
  unsigned int Add(unsigned int, struct CSeqOrdering*);
  void GrowToFit(unsigned int, int);
  struct CSeqOrdering* New(struct CSeqOrdering&);
  struct CSeqOrdering* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CSeqOrdering*);
  unsigned int AddElements(unsigned int, struct CSeqOrdering*);
  struct CSeqOrdering* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CSeqOrdering>& operator=(class TSGrowableArray<CSeqOrdering>&);
  void ~TSGrowableArray<CSeqOrdering>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TSGrowableArray<CMemCmdItem> : class TSFixedArray<CMemCmdItem>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_chunk;

  // base classes -----------------------------------
  // baseclass class TSFixedArray<CMemCmdItem>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  unsigned int CalcChunkSize(unsigned int);
  unsigned int RoundToChunk(unsigned int, unsigned int);
  void Reserve(unsigned int, int);
  void TSGrowableArray<CMemCmdItem>(class TSGrowableArray<CMemCmdItem>&);
  void TSGrowableArray<CMemCmdItem>();
  unsigned int Add(struct CMemCmdItem*);
  unsigned int Add(unsigned int, int, struct CMemCmdItem*);
  unsigned int Add(unsigned int, struct CMemCmdItem*);
  void GrowToFit(unsigned int, int);
  struct CMemCmdItem* New(struct CMemCmdItem&);
  struct CMemCmdItem* New();
  unsigned int Reserved();
  void ReserveSpace(unsigned int);
  void SetChunkSize(unsigned int);
  void SetCount(unsigned int);
  void TrimUnusedSpace();
  unsigned int AddElement(struct CMemCmdItem*);
  unsigned int AddElements(unsigned int, struct CMemCmdItem*);
  struct CMemCmdItem* NewElement();
  void SetNumElements(unsigned int);
  class TSGrowableArray<CMemCmdItem>& operator=(class TSGrowableArray<CMemCmdItem>&);
  void ~TSGrowableArray<CMemCmdItem>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>


class TSGrowableArray<CVariations> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimMaterialLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CSeqInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimObjStatus *> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimGeosetObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimModelObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimObjBlendStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimLightObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimEmitter2ObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimRibbonObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimCameraObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimEventObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimLayerStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimEventObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimCameraObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimRibbonObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimEmitter2Obj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimModelObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimLightObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimBoneObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimObj> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimTransform> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimGeoset> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CKeySeq> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TSGrowableArray<CAnimSequence> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>


}

{ // TSGrowableArray_ - 7

class TSGrowableArray_<unsigned char,1330464594,71> : class TSGrowableArray<unsigned char>  {

  // static data ------------------------------------
  static /*<rva 0x43bcb4>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<unsigned char,1330464594,71>& operator=(class TSGrowableArray_<unsigned char,1330464594,71>&);
  class TSGrowableArray_<unsigned char,1330464594,71>& operator=(class TSGrowableArray<unsigned char>&);
  void TSGrowableArray_<unsigned char,1330464594,71>(class TSGrowableArray_<unsigned char,1330464594,71>&);
  void TSGrowableArray_<unsigned char,1330464594,71>();
  void ~TSGrowableArray_<unsigned char,1330464594,71>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<unsigned char,1330464594,71>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<unsigned char,1330464594,71>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<unsigned char,1112297538,85> : class TSGrowableArray<unsigned char>  {

  // static data ------------------------------------
  static /*<rva 0x45aecc>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<unsigned char,1112297538,85>& operator=(class TSGrowableArray_<unsigned char,1112297538,85>&);
  class TSGrowableArray_<unsigned char,1112297538,85>& operator=(class TSGrowableArray<unsigned char>&);
  void TSGrowableArray_<unsigned char,1112297538,85>(class TSGrowableArray_<unsigned char,1112297538,85>&);
  void TSGrowableArray_<unsigned char,1112297538,85>();
  void ~TSGrowableArray_<unsigned char,1112297538,85>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<unsigned char,1112297538,85>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<unsigned char,1112297538,85>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<VERT,1199076678,58> : class TSGrowableArray<VERT>  {

  // static data ------------------------------------
  static /*<rva 0x45d204>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<VERT>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<VERT,1199076678,58>& operator=(class TSGrowableArray_<VERT,1199076678,58>&);
  class TSGrowableArray_<VERT,1199076678,58>& operator=(class TSGrowableArray<VERT>&);
  void TSGrowableArray_<VERT,1199076678,58>(class TSGrowableArray_<VERT,1199076678,58>&);
  void TSGrowableArray_<VERT,1199076678,58>();
  void ~TSGrowableArray_<VERT,1199076678,58>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<VERT,1199076678,58>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<VERT,1199076678,58>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<NTempest::CImVector,1199076678,59> : class TSGrowableArray<NTempest::CImVector>  {

  // static data ------------------------------------
  static /*<rva 0x45d20c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<NTempest::CImVector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<NTempest::CImVector,1199076678,59>& operator=(class TSGrowableArray_<NTempest::CImVector,1199076678,59>&);
  class TSGrowableArray_<NTempest::CImVector,1199076678,59>& operator=(class TSGrowableArray<NTempest::CImVector>&);
  void TSGrowableArray_<NTempest::CImVector,1199076678,59>(class TSGrowableArray_<NTempest::CImVector,1199076678,59>&);
  void TSGrowableArray_<NTempest::CImVector,1199076678,59>();
  void ~TSGrowableArray_<NTempest::CImVector,1199076678,59>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<NTempest::CImVector,1199076678,59>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<NTempest::CImVector,1199076678,59>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<NTempest::CImVector,1199076678,60> : class TSGrowableArray<NTempest::CImVector>  {

  // static data ------------------------------------
  static /*<rva 0x45d214>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<NTempest::CImVector>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<NTempest::CImVector,1199076678,60>& operator=(class TSGrowableArray_<NTempest::CImVector,1199076678,60>&);
  class TSGrowableArray_<NTempest::CImVector,1199076678,60>& operator=(class TSGrowableArray<NTempest::CImVector>&);
  void TSGrowableArray_<NTempest::CImVector,1199076678,60>(class TSGrowableArray_<NTempest::CImVector,1199076678,60>&);
  void TSGrowableArray_<NTempest::CImVector,1199076678,60>();
  void ~TSGrowableArray_<NTempest::CImVector,1199076678,60>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<NTempest::CImVector,1199076678,60>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<NTempest::CImVector,1199076678,60>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<unsigned short,1199076678,61> : class TSGrowableArray<unsigned short>  {

  // static data ------------------------------------
  static /*<rva 0x45d21c>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<unsigned short>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<unsigned short,1199076678,61>& operator=(class TSGrowableArray_<unsigned short,1199076678,61>&);
  class TSGrowableArray_<unsigned short,1199076678,61>& operator=(class TSGrowableArray<unsigned short>&);
  void TSGrowableArray_<unsigned short,1199076678,61>(class TSGrowableArray_<unsigned short,1199076678,61>&);
  void TSGrowableArray_<unsigned short,1199076678,61>();
  void ~TSGrowableArray_<unsigned short,1199076678,61>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<unsigned short,1199076678,61>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<unsigned short,1199076678,61>::MemLineNo();
};
// <size 0x14>

class TSGrowableArray_<unsigned char,1396853063,102> : class TSGrowableArray<unsigned char>  {

  // static data ------------------------------------
  static /*<rva 0x49c5c0>*/ /*|0x5|*/ char s_name[5];

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TSGrowableArray<unsigned char>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  class TSGrowableArray_<unsigned char,1396853063,102>& operator=(class TSGrowableArray_<unsigned char,1396853063,102>&);
  class TSGrowableArray_<unsigned char,1396853063,102>& operator=(class TSGrowableArray<unsigned char>&);
  void TSGrowableArray_<unsigned char,1396853063,102>(class TSGrowableArray_<unsigned char,1396853063,102>&);
  void TSGrowableArray_<unsigned char,1396853063,102>::TSGrowableArray_<unsigned char,1396853063,102>();
  void TSGrowableArray_<unsigned char,1396853063,102>::~TSGrowableArray_<unsigned char,1396853063,102>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ char* TSGrowableArray_<unsigned char,1396853063,102>::MemFileName();
  virtual /*<vtableoff 0x0>*/ int TSGrowableArray_<unsigned char,1396853063,102>::MemLineNo();
};
// <size 0x14>


}

{ // CArray - 29

class CArray<unsigned char> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned char* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<unsigned char>(class CArray<unsigned char>&);
  void CArray<unsigned char>();
  void ~CArray<unsigned char>();
  class CArray<unsigned char>& operator=(class TSFixedArray<unsigned char>&);
  class CArray<unsigned char>& operator=(class CArray<unsigned char>&);
  void Exchange(class TSGrowableArray<unsigned char>*);
  void ReserveSpace(unsigned int);
  void Zero();
  unsigned char* New();
  unsigned int Count();
  unsigned int Bytes();
  unsigned char& operator[](unsigned int);
  unsigned char& operator[](unsigned int);
  unsigned char* Ptr();
  unsigned char* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, unsigned char*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimEmitter2Obj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimEmitter2Obj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimEmitter2Obj>(class CArray<CAnimEmitter2Obj>&);
  void CArray<CAnimEmitter2Obj>();
  void ~CArray<CAnimEmitter2Obj>();
  class CArray<CAnimEmitter2Obj>& operator=(class TSFixedArray<CAnimEmitter2Obj>&);
  class CArray<CAnimEmitter2Obj>& operator=(class CArray<CAnimEmitter2Obj>&);
  void Exchange(class TSGrowableArray<CAnimEmitter2Obj>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimEmitter2Obj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimEmitter2Obj& operator[](unsigned int);
  struct CAnimEmitter2Obj& operator[](unsigned int);
  struct CAnimEmitter2Obj* Ptr();
  struct CAnimEmitter2Obj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimEmitter2Obj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CVariations> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CVariations* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CVariations>(class CArray<CVariations>&);
  void CArray<CVariations>();
  void ~CArray<CVariations>();
  class CArray<CVariations>& operator=(class TSFixedArray<CVariations>&);
  class CArray<CVariations>& operator=(class CArray<CVariations>&);
  void Exchange(class TSGrowableArray<CVariations>*);
  void CArray<CVariations>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CVariations* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CVariations& operator[](unsigned int);
  struct CVariations& operator[](unsigned int);
  struct CVariations* Ptr();
  struct CVariations* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CVariations*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimObj>(class CArray<CAnimObj>&);
  void CArray<CAnimObj>();
  void CArray<CAnimObj>::~CArray<CAnimObj>();
  class CArray<CAnimObj>& operator=(class TSFixedArray<CAnimObj>&);
  class CArray<CAnimObj>& operator=(class CArray<CAnimObj>&);
  void Exchange(class TSGrowableArray<CAnimObj>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimObj& operator[](unsigned int);
  struct CAnimObj& operator[](unsigned int);
  struct CAnimObj* Ptr();
  struct CAnimObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimBoneObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimBoneObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimBoneObj>(class CArray<CAnimBoneObj>&);
  void CArray<CAnimBoneObj>();
  void CArray<CAnimBoneObj>::~CArray<CAnimBoneObj>();
  class CArray<CAnimBoneObj>& operator=(class TSFixedArray<CAnimBoneObj>&);
  class CArray<CAnimBoneObj>& operator=(class CArray<CAnimBoneObj>&);
  void Exchange(class TSGrowableArray<CAnimBoneObj>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimBoneObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimBoneObj& operator[](unsigned int);
  struct CAnimBoneObj& operator[](unsigned int);
  struct CAnimBoneObj* Ptr();
  struct CAnimBoneObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimBoneObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimLightObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimLightObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimLightObj>(class CArray<CAnimLightObj>&);
  void CArray<CAnimLightObj>();
  void CArray<CAnimLightObj>::~CArray<CAnimLightObj>();
  class CArray<CAnimLightObj>& operator=(class TSFixedArray<CAnimLightObj>&);
  class CArray<CAnimLightObj>& operator=(class CArray<CAnimLightObj>&);
  void Exchange(class TSGrowableArray<CAnimLightObj>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimLightObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimLightObj& operator[](unsigned int);
  struct CAnimLightObj& operator[](unsigned int);
  struct CAnimLightObj* Ptr();
  struct CAnimLightObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimLightObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimModelObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimModelObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimModelObj>(class CArray<CAnimModelObj>&);
  void CArray<CAnimModelObj>();
  void CArray<CAnimModelObj>::~CArray<CAnimModelObj>();
  class CArray<CAnimModelObj>& operator=(class TSFixedArray<CAnimModelObj>&);
  class CArray<CAnimModelObj>& operator=(class CArray<CAnimModelObj>&);
  void Exchange(class TSGrowableArray<CAnimModelObj>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimModelObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimModelObj& operator[](unsigned int);
  struct CAnimModelObj& operator[](unsigned int);
  struct CAnimModelObj* Ptr();
  struct CAnimModelObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimModelObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CKeySeq> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CKeySeq* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CKeySeq>(class CArray<CKeySeq>&);
  void CArray<CKeySeq>();
  void CArray<CKeySeq>::~CArray<CKeySeq>();
  class CArray<CKeySeq>& operator=(class TSFixedArray<CKeySeq>&);
  class CArray<CKeySeq>& operator=(class CArray<CKeySeq>&);
  void Exchange(class TSGrowableArray<CKeySeq>*);
  void CArray<CKeySeq>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CKeySeq* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CKeySeq& CArray<CKeySeq>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CKeySeq& operator[](unsigned int);
  struct CKeySeq* Ptr();
  struct CKeySeq* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CKeySeq*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<unsigned int> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<unsigned int>(class CArray<unsigned int>&);
  void CArray<unsigned int>();
  void CArray<unsigned int>::~CArray<unsigned int>();
  class CArray<unsigned int>& operator=(class TSFixedArray<unsigned int>&);
  class CArray<unsigned int>& operator=(class CArray<unsigned int>&);
  void Exchange(class TSGrowableArray<unsigned int>*);
  void CArray<unsigned int>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  unsigned int* New();
  unsigned int Count();
  unsigned int Bytes();
  unsigned int& operator[](unsigned int);
  unsigned int& CArray<unsigned int>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  unsigned int* Ptr();
  unsigned int* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<unsigned int>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimObj *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimObj** m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimObj *>(class CArray<CAnimObj *>&);
  void CArray<CAnimObj *>();
  void CArray<CAnimObj *>::~CArray<CAnimObj *>();
  class CArray<CAnimObj *>& operator=(class TSFixedArray<CAnimObj *>&);
  class CArray<CAnimObj *>& operator=(class CArray<CAnimObj *>&);
  void Exchange(class TSGrowableArray<CAnimObj *>*);
  void CArray<CAnimObj *>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimObj** New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimObj*& operator[](unsigned int);
  struct CAnimObj*& CArray<CAnimObj *>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CAnimObj** Ptr();
  struct CAnimObj** Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimObj**);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimGeoset> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimGeoset* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimGeoset>(class CArray<CAnimGeoset>&);
  void CArray<CAnimGeoset>();
  void CArray<CAnimGeoset>::~CArray<CAnimGeoset>();
  class CArray<CAnimGeoset>& operator=(class TSFixedArray<CAnimGeoset>&);
  class CArray<CAnimGeoset>& operator=(class CArray<CAnimGeoset>&);
  void Exchange(class TSGrowableArray<CAnimGeoset>*);
  void CArray<CAnimGeoset>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimGeoset* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimGeoset& operator[](unsigned int);
  struct CAnimGeoset& operator[](unsigned int);
  struct CAnimGeoset* Ptr();
  struct CAnimGeoset* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimGeoset*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimRibbonObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimRibbonObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimRibbonObj>(class CArray<CAnimRibbonObj>&);
  void CArray<CAnimRibbonObj>();
  void ~CArray<CAnimRibbonObj>();
  class CArray<CAnimRibbonObj>& operator=(class TSFixedArray<CAnimRibbonObj>&);
  class CArray<CAnimRibbonObj>& operator=(class CArray<CAnimRibbonObj>&);
  void Exchange(class TSGrowableArray<CAnimRibbonObj>*);
  void CArray<CAnimRibbonObj>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimRibbonObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimRibbonObj& operator[](unsigned int);
  struct CAnimRibbonObj& operator[](unsigned int);
  struct CAnimRibbonObj* Ptr();
  struct CAnimRibbonObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimRibbonObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimCameraObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimCameraObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimCameraObj>(class CArray<CAnimCameraObj>&);
  void CArray<CAnimCameraObj>();
  void ~CArray<CAnimCameraObj>();
  class CArray<CAnimCameraObj>& operator=(class TSFixedArray<CAnimCameraObj>&);
  class CArray<CAnimCameraObj>& operator=(class CArray<CAnimCameraObj>&);
  void Exchange(class TSGrowableArray<CAnimCameraObj>*);
  void CArray<CAnimCameraObj>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimCameraObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimCameraObj& operator[](unsigned int);
  struct CAnimCameraObj& operator[](unsigned int);
  struct CAnimCameraObj* Ptr();
  struct CAnimCameraObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimCameraObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimEventObj> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimEventObj* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimEventObj>(class CArray<CAnimEventObj>&);
  void CArray<CAnimEventObj>();
  void ~CArray<CAnimEventObj>();
  class CArray<CAnimEventObj>& operator=(class TSFixedArray<CAnimEventObj>&);
  class CArray<CAnimEventObj>& operator=(class CArray<CAnimEventObj>&);
  void Exchange(class TSGrowableArray<CAnimEventObj>*);
  void CArray<CAnimEventObj>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimEventObj* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimEventObj& operator[](unsigned int);
  struct CAnimEventObj& operator[](unsigned int);
  struct CAnimEventObj* Ptr();
  struct CAnimEventObj* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimEventObj*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimMaterialLayer> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimMaterialLayer* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimMaterialLayer>(class CArray<CAnimMaterialLayer>&);
  void CArray<CAnimMaterialLayer>();
  void ~CArray<CAnimMaterialLayer>();
  class CArray<CAnimMaterialLayer>& operator=(class TSFixedArray<CAnimMaterialLayer>&);
  class CArray<CAnimMaterialLayer>& operator=(class CArray<CAnimMaterialLayer>&);
  void Exchange(class TSGrowableArray<CAnimMaterialLayer>*);
  void CArray<CAnimMaterialLayer>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimMaterialLayer* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimMaterialLayer& operator[](unsigned int);
  struct CAnimMaterialLayer& operator[](unsigned int);
  struct CAnimMaterialLayer* Ptr();
  struct CAnimMaterialLayer* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimMaterialLayer*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimObjStatus *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimObjStatus** m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimObjStatus *>(class CArray<CAnimObjStatus *>&);
  void CArray<CAnimObjStatus *>();
  void CArray<CAnimObjStatus *>::~CArray<CAnimObjStatus *>();
  class CArray<CAnimObjStatus *>& operator=(class TSFixedArray<CAnimObjStatus *>&);
  class CArray<CAnimObjStatus *>& operator=(class CArray<CAnimObjStatus *>&);
  void Exchange(class TSGrowableArray<CAnimObjStatus *>*);
  void CArray<CAnimObjStatus *>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimObjStatus** New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimObjStatus*& operator[](unsigned int);
  struct CAnimObjStatus*& CArray<CAnimObjStatus *>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CAnimObjStatus** Ptr();
  struct CAnimObjStatus** Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimObjStatus *>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimObjStatus** data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimObjStatus>(class CArray<CAnimObjStatus>&);
  void CArray<CAnimObjStatus>();
  void CArray<CAnimObjStatus>::~CArray<CAnimObjStatus>();
  class CArray<CAnimObjStatus>& operator=(class TSFixedArray<CAnimObjStatus>&);
  class CArray<CAnimObjStatus>& operator=(class CArray<CAnimObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimObjStatus>*);
  void CArray<CAnimObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimObjStatus& operator[](unsigned int);
  struct CAnimObjStatus& CArray<CAnimObjStatus>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CAnimObjStatus* Ptr();
  struct CAnimObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimEventObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimEventObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimEventObjStatus>(class CArray<CAnimEventObjStatus>&);
  void CArray<CAnimEventObjStatus>();
  void ~CArray<CAnimEventObjStatus>();
  class CArray<CAnimEventObjStatus>& operator=(class TSFixedArray<CAnimEventObjStatus>&);
  class CArray<CAnimEventObjStatus>& operator=(class CArray<CAnimEventObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimEventObjStatus>*);
  void CArray<CAnimEventObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimEventObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimEventObjStatus& operator[](unsigned int);
  struct CAnimEventObjStatus& CArray<CAnimEventObjStatus>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CAnimEventObjStatus* Ptr();
  struct CAnimEventObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimEventObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimEventObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimTransform> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimTransform* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimTransform>(class CArray<CAnimTransform>&);
  void CArray<CAnimTransform>();
  void CArray<CAnimTransform>::~CArray<CAnimTransform>();
  class CArray<CAnimTransform>& operator=(class TSFixedArray<CAnimTransform>&);
  class CArray<CAnimTransform>& operator=(class CArray<CAnimTransform>&);
  void Exchange(class TSGrowableArray<CAnimTransform>*);
  void CArray<CAnimTransform>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimTransform* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimTransform& operator[](unsigned int);
  struct CAnimTransform& operator[](unsigned int);
  struct CAnimTransform* Ptr();
  struct CAnimTransform* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimTransform*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CSeqInfo> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CSeqInfo* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CSeqInfo>(class CArray<CSeqInfo>&);
  void CArray<CSeqInfo>();
  void CArray<CSeqInfo>::~CArray<CSeqInfo>();
  class CArray<CSeqInfo>& operator=(class TSFixedArray<CSeqInfo>&);
  class CArray<CSeqInfo>& operator=(class CArray<CSeqInfo>&);
  void Exchange(class TSGrowableArray<CSeqInfo>*);
  void CArray<CSeqInfo>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CSeqInfo* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CSeqInfo& operator[](unsigned int);
  struct CSeqInfo& operator[](unsigned int);
  struct CSeqInfo* Ptr();
  struct CSeqInfo* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CSeqInfo>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSeqInfo* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimGeosetObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimGeosetObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimGeosetObjStatus>(class CArray<CAnimGeosetObjStatus>&);
  void CArray<CAnimGeosetObjStatus>();
  void CArray<CAnimGeosetObjStatus>::~CArray<CAnimGeosetObjStatus>();
  class CArray<CAnimGeosetObjStatus>& operator=(class TSFixedArray<CAnimGeosetObjStatus>&);
  class CArray<CAnimGeosetObjStatus>& operator=(class CArray<CAnimGeosetObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimGeosetObjStatus>*);
  void CArray<CAnimGeosetObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimGeosetObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimGeosetObjStatus& operator[](unsigned int);
  struct CAnimGeosetObjStatus& operator[](unsigned int);
  struct CAnimGeosetObjStatus* Ptr();
  struct CAnimGeosetObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimGeosetObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimGeosetObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimModelObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimModelObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimModelObjStatus>(class CArray<CAnimModelObjStatus>&);
  void CArray<CAnimModelObjStatus>();
  void CArray<CAnimModelObjStatus>::~CArray<CAnimModelObjStatus>();
  class CArray<CAnimModelObjStatus>& operator=(class TSFixedArray<CAnimModelObjStatus>&);
  class CArray<CAnimModelObjStatus>& operator=(class CArray<CAnimModelObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimModelObjStatus>*);
  void CArray<CAnimModelObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimModelObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimModelObjStatus& operator[](unsigned int);
  struct CAnimModelObjStatus& operator[](unsigned int);
  struct CAnimModelObjStatus* Ptr();
  struct CAnimModelObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimModelObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimModelObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimObjBlendStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimObjBlendStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimObjBlendStatus>(class CArray<CAnimObjBlendStatus>&);
  void CArray<CAnimObjBlendStatus>();
  void CArray<CAnimObjBlendStatus>::~CArray<CAnimObjBlendStatus>();
  class CArray<CAnimObjBlendStatus>& operator=(class TSFixedArray<CAnimObjBlendStatus>&);
  class CArray<CAnimObjBlendStatus>& operator=(class CArray<CAnimObjBlendStatus>&);
  void Exchange(class TSGrowableArray<CAnimObjBlendStatus>*);
  void ReserveSpace(unsigned int);
  void Zero();
  struct CAnimObjBlendStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimObjBlendStatus& operator[](unsigned int);
  struct CAnimObjBlendStatus& operator[](unsigned int);
  struct CAnimObjBlendStatus* Ptr();
  struct CAnimObjBlendStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimObjBlendStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimObjBlendStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimLightObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimLightObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimLightObjStatus>(class CArray<CAnimLightObjStatus>&);
  void CArray<CAnimLightObjStatus>();
  void CArray<CAnimLightObjStatus>::~CArray<CAnimLightObjStatus>();
  class CArray<CAnimLightObjStatus>& operator=(class TSFixedArray<CAnimLightObjStatus>&);
  class CArray<CAnimLightObjStatus>& operator=(class CArray<CAnimLightObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimLightObjStatus>*);
  void CArray<CAnimLightObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimLightObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimLightObjStatus& operator[](unsigned int);
  struct CAnimLightObjStatus& operator[](unsigned int);
  struct CAnimLightObjStatus* Ptr();
  struct CAnimLightObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimLightObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimLightObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimEmitter2ObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimEmitter2ObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimEmitter2ObjStatus>(class CArray<CAnimEmitter2ObjStatus>&);
  void CArray<CAnimEmitter2ObjStatus>();
  void ~CArray<CAnimEmitter2ObjStatus>();
  class CArray<CAnimEmitter2ObjStatus>& operator=(class TSFixedArray<CAnimEmitter2ObjStatus>&);
  class CArray<CAnimEmitter2ObjStatus>& operator=(class CArray<CAnimEmitter2ObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimEmitter2ObjStatus>*);
  void CArray<CAnimEmitter2ObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimEmitter2ObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimEmitter2ObjStatus& operator[](unsigned int);
  struct CAnimEmitter2ObjStatus& operator[](unsigned int);
  struct CAnimEmitter2ObjStatus* Ptr();
  struct CAnimEmitter2ObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void CArray<CAnimEmitter2ObjStatus>::Set(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int count, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CAnimEmitter2ObjStatus* data);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimRibbonObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimRibbonObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimRibbonObjStatus>(class CArray<CAnimRibbonObjStatus>&);
  void CArray<CAnimRibbonObjStatus>();
  void ~CArray<CAnimRibbonObjStatus>();
  class CArray<CAnimRibbonObjStatus>& operator=(class TSFixedArray<CAnimRibbonObjStatus>&);
  class CArray<CAnimRibbonObjStatus>& operator=(class CArray<CAnimRibbonObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimRibbonObjStatus>*);
  void CArray<CAnimRibbonObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimRibbonObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimRibbonObjStatus& operator[](unsigned int);
  struct CAnimRibbonObjStatus& operator[](unsigned int);
  struct CAnimRibbonObjStatus* Ptr();
  struct CAnimRibbonObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimRibbonObjStatus*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimCameraObjStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimCameraObjStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimCameraObjStatus>(class CArray<CAnimCameraObjStatus>&);
  void CArray<CAnimCameraObjStatus>();
  void ~CArray<CAnimCameraObjStatus>();
  class CArray<CAnimCameraObjStatus>& operator=(class TSFixedArray<CAnimCameraObjStatus>&);
  class CArray<CAnimCameraObjStatus>& operator=(class CArray<CAnimCameraObjStatus>&);
  void Exchange(class TSGrowableArray<CAnimCameraObjStatus>*);
  void CArray<CAnimCameraObjStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimCameraObjStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimCameraObjStatus& operator[](unsigned int);
  struct CAnimCameraObjStatus& operator[](unsigned int);
  struct CAnimCameraObjStatus* Ptr();
  struct CAnimCameraObjStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimCameraObjStatus*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimLayerStatus> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimLayerStatus* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimLayerStatus>(class CArray<CAnimLayerStatus>&);
  void CArray<CAnimLayerStatus>();
  void ~CArray<CAnimLayerStatus>();
  class CArray<CAnimLayerStatus>& operator=(class TSFixedArray<CAnimLayerStatus>&);
  class CArray<CAnimLayerStatus>& operator=(class CArray<CAnimLayerStatus>&);
  void Exchange(class TSGrowableArray<CAnimLayerStatus>*);
  void CArray<CAnimLayerStatus>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimLayerStatus* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimLayerStatus& operator[](unsigned int);
  struct CAnimLayerStatus& operator[](unsigned int);
  struct CAnimLayerStatus* Ptr();
  struct CAnimLayerStatus* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimLayerStatus*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

class CArray<CAnimSequence> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct CAnimSequence* m_data;
  /*<thisrel this+0x4>*/ /*|0x4|*/ unsigned int m_count;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CArray<CAnimSequence>(class CArray<CAnimSequence>&);
  void CArray<CAnimSequence>();
  void CArray<CAnimSequence>::~CArray<CAnimSequence>();
  class CArray<CAnimSequence>& operator=(class TSFixedArray<CAnimSequence>&);
  class CArray<CAnimSequence>& operator=(class CArray<CAnimSequence>&);
  void Exchange(class TSGrowableArray<CAnimSequence>*);
  void CArray<CAnimSequence>::ReserveSpace(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int elements);
  void Zero();
  struct CAnimSequence* New();
  unsigned int Count();
  unsigned int Bytes();
  struct CAnimSequence& operator[](unsigned int);
  struct CAnimSequence& CArray<CAnimSequence>::operator[](/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CAnimSequence* Ptr();
  struct CAnimSequence* Ptr();
  void Clear();
  void SetCount(unsigned int);
  void Set(unsigned int, struct CAnimSequence*);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x8>

}

{ // TSHashObject - 75

class TSHashObject<ANIMHASH,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ANIMHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ANIMHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ANIMHASH,HASHKEY_STRI>(class TSHashObject<ANIMHASH,HASHKEY_STRI>&);
  void TSHashObject<ANIMHASH,HASHKEY_STRI>();
  class TSHashObject<ANIMHASH,HASHKEY_STRI>& operator=(class TSHashObject<ANIMHASH,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ANIMHASH,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<PrefetchNode,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PrefetchNode> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<PrefetchNode> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<PrefetchNode,HASHKEY_STRI>(class TSHashObject<PrefetchNode,HASHKEY_STRI>&);
  void TSHashObject<PrefetchNode,HASHKEY_STRI>();
  class TSHashObject<PrefetchNode,HASHKEY_STRI>& operator=(class TSHashObject<PrefetchNode,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<PrefetchNode,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<UncachableNode,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UncachableNode> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<UncachableNode> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<UncachableNode,HASHKEY_STRI>(class TSHashObject<UncachableNode,HASHKEY_STRI>&);
  void TSHashObject<UncachableNode,HASHKEY_STRI>();
  class TSHashObject<UncachableNode,HASHKEY_STRI>& operator=(class TSHashObject<UncachableNode,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<UncachableNode,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CAnimNameHash> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CAnimNameHash> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_CONSTSTRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>(class TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>&);
  void TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>();
  class TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>& operator=(class TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>&);
  class HASHKEY_CONSTSTRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CAnimNameHash,HASHKEY_CONSTSTRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLEFRAMEREGHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SIMPLEFRAMEREGHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>(class TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>&);
  void TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>();
  class TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>& operator=(class TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<SIMPLEFRAMEREGHASH,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLETEXTUREREGHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SIMPLETEXTUREREGHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>(class TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>&);
  void TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>();
  class TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>& operator=(class TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<SIMPLETEXTUREREGHASH,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLEFONTSTRINGREGHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SIMPLEFONTSTRINGREGHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>(class TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>&);
  void TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>();
  class TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>& operator=(class TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ProfileInternal::SECTION> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ProfileInternal::SECTION> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_CONSTSTRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>(class TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>&);
  void TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>();
  class TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>& operator=(class TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>&);
  class HASHKEY_CONSTSTRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ProfileInternal::KEYVALUE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ProfileInternal::KEYVALUE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_CONSTSTRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>(class TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>&);
  void TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>();
  class TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>& operator=(class TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>&);
  class HASHKEY_CONSTSTRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<FONTHASHOBJ,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FONTHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FONTHASHOBJ> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FONTHASHOBJ,HASHKEY_STR>(class TSHashObject<FONTHASHOBJ,HASHKEY_STR>&);
  void TSHashObject<FONTHASHOBJ,HASHKEY_STR>();
  class TSHashObject<FONTHASHOBJ,HASHKEY_STR>& operator=(class TSHashObject<FONTHASHOBJ,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<FONTHASHOBJ,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SOUNDDEFINITION,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SOUNDDEFINITION> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SOUNDDEFINITION> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>(class TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>&);
  void TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>();
  class TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>& operator=(class TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<SOUNDDEFINITION,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UISOUNDLOOKUP> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<UISOUNDLOOKUP> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>(class TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>&);
  void TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>();
  class TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>& operator=(class TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<UISOUNDLOOKUP,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CHUNKHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CHUNKHASHOBJ> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>(class TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>&);
  void TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>();
  class TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>& operator=(class TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CHUNKHASHOBJ,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OUTDOORSCHUNKHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<OUTDOORSCHUNKHASHOBJ> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0xc|*/ class AREAHASHKEY m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>(class TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>&);
  void TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>();
  class TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>& operator=(class TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>&);
  class AREAHASHKEY GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FOOTSTEPSNDCACHE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FOOTSTEPSNDCACHE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>(class TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>&);
  void TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>();
  class TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>& operator=(class TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<FOOTSTEPSNDCACHE,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<C_OBJECTHASH,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<C_OBJECTHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<C_OBJECTHASH> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<C_OBJECTHASH,CHashKeyGUID>(class TSHashObject<C_OBJECTHASH,CHashKeyGUID>&);
  void TSHashObject<C_OBJECTHASH,CHashKeyGUID>();
  class TSHashObject<C_OBJECTHASH,CHashKeyGUID>& operator=(class TSHashObject<C_OBJECTHASH,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<C_OBJECTHASH,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<ITEMPORTRAIT,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMPORTRAIT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ITEMPORTRAIT> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ITEMPORTRAIT,HASHKEY_STR>(class TSHashObject<ITEMPORTRAIT,HASHKEY_STR>&);
  void TSHashObject<ITEMPORTRAIT,HASHKEY_STR>();
  class TSHashObject<ITEMPORTRAIT,HASHKEY_STR>& operator=(class TSHashObject<ITEMPORTRAIT,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ITEMPORTRAIT,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CACHEENTRY,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CACHEENTRY> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CACHEENTRY> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CACHEENTRY,HASHKEY_STRI>(class TSHashObject<CACHEENTRY,HASHKEY_STRI>&);
  void TSHashObject<CACHEENTRY,HASHKEY_STRI>();
  class TSHashObject<CACHEENTRY,HASHKEY_STRI>& operator=(class TSHashObject<CACHEENTRY,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CACHEENTRY,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<WORDLIST,HASHKEY_LANGUAGE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<WORDLIST> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<WORDLIST> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class HASHKEY_LANGUAGE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<WORDLIST,HASHKEY_LANGUAGE>(class TSHashObject<WORDLIST,HASHKEY_LANGUAGE>&);
  void TSHashObject<WORDLIST,HASHKEY_LANGUAGE>();
  class TSHashObject<WORDLIST,HASHKEY_LANGUAGE>& operator=(class TSHashObject<WORDLIST,HASHKEY_LANGUAGE>&);
  class HASHKEY_LANGUAGE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<WORDLIST,HASHKEY_LANGUAGE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObject<KEYBINDING,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KEYBINDING> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<KEYBINDING> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<KEYBINDING,HASHKEY_STRI>(class TSHashObject<KEYBINDING,HASHKEY_STRI>&);
  void TSHashObject<KEYBINDING,HASHKEY_STRI>();
  class TSHashObject<KEYBINDING,HASHKEY_STRI>& operator=(class TSHashObject<KEYBINDING,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<KEYBINDING,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<KEYCOMMAND,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KEYCOMMAND> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<KEYCOMMAND> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<KEYCOMMAND,HASHKEY_STRI>(class TSHashObject<KEYCOMMAND,HASHKEY_STRI>&);
  void TSHashObject<KEYCOMMAND,HASHKEY_STRI>();
  class TSHashObject<KEYCOMMAND,HASHKEY_STRI>& operator=(class TSHashObject<KEYCOMMAND,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<KEYCOMMAND,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FADEOUTHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FADEOUTHASHOBJ> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>(class TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>&);
  void TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>();
  class TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>& operator=(class TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<FADEOUTHASHOBJ,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<PLAYERPORTRAIT,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<PLAYERPORTRAIT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<PLAYERPORTRAIT> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>(class TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>&);
  void TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>();
  class TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>& operator=(class TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<PLAYERPORTRAIT,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<UNITPORTRAIT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITPORTRAIT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<UNITPORTRAIT> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<UNITPORTRAIT,HASHKEY_NONE>(class TSHashObject<UNITPORTRAIT,HASHKEY_NONE>&);
  void TSHashObject<UNITPORTRAIT,HASHKEY_NONE>();
  class TSHashObject<UNITPORTRAIT,HASHKEY_NONE>& operator=(class TSHashObject<UNITPORTRAIT,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<UNITPORTRAIT,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<GLYPHBITMAPDATA> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<GLYPHBITMAPDATA> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>(class TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>&);
  void TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>();
  class TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>& operator=(class TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<GLYPHBITMAPDATA,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<KERNNODE,KERNINGHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<KERNNODE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<KERNNODE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class KERNINGHASHKEY m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<KERNNODE,KERNINGHASHKEY>(class TSHashObject<KERNNODE,KERNINGHASHKEY>&);
  void TSHashObject<KERNNODE,KERNINGHASHKEY>();
  class TSHashObject<KERNNODE,KERNINGHASHKEY>& operator=(class TSHashObject<KERNNODE,KERNINGHASHKEY>&);
  class KERNINGHASHKEY GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<KERNNODE,KERNINGHASHKEY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<BATCHEDRENDERFONTDESC> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<BATCHEDRENDERFONTDESC> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_PTR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>(class TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>&);
  void TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>();
  class TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>& operator=(class TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>&);
  class HASHKEY_PTR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<BATCHEDRENDERFONTDESC,HASHKEY_PTR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<FACEDATA,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FACEDATA> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FACEDATA> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FACEDATA,HASHKEY_STRI>(class TSHashObject<FACEDATA,HASHKEY_STRI>&);
  void TSHashObject<FACEDATA,HASHKEY_STRI>();
  class TSHashObject<FACEDATA,HASHKEY_STRI>& operator=(class TSHashObject<FACEDATA,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<FACEDATA,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<INVENTORYART,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<INVENTORYART> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<INVENTORYART> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<INVENTORYART,HASHKEY_NONE>(class TSHashObject<INVENTORYART,HASHKEY_NONE>&);
  void TSHashObject<INVENTORYART,HASHKEY_NONE>();
  class TSHashObject<INVENTORYART,HASHKEY_NONE>& operator=(class TSHashObject<INVENTORYART,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<INVENTORYART,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITONESHOTEFFECTDESC> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<UNITONESHOTEFFECTDESC> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>(class TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>&);
  void TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>();
  class TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>& operator=(class TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<UNITONESHOTEFFECTDESC,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<ANIMKIT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ANIMKIT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ANIMKIT> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ANIMKIT,HASHKEY_NONE>(class TSHashObject<ANIMKIT,HASHKEY_NONE>&);
  void TSHashObject<ANIMKIT,HASHKEY_NONE>();
  class TSHashObject<ANIMKIT,HASHKEY_NONE>& operator=(class TSHashObject<ANIMKIT,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ANIMKIT,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<UNITHASHOBJ,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<UNITHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<UNITHASHOBJ> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<UNITHASHOBJ,CHashKeyGUID>(class TSHashObject<UNITHASHOBJ,CHashKeyGUID>&);
  void TSHashObject<UNITHASHOBJ,CHashKeyGUID>();
  class TSHashObject<UNITHASHOBJ,CHashKeyGUID>& operator=(class TSHashObject<UNITHASHOBJ,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<UNITHASHOBJ,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<EventReg,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<EventReg> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<EventReg> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<EventReg,HASHKEY_NONE>(class TSHashObject<EventReg,HASHKEY_NONE>&);
  void TSHashObject<EventReg,HASHKEY_NONE>();
  class TSHashObject<EventReg,HASHKEY_NONE>& operator=(class TSHashObject<EventReg,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<EventReg,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class EventReg::EventIterator {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct EventReg& m_reg;
  /*<thisrel this+0x4>*/ /*|0x4|*/ struct EventReg::EVENTDISPATCHREG* m_ptr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void EventIterator(struct EventReg&);
  void EventIterator(class EventReg::EventIterator&);
  class EventReg::EventIterator& operator=(class EventReg::EventIterator&);
  int Next(int&, class CObserver*&);

  // virtual functions ------------------------------
};
// <size 0x8>

class TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CONSOLECOMMAND> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CONSOLECOMMAND> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_CONSTSTRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>(class TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>&);
  void TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>();
  class TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>& operator=(class TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>&);
  class HASHKEY_CONSTSTRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CONSOLECOMMAND,HASHKEY_CONSTSTRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CMapDoodadDef,HASHKEY_DWORD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapDoodadDef> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CMapDoodadDef> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_DWORD m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CMapDoodadDef,HASHKEY_DWORD>(class TSHashObject<CMapDoodadDef,HASHKEY_DWORD>&);
  void TSHashObject<CMapDoodadDef,HASHKEY_DWORD>();
  class TSHashObject<CMapDoodadDef,HASHKEY_DWORD>& operator=(class TSHashObject<CMapDoodadDef,HASHKEY_DWORD>&);
  class HASHKEY_DWORD GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CMapDoodadDef,HASHKEY_DWORD>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<AREAHASHOBJECT,AREAHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<AREAHASHOBJECT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<AREAHASHOBJECT> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0xc|*/ class AREAHASHKEY m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<AREAHASHOBJECT,AREAHASHKEY>(class TSHashObject<AREAHASHOBJECT,AREAHASHKEY>&);
  void TSHashObject<AREAHASHOBJECT,AREAHASHKEY>();
  class TSHashObject<AREAHASHOBJECT,AREAHASHKEY>& operator=(class TSHashObject<AREAHASHOBJECT,AREAHASHKEY>&);
  class AREAHASHKEY GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<AREAHASHOBJECT,AREAHASHKEY>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<MINIMAPMD5NAME> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<MINIMAPMD5NAME> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>(class TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>&);
  void TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>();
  class TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>& operator=(class TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<MINIMAPMD5NAME,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CMapObj,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObj> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CMapObj> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CMapObj,HASHKEY_NONE>(class TSHashObject<CMapObj,HASHKEY_NONE>&);
  void TSHashObject<CMapObj,HASHKEY_NONE>();
  class TSHashObject<CMapObj,HASHKEY_NONE>& operator=(class TSHashObject<CMapObj,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CMapObj,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CMapObjDef,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CMapObjDef> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CMapObjDef> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CMapObjDef,HASHKEY_NONE>(class TSHashObject<CMapObjDef,HASHKEY_NONE>&);
  void TSHashObject<CMapObjDef,HASHKEY_NONE>();
  class TSHashObject<CMapObjDef,HASHKEY_NONE>& operator=(class TSHashObject<CMapObjDef,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CMapObjDef,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SPELLVISUALNODE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SPELLVISUALNODE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SPELLVISUALNODE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>(class TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>&);
  void TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>();
  class TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>& operator=(class TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<SPELLVISUALNODE,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<NAMEPLATEDESC,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<NAMEPLATEDESC> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<NAMEPLATEDESC> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<NAMEPLATEDESC,CHashKeyGUID>(class TSHashObject<NAMEPLATEDESC,CHashKeyGUID>&);
  void TSHashObject<NAMEPLATEDESC,CHashKeyGUID>();
  class TSHashObject<NAMEPLATEDESC,CHashKeyGUID>& operator=(class TSHashObject<NAMEPLATEDESC,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<NAMEPLATEDESC,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<FrameScriptObject_Variable,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FrameScriptObject_Variable> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FrameScriptObject_Variable> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>(class TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>&);
  void TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>();
  class TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>& operator=(class TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<FrameScriptObject_Variable,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CVar,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CVar> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CVar> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CVar,HASHKEY_STRI>(class TSHashObject<CVar,HASHKEY_STRI>&);
  void TSHashObject<CVar,HASHKEY_STRI>();
  class TSHashObject<CVar,HASHKEY_STRI>& operator=(class TSHashObject<CVar,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CVar,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<ITEMEXPIRATION,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMEXPIRATION> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ITEMEXPIRATION> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ITEMEXPIRATION,CHashKeyGUID>(class TSHashObject<ITEMEXPIRATION,CHashKeyGUID>&);
  void TSHashObject<ITEMEXPIRATION,CHashKeyGUID>();
  class TSHashObject<ITEMEXPIRATION,CHashKeyGUID>& operator=(class TSHashObject<ITEMEXPIRATION,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ITEMEXPIRATION,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ITEMCOOLDOWNHASHNODE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ITEMCOOLDOWNHASHNODE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>(class TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>&);
  void TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>();
  class TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>& operator=(class TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<TRADESKILLLINE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TRADESKILLLINE> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<TRADESKILLLINE> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<TRADESKILLLINE,HASHKEY_NONE>(class TSHashObject<TRADESKILLLINE,HASHKEY_NONE>&);
  void TSHashObject<TRADESKILLLINE,HASHKEY_NONE>();
  class TSHashObject<TRADESKILLLINE,HASHKEY_NONE>& operator=(class TSHashObject<TRADESKILLLINE,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<TRADESKILLLINE,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CSimpleDoodad,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSimpleDoodad> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CSimpleDoodad> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CSimpleDoodad,HASHKEY_NONE>(class TSHashObject<CSimpleDoodad,HASHKEY_NONE>&);
  void TSHashObject<CSimpleDoodad,HASHKEY_NONE>();
  class TSHashObject<CSimpleDoodad,HASHKEY_NONE>& operator=(class TSHashObject<CSimpleDoodad,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CSimpleDoodad,HASHKEY_NONE>::~TSHashObject<CSimpleDoodad,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<FILEMAP,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<FILEMAP> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<FILEMAP> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<FILEMAP,HASHKEY_STRI>(class TSHashObject<FILEMAP,HASHKEY_STRI>&);
  void TSHashObject<FILEMAP,HASHKEY_STRI>::TSHashObject<FILEMAP,HASHKEY_STRI>();
  class TSHashObject<FILEMAP,HASHKEY_STRI>& operator=(class TSHashObject<FILEMAP,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<FILEMAP,HASHKEY_STRI>::~TSHashObject<FILEMAP,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<RGN,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<RGN> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<RGN> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<RGN,HASHKEY_NONE>::TSHashObject<RGN,HASHKEY_NONE>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObject<RGN,HASHKEY_NONE>& __formal);
  void TSHashObject<RGN,HASHKEY_NONE>::TSHashObject<RGN,HASHKEY_NONE>();
  class TSHashObject<RGN,HASHKEY_NONE>& TSHashObject<RGN,HASHKEY_NONE>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSHashObject<RGN,HASHKEY_NONE>& __formal);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<RGN,HASHKEY_NONE>::~TSHashObject<RGN,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<ZipFileDirEntry> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<ZipFileDirEntry> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_CONSTSTRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>(class TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>&);
  void TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>::TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>();
  class TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>& operator=(class TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>&);
  class HASHKEY_CONSTSTRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>::~TSHashObject<ZipFileDirEntry,HASHKEY_CONSTSTRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<TIMESTAMPSTRUCT> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<TIMESTAMPSTRUCT> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>(class TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>&);
  void TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>();
  class TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>& operator=(class TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>::~TSHashObject<TIMESTAMPSTRUCT,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CLightList,HASHKEY_DWORD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CLightList> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CLightList> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_DWORD m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CLightList,HASHKEY_DWORD>(class TSHashObject<CLightList,HASHKEY_DWORD>&);
  void TSHashObject<CLightList,HASHKEY_DWORD>();
  class TSHashObject<CLightList,HASHKEY_DWORD>& operator=(class TSHashObject<CLightList,HASHKEY_DWORD>&);
  class HASHKEY_DWORD GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CLightList,HASHKEY_DWORD>::~TSHashObject<CLightList,HASHKEY_DWORD>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<STRINGVIEWMATRICES> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<STRINGVIEWMATRICES> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_PTR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>(class TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>&);
  void TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>::TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>();
  class TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>& operator=(class TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>&);
  class HASHKEY_PTR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<STRINGVIEWMATRICES,HASHKEY_PTR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CHARCODEDESC,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CHARCODEDESC> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CHARCODEDESC> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CHARCODEDESC,HASHKEY_NONE>(class TSHashObject<CHARCODEDESC,HASHKEY_NONE>&);
  void TSHashObject<CHARCODEDESC,HASHKEY_NONE>();
  class TSHashObject<CHARCODEDESC,HASHKEY_NONE>& operator=(class TSHashObject<CHARCODEDESC,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CHARCODEDESC,HASHKEY_NONE>::~TSHashObject<CHARCODEDESC,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CGxPixelShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxPixelShader> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CGxPixelShader> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CGxPixelShader,HASHKEY_STRI>(class TSHashObject<CGxPixelShader,HASHKEY_STRI>&);
  void TSHashObject<CGxPixelShader,HASHKEY_STRI>();
  class TSHashObject<CGxPixelShader,HASHKEY_STRI>& operator=(class TSHashObject<CGxPixelShader,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CGxPixelShader,HASHKEY_STRI>::~TSHashObject<CGxPixelShader,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CGxVertexShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CGxVertexShader> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CGxVertexShader> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STRI m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CGxVertexShader,HASHKEY_STRI>(class TSHashObject<CGxVertexShader,HASHKEY_STRI>&);
  void TSHashObject<CGxVertexShader,HASHKEY_STRI>();
  class TSHashObject<CGxVertexShader,HASHKEY_STRI>& operator=(class TSHashObject<CGxVertexShader,HASHKEY_STRI>&);
  class HASHKEY_STRI GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CGxVertexShader,HASHKEY_STRI>::~TSHashObject<CGxVertexShader,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class CHashKeyGUID m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>(class TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>&);
  void TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>();
  class TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>& operator=(class TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>&);
  class CHashKeyGUID GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::~TSHashObject<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SHEATHSOUNDHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SHEATHSOUNDHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>(class TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>&);
  void TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>();
  class TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>& operator=(class TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>::~TSHashObject<SHEATHSOUNDHASH,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CTextureHash> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CTextureHash> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class HASHKEY_TEXTUREFILE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>(class TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>&);
  void TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>();
  class TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>& operator=(class TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>&);
  class HASHKEY_TEXTUREFILE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>::~TSHashObject<CTextureHash,HASHKEY_TEXTUREFILE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObject<CSolidTextureHash,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CSolidTextureHash> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CSolidTextureHash> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CSolidTextureHash,HASHKEY_NONE>(class TSHashObject<CSolidTextureHash,HASHKEY_NONE>&);
  void TSHashObject<CSolidTextureHash,HASHKEY_NONE>();
  class TSHashObject<CSolidTextureHash,HASHKEY_NONE>& operator=(class TSHashObject<CSolidTextureHash,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CSolidTextureHash,HASHKEY_NONE>::~TSHashObject<CSolidTextureHash,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<OsNet::NETSELSOCKPTR> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<OsNet::NETSELSOCKPTR> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>(class TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  void TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  class TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>& operator=(class TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::~TSHashObject<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SoundFileObjectCacheNode> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SoundFileObjectCacheNode> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>(class TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  void TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>();
  class TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>& operator=(class TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>::~TSHashObject<SoundFileObjectCacheNode,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SoundFileDataCacheBlock> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SoundFileDataCacheBlock> m_linktofull;
  /*<thisrel this+0x18>*/ /*|0x8|*/ class HASHKEY_LONGLONG m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>(class TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  void TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  class TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>& operator=(class TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  class HASHKEY_LONGLONG GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::~TSHashObject<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>

class TSHashObject<CModelHash,CHashKeyFilePath> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CModelHash> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CModelHash> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x104|*/ class CHashKeyFilePath m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CModelHash,CHashKeyFilePath>(class TSHashObject<CModelHash,CHashKeyFilePath>&);
  void TSHashObject<CModelHash,CHashKeyFilePath>();
  class TSHashObject<CModelHash,CHashKeyFilePath>& operator=(class TSHashObject<CModelHash,CHashKeyFilePath>&);
  class CHashKeyFilePath GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<CModelHash,CHashKeyFilePath>::~TSHashObject<CModelHash,CHashKeyFilePath>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x118>

class TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<SIMPLECONTEXTHASHOBJ> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<SIMPLECONTEXTHASHOBJ> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_NONE m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>(class TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>&);
  void TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>();
  class TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>& operator=(class TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>&);
  class HASHKEY_NONE GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::~TSHashObject<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<CStringRep,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<CStringRep> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<CStringRep> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x4|*/ class HASHKEY_STR m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<CStringRep,HASHKEY_STR>(class TSHashObject<CStringRep,HASHKEY_STR>&);
  void TSHashObject<CStringRep,HASHKEY_STR>();
  class TSHashObject<CStringRep,HASHKEY_STR>& operator=(class TSHashObject<CStringRep,HASHKEY_STR>&);
  class HASHKEY_STR GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void ~TSHashObject<CStringRep,HASHKEY_STR>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_hashval;
  /*<thisrel this+0x4>*/ /*|0x8|*/ class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> m_linktoslot;
  /*<thisrel this+0xc>*/ /*|0x8|*/ class TSLink<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH> m_linktofull;
  /*<thisrel this+0x14>*/ /*|0x1|*/ class HASHKEY_INT m_key;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  class TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class HASHKEY_INT GetKey();
  void* GetData();
  char* GetString();
  unsigned int GetHashValue();
  void TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::~TSHashObject<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>


}

{ // TSHashObjectChunk - 10

class TSHashObjectChunk<RGN,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<RGN> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<RGN,HASHKEY_NONE> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<RGN,HASHKEY_NONE>(class TSHashObjectChunk<RGN,HASHKEY_NONE>&);
  void TSHashObjectChunk<RGN,HASHKEY_NONE>::TSHashObjectChunk<RGN,HASHKEY_NONE>();
  class TSHashObjectChunk<RGN,HASHKEY_NONE>& operator=(class TSHashObjectChunk<RGN,HASHKEY_NONE>&);
  void TSHashObjectChunk<RGN,HASHKEY_NONE>::~TSHashObjectChunk<RGN,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CLightList,HASHKEY_DWORD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CLightList> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CLightList,HASHKEY_DWORD> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CLightList,HASHKEY_DWORD>(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>&);
  void TSHashObjectChunk<CLightList,HASHKEY_DWORD>();
  class TSHashObjectChunk<CLightList,HASHKEY_DWORD>& operator=(class TSHashObjectChunk<CLightList,HASHKEY_DWORD>&);
  void TSHashObjectChunk<CLightList,HASHKEY_DWORD>::~TSHashObjectChunk<CLightList,HASHKEY_DWORD>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CGxVertexShader> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>&);
  void TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>();
  class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>& operator=(class TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>&);
  void ~TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CGxPixelShader> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>&);
  void TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>();
  class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>& operator=(class TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>&);
  void ~TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CSolidTextureHash> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>&);
  void TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>();
  class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>& operator=(class TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>&);
  void TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>::~TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CTextureHash> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>&);
  void TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>();
  class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>& operator=(class TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>&);
  void TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>::~TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<OsNet::NETSELSOCKPTR> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  void TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>& operator=(class TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  void TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::~TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<SoundFileObjectCacheNode> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  void TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>();
  class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>& operator=(class TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  void TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>::~TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<SoundFileDataCacheBlock> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  void TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>& operator=(class TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  void TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::~TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class TSHashObjectChunk<CModelHash,CHashKeyFilePath> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<CModelHash> m_array;
  /*<thisrel this+0x14>*/ /*|0x8|*/ class TSLink<TSHashObjectChunk<CModelHash,CHashKeyFilePath> > m_link;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashObjectChunk<CModelHash,CHashKeyFilePath>(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>&);
  void TSHashObjectChunk<CModelHash,CHashKeyFilePath>();
  class TSHashObjectChunk<CModelHash,CHashKeyFilePath>& operator=(class TSHashObjectChunk<CModelHash,CHashKeyFilePath>&);
  void TSHashObjectChunk<CModelHash,CHashKeyFilePath>::~TSHashObjectChunk<CModelHash,CHashKeyFilePath>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

}

{ // TSHashTable - 76

class TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct ITEMCOOLDOWNHASHNODE*, unsigned int);
  struct ITEMCOOLDOWNHASHNODE* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>();
  void TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>(class TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>&);
  class TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>& operator=(class TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* DeleteNode(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Head();
  struct ITEMCOOLDOWNHASHNODE* Head();
  void Insert(struct ITEMCOOLDOWNHASHNODE*, char*);
  void Insert(struct ITEMCOOLDOWNHASHNODE*, unsigned int, char*);
  void Insert(struct ITEMCOOLDOWNHASHNODE*, unsigned int, class HASHKEY_NONE&);
  struct ITEMCOOLDOWNHASHNODE* New(char*, unsigned long, unsigned long);
  struct ITEMCOOLDOWNHASHNODE* New(unsigned int, char*, unsigned long, unsigned long);
  struct ITEMCOOLDOWNHASHNODE* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct ITEMCOOLDOWNHASHNODE* Next(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Next(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Prev(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Prev(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Ptr(char*);
  struct ITEMCOOLDOWNHASHNODE* Ptr(char*);
  struct ITEMCOOLDOWNHASHNODE* Ptr(unsigned int, char*);
  struct ITEMCOOLDOWNHASHNODE* Ptr(unsigned int, char*);
  struct ITEMCOOLDOWNHASHNODE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct ITEMCOOLDOWNHASHNODE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct ITEMCOOLDOWNHASHNODE* RawNext(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* RawNext(struct ITEMCOOLDOWNHASHNODE*);
  struct ITEMCOOLDOWNHASHNODE* Tail();
  struct ITEMCOOLDOWNHASHNODE* Tail();
  void Unlink(struct ITEMCOOLDOWNHASHNODE*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMCOOLDOWNHASHNODE* ptr);
  virtual /*<vtableoff 0x4>*/ struct ITEMCOOLDOWNHASHNODE* TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ITEMCOOLDOWNHASHNODE,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ITEMCOOLDOWNHASHNODE,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<AREAHASHOBJECT,AREAHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<AREAHASHOBJECT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<AREAHASHOBJECT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct AREAHASHOBJECT*, unsigned int);
  struct AREAHASHOBJECT* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<AREAHASHOBJECT,AREAHASHKEY>& NonConst();
  int GetLinkOffset();
  void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>();
  void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>(class TSHashTable<AREAHASHOBJECT,AREAHASHKEY>&);
  class TSHashTable<AREAHASHOBJECT,AREAHASHKEY>& operator=(class TSHashTable<AREAHASHOBJECT,AREAHASHKEY>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class AREAHASHKEY&);
  void Delete(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* DeleteNode(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Head();
  struct AREAHASHOBJECT* Head();
  void Insert(struct AREAHASHOBJECT*, char*);
  void Insert(struct AREAHASHOBJECT*, unsigned int, char*);
  void Insert(struct AREAHASHOBJECT*, unsigned int, class AREAHASHKEY&);
  struct AREAHASHOBJECT* New(char*, unsigned long, unsigned long);
  struct AREAHASHOBJECT* New(unsigned int, char*, unsigned long, unsigned long);
  struct AREAHASHOBJECT* New(unsigned int, class AREAHASHKEY&, unsigned long, unsigned long);
  struct AREAHASHOBJECT* Next(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Next(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Prev(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Prev(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Ptr(char*);
  struct AREAHASHOBJECT* Ptr(char*);
  struct AREAHASHOBJECT* Ptr(unsigned int, char*);
  struct AREAHASHOBJECT* Ptr(unsigned int, char*);
  struct AREAHASHOBJECT* Ptr(unsigned int, class AREAHASHKEY&);
  struct AREAHASHOBJECT* Ptr(unsigned int, class AREAHASHKEY&);
  struct AREAHASHOBJECT* RawNext(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* RawNext(struct AREAHASHOBJECT*);
  struct AREAHASHOBJECT* Tail();
  struct AREAHASHOBJECT* Tail();
  void Unlink(struct AREAHASHOBJECT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct AREAHASHOBJECT* ptr);
  virtual /*<vtableoff 0x4>*/ struct AREAHASHOBJECT* TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<AREAHASHOBJECT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<AREAHASHOBJECT,AREAHASHKEY>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<AREAHASHOBJECT,AREAHASHKEY>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<MINIMAPMD5NAME,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<MINIMAPMD5NAME,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct MINIMAPMD5NAME*, unsigned int);
  struct MINIMAPMD5NAME* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>();
  void TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>(class TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>&);
  class TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>& operator=(class TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* DeleteNode(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Head();
  struct MINIMAPMD5NAME* Head();
  void Insert(struct MINIMAPMD5NAME*, char*);
  void Insert(struct MINIMAPMD5NAME*, unsigned int, char*);
  void Insert(struct MINIMAPMD5NAME*, unsigned int, class HASHKEY_STRI&);
  struct MINIMAPMD5NAME* New(char*, unsigned long, unsigned long);
  struct MINIMAPMD5NAME* New(unsigned int, char*, unsigned long, unsigned long);
  struct MINIMAPMD5NAME* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct MINIMAPMD5NAME* Next(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Next(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Prev(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Prev(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Ptr(char*);
  struct MINIMAPMD5NAME* Ptr(char*);
  struct MINIMAPMD5NAME* Ptr(unsigned int, char*);
  struct MINIMAPMD5NAME* Ptr(unsigned int, char*);
  struct MINIMAPMD5NAME* Ptr(unsigned int, class HASHKEY_STRI&);
  struct MINIMAPMD5NAME* Ptr(unsigned int, class HASHKEY_STRI&);
  struct MINIMAPMD5NAME* RawNext(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* RawNext(struct MINIMAPMD5NAME*);
  struct MINIMAPMD5NAME* Tail();
  struct MINIMAPMD5NAME* Tail();
  void Unlink(struct MINIMAPMD5NAME*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct MINIMAPMD5NAME* ptr);
  virtual /*<vtableoff 0x4>*/ struct MINIMAPMD5NAME* TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<MINIMAPMD5NAME,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<MINIMAPMD5NAME,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CMapDoodadDef,HASHKEY_DWORD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CMapDoodadDef,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CMapDoodadDef,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapDoodadDef* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  class CMapDoodadDef* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CMapDoodadDef,HASHKEY_DWORD>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>();
  void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>(class TSHashTable<CMapDoodadDef,HASHKEY_DWORD>&);
  class TSHashTable<CMapDoodadDef,HASHKEY_DWORD>& operator=(class TSHashTable<CMapDoodadDef,HASHKEY_DWORD>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_DWORD&);
  void Delete(class CMapDoodadDef*);
  class CMapDoodadDef* DeleteNode(class CMapDoodadDef*);
  class CMapDoodadDef* Head();
  class CMapDoodadDef* Head();
  void Insert(class CMapDoodadDef*, char*);
  void Insert(class CMapDoodadDef*, unsigned int, char*);
  void Insert(class CMapDoodadDef*, unsigned int, class HASHKEY_DWORD&);
  class CMapDoodadDef* New(char*, unsigned long, unsigned long);
  class CMapDoodadDef* New(unsigned int, char*, unsigned long, unsigned long);
  class CMapDoodadDef* New(unsigned int, class HASHKEY_DWORD&, unsigned long, unsigned long);
  class CMapDoodadDef* Next(class CMapDoodadDef*);
  class CMapDoodadDef* Next(class CMapDoodadDef*);
  class CMapDoodadDef* Prev(class CMapDoodadDef*);
  class CMapDoodadDef* Prev(class CMapDoodadDef*);
  class CMapDoodadDef* Ptr(char*);
  class CMapDoodadDef* Ptr(char*);
  class CMapDoodadDef* Ptr(unsigned int, char*);
  class CMapDoodadDef* Ptr(unsigned int, char*);
  class CMapDoodadDef* Ptr(unsigned int, class HASHKEY_DWORD&);
  class CMapDoodadDef* Ptr(unsigned int, class HASHKEY_DWORD&);
  class CMapDoodadDef* RawNext(class CMapDoodadDef*);
  class CMapDoodadDef* RawNext(class CMapDoodadDef*);
  class CMapDoodadDef* Tail();
  class CMapDoodadDef* Tail();
  void Unlink(class CMapDoodadDef*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapDoodadDef* ptr);
  virtual /*<vtableoff 0x4>*/ class CMapDoodadDef* TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CMapDoodadDef,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CMapDoodadDef,HASHKEY_DWORD>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CMapDoodadDef,HASHKEY_DWORD>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CMapObjDef,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CMapObjDef,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CMapObjDef,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<CMapObjDef,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void TSHashTable<CMapObjDef,HASHKEY_NONE>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  class CMapObjDef* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CMapObjDef,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CMapObjDef,HASHKEY_NONE>();
  void TSHashTable<CMapObjDef,HASHKEY_NONE>(class TSHashTable<CMapObjDef,HASHKEY_NONE>&);
  class TSHashTable<CMapObjDef,HASHKEY_NONE>& operator=(class TSHashTable<CMapObjDef,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(class CMapObjDef*);
  class CMapObjDef* DeleteNode(class CMapObjDef*);
  class CMapObjDef* Head();
  class CMapObjDef* Head();
  void Insert(class CMapObjDef*, char*);
  void Insert(class CMapObjDef*, unsigned int, char*);
  void Insert(class CMapObjDef*, unsigned int, class HASHKEY_NONE&);
  class CMapObjDef* New(char*, unsigned long, unsigned long);
  class CMapObjDef* New(unsigned int, char*, unsigned long, unsigned long);
  class CMapObjDef* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  class CMapObjDef* Next(class CMapObjDef*);
  class CMapObjDef* Next(class CMapObjDef*);
  class CMapObjDef* Prev(class CMapObjDef*);
  class CMapObjDef* Prev(class CMapObjDef*);
  class CMapObjDef* Ptr(char*);
  class CMapObjDef* Ptr(char*);
  class CMapObjDef* Ptr(unsigned int, char*);
  class CMapObjDef* Ptr(unsigned int, char*);
  class CMapObjDef* Ptr(unsigned int, class HASHKEY_NONE&);
  class CMapObjDef* Ptr(unsigned int, class HASHKEY_NONE&);
  class CMapObjDef* RawNext(class CMapObjDef*);
  class CMapObjDef* RawNext(class CMapObjDef*);
  class CMapObjDef* Tail();
  class CMapObjDef* Tail();
  void Unlink(class CMapObjDef*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CMapObjDef,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObjDef* ptr);
  virtual /*<vtableoff 0x4>*/ class CMapObjDef* TSHashTable<CMapObjDef,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CMapObjDef,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CMapObjDef,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CMapObjDef,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CMapObj,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CMapObj,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CMapObj,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<CMapObj,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(class CMapObj*, unsigned int);
  class CMapObj* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CMapObj,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CMapObj,HASHKEY_NONE>();
  void TSHashTable<CMapObj,HASHKEY_NONE>(class TSHashTable<CMapObj,HASHKEY_NONE>&);
  class TSHashTable<CMapObj,HASHKEY_NONE>& operator=(class TSHashTable<CMapObj,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(class CMapObj*);
  class CMapObj* DeleteNode(class CMapObj*);
  class CMapObj* Head();
  class CMapObj* Head();
  void Insert(class CMapObj*, char*);
  void Insert(class CMapObj*, unsigned int, char*);
  void Insert(class CMapObj*, unsigned int, class HASHKEY_NONE&);
  class CMapObj* New(char*, unsigned long, unsigned long);
  class CMapObj* New(unsigned int, char*, unsigned long, unsigned long);
  class CMapObj* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  class CMapObj* Next(class CMapObj*);
  class CMapObj* Next(class CMapObj*);
  class CMapObj* Prev(class CMapObj*);
  class CMapObj* Prev(class CMapObj*);
  class CMapObj* Ptr(char*);
  class CMapObj* Ptr(char*);
  class CMapObj* Ptr(unsigned int, char*);
  class CMapObj* Ptr(unsigned int, char*);
  class CMapObj* Ptr(unsigned int, class HASHKEY_NONE&);
  class CMapObj* Ptr(unsigned int, class HASHKEY_NONE&);
  class CMapObj* RawNext(class CMapObj*);
  class CMapObj* RawNext(class CMapObj*);
  class CMapObj* Tail();
  class CMapObj* Tail();
  void Unlink(class CMapObj*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CMapObj,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CMapObj* ptr);
  virtual /*<vtableoff 0x4>*/ class CMapObj* TSHashTable<CMapObj,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CMapObj,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CMapObj,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CMapObj,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CSimpleDoodad,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CSimpleDoodad,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CSimpleDoodad,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CSimpleDoodad,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CSimpleDoodad*, unsigned int);
  struct CSimpleDoodad* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CSimpleDoodad,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CSimpleDoodad,HASHKEY_NONE>();
  void TSHashTable<CSimpleDoodad,HASHKEY_NONE>(class TSHashTable<CSimpleDoodad,HASHKEY_NONE>&);
  class TSHashTable<CSimpleDoodad,HASHKEY_NONE>& operator=(class TSHashTable<CSimpleDoodad,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct CSimpleDoodad*);
  struct CSimpleDoodad* DeleteNode(struct CSimpleDoodad*);
  struct CSimpleDoodad* Head();
  struct CSimpleDoodad* Head();
  void Insert(struct CSimpleDoodad*, char*);
  void Insert(struct CSimpleDoodad*, unsigned int, char*);
  void Insert(struct CSimpleDoodad*, unsigned int, class HASHKEY_NONE&);
  struct CSimpleDoodad* New(char*, unsigned long, unsigned long);
  struct CSimpleDoodad* New(unsigned int, char*, unsigned long, unsigned long);
  struct CSimpleDoodad* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct CSimpleDoodad* Next(struct CSimpleDoodad*);
  struct CSimpleDoodad* Next(struct CSimpleDoodad*);
  struct CSimpleDoodad* Prev(struct CSimpleDoodad*);
  struct CSimpleDoodad* Prev(struct CSimpleDoodad*);
  struct CSimpleDoodad* Ptr(char*);
  struct CSimpleDoodad* Ptr(char*);
  struct CSimpleDoodad* Ptr(unsigned int, char*);
  struct CSimpleDoodad* Ptr(unsigned int, char*);
  struct CSimpleDoodad* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CSimpleDoodad* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CSimpleDoodad* RawNext(struct CSimpleDoodad*);
  struct CSimpleDoodad* RawNext(struct CSimpleDoodad*);
  struct CSimpleDoodad* Tail();
  struct CSimpleDoodad* Tail();
  void Unlink(struct CSimpleDoodad*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CSimpleDoodad,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSimpleDoodad* ptr);
  virtual /*<vtableoff 0x4>*/ struct CSimpleDoodad* TSHashTable<CSimpleDoodad,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CSimpleDoodad,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CSimpleDoodad,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CSimpleDoodad,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FILEMAP,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FILEMAP,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FILEMAP,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int TSHashTable<FILEMAP,HASHKEY_STRI>::ComputeSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval);
  void TSHashTable<FILEMAP,HASHKEY_STRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<FILEMAP,HASHKEY_STRI>::Initialize();
  int TSHashTable<FILEMAP,HASHKEY_STRI>::Initialized();
  void TSHashTable<FILEMAP,HASHKEY_STRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<FILEMAP,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FILEMAP*, unsigned int);
  struct FILEMAP* TSHashTable<FILEMAP,HASHKEY_STRI>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<FILEMAP,HASHKEY_STRI>& NonConst();
  int TSHashTable<FILEMAP,HASHKEY_STRI>::GetLinkOffset();
  void TSHashTable<FILEMAP,HASHKEY_STRI>::TSHashTable<FILEMAP,HASHKEY_STRI>();
  void TSHashTable<FILEMAP,HASHKEY_STRI>(class TSHashTable<FILEMAP,HASHKEY_STRI>&);
  class TSHashTable<FILEMAP,HASHKEY_STRI>& operator=(class TSHashTable<FILEMAP,HASHKEY_STRI>&);
  void TSHashTable<FILEMAP,HASHKEY_STRI>::Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct FILEMAP*);
  struct FILEMAP* DeleteNode(struct FILEMAP*);
  struct FILEMAP* Head();
  struct FILEMAP* Head();
  void Insert(struct FILEMAP*, char*);
  void Insert(struct FILEMAP*, unsigned int, char*);
  void Insert(struct FILEMAP*, unsigned int, class HASHKEY_STRI&);
  struct FILEMAP* TSHashTable<FILEMAP,HASHKEY_STRI>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  struct FILEMAP* TSHashTable<FILEMAP,HASHKEY_STRI>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* str, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long flags);
  struct FILEMAP* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct FILEMAP* Next(struct FILEMAP*);
  struct FILEMAP* Next(struct FILEMAP*);
  struct FILEMAP* Prev(struct FILEMAP*);
  struct FILEMAP* Prev(struct FILEMAP*);
  struct FILEMAP* Ptr(char*);
  struct FILEMAP* TSHashTable<FILEMAP,HASHKEY_STRI>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  struct FILEMAP* Ptr(unsigned int, char*);
  struct FILEMAP* Ptr(unsigned int, char*);
  struct FILEMAP* Ptr(unsigned int, class HASHKEY_STRI&);
  struct FILEMAP* Ptr(unsigned int, class HASHKEY_STRI&);
  struct FILEMAP* RawNext(struct FILEMAP*);
  struct FILEMAP* RawNext(struct FILEMAP*);
  struct FILEMAP* Tail();
  struct FILEMAP* Tail();
  void Unlink(struct FILEMAP*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FILEMAP,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FILEMAP* ptr);
  virtual /*<vtableoff 0x4>*/ struct FILEMAP* TSHashTable<FILEMAP,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FILEMAP,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<FILEMAP,HASHKEY_STRI>::~TSHashTable<FILEMAP,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FILEMAP,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<RGN,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<RGN,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<RGN,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int TSHashTable<RGN,HASHKEY_NONE>::ComputeSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval);
  void TSHashTable<RGN,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<RGN,HASHKEY_NONE>::Initialize();
  int TSHashTable<RGN,HASHKEY_NONE>::Initialized();
  void TSHashTable<RGN,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<RGN,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct RGN*, unsigned int);
  struct RGN* TSHashTable<RGN,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<RGN,HASHKEY_NONE>& NonConst();
  int TSHashTable<RGN,HASHKEY_NONE>::GetLinkOffset();
  void TSHashTable<RGN,HASHKEY_NONE>::TSHashTable<RGN,HASHKEY_NONE>();
  void TSHashTable<RGN,HASHKEY_NONE>(class TSHashTable<RGN,HASHKEY_NONE>&);
  class TSHashTable<RGN,HASHKEY_NONE>& operator=(class TSHashTable<RGN,HASHKEY_NONE>&);
  void TSHashTable<RGN,HASHKEY_NONE>::Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void TSHashTable<RGN,HASHKEY_NONE>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  struct RGN* DeleteNode(struct RGN*);
  struct RGN* Head();
  struct RGN* Head();
  void Insert(struct RGN*, char*);
  void Insert(struct RGN*, unsigned int, char*);
  void Insert(struct RGN*, unsigned int, class HASHKEY_NONE&);
  struct RGN* New(char*, unsigned long, unsigned long);
  struct RGN* New(unsigned int, char*, unsigned long, unsigned long);
  struct RGN* TSHashTable<RGN,HASHKEY_NONE>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ class HASHKEY_NONE& key, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long flags);
  struct RGN* Next(struct RGN*);
  struct RGN* Next(struct RGN*);
  struct RGN* Prev(struct RGN*);
  struct RGN* Prev(struct RGN*);
  struct RGN* Ptr(char*);
  struct RGN* Ptr(char*);
  struct RGN* Ptr(unsigned int, char*);
  struct RGN* Ptr(unsigned int, char*);
  struct RGN* Ptr(unsigned int, class HASHKEY_NONE&);
  struct RGN* TSHashTable<RGN,HASHKEY_NONE>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ class HASHKEY_NONE& key);
  struct RGN* RawNext(struct RGN*);
  struct RGN* RawNext(struct RGN*);
  struct RGN* Tail();
  struct RGN* Tail();
  void TSHashTable<RGN,HASHKEY_NONE>::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<RGN,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  virtual /*<vtableoff 0x4>*/ struct RGN* TSHashTable<RGN,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<RGN,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<RGN,HASHKEY_NONE>::~TSHashTable<RGN,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<RGN,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ZipFileDirEntry,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ZipFileDirEntry,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::ComputeSlot(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval);
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Initialize();
  int TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Initialized();
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  struct ZipFileDirEntry* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>& NonConst();
  int TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::GetLinkOffset();
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>();
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>(class TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>&);
  class TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>& operator=(class TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_CONSTSTRI&);
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::DeleteNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* Head();
  struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Head();
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Insert(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* str);
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Insert(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0x10>*/ /*|0x4|*/ char* str);
  void Insert(struct ZipFileDirEntry*, unsigned int, class HASHKEY_CONSTSTRI&);
  struct ZipFileDirEntry* New(char*, unsigned long, unsigned long);
  struct ZipFileDirEntry* New(unsigned int, char*, unsigned long, unsigned long);
  struct ZipFileDirEntry* New(unsigned int, class HASHKEY_CONSTSTRI&, unsigned long, unsigned long);
  struct ZipFileDirEntry* Next(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Next(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* Prev(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* Prev(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* Ptr(char*);
  struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  struct ZipFileDirEntry* Ptr(unsigned int, char*);
  struct ZipFileDirEntry* Ptr(unsigned int, char*);
  struct ZipFileDirEntry* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ZipFileDirEntry* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ZipFileDirEntry* RawNext(struct ZipFileDirEntry*);
  struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::RawNext(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  struct ZipFileDirEntry* Tail();
  struct ZipFileDirEntry* Tail();
  void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ZipFileDirEntry* ptr);
  virtual /*<vtableoff 0x4>*/ struct ZipFileDirEntry* TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ZipFileDirEntry,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::~TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ZipFileDirEntry,HASHKEY_CONSTSTRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CONSOLECOMMAND,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CONSOLECOMMAND,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CONSOLECOMMAND*, unsigned int);
  struct CONSOLECOMMAND* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>();
  void TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>(class TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>&);
  class TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>& operator=(class TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_CONSTSTRI&);
  void Delete(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* DeleteNode(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Head();
  struct CONSOLECOMMAND* Head();
  void Insert(struct CONSOLECOMMAND*, char*);
  void Insert(struct CONSOLECOMMAND*, unsigned int, char*);
  void Insert(struct CONSOLECOMMAND*, unsigned int, class HASHKEY_CONSTSTRI&);
  struct CONSOLECOMMAND* New(char*, unsigned long, unsigned long);
  struct CONSOLECOMMAND* New(unsigned int, char*, unsigned long, unsigned long);
  struct CONSOLECOMMAND* New(unsigned int, class HASHKEY_CONSTSTRI&, unsigned long, unsigned long);
  struct CONSOLECOMMAND* Next(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Next(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Prev(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Prev(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Ptr(char*);
  struct CONSOLECOMMAND* Ptr(char*);
  struct CONSOLECOMMAND* Ptr(unsigned int, char*);
  struct CONSOLECOMMAND* Ptr(unsigned int, char*);
  struct CONSOLECOMMAND* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct CONSOLECOMMAND* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct CONSOLECOMMAND* RawNext(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* RawNext(struct CONSOLECOMMAND*);
  struct CONSOLECOMMAND* Tail();
  struct CONSOLECOMMAND* Tail();
  void Unlink(struct CONSOLECOMMAND*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CONSOLECOMMAND* ptr);
  virtual /*<vtableoff 0x4>*/ struct CONSOLECOMMAND* TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CONSOLECOMMAND,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CONSOLECOMMAND,HASHKEY_CONSTSTRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CVar,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CVar,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CVar,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CVar,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CVar*, unsigned int);
  struct CVar* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CVar,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CVar,HASHKEY_STRI>();
  void TSHashTable<CVar,HASHKEY_STRI>(class TSHashTable<CVar,HASHKEY_STRI>&);
  class TSHashTable<CVar,HASHKEY_STRI>& operator=(class TSHashTable<CVar,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct CVar*);
  struct CVar* DeleteNode(struct CVar*);
  struct CVar* Head();
  struct CVar* Head();
  void Insert(struct CVar*, char*);
  void Insert(struct CVar*, unsigned int, char*);
  void Insert(struct CVar*, unsigned int, class HASHKEY_STRI&);
  struct CVar* New(char*, unsigned long, unsigned long);
  struct CVar* New(unsigned int, char*, unsigned long, unsigned long);
  struct CVar* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct CVar* Next(struct CVar*);
  struct CVar* Next(struct CVar*);
  struct CVar* Prev(struct CVar*);
  struct CVar* Prev(struct CVar*);
  struct CVar* Ptr(char*);
  struct CVar* Ptr(char*);
  struct CVar* Ptr(unsigned int, char*);
  struct CVar* Ptr(unsigned int, char*);
  struct CVar* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CVar* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CVar* RawNext(struct CVar*);
  struct CVar* RawNext(struct CVar*);
  struct CVar* Tail();
  struct CVar* Tail();
  void Unlink(struct CVar*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CVar,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CVar* ptr);
  virtual /*<vtableoff 0x4>*/ struct CVar* TSHashTable<CVar,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CVar,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CVar,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CVar,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<TRADESKILLLINE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<TRADESKILLLINE,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<TRADESKILLLINE,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct TRADESKILLLINE*, unsigned int);
  struct TRADESKILLLINE* TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<TRADESKILLLINE,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>();
  void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>(class TSHashTable<TRADESKILLLINE,HASHKEY_NONE>&);
  class TSHashTable<TRADESKILLLINE,HASHKEY_NONE>& operator=(class TSHashTable<TRADESKILLLINE,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* DeleteNode(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Head();
  struct TRADESKILLLINE* Head();
  void Insert(struct TRADESKILLLINE*, char*);
  void Insert(struct TRADESKILLLINE*, unsigned int, char*);
  void Insert(struct TRADESKILLLINE*, unsigned int, class HASHKEY_NONE&);
  struct TRADESKILLLINE* New(char*, unsigned long, unsigned long);
  struct TRADESKILLLINE* New(unsigned int, char*, unsigned long, unsigned long);
  struct TRADESKILLLINE* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct TRADESKILLLINE* Next(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Next(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Prev(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Prev(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Ptr(char*);
  struct TRADESKILLLINE* Ptr(char*);
  struct TRADESKILLLINE* Ptr(unsigned int, char*);
  struct TRADESKILLLINE* Ptr(unsigned int, char*);
  struct TRADESKILLLINE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct TRADESKILLLINE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct TRADESKILLLINE* RawNext(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* RawNext(struct TRADESKILLLINE*);
  struct TRADESKILLLINE* Tail();
  struct TRADESKILLLINE* Tail();
  void Unlink(struct TRADESKILLLINE*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TRADESKILLLINE* ptr);
  virtual /*<vtableoff 0x4>*/ struct TRADESKILLLINE* TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<TRADESKILLLINE,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<TRADESKILLLINE,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<TRADESKILLLINE,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<INVENTORYART,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<INVENTORYART,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<INVENTORYART,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<INVENTORYART,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct INVENTORYART*, unsigned int);
  struct INVENTORYART* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<INVENTORYART,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<INVENTORYART,HASHKEY_NONE>();
  void TSHashTable<INVENTORYART,HASHKEY_NONE>(class TSHashTable<INVENTORYART,HASHKEY_NONE>&);
  class TSHashTable<INVENTORYART,HASHKEY_NONE>& operator=(class TSHashTable<INVENTORYART,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct INVENTORYART*);
  struct INVENTORYART* DeleteNode(struct INVENTORYART*);
  struct INVENTORYART* Head();
  struct INVENTORYART* Head();
  void Insert(struct INVENTORYART*, char*);
  void Insert(struct INVENTORYART*, unsigned int, char*);
  void Insert(struct INVENTORYART*, unsigned int, class HASHKEY_NONE&);
  struct INVENTORYART* New(char*, unsigned long, unsigned long);
  struct INVENTORYART* New(unsigned int, char*, unsigned long, unsigned long);
  struct INVENTORYART* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct INVENTORYART* Next(struct INVENTORYART*);
  struct INVENTORYART* Next(struct INVENTORYART*);
  struct INVENTORYART* Prev(struct INVENTORYART*);
  struct INVENTORYART* Prev(struct INVENTORYART*);
  struct INVENTORYART* Ptr(char*);
  struct INVENTORYART* Ptr(char*);
  struct INVENTORYART* Ptr(unsigned int, char*);
  struct INVENTORYART* Ptr(unsigned int, char*);
  struct INVENTORYART* Ptr(unsigned int, class HASHKEY_NONE&);
  struct INVENTORYART* Ptr(unsigned int, class HASHKEY_NONE&);
  struct INVENTORYART* RawNext(struct INVENTORYART*);
  struct INVENTORYART* RawNext(struct INVENTORYART*);
  struct INVENTORYART* Tail();
  struct INVENTORYART* Tail();
  void Unlink(struct INVENTORYART*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<INVENTORYART,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct INVENTORYART* ptr);
  virtual /*<vtableoff 0x4>*/ struct INVENTORYART* TSHashTable<INVENTORYART,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<INVENTORYART,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<INVENTORYART,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<INVENTORYART,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ITEMEXPIRATION,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ITEMEXPIRATION,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ITEMEXPIRATION,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void TSHashTable<ITEMEXPIRATION,CHashKeyGUID>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<ITEMEXPIRATION,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct ITEMEXPIRATION*, unsigned int);
  struct ITEMEXPIRATION* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ITEMEXPIRATION,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ITEMEXPIRATION,CHashKeyGUID>();
  void TSHashTable<ITEMEXPIRATION,CHashKeyGUID>(class TSHashTable<ITEMEXPIRATION,CHashKeyGUID>&);
  class TSHashTable<ITEMEXPIRATION,CHashKeyGUID>& operator=(class TSHashTable<ITEMEXPIRATION,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* DeleteNode(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Head();
  struct ITEMEXPIRATION* Head();
  void Insert(struct ITEMEXPIRATION*, char*);
  void Insert(struct ITEMEXPIRATION*, unsigned int, char*);
  void Insert(struct ITEMEXPIRATION*, unsigned int, class CHashKeyGUID&);
  struct ITEMEXPIRATION* New(char*, unsigned long, unsigned long);
  struct ITEMEXPIRATION* New(unsigned int, char*, unsigned long, unsigned long);
  struct ITEMEXPIRATION* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct ITEMEXPIRATION* Next(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Next(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Prev(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Prev(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Ptr(char*);
  struct ITEMEXPIRATION* Ptr(char*);
  struct ITEMEXPIRATION* Ptr(unsigned int, char*);
  struct ITEMEXPIRATION* Ptr(unsigned int, char*);
  struct ITEMEXPIRATION* Ptr(unsigned int, class CHashKeyGUID&);
  struct ITEMEXPIRATION* Ptr(unsigned int, class CHashKeyGUID&);
  struct ITEMEXPIRATION* RawNext(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* RawNext(struct ITEMEXPIRATION*);
  struct ITEMEXPIRATION* Tail();
  struct ITEMEXPIRATION* Tail();
  void Unlink(struct ITEMEXPIRATION*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ITEMEXPIRATION,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMEXPIRATION* ptr);
  virtual /*<vtableoff 0x4>*/ struct ITEMEXPIRATION* TSHashTable<ITEMEXPIRATION,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ITEMEXPIRATION,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ITEMEXPIRATION,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ITEMEXPIRATION,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<NAMEPLATEDESC,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<NAMEPLATEDESC,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<NAMEPLATEDESC,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<NAMEPLATEDESC,CHashKeyGUID>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<NAMEPLATEDESC,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct NAMEPLATEDESC*, unsigned int);
  struct NAMEPLATEDESC* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<NAMEPLATEDESC,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<NAMEPLATEDESC,CHashKeyGUID>();
  void TSHashTable<NAMEPLATEDESC,CHashKeyGUID>(class TSHashTable<NAMEPLATEDESC,CHashKeyGUID>&);
  class TSHashTable<NAMEPLATEDESC,CHashKeyGUID>& operator=(class TSHashTable<NAMEPLATEDESC,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* DeleteNode(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Head();
  struct NAMEPLATEDESC* Head();
  void Insert(struct NAMEPLATEDESC*, char*);
  void Insert(struct NAMEPLATEDESC*, unsigned int, char*);
  void Insert(struct NAMEPLATEDESC*, unsigned int, class CHashKeyGUID&);
  struct NAMEPLATEDESC* New(char*, unsigned long, unsigned long);
  struct NAMEPLATEDESC* New(unsigned int, char*, unsigned long, unsigned long);
  struct NAMEPLATEDESC* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct NAMEPLATEDESC* Next(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Next(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Prev(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Prev(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Ptr(char*);
  struct NAMEPLATEDESC* Ptr(char*);
  struct NAMEPLATEDESC* Ptr(unsigned int, char*);
  struct NAMEPLATEDESC* Ptr(unsigned int, char*);
  struct NAMEPLATEDESC* Ptr(unsigned int, class CHashKeyGUID&);
  struct NAMEPLATEDESC* Ptr(unsigned int, class CHashKeyGUID&);
  struct NAMEPLATEDESC* RawNext(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* RawNext(struct NAMEPLATEDESC*);
  struct NAMEPLATEDESC* Tail();
  struct NAMEPLATEDESC* Tail();
  void Unlink(struct NAMEPLATEDESC*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<NAMEPLATEDESC,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct NAMEPLATEDESC* ptr);
  virtual /*<vtableoff 0x4>*/ struct NAMEPLATEDESC* TSHashTable<NAMEPLATEDESC,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<NAMEPLATEDESC,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<NAMEPLATEDESC,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<NAMEPLATEDESC,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<UNITONESHOTEFFECTDESC,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct UNITONESHOTEFFECTDESC*, unsigned int);
  struct UNITONESHOTEFFECTDESC* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>();
  void TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>(class TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>&);
  class TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>& operator=(class TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* DeleteNode(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Head();
  struct UNITONESHOTEFFECTDESC* Head();
  void Insert(struct UNITONESHOTEFFECTDESC*, char*);
  void Insert(struct UNITONESHOTEFFECTDESC*, unsigned int, char*);
  void Insert(struct UNITONESHOTEFFECTDESC*, unsigned int, class CHashKeyGUID&);
  struct UNITONESHOTEFFECTDESC* New(char*, unsigned long, unsigned long);
  struct UNITONESHOTEFFECTDESC* New(unsigned int, char*, unsigned long, unsigned long);
  struct UNITONESHOTEFFECTDESC* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct UNITONESHOTEFFECTDESC* Next(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Next(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Prev(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Prev(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Ptr(char*);
  struct UNITONESHOTEFFECTDESC* Ptr(char*);
  struct UNITONESHOTEFFECTDESC* Ptr(unsigned int, char*);
  struct UNITONESHOTEFFECTDESC* Ptr(unsigned int, char*);
  struct UNITONESHOTEFFECTDESC* Ptr(unsigned int, class CHashKeyGUID&);
  struct UNITONESHOTEFFECTDESC* Ptr(unsigned int, class CHashKeyGUID&);
  struct UNITONESHOTEFFECTDESC* RawNext(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* RawNext(struct UNITONESHOTEFFECTDESC*);
  struct UNITONESHOTEFFECTDESC* Tail();
  struct UNITONESHOTEFFECTDESC* Tail();
  void Unlink(struct UNITONESHOTEFFECTDESC*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITONESHOTEFFECTDESC* ptr);
  virtual /*<vtableoff 0x4>*/ struct UNITONESHOTEFFECTDESC* TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<UNITONESHOTEFFECTDESC,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<UNITONESHOTEFFECTDESC,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<UNITHASHOBJ,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<UNITHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<UNITHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<UNITHASHOBJ,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct UNITHASHOBJ*, unsigned int);
  struct UNITHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<UNITHASHOBJ,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<UNITHASHOBJ,CHashKeyGUID>();
  void TSHashTable<UNITHASHOBJ,CHashKeyGUID>(class TSHashTable<UNITHASHOBJ,CHashKeyGUID>&);
  class TSHashTable<UNITHASHOBJ,CHashKeyGUID>& operator=(class TSHashTable<UNITHASHOBJ,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* DeleteNode(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Head();
  struct UNITHASHOBJ* Head();
  void Insert(struct UNITHASHOBJ*, char*);
  void Insert(struct UNITHASHOBJ*, unsigned int, char*);
  void Insert(struct UNITHASHOBJ*, unsigned int, class CHashKeyGUID&);
  struct UNITHASHOBJ* New(char*, unsigned long, unsigned long);
  struct UNITHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct UNITHASHOBJ* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct UNITHASHOBJ* Next(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Next(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Prev(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Prev(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Ptr(char*);
  struct UNITHASHOBJ* Ptr(char*);
  struct UNITHASHOBJ* Ptr(unsigned int, char*);
  struct UNITHASHOBJ* Ptr(unsigned int, char*);
  struct UNITHASHOBJ* Ptr(unsigned int, class CHashKeyGUID&);
  struct UNITHASHOBJ* Ptr(unsigned int, class CHashKeyGUID&);
  struct UNITHASHOBJ* RawNext(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* RawNext(struct UNITHASHOBJ*);
  struct UNITHASHOBJ* Tail();
  struct UNITHASHOBJ* Tail();
  void Unlink(struct UNITHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<UNITHASHOBJ,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct UNITHASHOBJ* TSHashTable<UNITHASHOBJ,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<UNITHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<UNITHASHOBJ,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<UNITHASHOBJ,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ANIMKIT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ANIMKIT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ANIMKIT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<ANIMKIT,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct ANIMKIT*, unsigned int);
  struct ANIMKIT* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ANIMKIT,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ANIMKIT,HASHKEY_NONE>();
  void TSHashTable<ANIMKIT,HASHKEY_NONE>(class TSHashTable<ANIMKIT,HASHKEY_NONE>&);
  class TSHashTable<ANIMKIT,HASHKEY_NONE>& operator=(class TSHashTable<ANIMKIT,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct ANIMKIT*);
  struct ANIMKIT* DeleteNode(struct ANIMKIT*);
  struct ANIMKIT* Head();
  struct ANIMKIT* Head();
  void Insert(struct ANIMKIT*, char*);
  void Insert(struct ANIMKIT*, unsigned int, char*);
  void Insert(struct ANIMKIT*, unsigned int, class HASHKEY_NONE&);
  struct ANIMKIT* New(char*, unsigned long, unsigned long);
  struct ANIMKIT* New(unsigned int, char*, unsigned long, unsigned long);
  struct ANIMKIT* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct ANIMKIT* Next(struct ANIMKIT*);
  struct ANIMKIT* Next(struct ANIMKIT*);
  struct ANIMKIT* Prev(struct ANIMKIT*);
  struct ANIMKIT* Prev(struct ANIMKIT*);
  struct ANIMKIT* Ptr(char*);
  struct ANIMKIT* Ptr(char*);
  struct ANIMKIT* Ptr(unsigned int, char*);
  struct ANIMKIT* Ptr(unsigned int, char*);
  struct ANIMKIT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct ANIMKIT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct ANIMKIT* RawNext(struct ANIMKIT*);
  struct ANIMKIT* RawNext(struct ANIMKIT*);
  struct ANIMKIT* Tail();
  struct ANIMKIT* Tail();
  void Unlink(struct ANIMKIT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ANIMKIT,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMKIT* ptr);
  virtual /*<vtableoff 0x4>*/ struct ANIMKIT* TSHashTable<ANIMKIT,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ANIMKIT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ANIMKIT,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ANIMKIT,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<GLYPHBITMAPDATA,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<GLYPHBITMAPDATA,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  struct GLYPHBITMAPDATA* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>();
  void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>(class TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>&);
  class TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>& operator=(class TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* DeleteNode(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Head();
  struct GLYPHBITMAPDATA* Head();
  void Insert(struct GLYPHBITMAPDATA*, char*);
  void Insert(struct GLYPHBITMAPDATA*, unsigned int, char*);
  void Insert(struct GLYPHBITMAPDATA*, unsigned int, class HASHKEY_NONE&);
  struct GLYPHBITMAPDATA* New(char*, unsigned long, unsigned long);
  struct GLYPHBITMAPDATA* New(unsigned int, char*, unsigned long, unsigned long);
  struct GLYPHBITMAPDATA* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct GLYPHBITMAPDATA* Next(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Next(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Prev(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Prev(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Ptr(char*);
  struct GLYPHBITMAPDATA* Ptr(char*);
  struct GLYPHBITMAPDATA* Ptr(unsigned int, char*);
  struct GLYPHBITMAPDATA* Ptr(unsigned int, char*);
  struct GLYPHBITMAPDATA* Ptr(unsigned int, class HASHKEY_NONE&);
  struct GLYPHBITMAPDATA* Ptr(unsigned int, class HASHKEY_NONE&);
  struct GLYPHBITMAPDATA* RawNext(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* RawNext(struct GLYPHBITMAPDATA*);
  struct GLYPHBITMAPDATA* Tail();
  struct GLYPHBITMAPDATA* Tail();
  void Unlink(struct GLYPHBITMAPDATA*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct GLYPHBITMAPDATA* ptr);
  virtual /*<vtableoff 0x4>*/ struct GLYPHBITMAPDATA* TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<GLYPHBITMAPDATA,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<GLYPHBITMAPDATA,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CHARCODEDESC,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CHARCODEDESC,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CHARCODEDESC,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<CHARCODEDESC,HASHKEY_NONE>::Initialize();
  int Initialized();
  void TSHashTable<CHARCODEDESC,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CHARCODEDESC,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CHARCODEDESC*, unsigned int);
  struct CHARCODEDESC* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CHARCODEDESC,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CHARCODEDESC,HASHKEY_NONE>();
  void TSHashTable<CHARCODEDESC,HASHKEY_NONE>(class TSHashTable<CHARCODEDESC,HASHKEY_NONE>&);
  class TSHashTable<CHARCODEDESC,HASHKEY_NONE>& operator=(class TSHashTable<CHARCODEDESC,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct CHARCODEDESC*);
  struct CHARCODEDESC* DeleteNode(struct CHARCODEDESC*);
  struct CHARCODEDESC* Head();
  struct CHARCODEDESC* Head();
  void Insert(struct CHARCODEDESC*, char*);
  void Insert(struct CHARCODEDESC*, unsigned int, char*);
  void Insert(struct CHARCODEDESC*, unsigned int, class HASHKEY_NONE&);
  struct CHARCODEDESC* New(char*, unsigned long, unsigned long);
  struct CHARCODEDESC* New(unsigned int, char*, unsigned long, unsigned long);
  struct CHARCODEDESC* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct CHARCODEDESC* Next(struct CHARCODEDESC*);
  struct CHARCODEDESC* Next(struct CHARCODEDESC*);
  struct CHARCODEDESC* Prev(struct CHARCODEDESC*);
  struct CHARCODEDESC* Prev(struct CHARCODEDESC*);
  struct CHARCODEDESC* Ptr(char*);
  struct CHARCODEDESC* Ptr(char*);
  struct CHARCODEDESC* Ptr(unsigned int, char*);
  struct CHARCODEDESC* Ptr(unsigned int, char*);
  struct CHARCODEDESC* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CHARCODEDESC* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CHARCODEDESC* RawNext(struct CHARCODEDESC*);
  struct CHARCODEDESC* RawNext(struct CHARCODEDESC*);
  struct CHARCODEDESC* Tail();
  struct CHARCODEDESC* Tail();
  void Unlink(struct CHARCODEDESC*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CHARCODEDESC,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHARCODEDESC* ptr);
  virtual /*<vtableoff 0x4>*/ struct CHARCODEDESC* TSHashTable<CHARCODEDESC,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CHARCODEDESC,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CHARCODEDESC,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CHARCODEDESC,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<KERNNODE,KERNINGHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<KERNNODE,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<KERNNODE,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<KERNNODE,KERNINGHASHKEY>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<KERNNODE,KERNINGHASHKEY>::Initialize();
  int Initialized();
  void TSHashTable<KERNNODE,KERNINGHASHKEY>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<KERNNODE,KERNINGHASHKEY>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct KERNNODE*, unsigned int);
  struct KERNNODE* TSHashTable<KERNNODE,KERNINGHASHKEY>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<KERNNODE,KERNINGHASHKEY>& NonConst();
  int GetLinkOffset();
  void TSHashTable<KERNNODE,KERNINGHASHKEY>();
  void TSHashTable<KERNNODE,KERNINGHASHKEY>(class TSHashTable<KERNNODE,KERNINGHASHKEY>&);
  class TSHashTable<KERNNODE,KERNINGHASHKEY>& operator=(class TSHashTable<KERNNODE,KERNINGHASHKEY>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class KERNINGHASHKEY&);
  void Delete(struct KERNNODE*);
  struct KERNNODE* DeleteNode(struct KERNNODE*);
  struct KERNNODE* Head();
  struct KERNNODE* Head();
  void Insert(struct KERNNODE*, char*);
  void Insert(struct KERNNODE*, unsigned int, char*);
  void Insert(struct KERNNODE*, unsigned int, class KERNINGHASHKEY&);
  struct KERNNODE* New(char*, unsigned long, unsigned long);
  struct KERNNODE* New(unsigned int, char*, unsigned long, unsigned long);
  struct KERNNODE* New(unsigned int, class KERNINGHASHKEY&, unsigned long, unsigned long);
  struct KERNNODE* Next(struct KERNNODE*);
  struct KERNNODE* Next(struct KERNNODE*);
  struct KERNNODE* Prev(struct KERNNODE*);
  struct KERNNODE* Prev(struct KERNNODE*);
  struct KERNNODE* Ptr(char*);
  struct KERNNODE* Ptr(char*);
  struct KERNNODE* Ptr(unsigned int, char*);
  struct KERNNODE* Ptr(unsigned int, char*);
  struct KERNNODE* Ptr(unsigned int, class KERNINGHASHKEY&);
  struct KERNNODE* Ptr(unsigned int, class KERNINGHASHKEY&);
  struct KERNNODE* RawNext(struct KERNNODE*);
  struct KERNNODE* RawNext(struct KERNNODE*);
  struct KERNNODE* Tail();
  struct KERNNODE* Tail();
  void Unlink(struct KERNNODE*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<KERNNODE,KERNINGHASHKEY>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KERNNODE* ptr);
  virtual /*<vtableoff 0x4>*/ struct KERNNODE* TSHashTable<KERNNODE,KERNINGHASHKEY>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<KERNNODE,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<KERNNODE,KERNINGHASHKEY>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<KERNNODE,KERNINGHASHKEY>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<BATCHEDRENDERFONTDESC,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct BATCHEDRENDERFONTDESC*, unsigned int);
  struct BATCHEDRENDERFONTDESC* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>();
  void TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>(class TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>&);
  class TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>& operator=(class TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_PTR&);
  void Delete(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* DeleteNode(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Head();
  struct BATCHEDRENDERFONTDESC* Head();
  void Insert(struct BATCHEDRENDERFONTDESC*, char*);
  void Insert(struct BATCHEDRENDERFONTDESC*, unsigned int, char*);
  void Insert(struct BATCHEDRENDERFONTDESC*, unsigned int, class HASHKEY_PTR&);
  struct BATCHEDRENDERFONTDESC* New(char*, unsigned long, unsigned long);
  struct BATCHEDRENDERFONTDESC* New(unsigned int, char*, unsigned long, unsigned long);
  struct BATCHEDRENDERFONTDESC* New(unsigned int, class HASHKEY_PTR&, unsigned long, unsigned long);
  struct BATCHEDRENDERFONTDESC* Next(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Next(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Prev(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Prev(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Ptr(char*);
  struct BATCHEDRENDERFONTDESC* Ptr(char*);
  struct BATCHEDRENDERFONTDESC* Ptr(unsigned int, char*);
  struct BATCHEDRENDERFONTDESC* Ptr(unsigned int, char*);
  struct BATCHEDRENDERFONTDESC* Ptr(unsigned int, class HASHKEY_PTR&);
  struct BATCHEDRENDERFONTDESC* Ptr(unsigned int, class HASHKEY_PTR&);
  struct BATCHEDRENDERFONTDESC* RawNext(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* RawNext(struct BATCHEDRENDERFONTDESC*);
  struct BATCHEDRENDERFONTDESC* Tail();
  struct BATCHEDRENDERFONTDESC* Tail();
  void Unlink(struct BATCHEDRENDERFONTDESC*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct BATCHEDRENDERFONTDESC* ptr);
  virtual /*<vtableoff 0x4>*/ struct BATCHEDRENDERFONTDESC* TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<BATCHEDRENDERFONTDESC,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<BATCHEDRENDERFONTDESC,HASHKEY_PTR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CLightList,HASHKEY_DWORD> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CLightList,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CLightList,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<CLightList,HASHKEY_DWORD>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<CLightList,HASHKEY_DWORD>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct CLightList*, unsigned int);
  struct CLightList* TSHashTable<CLightList,HASHKEY_DWORD>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<CLightList,HASHKEY_DWORD>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CLightList,HASHKEY_DWORD>();
  void TSHashTable<CLightList,HASHKEY_DWORD>(class TSHashTable<CLightList,HASHKEY_DWORD>&);
  class TSHashTable<CLightList,HASHKEY_DWORD>& operator=(class TSHashTable<CLightList,HASHKEY_DWORD>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_DWORD&);
  void Delete(struct CLightList*);
  struct CLightList* DeleteNode(struct CLightList*);
  struct CLightList* Head();
  struct CLightList* Head();
  void Insert(struct CLightList*, char*);
  void Insert(struct CLightList*, unsigned int, char*);
  void Insert(struct CLightList*, unsigned int, class HASHKEY_DWORD&);
  struct CLightList* New(char*, unsigned long, unsigned long);
  struct CLightList* New(unsigned int, char*, unsigned long, unsigned long);
  struct CLightList* New(unsigned int, class HASHKEY_DWORD&, unsigned long, unsigned long);
  struct CLightList* Next(struct CLightList*);
  struct CLightList* Next(struct CLightList*);
  struct CLightList* Prev(struct CLightList*);
  struct CLightList* Prev(struct CLightList*);
  struct CLightList* Ptr(char*);
  struct CLightList* Ptr(char*);
  struct CLightList* Ptr(unsigned int, char*);
  struct CLightList* Ptr(unsigned int, char*);
  struct CLightList* Ptr(unsigned int, class HASHKEY_DWORD&);
  struct CLightList* Ptr(unsigned int, class HASHKEY_DWORD&);
  struct CLightList* RawNext(struct CLightList*);
  struct CLightList* RawNext(struct CLightList*);
  struct CLightList* Tail();
  struct CLightList* Tail();
  void TSHashTable<CLightList,HASHKEY_DWORD>::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLightList* ptr);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CLightList,HASHKEY_DWORD>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLightList* ptr);
  virtual /*<vtableoff 0x4>*/ struct CLightList* TSHashTable<CLightList,HASHKEY_DWORD>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CLightList,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CLightList,HASHKEY_DWORD>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CLightList,HASHKEY_DWORD>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FACEDATA,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FACEDATA,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FACEDATA,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<FACEDATA,HASHKEY_STRI>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<FACEDATA,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FACEDATA*, unsigned int);
  struct FACEDATA* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FACEDATA,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FACEDATA,HASHKEY_STRI>();
  void TSHashTable<FACEDATA,HASHKEY_STRI>(class TSHashTable<FACEDATA,HASHKEY_STRI>&);
  class TSHashTable<FACEDATA,HASHKEY_STRI>& operator=(class TSHashTable<FACEDATA,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct FACEDATA*);
  struct FACEDATA* DeleteNode(struct FACEDATA*);
  struct FACEDATA* Head();
  struct FACEDATA* Head();
  void Insert(struct FACEDATA*, char*);
  void Insert(struct FACEDATA*, unsigned int, char*);
  void Insert(struct FACEDATA*, unsigned int, class HASHKEY_STRI&);
  struct FACEDATA* New(char*, unsigned long, unsigned long);
  struct FACEDATA* New(unsigned int, char*, unsigned long, unsigned long);
  struct FACEDATA* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct FACEDATA* Next(struct FACEDATA*);
  struct FACEDATA* Next(struct FACEDATA*);
  struct FACEDATA* Prev(struct FACEDATA*);
  struct FACEDATA* Prev(struct FACEDATA*);
  struct FACEDATA* Ptr(char*);
  struct FACEDATA* Ptr(char*);
  struct FACEDATA* Ptr(unsigned int, char*);
  struct FACEDATA* Ptr(unsigned int, char*);
  struct FACEDATA* Ptr(unsigned int, class HASHKEY_STRI&);
  struct FACEDATA* Ptr(unsigned int, class HASHKEY_STRI&);
  struct FACEDATA* RawNext(struct FACEDATA*);
  struct FACEDATA* RawNext(struct FACEDATA*);
  struct FACEDATA* Tail();
  struct FACEDATA* Tail();
  void Unlink(struct FACEDATA*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FACEDATA,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FACEDATA* ptr);
  virtual /*<vtableoff 0x4>*/ struct FACEDATA* TSHashTable<FACEDATA,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FACEDATA,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FACEDATA,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FACEDATA,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<STRINGVIEWMATRICES,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<STRINGVIEWMATRICES,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct STRINGVIEWMATRICES*, unsigned int);
  struct STRINGVIEWMATRICES* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>();
  void TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>(class TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>&);
  class TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>& operator=(class TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_PTR&);
  void Delete(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* DeleteNode(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Head();
  struct STRINGVIEWMATRICES* Head();
  void Insert(struct STRINGVIEWMATRICES*, char*);
  void Insert(struct STRINGVIEWMATRICES*, unsigned int, char*);
  void Insert(struct STRINGVIEWMATRICES*, unsigned int, class HASHKEY_PTR&);
  struct STRINGVIEWMATRICES* New(char*, unsigned long, unsigned long);
  struct STRINGVIEWMATRICES* New(unsigned int, char*, unsigned long, unsigned long);
  struct STRINGVIEWMATRICES* New(unsigned int, class HASHKEY_PTR&, unsigned long, unsigned long);
  struct STRINGVIEWMATRICES* Next(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Next(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Prev(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Prev(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Ptr(char*);
  struct STRINGVIEWMATRICES* Ptr(char*);
  struct STRINGVIEWMATRICES* Ptr(unsigned int, char*);
  struct STRINGVIEWMATRICES* Ptr(unsigned int, char*);
  struct STRINGVIEWMATRICES* Ptr(unsigned int, class HASHKEY_PTR&);
  struct STRINGVIEWMATRICES* Ptr(unsigned int, class HASHKEY_PTR&);
  struct STRINGVIEWMATRICES* RawNext(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* RawNext(struct STRINGVIEWMATRICES*);
  struct STRINGVIEWMATRICES* Tail();
  struct STRINGVIEWMATRICES* Tail();
  void Unlink(struct STRINGVIEWMATRICES*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct STRINGVIEWMATRICES* ptr);
  virtual /*<vtableoff 0x4>*/ struct STRINGVIEWMATRICES* TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<STRINGVIEWMATRICES,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<STRINGVIEWMATRICES,HASHKEY_PTR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CGxPixelShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CGxPixelShader,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CGxPixelShader,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<CGxPixelShader,HASHKEY_STRI>::Initialize();
  int Initialized();
  void TSHashTable<CGxPixelShader,HASHKEY_STRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CGxPixelShader,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(class CGxPixelShader*, unsigned int);
  class CGxPixelShader* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CGxPixelShader,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CGxPixelShader,HASHKEY_STRI>::TSHashTable<CGxPixelShader,HASHKEY_STRI>();
  void TSHashTable<CGxPixelShader,HASHKEY_STRI>(class TSHashTable<CGxPixelShader,HASHKEY_STRI>&);
  class TSHashTable<CGxPixelShader,HASHKEY_STRI>& operator=(class TSHashTable<CGxPixelShader,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(class CGxPixelShader*);
  class CGxPixelShader* DeleteNode(class CGxPixelShader*);
  class CGxPixelShader* Head();
  class CGxPixelShader* Head();
  void Insert(class CGxPixelShader*, char*);
  void Insert(class CGxPixelShader*, unsigned int, char*);
  void Insert(class CGxPixelShader*, unsigned int, class HASHKEY_STRI&);
  class CGxPixelShader* New(char*, unsigned long, unsigned long);
  class CGxPixelShader* New(unsigned int, char*, unsigned long, unsigned long);
  class CGxPixelShader* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  class CGxPixelShader* Next(class CGxPixelShader*);
  class CGxPixelShader* Next(class CGxPixelShader*);
  class CGxPixelShader* Prev(class CGxPixelShader*);
  class CGxPixelShader* Prev(class CGxPixelShader*);
  class CGxPixelShader* Ptr(char*);
  class CGxPixelShader* Ptr(char*);
  class CGxPixelShader* Ptr(unsigned int, char*);
  class CGxPixelShader* Ptr(unsigned int, char*);
  class CGxPixelShader* Ptr(unsigned int, class HASHKEY_STRI&);
  class CGxPixelShader* Ptr(unsigned int, class HASHKEY_STRI&);
  class CGxPixelShader* RawNext(class CGxPixelShader*);
  class CGxPixelShader* RawNext(class CGxPixelShader*);
  class CGxPixelShader* Tail();
  class CGxPixelShader* Tail();
  void Unlink(class CGxPixelShader*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CGxPixelShader,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ptr);
  virtual /*<vtableoff 0x4>*/ class CGxPixelShader* TSHashTable<CGxPixelShader,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxPixelShader,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<CGxPixelShader,HASHKEY_STRI>::~TSHashTable<CGxPixelShader,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CGxPixelShader,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CGxVertexShader,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CGxVertexShader,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CGxVertexShader,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<CGxVertexShader,HASHKEY_STRI>::Initialize();
  int Initialized();
  void TSHashTable<CGxVertexShader,HASHKEY_STRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CGxVertexShader,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(class CGxVertexShader*, unsigned int);
  class CGxVertexShader* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CGxVertexShader,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CGxVertexShader,HASHKEY_STRI>::TSHashTable<CGxVertexShader,HASHKEY_STRI>();
  void TSHashTable<CGxVertexShader,HASHKEY_STRI>(class TSHashTable<CGxVertexShader,HASHKEY_STRI>&);
  class TSHashTable<CGxVertexShader,HASHKEY_STRI>& operator=(class TSHashTable<CGxVertexShader,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(class CGxVertexShader*);
  class CGxVertexShader* DeleteNode(class CGxVertexShader*);
  class CGxVertexShader* Head();
  class CGxVertexShader* Head();
  void Insert(class CGxVertexShader*, char*);
  void Insert(class CGxVertexShader*, unsigned int, char*);
  void Insert(class CGxVertexShader*, unsigned int, class HASHKEY_STRI&);
  class CGxVertexShader* New(char*, unsigned long, unsigned long);
  class CGxVertexShader* New(unsigned int, char*, unsigned long, unsigned long);
  class CGxVertexShader* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  class CGxVertexShader* Next(class CGxVertexShader*);
  class CGxVertexShader* Next(class CGxVertexShader*);
  class CGxVertexShader* Prev(class CGxVertexShader*);
  class CGxVertexShader* Prev(class CGxVertexShader*);
  class CGxVertexShader* Ptr(char*);
  class CGxVertexShader* Ptr(char*);
  class CGxVertexShader* Ptr(unsigned int, char*);
  class CGxVertexShader* Ptr(unsigned int, char*);
  class CGxVertexShader* Ptr(unsigned int, class HASHKEY_STRI&);
  class CGxVertexShader* Ptr(unsigned int, class HASHKEY_STRI&);
  class CGxVertexShader* RawNext(class CGxVertexShader*);
  class CGxVertexShader* RawNext(class CGxVertexShader*);
  class CGxVertexShader* Tail();
  class CGxVertexShader* Tail();
  void Unlink(class CGxVertexShader*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CGxVertexShader,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader* ptr);
  virtual /*<vtableoff 0x4>*/ class CGxVertexShader* TSHashTable<CGxVertexShader,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxVertexShader,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<CGxVertexShader,HASHKEY_STRI>::~TSHashTable<CGxVertexShader,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CGxVertexShader,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CACHEENTRY,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CACHEENTRY,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CACHEENTRY,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<CACHEENTRY,HASHKEY_STRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct CACHEENTRY*, unsigned int);
  struct CACHEENTRY* TSHashTable<CACHEENTRY,HASHKEY_STRI>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<CACHEENTRY,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CACHEENTRY,HASHKEY_STRI>();
  void TSHashTable<CACHEENTRY,HASHKEY_STRI>(class TSHashTable<CACHEENTRY,HASHKEY_STRI>&);
  class TSHashTable<CACHEENTRY,HASHKEY_STRI>& operator=(class TSHashTable<CACHEENTRY,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct CACHEENTRY*);
  struct CACHEENTRY* DeleteNode(struct CACHEENTRY*);
  struct CACHEENTRY* Head();
  struct CACHEENTRY* Head();
  void Insert(struct CACHEENTRY*, char*);
  void Insert(struct CACHEENTRY*, unsigned int, char*);
  void Insert(struct CACHEENTRY*, unsigned int, class HASHKEY_STRI&);
  struct CACHEENTRY* New(char*, unsigned long, unsigned long);
  struct CACHEENTRY* New(unsigned int, char*, unsigned long, unsigned long);
  struct CACHEENTRY* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct CACHEENTRY* Next(struct CACHEENTRY*);
  struct CACHEENTRY* Next(struct CACHEENTRY*);
  struct CACHEENTRY* Prev(struct CACHEENTRY*);
  struct CACHEENTRY* Prev(struct CACHEENTRY*);
  struct CACHEENTRY* Ptr(char*);
  struct CACHEENTRY* TSHashTable<CACHEENTRY,HASHKEY_STRI>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  struct CACHEENTRY* Ptr(unsigned int, char*);
  struct CACHEENTRY* Ptr(unsigned int, char*);
  struct CACHEENTRY* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CACHEENTRY* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CACHEENTRY* RawNext(struct CACHEENTRY*);
  struct CACHEENTRY* RawNext(struct CACHEENTRY*);
  struct CACHEENTRY* Tail();
  struct CACHEENTRY* Tail();
  void TSHashTable<CACHEENTRY,HASHKEY_STRI>::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CACHEENTRY* ptr);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CACHEENTRY,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CACHEENTRY* ptr);
  virtual /*<vtableoff 0x4>*/ struct CACHEENTRY* TSHashTable<CACHEENTRY,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CACHEENTRY,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CACHEENTRY,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CACHEENTRY,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ITEMPORTRAIT,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ITEMPORTRAIT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ITEMPORTRAIT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<ITEMPORTRAIT,HASHKEY_STR>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct ITEMPORTRAIT*, unsigned int);
  struct ITEMPORTRAIT* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ITEMPORTRAIT,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ITEMPORTRAIT,HASHKEY_STR>();
  void TSHashTable<ITEMPORTRAIT,HASHKEY_STR>(class TSHashTable<ITEMPORTRAIT,HASHKEY_STR>&);
  class TSHashTable<ITEMPORTRAIT,HASHKEY_STR>& operator=(class TSHashTable<ITEMPORTRAIT,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* DeleteNode(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Head();
  struct ITEMPORTRAIT* Head();
  void Insert(struct ITEMPORTRAIT*, char*);
  void Insert(struct ITEMPORTRAIT*, unsigned int, char*);
  void Insert(struct ITEMPORTRAIT*, unsigned int, class HASHKEY_STR&);
  struct ITEMPORTRAIT* New(char*, unsigned long, unsigned long);
  struct ITEMPORTRAIT* TSHashTable<ITEMPORTRAIT,HASHKEY_STR>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* str, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long flags);
  struct ITEMPORTRAIT* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct ITEMPORTRAIT* Next(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Next(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Prev(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Prev(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Ptr(char*);
  struct ITEMPORTRAIT* Ptr(char*);
  struct ITEMPORTRAIT* Ptr(unsigned int, char*);
  struct ITEMPORTRAIT* Ptr(unsigned int, char*);
  struct ITEMPORTRAIT* Ptr(unsigned int, class HASHKEY_STR&);
  struct ITEMPORTRAIT* Ptr(unsigned int, class HASHKEY_STR&);
  struct ITEMPORTRAIT* RawNext(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* RawNext(struct ITEMPORTRAIT*);
  struct ITEMPORTRAIT* Tail();
  struct ITEMPORTRAIT* Tail();
  void Unlink(struct ITEMPORTRAIT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ITEMPORTRAIT,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ITEMPORTRAIT* ptr);
  virtual /*<vtableoff 0x4>*/ struct ITEMPORTRAIT* TSHashTable<ITEMPORTRAIT,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ITEMPORTRAIT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ITEMPORTRAIT,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ITEMPORTRAIT,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<PLAYERPORTRAIT,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<PLAYERPORTRAIT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<PLAYERPORTRAIT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct PLAYERPORTRAIT*, unsigned int);
  struct PLAYERPORTRAIT* TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>();
  void TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>(class TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>&);
  class TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>& operator=(class TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* DeleteNode(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Head();
  struct PLAYERPORTRAIT* Head();
  void Insert(struct PLAYERPORTRAIT*, char*);
  void Insert(struct PLAYERPORTRAIT*, unsigned int, char*);
  void Insert(struct PLAYERPORTRAIT*, unsigned int, class CHashKeyGUID&);
  struct PLAYERPORTRAIT* New(char*, unsigned long, unsigned long);
  struct PLAYERPORTRAIT* New(unsigned int, char*, unsigned long, unsigned long);
  struct PLAYERPORTRAIT* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct PLAYERPORTRAIT* Next(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Next(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Prev(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Prev(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Ptr(char*);
  struct PLAYERPORTRAIT* Ptr(char*);
  struct PLAYERPORTRAIT* Ptr(unsigned int, char*);
  struct PLAYERPORTRAIT* Ptr(unsigned int, char*);
  struct PLAYERPORTRAIT* Ptr(unsigned int, class CHashKeyGUID&);
  struct PLAYERPORTRAIT* Ptr(unsigned int, class CHashKeyGUID&);
  struct PLAYERPORTRAIT* RawNext(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* RawNext(struct PLAYERPORTRAIT*);
  struct PLAYERPORTRAIT* Tail();
  struct PLAYERPORTRAIT* Tail();
  void Unlink(struct PLAYERPORTRAIT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PLAYERPORTRAIT* ptr);
  virtual /*<vtableoff 0x4>*/ struct PLAYERPORTRAIT* TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<PLAYERPORTRAIT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<PLAYERPORTRAIT,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<UNITPORTRAIT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<UNITPORTRAIT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<UNITPORTRAIT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<UNITPORTRAIT,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct UNITPORTRAIT*, unsigned int);
  struct UNITPORTRAIT* TSHashTable<UNITPORTRAIT,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<UNITPORTRAIT,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<UNITPORTRAIT,HASHKEY_NONE>();
  void TSHashTable<UNITPORTRAIT,HASHKEY_NONE>(class TSHashTable<UNITPORTRAIT,HASHKEY_NONE>&);
  class TSHashTable<UNITPORTRAIT,HASHKEY_NONE>& operator=(class TSHashTable<UNITPORTRAIT,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* DeleteNode(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Head();
  struct UNITPORTRAIT* Head();
  void Insert(struct UNITPORTRAIT*, char*);
  void Insert(struct UNITPORTRAIT*, unsigned int, char*);
  void Insert(struct UNITPORTRAIT*, unsigned int, class HASHKEY_NONE&);
  struct UNITPORTRAIT* New(char*, unsigned long, unsigned long);
  struct UNITPORTRAIT* New(unsigned int, char*, unsigned long, unsigned long);
  struct UNITPORTRAIT* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct UNITPORTRAIT* Next(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Next(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Prev(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Prev(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Ptr(char*);
  struct UNITPORTRAIT* Ptr(char*);
  struct UNITPORTRAIT* Ptr(unsigned int, char*);
  struct UNITPORTRAIT* Ptr(unsigned int, char*);
  struct UNITPORTRAIT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct UNITPORTRAIT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct UNITPORTRAIT* RawNext(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* RawNext(struct UNITPORTRAIT*);
  struct UNITPORTRAIT* Tail();
  struct UNITPORTRAIT* Tail();
  void Unlink(struct UNITPORTRAIT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<UNITPORTRAIT,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UNITPORTRAIT* ptr);
  virtual /*<vtableoff 0x4>*/ struct UNITPORTRAIT* TSHashTable<UNITPORTRAIT,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<UNITPORTRAIT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<UNITPORTRAIT,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<UNITPORTRAIT,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<WORDLIST,HASHKEY_LANGUAGE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<WORDLIST,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<WORDLIST,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<WORDLIST,HASHKEY_LANGUAGE>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<WORDLIST,HASHKEY_LANGUAGE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct WORDLIST*, unsigned int);
  struct WORDLIST* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<WORDLIST,HASHKEY_LANGUAGE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<WORDLIST,HASHKEY_LANGUAGE>();
  void TSHashTable<WORDLIST,HASHKEY_LANGUAGE>(class TSHashTable<WORDLIST,HASHKEY_LANGUAGE>&);
  class TSHashTable<WORDLIST,HASHKEY_LANGUAGE>& operator=(class TSHashTable<WORDLIST,HASHKEY_LANGUAGE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_LANGUAGE&);
  void Delete(struct WORDLIST*);
  struct WORDLIST* DeleteNode(struct WORDLIST*);
  struct WORDLIST* Head();
  struct WORDLIST* Head();
  void Insert(struct WORDLIST*, char*);
  void Insert(struct WORDLIST*, unsigned int, char*);
  void Insert(struct WORDLIST*, unsigned int, class HASHKEY_LANGUAGE&);
  struct WORDLIST* New(char*, unsigned long, unsigned long);
  struct WORDLIST* New(unsigned int, char*, unsigned long, unsigned long);
  struct WORDLIST* New(unsigned int, class HASHKEY_LANGUAGE&, unsigned long, unsigned long);
  struct WORDLIST* Next(struct WORDLIST*);
  struct WORDLIST* Next(struct WORDLIST*);
  struct WORDLIST* Prev(struct WORDLIST*);
  struct WORDLIST* Prev(struct WORDLIST*);
  struct WORDLIST* Ptr(char*);
  struct WORDLIST* Ptr(char*);
  struct WORDLIST* Ptr(unsigned int, char*);
  struct WORDLIST* Ptr(unsigned int, char*);
  struct WORDLIST* Ptr(unsigned int, class HASHKEY_LANGUAGE&);
  struct WORDLIST* Ptr(unsigned int, class HASHKEY_LANGUAGE&);
  struct WORDLIST* RawNext(struct WORDLIST*);
  struct WORDLIST* RawNext(struct WORDLIST*);
  struct WORDLIST* Tail();
  struct WORDLIST* Tail();
  void Unlink(struct WORDLIST*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<WORDLIST,HASHKEY_LANGUAGE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct WORDLIST* ptr);
  virtual /*<vtableoff 0x4>*/ struct WORDLIST* TSHashTable<WORDLIST,HASHKEY_LANGUAGE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<WORDLIST,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<WORDLIST,HASHKEY_LANGUAGE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<WORDLIST,HASHKEY_LANGUAGE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FADEOUTHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FADEOUTHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::Initialize();
  int Initialized();
  void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FADEOUTHASHOBJ*, unsigned int);
  struct FADEOUTHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>();
  void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>(class TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>&);
  class TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>& operator=(class TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* DeleteNode(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Head();
  struct FADEOUTHASHOBJ* Head();
  void Insert(struct FADEOUTHASHOBJ*, char*);
  void Insert(struct FADEOUTHASHOBJ*, unsigned int, char*);
  void Insert(struct FADEOUTHASHOBJ*, unsigned int, class CHashKeyGUID&);
  struct FADEOUTHASHOBJ* New(char*, unsigned long, unsigned long);
  struct FADEOUTHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct FADEOUTHASHOBJ* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct FADEOUTHASHOBJ* Next(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Next(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Prev(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Prev(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Ptr(char*);
  struct FADEOUTHASHOBJ* Ptr(char*);
  struct FADEOUTHASHOBJ* Ptr(unsigned int, char*);
  struct FADEOUTHASHOBJ* Ptr(unsigned int, char*);
  struct FADEOUTHASHOBJ* Ptr(unsigned int, class CHashKeyGUID&);
  struct FADEOUTHASHOBJ* Ptr(unsigned int, class CHashKeyGUID&);
  struct FADEOUTHASHOBJ* RawNext(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* RawNext(struct FADEOUTHASHOBJ*);
  struct FADEOUTHASHOBJ* Tail();
  struct FADEOUTHASHOBJ* Tail();
  void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::Unlink(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* ptr);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FADEOUTHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct FADEOUTHASHOBJ* TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FADEOUTHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FADEOUTHASHOBJ,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<KEYBINDING,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<KEYBINDING,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<KEYBINDING,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<KEYBINDING,HASHKEY_STRI>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<KEYBINDING,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct KEYBINDING*, unsigned int);
  struct KEYBINDING* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<KEYBINDING,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<KEYBINDING,HASHKEY_STRI>();
  void TSHashTable<KEYBINDING,HASHKEY_STRI>(class TSHashTable<KEYBINDING,HASHKEY_STRI>&);
  class TSHashTable<KEYBINDING,HASHKEY_STRI>& operator=(class TSHashTable<KEYBINDING,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct KEYBINDING*);
  struct KEYBINDING* DeleteNode(struct KEYBINDING*);
  struct KEYBINDING* Head();
  struct KEYBINDING* Head();
  void Insert(struct KEYBINDING*, char*);
  void Insert(struct KEYBINDING*, unsigned int, char*);
  void Insert(struct KEYBINDING*, unsigned int, class HASHKEY_STRI&);
  struct KEYBINDING* New(char*, unsigned long, unsigned long);
  struct KEYBINDING* New(unsigned int, char*, unsigned long, unsigned long);
  struct KEYBINDING* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct KEYBINDING* Next(struct KEYBINDING*);
  struct KEYBINDING* Next(struct KEYBINDING*);
  struct KEYBINDING* Prev(struct KEYBINDING*);
  struct KEYBINDING* Prev(struct KEYBINDING*);
  struct KEYBINDING* Ptr(char*);
  struct KEYBINDING* Ptr(char*);
  struct KEYBINDING* Ptr(unsigned int, char*);
  struct KEYBINDING* Ptr(unsigned int, char*);
  struct KEYBINDING* Ptr(unsigned int, class HASHKEY_STRI&);
  struct KEYBINDING* Ptr(unsigned int, class HASHKEY_STRI&);
  struct KEYBINDING* RawNext(struct KEYBINDING*);
  struct KEYBINDING* RawNext(struct KEYBINDING*);
  struct KEYBINDING* Tail();
  struct KEYBINDING* Tail();
  void Unlink(struct KEYBINDING*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<KEYBINDING,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYBINDING* ptr);
  virtual /*<vtableoff 0x4>*/ struct KEYBINDING* TSHashTable<KEYBINDING,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<KEYBINDING,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<KEYBINDING,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<KEYBINDING,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<KEYCOMMAND,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<KEYCOMMAND,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<KEYCOMMAND,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<KEYCOMMAND,HASHKEY_STRI>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<KEYCOMMAND,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct KEYCOMMAND*, unsigned int);
  struct KEYCOMMAND* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<KEYCOMMAND,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<KEYCOMMAND,HASHKEY_STRI>();
  void TSHashTable<KEYCOMMAND,HASHKEY_STRI>(class TSHashTable<KEYCOMMAND,HASHKEY_STRI>&);
  class TSHashTable<KEYCOMMAND,HASHKEY_STRI>& operator=(class TSHashTable<KEYCOMMAND,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct KEYCOMMAND*);
  struct KEYCOMMAND* DeleteNode(struct KEYCOMMAND*);
  struct KEYCOMMAND* Head();
  struct KEYCOMMAND* Head();
  void Insert(struct KEYCOMMAND*, char*);
  void Insert(struct KEYCOMMAND*, unsigned int, char*);
  void Insert(struct KEYCOMMAND*, unsigned int, class HASHKEY_STRI&);
  struct KEYCOMMAND* New(char*, unsigned long, unsigned long);
  struct KEYCOMMAND* New(unsigned int, char*, unsigned long, unsigned long);
  struct KEYCOMMAND* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct KEYCOMMAND* Next(struct KEYCOMMAND*);
  struct KEYCOMMAND* Next(struct KEYCOMMAND*);
  struct KEYCOMMAND* Prev(struct KEYCOMMAND*);
  struct KEYCOMMAND* Prev(struct KEYCOMMAND*);
  struct KEYCOMMAND* Ptr(char*);
  struct KEYCOMMAND* Ptr(char*);
  struct KEYCOMMAND* Ptr(unsigned int, char*);
  struct KEYCOMMAND* Ptr(unsigned int, char*);
  struct KEYCOMMAND* Ptr(unsigned int, class HASHKEY_STRI&);
  struct KEYCOMMAND* Ptr(unsigned int, class HASHKEY_STRI&);
  struct KEYCOMMAND* RawNext(struct KEYCOMMAND*);
  struct KEYCOMMAND* RawNext(struct KEYCOMMAND*);
  struct KEYCOMMAND* Tail();
  struct KEYCOMMAND* Tail();
  void Unlink(struct KEYCOMMAND*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<KEYCOMMAND,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct KEYCOMMAND* ptr);
  virtual /*<vtableoff 0x4>*/ struct KEYCOMMAND* TSHashTable<KEYCOMMAND,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<KEYCOMMAND,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<KEYCOMMAND,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<KEYCOMMAND,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*, unsigned int);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>();
  void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>(class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>&);
  class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>& operator=(class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* ptr);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* DeleteNode(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Head();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Head();
  void Insert(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*, unsigned int, class CHashKeyGUID&);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Next(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Prev(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(char*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(char*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(unsigned int, class CHashKeyGUID&);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Ptr(unsigned int, class CHashKeyGUID&);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* RawNext(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Tail();
  struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH* TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& NonConst();
  int GetLinkOffset();
  void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>(class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>& operator=(class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_INT&);
  void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* DeleteNode(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Head();
  void Insert(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*, char*);
  void Insert(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, char*);
  void Insert(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*, unsigned int, class HASHKEY_INT&);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(char*, unsigned long, unsigned long);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* New(unsigned int, class HASHKEY_INT&, unsigned long, unsigned long);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Next(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Prev(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(char*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, char*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Ptr(unsigned int, class HASHKEY_INT&);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* RawNext(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* Tail();
  void Unlink(struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH* TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<C_OBJECTHASH,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<C_OBJECTHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<C_OBJECTHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::Initialize();
  int Initialized();
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<C_OBJECTHASH,CHashKeyGUID>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct C_OBJECTHASH* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  struct C_OBJECTHASH* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<C_OBJECTHASH,CHashKeyGUID>& NonConst();
  int GetLinkOffset();
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>();
  void TSHashTable<C_OBJECTHASH,CHashKeyGUID>(class TSHashTable<C_OBJECTHASH,CHashKeyGUID>&);
  class TSHashTable<C_OBJECTHASH,CHashKeyGUID>& operator=(class TSHashTable<C_OBJECTHASH,CHashKeyGUID>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyGUID&);
  void Delete(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* DeleteNode(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Head();
  struct C_OBJECTHASH* Head();
  void Insert(struct C_OBJECTHASH*, char*);
  void Insert(struct C_OBJECTHASH*, unsigned int, char*);
  void Insert(struct C_OBJECTHASH*, unsigned int, class CHashKeyGUID&);
  struct C_OBJECTHASH* New(char*, unsigned long, unsigned long);
  struct C_OBJECTHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct C_OBJECTHASH* New(unsigned int, class CHashKeyGUID&, unsigned long, unsigned long);
  struct C_OBJECTHASH* Next(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Next(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Prev(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Prev(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Ptr(char*);
  struct C_OBJECTHASH* Ptr(char*);
  struct C_OBJECTHASH* Ptr(unsigned int, char*);
  struct C_OBJECTHASH* Ptr(unsigned int, char*);
  struct C_OBJECTHASH* Ptr(unsigned int, class CHashKeyGUID&);
  struct C_OBJECTHASH* Ptr(unsigned int, class CHashKeyGUID&);
  struct C_OBJECTHASH* RawNext(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* RawNext(struct C_OBJECTHASH*);
  struct C_OBJECTHASH* Tail();
  struct C_OBJECTHASH* Tail();
  void Unlink(struct C_OBJECTHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct C_OBJECTHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct C_OBJECTHASH* TSHashTable<C_OBJECTHASH,CHashKeyGUID>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<C_OBJECTHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::~TSHashTable<C_OBJECTHASH,CHashKeyGUID>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<C_OBJECTHASH,CHashKeyGUID>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FOOTSTEPSNDCACHE,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FOOTSTEPSNDCACHE,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct FOOTSTEPSNDCACHE*, unsigned int);
  struct FOOTSTEPSNDCACHE* TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>();
  void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>(class TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>&);
  class TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>& operator=(class TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* DeleteNode(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Head();
  struct FOOTSTEPSNDCACHE* Head();
  void Insert(struct FOOTSTEPSNDCACHE*, char*);
  void Insert(struct FOOTSTEPSNDCACHE*, unsigned int, char*);
  void Insert(struct FOOTSTEPSNDCACHE*, unsigned int, class HASHKEY_NONE&);
  struct FOOTSTEPSNDCACHE* New(char*, unsigned long, unsigned long);
  struct FOOTSTEPSNDCACHE* New(unsigned int, char*, unsigned long, unsigned long);
  struct FOOTSTEPSNDCACHE* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct FOOTSTEPSNDCACHE* Next(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Next(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Prev(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Prev(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Ptr(char*);
  struct FOOTSTEPSNDCACHE* Ptr(char*);
  struct FOOTSTEPSNDCACHE* Ptr(unsigned int, char*);
  struct FOOTSTEPSNDCACHE* Ptr(unsigned int, char*);
  struct FOOTSTEPSNDCACHE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct FOOTSTEPSNDCACHE* Ptr(unsigned int, class HASHKEY_NONE&);
  struct FOOTSTEPSNDCACHE* RawNext(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* RawNext(struct FOOTSTEPSNDCACHE*);
  struct FOOTSTEPSNDCACHE* Tail();
  struct FOOTSTEPSNDCACHE* Tail();
  void Unlink(struct FOOTSTEPSNDCACHE*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FOOTSTEPSNDCACHE* ptr);
  virtual /*<vtableoff 0x4>*/ struct FOOTSTEPSNDCACHE* TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FOOTSTEPSNDCACHE,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FOOTSTEPSNDCACHE,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<TIMESTAMPSTRUCT,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<TIMESTAMPSTRUCT,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct TIMESTAMPSTRUCT*, unsigned int);
  struct TIMESTAMPSTRUCT* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>();
  void TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>(class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>&);
  class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>& operator=(class TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* DeleteNode(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Head();
  struct TIMESTAMPSTRUCT* Head();
  void Insert(struct TIMESTAMPSTRUCT*, char*);
  void Insert(struct TIMESTAMPSTRUCT*, unsigned int, char*);
  void Insert(struct TIMESTAMPSTRUCT*, unsigned int, class HASHKEY_NONE&);
  struct TIMESTAMPSTRUCT* New(char*, unsigned long, unsigned long);
  struct TIMESTAMPSTRUCT* New(unsigned int, char*, unsigned long, unsigned long);
  struct TIMESTAMPSTRUCT* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct TIMESTAMPSTRUCT* Next(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Next(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Prev(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Prev(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Ptr(char*);
  struct TIMESTAMPSTRUCT* Ptr(char*);
  struct TIMESTAMPSTRUCT* Ptr(unsigned int, char*);
  struct TIMESTAMPSTRUCT* Ptr(unsigned int, char*);
  struct TIMESTAMPSTRUCT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct TIMESTAMPSTRUCT* Ptr(unsigned int, class HASHKEY_NONE&);
  struct TIMESTAMPSTRUCT* RawNext(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* RawNext(struct TIMESTAMPSTRUCT*);
  struct TIMESTAMPSTRUCT* Tail();
  struct TIMESTAMPSTRUCT* Tail();
  void Unlink(struct TIMESTAMPSTRUCT*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct TIMESTAMPSTRUCT* ptr);
  virtual /*<vtableoff 0x4>*/ struct TIMESTAMPSTRUCT* TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<TIMESTAMPSTRUCT,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<TIMESTAMPSTRUCT,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SHEATHSOUNDHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SHEATHSOUNDHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct SHEATHSOUNDHASH*, unsigned int);
  struct SHEATHSOUNDHASH* TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>();
  void TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>(class TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>&);
  class TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>& operator=(class TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* DeleteNode(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Head();
  struct SHEATHSOUNDHASH* Head();
  void Insert(struct SHEATHSOUNDHASH*, char*);
  void Insert(struct SHEATHSOUNDHASH*, unsigned int, char*);
  void Insert(struct SHEATHSOUNDHASH*, unsigned int, class HASHKEY_NONE&);
  struct SHEATHSOUNDHASH* New(char*, unsigned long, unsigned long);
  struct SHEATHSOUNDHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct SHEATHSOUNDHASH* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct SHEATHSOUNDHASH* Next(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Next(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Prev(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Prev(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Ptr(char*);
  struct SHEATHSOUNDHASH* Ptr(char*);
  struct SHEATHSOUNDHASH* Ptr(unsigned int, char*);
  struct SHEATHSOUNDHASH* Ptr(unsigned int, char*);
  struct SHEATHSOUNDHASH* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SHEATHSOUNDHASH* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SHEATHSOUNDHASH* RawNext(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* RawNext(struct SHEATHSOUNDHASH*);
  struct SHEATHSOUNDHASH* Tail();
  struct SHEATHSOUNDHASH* Tail();
  void Unlink(struct SHEATHSOUNDHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SHEATHSOUNDHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct SHEATHSOUNDHASH* TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SHEATHSOUNDHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SHEATHSOUNDHASH,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<UISOUNDLOOKUP,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<UISOUNDLOOKUP,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct UISOUNDLOOKUP*, unsigned int);
  struct UISOUNDLOOKUP* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>();
  void TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>(class TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>&);
  class TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>& operator=(class TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* DeleteNode(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Head();
  struct UISOUNDLOOKUP* Head();
  void Insert(struct UISOUNDLOOKUP*, char*);
  void Insert(struct UISOUNDLOOKUP*, unsigned int, char*);
  void Insert(struct UISOUNDLOOKUP*, unsigned int, class HASHKEY_STRI&);
  struct UISOUNDLOOKUP* New(char*, unsigned long, unsigned long);
  struct UISOUNDLOOKUP* New(unsigned int, char*, unsigned long, unsigned long);
  struct UISOUNDLOOKUP* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct UISOUNDLOOKUP* Next(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Next(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Prev(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Prev(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Ptr(char*);
  struct UISOUNDLOOKUP* Ptr(char*);
  struct UISOUNDLOOKUP* Ptr(unsigned int, char*);
  struct UISOUNDLOOKUP* Ptr(unsigned int, char*);
  struct UISOUNDLOOKUP* Ptr(unsigned int, class HASHKEY_STRI&);
  struct UISOUNDLOOKUP* Ptr(unsigned int, class HASHKEY_STRI&);
  struct UISOUNDLOOKUP* RawNext(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* RawNext(struct UISOUNDLOOKUP*);
  struct UISOUNDLOOKUP* Tail();
  struct UISOUNDLOOKUP* Tail();
  void Unlink(struct UISOUNDLOOKUP*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UISOUNDLOOKUP* ptr);
  virtual /*<vtableoff 0x4>*/ struct UISOUNDLOOKUP* TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<UISOUNDLOOKUP,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<UISOUNDLOOKUP,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SOUNDDEFINITION,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SOUNDDEFINITION,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SOUNDDEFINITION,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct SOUNDDEFINITION*, unsigned int);
  struct SOUNDDEFINITION* TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>();
  void TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>(class TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>&);
  class TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>& operator=(class TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* DeleteNode(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Head();
  struct SOUNDDEFINITION* Head();
  void Insert(struct SOUNDDEFINITION*, char*);
  void Insert(struct SOUNDDEFINITION*, unsigned int, char*);
  void Insert(struct SOUNDDEFINITION*, unsigned int, class HASHKEY_NONE&);
  struct SOUNDDEFINITION* New(char*, unsigned long, unsigned long);
  struct SOUNDDEFINITION* New(unsigned int, char*, unsigned long, unsigned long);
  struct SOUNDDEFINITION* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct SOUNDDEFINITION* Next(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Next(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Prev(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Prev(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Ptr(char*);
  struct SOUNDDEFINITION* Ptr(char*);
  struct SOUNDDEFINITION* Ptr(unsigned int, char*);
  struct SOUNDDEFINITION* Ptr(unsigned int, char*);
  struct SOUNDDEFINITION* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SOUNDDEFINITION* TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ class HASHKEY_NONE& key);
  struct SOUNDDEFINITION* RawNext(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* RawNext(struct SOUNDDEFINITION*);
  struct SOUNDDEFINITION* Tail();
  struct SOUNDDEFINITION* Tail();
  void Unlink(struct SOUNDDEFINITION*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SOUNDDEFINITION* ptr);
  virtual /*<vtableoff 0x4>*/ struct SOUNDDEFINITION* TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SOUNDDEFINITION,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SOUNDDEFINITION,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CHUNKHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CHUNKHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CHUNKHASHOBJ*, unsigned int);
  struct CHUNKHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>();
  void TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>(class TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>&);
  class TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>& operator=(class TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* DeleteNode(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Head();
  struct CHUNKHASHOBJ* Head();
  void Insert(struct CHUNKHASHOBJ*, char*);
  void Insert(struct CHUNKHASHOBJ*, unsigned int, char*);
  void Insert(struct CHUNKHASHOBJ*, unsigned int, class HASHKEY_STRI&);
  struct CHUNKHASHOBJ* New(char*, unsigned long, unsigned long);
  struct CHUNKHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct CHUNKHASHOBJ* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct CHUNKHASHOBJ* Next(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Next(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Prev(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Prev(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Ptr(char*);
  struct CHUNKHASHOBJ* Ptr(char*);
  struct CHUNKHASHOBJ* Ptr(unsigned int, char*);
  struct CHUNKHASHOBJ* Ptr(unsigned int, char*);
  struct CHUNKHASHOBJ* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CHUNKHASHOBJ* Ptr(unsigned int, class HASHKEY_STRI&);
  struct CHUNKHASHOBJ* RawNext(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* RawNext(struct CHUNKHASHOBJ*);
  struct CHUNKHASHOBJ* Tail();
  struct CHUNKHASHOBJ* Tail();
  void Unlink(struct CHUNKHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CHUNKHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct CHUNKHASHOBJ* TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CHUNKHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CHUNKHASHOBJ,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct OUTDOORSCHUNKHASHOBJ*, unsigned int);
  struct OUTDOORSCHUNKHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>& NonConst();
  int GetLinkOffset();
  void TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>();
  void TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>(class TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>&);
  class TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>& operator=(class TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class AREAHASHKEY&);
  void Delete(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* DeleteNode(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Head();
  struct OUTDOORSCHUNKHASHOBJ* Head();
  void Insert(struct OUTDOORSCHUNKHASHOBJ*, char*);
  void Insert(struct OUTDOORSCHUNKHASHOBJ*, unsigned int, char*);
  void Insert(struct OUTDOORSCHUNKHASHOBJ*, unsigned int, class AREAHASHKEY&);
  struct OUTDOORSCHUNKHASHOBJ* New(char*, unsigned long, unsigned long);
  struct OUTDOORSCHUNKHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct OUTDOORSCHUNKHASHOBJ* New(unsigned int, class AREAHASHKEY&, unsigned long, unsigned long);
  struct OUTDOORSCHUNKHASHOBJ* Next(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Next(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Prev(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Prev(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(char*);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(char*);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(unsigned int, char*);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(unsigned int, char*);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(unsigned int, class AREAHASHKEY&);
  struct OUTDOORSCHUNKHASHOBJ* Ptr(unsigned int, class AREAHASHKEY&);
  struct OUTDOORSCHUNKHASHOBJ* RawNext(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* RawNext(struct OUTDOORSCHUNKHASHOBJ*);
  struct OUTDOORSCHUNKHASHOBJ* Tail();
  struct OUTDOORSCHUNKHASHOBJ* Tail();
  void Unlink(struct OUTDOORSCHUNKHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OUTDOORSCHUNKHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct OUTDOORSCHUNKHASHOBJ* TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<OUTDOORSCHUNKHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<OUTDOORSCHUNKHASHOBJ,AREAHASHKEY>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CTextureHash,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CTextureHash,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::Initialize();
  int Initialized();
  void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CTextureHash*, unsigned int);
  struct CTextureHash* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>();
  void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>(class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>&);
  class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>& operator=(class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_TEXTUREFILE&);
  void Delete(struct CTextureHash*);
  struct CTextureHash* DeleteNode(struct CTextureHash*);
  struct CTextureHash* Head();
  struct CTextureHash* Head();
  void Insert(struct CTextureHash*, char*);
  void Insert(struct CTextureHash*, unsigned int, char*);
  void Insert(struct CTextureHash*, unsigned int, class HASHKEY_TEXTUREFILE&);
  struct CTextureHash* New(char*, unsigned long, unsigned long);
  struct CTextureHash* New(unsigned int, char*, unsigned long, unsigned long);
  struct CTextureHash* New(unsigned int, class HASHKEY_TEXTUREFILE&, unsigned long, unsigned long);
  struct CTextureHash* Next(struct CTextureHash*);
  struct CTextureHash* Next(struct CTextureHash*);
  struct CTextureHash* Prev(struct CTextureHash*);
  struct CTextureHash* Prev(struct CTextureHash*);
  struct CTextureHash* Ptr(char*);
  struct CTextureHash* Ptr(char*);
  struct CTextureHash* Ptr(unsigned int, char*);
  struct CTextureHash* Ptr(unsigned int, char*);
  struct CTextureHash* Ptr(unsigned int, class HASHKEY_TEXTUREFILE&);
  struct CTextureHash* Ptr(unsigned int, class HASHKEY_TEXTUREFILE&);
  struct CTextureHash* RawNext(struct CTextureHash*);
  struct CTextureHash* RawNext(struct CTextureHash*);
  struct CTextureHash* Tail();
  struct CTextureHash* Tail();
  void Unlink(struct CTextureHash*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CTextureHash* ptr);
  virtual /*<vtableoff 0x4>*/ struct CTextureHash* TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CTextureHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CSolidTextureHash,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CSolidTextureHash,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CSolidTextureHash,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void TSHashTable<CSolidTextureHash,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CSolidTextureHash,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CSolidTextureHash*, unsigned int);
  struct CSolidTextureHash* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CSolidTextureHash,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CSolidTextureHash,HASHKEY_NONE>();
  void TSHashTable<CSolidTextureHash,HASHKEY_NONE>(class TSHashTable<CSolidTextureHash,HASHKEY_NONE>&);
  class TSHashTable<CSolidTextureHash,HASHKEY_NONE>& operator=(class TSHashTable<CSolidTextureHash,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct CSolidTextureHash*);
  struct CSolidTextureHash* DeleteNode(struct CSolidTextureHash*);
  struct CSolidTextureHash* Head();
  struct CSolidTextureHash* Head();
  void Insert(struct CSolidTextureHash*, char*);
  void Insert(struct CSolidTextureHash*, unsigned int, char*);
  void Insert(struct CSolidTextureHash*, unsigned int, class HASHKEY_NONE&);
  struct CSolidTextureHash* New(char*, unsigned long, unsigned long);
  struct CSolidTextureHash* New(unsigned int, char*, unsigned long, unsigned long);
  struct CSolidTextureHash* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct CSolidTextureHash* Next(struct CSolidTextureHash*);
  struct CSolidTextureHash* Next(struct CSolidTextureHash*);
  struct CSolidTextureHash* Prev(struct CSolidTextureHash*);
  struct CSolidTextureHash* Prev(struct CSolidTextureHash*);
  struct CSolidTextureHash* Ptr(char*);
  struct CSolidTextureHash* Ptr(char*);
  struct CSolidTextureHash* Ptr(unsigned int, char*);
  struct CSolidTextureHash* Ptr(unsigned int, char*);
  struct CSolidTextureHash* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CSolidTextureHash* Ptr(unsigned int, class HASHKEY_NONE&);
  struct CSolidTextureHash* RawNext(struct CSolidTextureHash*);
  struct CSolidTextureHash* RawNext(struct CSolidTextureHash*);
  struct CSolidTextureHash* Tail();
  struct CSolidTextureHash* Tail();
  void Unlink(struct CSolidTextureHash*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CSolidTextureHash,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSolidTextureHash* ptr);
  virtual /*<vtableoff 0x4>*/ struct CSolidTextureHash* TSHashTable<CSolidTextureHash,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CSolidTextureHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CSolidTextureHash,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CSolidTextureHash,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FONTHASHOBJ,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FONTHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<FONTHASHOBJ,HASHKEY_STR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FONTHASHOBJ*, unsigned int);
  struct FONTHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& operator=(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* DeleteNode(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Head();
  struct FONTHASHOBJ* Head();
  void Insert(struct FONTHASHOBJ*, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* New(char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Tail();
  struct FONTHASHOBJ* Tail();
  void Unlink(struct FONTHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FONTHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct FONTHASHOBJ* TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FONTHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FONTHASHOBJ,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FONTHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<FONTHASHOBJ,HASHKEY_STR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FONTHASHOBJ*, unsigned int);
  struct FONTHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& operator=(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* DeleteNode(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Head();
  struct FONTHASHOBJ* Head();
  void Insert(struct FONTHASHOBJ*, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* New(char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Tail();
  struct FONTHASHOBJ* Tail();
  void Unlink(struct FONTHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FONTHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct FONTHASHOBJ* TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FONTHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FONTHASHOBJ,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FONTHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FONTHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<FONTHASHOBJ,HASHKEY_STR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct FONTHASHOBJ*, unsigned int);
  struct FONTHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  void TSHashTable<FONTHASHOBJ,HASHKEY_STR>(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  class TSHashTable<FONTHASHOBJ,HASHKEY_STR>& operator=(class TSHashTable<FONTHASHOBJ,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* DeleteNode(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Head();
  struct FONTHASHOBJ* Head();
  void Insert(struct FONTHASHOBJ*, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, char*);
  void Insert(struct FONTHASHOBJ*, unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* New(char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct FONTHASHOBJ* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Next(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Prev(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, char*);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* Ptr(unsigned int, class HASHKEY_STR&);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* RawNext(struct FONTHASHOBJ*);
  struct FONTHASHOBJ* Tail();
  struct FONTHASHOBJ* Tail();
  void Unlink(struct FONTHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FONTHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct FONTHASHOBJ* TSHashTable<FONTHASHOBJ,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FONTHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FONTHASHOBJ,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FONTHASHOBJ,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ProfileInternal::SECTION,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ProfileInternal::SECTION,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct ProfileInternal::SECTION*, unsigned int);
  struct ProfileInternal::SECTION* TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>();
  void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>(class TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>&);
  class TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>& operator=(class TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_CONSTSTRI&);
  void Delete(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* DeleteNode(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Head();
  struct ProfileInternal::SECTION* Head();
  void Insert(struct ProfileInternal::SECTION*, char*);
  void Insert(struct ProfileInternal::SECTION*, unsigned int, char*);
  void Insert(struct ProfileInternal::SECTION*, unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::SECTION* New(char*, unsigned long, unsigned long);
  struct ProfileInternal::SECTION* New(unsigned int, char*, unsigned long, unsigned long);
  struct ProfileInternal::SECTION* New(unsigned int, class HASHKEY_CONSTSTRI&, unsigned long, unsigned long);
  struct ProfileInternal::SECTION* Next(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Next(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Prev(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Prev(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Ptr(char*);
  struct ProfileInternal::SECTION* Ptr(char*);
  struct ProfileInternal::SECTION* Ptr(unsigned int, char*);
  struct ProfileInternal::SECTION* Ptr(unsigned int, char*);
  struct ProfileInternal::SECTION* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::SECTION* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::SECTION* RawNext(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* RawNext(struct ProfileInternal::SECTION*);
  struct ProfileInternal::SECTION* Tail();
  struct ProfileInternal::SECTION* Tail();
  void Unlink(struct ProfileInternal::SECTION*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::SECTION* ptr);
  virtual /*<vtableoff 0x4>*/ struct ProfileInternal::SECTION* TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ProfileInternal::SECTION,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ProfileInternal::SECTION,HASHKEY_CONSTSTRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ProfileInternal::KEYVALUE,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ProfileInternal::KEYVALUE,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct ProfileInternal::KEYVALUE*, unsigned int);
  struct ProfileInternal::KEYVALUE* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>();
  void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>(class TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>&);
  class TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>& operator=(class TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_CONSTSTRI&);
  void Delete(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* DeleteNode(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Head();
  struct ProfileInternal::KEYVALUE* Head();
  void Insert(struct ProfileInternal::KEYVALUE*, char*);
  void Insert(struct ProfileInternal::KEYVALUE*, unsigned int, char*);
  void Insert(struct ProfileInternal::KEYVALUE*, unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::KEYVALUE* New(char*, unsigned long, unsigned long);
  struct ProfileInternal::KEYVALUE* TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* str, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned long flags);
  struct ProfileInternal::KEYVALUE* New(unsigned int, class HASHKEY_CONSTSTRI&, unsigned long, unsigned long);
  struct ProfileInternal::KEYVALUE* Next(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Next(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Prev(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Prev(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Ptr(char*);
  struct ProfileInternal::KEYVALUE* Ptr(char*);
  struct ProfileInternal::KEYVALUE* Ptr(unsigned int, char*);
  struct ProfileInternal::KEYVALUE* Ptr(unsigned int, char*);
  struct ProfileInternal::KEYVALUE* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::KEYVALUE* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct ProfileInternal::KEYVALUE* RawNext(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* RawNext(struct ProfileInternal::KEYVALUE*);
  struct ProfileInternal::KEYVALUE* Tail();
  struct ProfileInternal::KEYVALUE* Tail();
  void Unlink(struct ProfileInternal::KEYVALUE*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ProfileInternal::KEYVALUE* ptr);
  virtual /*<vtableoff 0x4>*/ struct ProfileInternal::KEYVALUE* TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ProfileInternal::KEYVALUE,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ProfileInternal::KEYVALUE,HASHKEY_CONSTSTRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct OsNet::NETSELSOCKPTR*, unsigned int);
  struct OsNet::NETSELSOCKPTR* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>(class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>& operator=(class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* DeleteNode(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Head();
  struct OsNet::NETSELSOCKPTR* Head();
  void Insert(struct OsNet::NETSELSOCKPTR*, char*);
  void Insert(struct OsNet::NETSELSOCKPTR*, unsigned int, char*);
  void Insert(struct OsNet::NETSELSOCKPTR*, unsigned int, class HASHKEY_NONE&);
  struct OsNet::NETSELSOCKPTR* New(char*, unsigned long, unsigned long);
  struct OsNet::NETSELSOCKPTR* New(unsigned int, char*, unsigned long, unsigned long);
  struct OsNet::NETSELSOCKPTR* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct OsNet::NETSELSOCKPTR* Next(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Next(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Prev(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Prev(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Ptr(char*);
  struct OsNet::NETSELSOCKPTR* Ptr(char*);
  struct OsNet::NETSELSOCKPTR* Ptr(unsigned int, char*);
  struct OsNet::NETSELSOCKPTR* Ptr(unsigned int, char*);
  struct OsNet::NETSELSOCKPTR* Ptr(unsigned int, class HASHKEY_NONE&);
  struct OsNet::NETSELSOCKPTR* Ptr(unsigned int, class HASHKEY_NONE&);
  struct OsNet::NETSELSOCKPTR* RawNext(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* RawNext(struct OsNet::NETSELSOCKPTR*);
  struct OsNet::NETSELSOCKPTR* Tail();
  struct OsNet::NETSELSOCKPTR* Tail();
  void Unlink(struct OsNet::NETSELSOCKPTR*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* ptr);
  virtual /*<vtableoff 0x4>*/ struct OsNet::NETSELSOCKPTR* TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::~TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SoundFileObjectCacheNode,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SoundFileObjectCacheNode,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct SoundFileObjectCacheNode*, unsigned int);
  struct SoundFileObjectCacheNode* TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>();
  void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>(class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>& operator=(class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* DeleteNode(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Head();
  struct SoundFileObjectCacheNode* Head();
  void Insert(struct SoundFileObjectCacheNode*, char*);
  void Insert(struct SoundFileObjectCacheNode*, unsigned int, char*);
  void Insert(struct SoundFileObjectCacheNode*, unsigned int, class HASHKEY_NONE&);
  struct SoundFileObjectCacheNode* New(char*, unsigned long, unsigned long);
  struct SoundFileObjectCacheNode* New(unsigned int, char*, unsigned long, unsigned long);
  struct SoundFileObjectCacheNode* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct SoundFileObjectCacheNode* Next(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Next(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Prev(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Prev(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Ptr(char*);
  struct SoundFileObjectCacheNode* Ptr(char*);
  struct SoundFileObjectCacheNode* Ptr(unsigned int, char*);
  struct SoundFileObjectCacheNode* Ptr(unsigned int, char*);
  struct SoundFileObjectCacheNode* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SoundFileObjectCacheNode* TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ class HASHKEY_NONE& key);
  struct SoundFileObjectCacheNode* RawNext(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* RawNext(struct SoundFileObjectCacheNode*);
  struct SoundFileObjectCacheNode* Tail();
  struct SoundFileObjectCacheNode* Tail();
  void Unlink(struct SoundFileObjectCacheNode*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* ptr);
  virtual /*<vtableoff 0x4>*/ struct SoundFileObjectCacheNode* TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SoundFileObjectCacheNode,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SoundFileDataCacheBlock,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SoundFileDataCacheBlock,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::Initialize();
  int Initialized();
  void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct SoundFileDataCacheBlock*, unsigned int);
  struct SoundFileDataCacheBlock* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>(class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>& operator=(class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_LONGLONG&);
  void Delete(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* DeleteNode(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Head();
  struct SoundFileDataCacheBlock* Head();
  void Insert(struct SoundFileDataCacheBlock*, char*);
  void Insert(struct SoundFileDataCacheBlock*, unsigned int, char*);
  void Insert(struct SoundFileDataCacheBlock*, unsigned int, class HASHKEY_LONGLONG&);
  struct SoundFileDataCacheBlock* New(char*, unsigned long, unsigned long);
  struct SoundFileDataCacheBlock* New(unsigned int, char*, unsigned long, unsigned long);
  struct SoundFileDataCacheBlock* New(unsigned int, class HASHKEY_LONGLONG&, unsigned long, unsigned long);
  struct SoundFileDataCacheBlock* Next(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Next(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Prev(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Prev(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Ptr(char*);
  struct SoundFileDataCacheBlock* Ptr(char*);
  struct SoundFileDataCacheBlock* Ptr(unsigned int, char*);
  struct SoundFileDataCacheBlock* Ptr(unsigned int, char*);
  struct SoundFileDataCacheBlock* Ptr(unsigned int, class HASHKEY_LONGLONG&);
  struct SoundFileDataCacheBlock* Ptr(unsigned int, class HASHKEY_LONGLONG&);
  struct SoundFileDataCacheBlock* RawNext(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* RawNext(struct SoundFileDataCacheBlock*);
  struct SoundFileDataCacheBlock* Tail();
  struct SoundFileDataCacheBlock* Tail();
  void Unlink(struct SoundFileDataCacheBlock*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* ptr);
  virtual /*<vtableoff 0x4>*/ struct SoundFileDataCacheBlock* TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SoundFileDataCacheBlock,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CModelHash,CHashKeyFilePath> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CModelHash,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CModelHash,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void TSHashTable<CModelHash,CHashKeyFilePath>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int TSHashTable<CModelHash,CHashKeyFilePath>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CModelHash*, unsigned int);
  struct CModelHash* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CModelHash,CHashKeyFilePath>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CModelHash,CHashKeyFilePath>();
  void TSHashTable<CModelHash,CHashKeyFilePath>(class TSHashTable<CModelHash,CHashKeyFilePath>&);
  class TSHashTable<CModelHash,CHashKeyFilePath>& operator=(class TSHashTable<CModelHash,CHashKeyFilePath>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class CHashKeyFilePath&);
  void Delete(struct CModelHash*);
  struct CModelHash* DeleteNode(struct CModelHash*);
  struct CModelHash* Head();
  struct CModelHash* Head();
  void Insert(struct CModelHash*, char*);
  void Insert(struct CModelHash*, unsigned int, char*);
  void Insert(struct CModelHash*, unsigned int, class CHashKeyFilePath&);
  struct CModelHash* New(char*, unsigned long, unsigned long);
  struct CModelHash* New(unsigned int, char*, unsigned long, unsigned long);
  struct CModelHash* New(unsigned int, class CHashKeyFilePath&, unsigned long, unsigned long);
  struct CModelHash* Next(struct CModelHash*);
  struct CModelHash* Next(struct CModelHash*);
  struct CModelHash* Prev(struct CModelHash*);
  struct CModelHash* Prev(struct CModelHash*);
  struct CModelHash* Ptr(char*);
  struct CModelHash* Ptr(char*);
  struct CModelHash* Ptr(unsigned int, char*);
  struct CModelHash* Ptr(unsigned int, char*);
  struct CModelHash* Ptr(unsigned int, class CHashKeyFilePath&);
  struct CModelHash* Ptr(unsigned int, class CHashKeyFilePath&);
  struct CModelHash* RawNext(struct CModelHash*);
  struct CModelHash* RawNext(struct CModelHash*);
  struct CModelHash* Tail();
  struct CModelHash* Tail();
  void Unlink(struct CModelHash*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CModelHash,CHashKeyFilePath>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelHash* ptr);
  virtual /*<vtableoff 0x4>*/ struct CModelHash* TSHashTable<CModelHash,CHashKeyFilePath>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CModelHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CModelHash,CHashKeyFilePath>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CModelHash,CHashKeyFilePath>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct SIMPLECONTEXTHASHOBJ*, unsigned int);
  struct SIMPLECONTEXTHASHOBJ* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>();
  void TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>(class TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>&);
  class TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>& operator=(class TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* DeleteNode(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Head();
  struct SIMPLECONTEXTHASHOBJ* Head();
  void Insert(struct SIMPLECONTEXTHASHOBJ*, char*);
  void Insert(struct SIMPLECONTEXTHASHOBJ*, unsigned int, char*);
  void Insert(struct SIMPLECONTEXTHASHOBJ*, unsigned int, class HASHKEY_NONE&);
  struct SIMPLECONTEXTHASHOBJ* New(char*, unsigned long, unsigned long);
  struct SIMPLECONTEXTHASHOBJ* New(unsigned int, char*, unsigned long, unsigned long);
  struct SIMPLECONTEXTHASHOBJ* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct SIMPLECONTEXTHASHOBJ* Next(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Next(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Prev(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Prev(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Ptr(char*);
  struct SIMPLECONTEXTHASHOBJ* Ptr(char*);
  struct SIMPLECONTEXTHASHOBJ* Ptr(unsigned int, char*);
  struct SIMPLECONTEXTHASHOBJ* Ptr(unsigned int, char*);
  struct SIMPLECONTEXTHASHOBJ* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SIMPLECONTEXTHASHOBJ* Ptr(unsigned int, class HASHKEY_NONE&);
  struct SIMPLECONTEXTHASHOBJ* RawNext(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* RawNext(struct SIMPLECONTEXTHASHOBJ*);
  struct SIMPLECONTEXTHASHOBJ* Tail();
  struct SIMPLECONTEXTHASHOBJ* Tail();
  void Unlink(struct SIMPLECONTEXTHASHOBJ*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLECONTEXTHASHOBJ* ptr);
  virtual /*<vtableoff 0x4>*/ struct SIMPLECONTEXTHASHOBJ* TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SIMPLECONTEXTHASHOBJ,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SIMPLECONTEXTHASHOBJ,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SIMPLEFRAMEREGHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct SIMPLEFRAMEREGHASH*, unsigned int);
  struct SIMPLEFRAMEREGHASH* TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>();
  void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>(class TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>&);
  class TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>& operator=(class TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* DeleteNode(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Head();
  struct SIMPLEFRAMEREGHASH* Head();
  void Insert(struct SIMPLEFRAMEREGHASH*, char*);
  void Insert(struct SIMPLEFRAMEREGHASH*, unsigned int, char*);
  void Insert(struct SIMPLEFRAMEREGHASH*, unsigned int, class HASHKEY_STR&);
  struct SIMPLEFRAMEREGHASH* New(char*, unsigned long, unsigned long);
  struct SIMPLEFRAMEREGHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct SIMPLEFRAMEREGHASH* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct SIMPLEFRAMEREGHASH* Next(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Next(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Prev(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Prev(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Ptr(char*);
  struct SIMPLEFRAMEREGHASH* Ptr(char*);
  struct SIMPLEFRAMEREGHASH* Ptr(unsigned int, char*);
  struct SIMPLEFRAMEREGHASH* Ptr(unsigned int, char*);
  struct SIMPLEFRAMEREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLEFRAMEREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLEFRAMEREGHASH* RawNext(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* RawNext(struct SIMPLEFRAMEREGHASH*);
  struct SIMPLEFRAMEREGHASH* Tail();
  struct SIMPLEFRAMEREGHASH* Tail();
  void Unlink(struct SIMPLEFRAMEREGHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFRAMEREGHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct SIMPLEFRAMEREGHASH* TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SIMPLEFRAMEREGHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::~TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SIMPLEFRAMEREGHASH,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SIMPLETEXTUREREGHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct SIMPLETEXTUREREGHASH*, unsigned int);
  struct SIMPLETEXTUREREGHASH* TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>();
  void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>(class TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>&);
  class TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>& operator=(class TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* DeleteNode(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Head();
  struct SIMPLETEXTUREREGHASH* Head();
  void Insert(struct SIMPLETEXTUREREGHASH*, char*);
  void Insert(struct SIMPLETEXTUREREGHASH*, unsigned int, char*);
  void Insert(struct SIMPLETEXTUREREGHASH*, unsigned int, class HASHKEY_STR&);
  struct SIMPLETEXTUREREGHASH* New(char*, unsigned long, unsigned long);
  struct SIMPLETEXTUREREGHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct SIMPLETEXTUREREGHASH* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct SIMPLETEXTUREREGHASH* Next(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Next(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Prev(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Prev(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Ptr(char*);
  struct SIMPLETEXTUREREGHASH* Ptr(char*);
  struct SIMPLETEXTUREREGHASH* Ptr(unsigned int, char*);
  struct SIMPLETEXTUREREGHASH* Ptr(unsigned int, char*);
  struct SIMPLETEXTUREREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLETEXTUREREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLETEXTUREREGHASH* RawNext(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* RawNext(struct SIMPLETEXTUREREGHASH*);
  struct SIMPLETEXTUREREGHASH* Tail();
  struct SIMPLETEXTUREREGHASH* Tail();
  void Unlink(struct SIMPLETEXTUREREGHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLETEXTUREREGHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct SIMPLETEXTUREREGHASH* TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SIMPLETEXTUREREGHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SIMPLETEXTUREREGHASH,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::InternalClear(/*<regrel ebp+0x8>*/ /*|0x4|*/ int warn);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct SIMPLEFONTSTRINGREGHASH*, unsigned int);
  struct SIMPLEFONTSTRINGREGHASH* TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>();
  void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>(class TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>&);
  class TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>& operator=(class TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* DeleteNode(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Head();
  struct SIMPLEFONTSTRINGREGHASH* Head();
  void Insert(struct SIMPLEFONTSTRINGREGHASH*, char*);
  void Insert(struct SIMPLEFONTSTRINGREGHASH*, unsigned int, char*);
  void Insert(struct SIMPLEFONTSTRINGREGHASH*, unsigned int, class HASHKEY_STR&);
  struct SIMPLEFONTSTRINGREGHASH* New(char*, unsigned long, unsigned long);
  struct SIMPLEFONTSTRINGREGHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct SIMPLEFONTSTRINGREGHASH* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct SIMPLEFONTSTRINGREGHASH* Next(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Next(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Prev(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Prev(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(char*);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(char*);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(unsigned int, char*);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(unsigned int, char*);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLEFONTSTRINGREGHASH* Ptr(unsigned int, class HASHKEY_STR&);
  struct SIMPLEFONTSTRINGREGHASH* RawNext(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* RawNext(struct SIMPLEFONTSTRINGREGHASH*);
  struct SIMPLEFONTSTRINGREGHASH* Tail();
  struct SIMPLEFONTSTRINGREGHASH* Tail();
  void Unlink(struct SIMPLEFONTSTRINGREGHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SIMPLEFONTSTRINGREGHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct SIMPLEFONTSTRINGREGHASH* TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SIMPLEFONTSTRINGREGHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<SIMPLEFONTSTRINGREGHASH,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<FrameScriptObject_Variable,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<FrameScriptObject_Variable,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct FrameScriptObject_Variable*, unsigned int);
  struct FrameScriptObject_Variable* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>();
  void TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>(class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>&);
  class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>& operator=(class TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* DeleteNode(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Head();
  struct FrameScriptObject_Variable* Head();
  void Insert(struct FrameScriptObject_Variable*, char*);
  void Insert(struct FrameScriptObject_Variable*, unsigned int, char*);
  void Insert(struct FrameScriptObject_Variable*, unsigned int, class HASHKEY_STR&);
  struct FrameScriptObject_Variable* New(char*, unsigned long, unsigned long);
  struct FrameScriptObject_Variable* New(unsigned int, char*, unsigned long, unsigned long);
  struct FrameScriptObject_Variable* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  struct FrameScriptObject_Variable* Next(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Next(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Prev(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Prev(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Ptr(char*);
  struct FrameScriptObject_Variable* Ptr(char*);
  struct FrameScriptObject_Variable* Ptr(unsigned int, char*);
  struct FrameScriptObject_Variable* Ptr(unsigned int, char*);
  struct FrameScriptObject_Variable* Ptr(unsigned int, class HASHKEY_STR&);
  struct FrameScriptObject_Variable* Ptr(unsigned int, class HASHKEY_STR&);
  struct FrameScriptObject_Variable* RawNext(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* RawNext(struct FrameScriptObject_Variable*);
  struct FrameScriptObject_Variable* Tail();
  struct FrameScriptObject_Variable* Tail();
  void Unlink(struct FrameScriptObject_Variable*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct FrameScriptObject_Variable* ptr);
  virtual /*<vtableoff 0x4>*/ struct FrameScriptObject_Variable* TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<FrameScriptObject_Variable,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<FrameScriptObject_Variable,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<EventReg,HASHKEY_NONE> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<EventReg,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<EventReg,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<EventReg,HASHKEY_NONE>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct EventReg*, unsigned int);
  struct EventReg* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<EventReg,HASHKEY_NONE>& NonConst();
  int GetLinkOffset();
  void TSHashTable<EventReg,HASHKEY_NONE>();
  void TSHashTable<EventReg,HASHKEY_NONE>(class TSHashTable<EventReg,HASHKEY_NONE>&);
  class TSHashTable<EventReg,HASHKEY_NONE>& operator=(class TSHashTable<EventReg,HASHKEY_NONE>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_NONE&);
  void Delete(struct EventReg*);
  struct EventReg* DeleteNode(struct EventReg*);
  struct EventReg* Head();
  struct EventReg* Head();
  void Insert(struct EventReg*, char*);
  void Insert(struct EventReg*, unsigned int, char*);
  void Insert(struct EventReg*, unsigned int, class HASHKEY_NONE&);
  struct EventReg* New(char*, unsigned long, unsigned long);
  struct EventReg* New(unsigned int, char*, unsigned long, unsigned long);
  struct EventReg* New(unsigned int, class HASHKEY_NONE&, unsigned long, unsigned long);
  struct EventReg* Next(struct EventReg*);
  struct EventReg* Next(struct EventReg*);
  struct EventReg* Prev(struct EventReg*);
  struct EventReg* Prev(struct EventReg*);
  struct EventReg* Ptr(char*);
  struct EventReg* Ptr(char*);
  struct EventReg* Ptr(unsigned int, char*);
  struct EventReg* Ptr(unsigned int, char*);
  struct EventReg* Ptr(unsigned int, class HASHKEY_NONE&);
  struct EventReg* Ptr(unsigned int, class HASHKEY_NONE&);
  struct EventReg* RawNext(struct EventReg*);
  struct EventReg* RawNext(struct EventReg*);
  struct EventReg* Tail();
  struct EventReg* Tail();
  void Unlink(struct EventReg*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<EventReg,HASHKEY_NONE>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct EventReg* ptr);
  virtual /*<vtableoff 0x4>*/ struct EventReg* TSHashTable<EventReg,HASHKEY_NONE>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<EventReg,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<EventReg,HASHKEY_NONE>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<EventReg,HASHKEY_NONE>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CStringRep,HASHKEY_STR> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CStringRep,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CStringRep,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CStringRep,HASHKEY_STR>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(class CStringRep*, unsigned int);
  class CStringRep* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CStringRep,HASHKEY_STR>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CStringRep,HASHKEY_STR>();
  void TSHashTable<CStringRep,HASHKEY_STR>(class TSHashTable<CStringRep,HASHKEY_STR>&);
  class TSHashTable<CStringRep,HASHKEY_STR>& operator=(class TSHashTable<CStringRep,HASHKEY_STR>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STR&);
  void Delete(class CStringRep*);
  class CStringRep* DeleteNode(class CStringRep*);
  class CStringRep* Head();
  class CStringRep* Head();
  void Insert(class CStringRep*, char*);
  void Insert(class CStringRep*, unsigned int, char*);
  void Insert(class CStringRep*, unsigned int, class HASHKEY_STR&);
  class CStringRep* New(char*, unsigned long, unsigned long);
  class CStringRep* New(unsigned int, char*, unsigned long, unsigned long);
  class CStringRep* New(unsigned int, class HASHKEY_STR&, unsigned long, unsigned long);
  class CStringRep* Next(class CStringRep*);
  class CStringRep* Next(class CStringRep*);
  class CStringRep* Prev(class CStringRep*);
  class CStringRep* Prev(class CStringRep*);
  class CStringRep* Ptr(char*);
  class CStringRep* Ptr(char*);
  class CStringRep* Ptr(unsigned int, char*);
  class CStringRep* Ptr(unsigned int, char*);
  class CStringRep* Ptr(unsigned int, class HASHKEY_STR&);
  class CStringRep* Ptr(unsigned int, class HASHKEY_STR&);
  class CStringRep* RawNext(class CStringRep*);
  class CStringRep* RawNext(class CStringRep*);
  class CStringRep* Tail();
  class CStringRep* Tail();
  void Unlink(class CStringRep*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CStringRep,HASHKEY_STR>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStringRep* ptr);
  virtual /*<vtableoff 0x4>*/ class CStringRep* TSHashTable<CStringRep,HASHKEY_STR>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CStringRep,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CStringRep,HASHKEY_STR>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CStringRep,HASHKEY_STR>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<PrefetchNode,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<PrefetchNode,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<PrefetchNode,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<PrefetchNode,HASHKEY_STRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void TSHashTable<PrefetchNode,HASHKEY_STRI>::InternalLinkNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PrefetchNode* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int hashval);
  struct PrefetchNode* TSHashTable<PrefetchNode,HASHKEY_STRI>::InternalNewNode(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int hashval, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  class TSHashTable<PrefetchNode,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<PrefetchNode,HASHKEY_STRI>();
  void TSHashTable<PrefetchNode,HASHKEY_STRI>(class TSHashTable<PrefetchNode,HASHKEY_STRI>&);
  class TSHashTable<PrefetchNode,HASHKEY_STRI>& operator=(class TSHashTable<PrefetchNode,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct PrefetchNode*);
  struct PrefetchNode* DeleteNode(struct PrefetchNode*);
  struct PrefetchNode* Head();
  struct PrefetchNode* Head();
  void Insert(struct PrefetchNode*, char*);
  void Insert(struct PrefetchNode*, unsigned int, char*);
  void Insert(struct PrefetchNode*, unsigned int, class HASHKEY_STRI&);
  struct PrefetchNode* New(char*, unsigned long, unsigned long);
  struct PrefetchNode* New(unsigned int, char*, unsigned long, unsigned long);
  struct PrefetchNode* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct PrefetchNode* Next(struct PrefetchNode*);
  struct PrefetchNode* Next(struct PrefetchNode*);
  struct PrefetchNode* Prev(struct PrefetchNode*);
  struct PrefetchNode* Prev(struct PrefetchNode*);
  struct PrefetchNode* Ptr(char*);
  struct PrefetchNode* TSHashTable<PrefetchNode,HASHKEY_STRI>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  struct PrefetchNode* Ptr(unsigned int, char*);
  struct PrefetchNode* Ptr(unsigned int, char*);
  struct PrefetchNode* Ptr(unsigned int, class HASHKEY_STRI&);
  struct PrefetchNode* Ptr(unsigned int, class HASHKEY_STRI&);
  struct PrefetchNode* RawNext(struct PrefetchNode*);
  struct PrefetchNode* RawNext(struct PrefetchNode*);
  struct PrefetchNode* Tail();
  struct PrefetchNode* Tail();
  void Unlink(struct PrefetchNode*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<PrefetchNode,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct PrefetchNode* ptr);
  virtual /*<vtableoff 0x4>*/ struct PrefetchNode* TSHashTable<PrefetchNode,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<PrefetchNode,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<PrefetchNode,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<PrefetchNode,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<UncachableNode,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<UncachableNode,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<UncachableNode,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<UncachableNode,HASHKEY_STRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct UncachableNode*, unsigned int);
  struct UncachableNode* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<UncachableNode,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<UncachableNode,HASHKEY_STRI>();
  void TSHashTable<UncachableNode,HASHKEY_STRI>(class TSHashTable<UncachableNode,HASHKEY_STRI>&);
  class TSHashTable<UncachableNode,HASHKEY_STRI>& operator=(class TSHashTable<UncachableNode,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct UncachableNode*);
  struct UncachableNode* DeleteNode(struct UncachableNode*);
  struct UncachableNode* Head();
  struct UncachableNode* Head();
  void Insert(struct UncachableNode*, char*);
  void Insert(struct UncachableNode*, unsigned int, char*);
  void Insert(struct UncachableNode*, unsigned int, class HASHKEY_STRI&);
  struct UncachableNode* New(char*, unsigned long, unsigned long);
  struct UncachableNode* New(unsigned int, char*, unsigned long, unsigned long);
  struct UncachableNode* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct UncachableNode* Next(struct UncachableNode*);
  struct UncachableNode* Next(struct UncachableNode*);
  struct UncachableNode* Prev(struct UncachableNode*);
  struct UncachableNode* Prev(struct UncachableNode*);
  struct UncachableNode* Ptr(char*);
  struct UncachableNode* Ptr(char*);
  struct UncachableNode* Ptr(unsigned int, char*);
  struct UncachableNode* Ptr(unsigned int, char*);
  struct UncachableNode* Ptr(unsigned int, class HASHKEY_STRI&);
  struct UncachableNode* Ptr(unsigned int, class HASHKEY_STRI&);
  struct UncachableNode* RawNext(struct UncachableNode*);
  struct UncachableNode* RawNext(struct UncachableNode*);
  struct UncachableNode* Tail();
  struct UncachableNode* Tail();
  void Unlink(struct UncachableNode*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<UncachableNode,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct UncachableNode* ptr);
  virtual /*<vtableoff 0x4>*/ struct UncachableNode* TSHashTable<UncachableNode,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<UncachableNode,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<UncachableNode,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<UncachableNode,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<ANIMHASH,HASHKEY_STRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<ANIMHASH,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<ANIMHASH,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void TSHashTable<ANIMHASH,HASHKEY_STRI>::GrowListArray(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int newarraysize);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int MonitorFullness(unsigned int);
  void InternalLinkNode(struct ANIMHASH*, unsigned int);
  struct ANIMHASH* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<ANIMHASH,HASHKEY_STRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<ANIMHASH,HASHKEY_STRI>();
  void TSHashTable<ANIMHASH,HASHKEY_STRI>(class TSHashTable<ANIMHASH,HASHKEY_STRI>&);
  class TSHashTable<ANIMHASH,HASHKEY_STRI>& operator=(class TSHashTable<ANIMHASH,HASHKEY_STRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_STRI&);
  void Delete(struct ANIMHASH*);
  struct ANIMHASH* DeleteNode(struct ANIMHASH*);
  struct ANIMHASH* Head();
  struct ANIMHASH* Head();
  void Insert(struct ANIMHASH*, char*);
  void Insert(struct ANIMHASH*, unsigned int, char*);
  void Insert(struct ANIMHASH*, unsigned int, class HASHKEY_STRI&);
  struct ANIMHASH* New(char*, unsigned long, unsigned long);
  struct ANIMHASH* New(unsigned int, char*, unsigned long, unsigned long);
  struct ANIMHASH* New(unsigned int, class HASHKEY_STRI&, unsigned long, unsigned long);
  struct ANIMHASH* Next(struct ANIMHASH*);
  struct ANIMHASH* Next(struct ANIMHASH*);
  struct ANIMHASH* Prev(struct ANIMHASH*);
  struct ANIMHASH* Prev(struct ANIMHASH*);
  struct ANIMHASH* Ptr(char*);
  struct ANIMHASH* Ptr(char*);
  struct ANIMHASH* Ptr(unsigned int, char*);
  struct ANIMHASH* Ptr(unsigned int, char*);
  struct ANIMHASH* Ptr(unsigned int, class HASHKEY_STRI&);
  struct ANIMHASH* Ptr(unsigned int, class HASHKEY_STRI&);
  struct ANIMHASH* RawNext(struct ANIMHASH*);
  struct ANIMHASH* RawNext(struct ANIMHASH*);
  struct ANIMHASH* Tail();
  struct ANIMHASH* Tail();
  void Unlink(struct ANIMHASH*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<ANIMHASH,HASHKEY_STRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct ANIMHASH* ptr);
  virtual /*<vtableoff 0x4>*/ struct ANIMHASH* TSHashTable<ANIMHASH,HASHKEY_STRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<ANIMHASH,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<ANIMHASH,HASHKEY_STRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<ANIMHASH,HASHKEY_STRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>

class TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0xc|*/ class TSExplicitList<CAnimNameHash,-572662307> m_fulllist;
  /*<thisrel this+0x10>*/ /*|0x4|*/ unsigned int m_fullnessIndicator;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<TSExplicitList<CAnimNameHash,-572662307> > m_slotlistarray;
  /*<thisrel this+0x28>*/ /*|0x4|*/ unsigned int m_slotmask;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static unsigned int __fastcall Hash(char*);

  // non-virtual functions --------------------------
  unsigned int ComputeSlot(unsigned int);
  void GrowListArray(unsigned int);
  void Initialize();
  int Initialized();
  void InternalClear(int);
  int TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>::MonitorFullness(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int slot);
  void InternalLinkNode(struct CAnimNameHash*, unsigned int);
  struct CAnimNameHash* InternalNewNode(unsigned int, unsigned long, unsigned long);
  class TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>& NonConst();
  int GetLinkOffset();
  void TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>();
  void TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>(class TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>&);
  class TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>& operator=(class TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>&);
  void Clear();
  void Delete(char*);
  void Delete(unsigned int, char*);
  void Delete(unsigned int, class HASHKEY_CONSTSTRI&);
  void Delete(struct CAnimNameHash*);
  struct CAnimNameHash* DeleteNode(struct CAnimNameHash*);
  struct CAnimNameHash* Head();
  struct CAnimNameHash* Head();
  void Insert(struct CAnimNameHash*, char*);
  void Insert(struct CAnimNameHash*, unsigned int, char*);
  void Insert(struct CAnimNameHash*, unsigned int, class HASHKEY_CONSTSTRI&);
  struct CAnimNameHash* New(char*, unsigned long, unsigned long);
  struct CAnimNameHash* New(unsigned int, char*, unsigned long, unsigned long);
  struct CAnimNameHash* New(unsigned int, class HASHKEY_CONSTSTRI&, unsigned long, unsigned long);
  struct CAnimNameHash* Next(struct CAnimNameHash*);
  struct CAnimNameHash* Next(struct CAnimNameHash*);
  struct CAnimNameHash* Prev(struct CAnimNameHash*);
  struct CAnimNameHash* Prev(struct CAnimNameHash*);
  struct CAnimNameHash* Ptr(char*);
  struct CAnimNameHash* TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ char* str);
  struct CAnimNameHash* Ptr(unsigned int, char*);
  struct CAnimNameHash* Ptr(unsigned int, char*);
  struct CAnimNameHash* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct CAnimNameHash* Ptr(unsigned int, class HASHKEY_CONSTSTRI&);
  struct CAnimNameHash* RawNext(struct CAnimNameHash*);
  struct CAnimNameHash* RawNext(struct CAnimNameHash*);
  struct CAnimNameHash* Tail();
  struct CAnimNameHash* Tail();
  void Unlink(struct CAnimNameHash*);
  void SetTableSize(unsigned int);
  float GetAverageBinDepth();
  unsigned int GetPeakBinDepth();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CAnimNameHash* ptr);
  virtual /*<vtableoff 0x4>*/ struct CAnimNameHash* TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CAnimNameHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x8>*/ void ~TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>();
  virtual /*<vtableoff 0xc>*/ void TSHashTable<CAnimNameHash,HASHKEY_CONSTSTRI>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x2c>


}

{ // TSHashTableReuse - 11

class TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1> : class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<SoundFileObjectCacheNode,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<SoundFileObjectCacheNode,HASHKEY_NONE>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<SoundFileObjectCacheNode,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>(class TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>&);
  void TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>();
  class TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>& operator=(class TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileObjectCacheNode* ptr);
  virtual /*<vtableoff 0x0>*/ struct SoundFileObjectCacheNode* TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SoundFileObjectCacheNode,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<SoundFileObjectCacheNode,HASHKEY_NONE,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1> : class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CTextureHash,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CTextureHash,HASHKEY_TEXTUREFILE>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CTextureHash,HASHKEY_TEXTUREFILE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>(class TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>&);
  void TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>();
  class TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>& operator=(class TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CTextureHash* ptr);
  virtual /*<vtableoff 0x0>*/ struct CTextureHash* TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CTextureHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CTextureHash,HASHKEY_TEXTUREFILE,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1> : class TSHashTable<CGxVertexShader,HASHKEY_STRI>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CGxVertexShader,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CGxVertexShader,HASHKEY_STRI>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CGxVertexShader,HASHKEY_STRI>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>::Destructor();
  void TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>(class TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>&);
  void TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>();
  class TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>& operator=(class TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxVertexShader* ptr);
  virtual /*<vtableoff 0x0>*/ class CGxVertexShader* TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxVertexShader,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CGxVertexShader,HASHKEY_STRI,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<RGN,HASHKEY_NONE,1> : class TSHashTable<RGN,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<RGN,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<RGN,HASHKEY_NONE>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<RGN,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashTableReuse<RGN,HASHKEY_NONE,1>::Destructor();
  void TSHashTableReuse<RGN,HASHKEY_NONE,1>(class TSHashTableReuse<RGN,HASHKEY_NONE,1>&);
  void TSHashTableReuse<RGN,HASHKEY_NONE,1>::TSHashTableReuse<RGN,HASHKEY_NONE,1>();
  class TSHashTableReuse<RGN,HASHKEY_NONE,1>& operator=(class TSHashTableReuse<RGN,HASHKEY_NONE,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<RGN,HASHKEY_NONE,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  virtual /*<vtableoff 0x0>*/ struct RGN* TSHashTableReuse<RGN,HASHKEY_NONE,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<RGN,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<RGN,HASHKEY_NONE,1>::~TSHashTableReuse<RGN,HASHKEY_NONE,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<RGN,HASHKEY_NONE,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSExportTableSimple<RGN,HSRGN__ *,1> : class TSHashTableReuse<RGN,HASHKEY_NONE,1>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x48>*/ /*|0x1|*/ class HASHKEY_NONE m_key;
  /*<thisrel this+0x4c>*/ /*|0x4|*/ unsigned int m_sequence;
  /*<thisrel this+0x50>*/ /*|0x4|*/ int m_wrapped;

  // base classes -----------------------------------
  // baseclass class TSHashTableReuse<RGN,HASHKEY_NONE,1>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct HSRGN__* TSExportTableSimple<RGN,HSRGN__ *,1>::GenerateUniqueHandle();
  void TSExportTableSimple<RGN,HSRGN__ *,1>(class TSExportTableSimple<RGN,HSRGN__ *,1>&);
  void TSExportTableSimple<RGN,HSRGN__ *,1>::TSExportTableSimple<RGN,HSRGN__ *,1>();
  void Delete(struct HSRGN__*);
  void TSExportTableSimple<RGN,HSRGN__ *,1>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr);
  struct RGN* TSExportTableSimple<RGN,HSRGN__ *,1>::New(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSRGN__** handle);
  struct RGN* TSExportTableSimple<RGN,HSRGN__ *,1>::Ptr(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSRGN__* handle);
  class TSExportTableSimple<RGN,HSRGN__ *,1>& operator=(class TSExportTableSimple<RGN,HSRGN__ *,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSExportTableSimple<RGN,HSRGN__ *,1>::~TSExportTableSimple<RGN,HSRGN__ *,1>();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x54>

class TSHashTableReuse<CLightList,HASHKEY_DWORD,1> : class TSHashTable<CLightList,HASHKEY_DWORD>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CLightList,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CLightList,HASHKEY_DWORD>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CLightList,HASHKEY_DWORD>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<CLightList,HASHKEY_DWORD,1>(class TSHashTableReuse<CLightList,HASHKEY_DWORD,1>&);
  void TSHashTableReuse<CLightList,HASHKEY_DWORD,1>();
  class TSHashTableReuse<CLightList,HASHKEY_DWORD,1>& operator=(class TSHashTableReuse<CLightList,HASHKEY_DWORD,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CLightList,HASHKEY_DWORD,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLightList* ptr);
  virtual /*<vtableoff 0x0>*/ struct CLightList* TSHashTableReuse<CLightList,HASHKEY_DWORD,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CLightList,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CLightList,HASHKEY_DWORD,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CLightList,HASHKEY_DWORD,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1> : class TSHashTable<CGxPixelShader,HASHKEY_STRI>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CGxPixelShader,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CGxPixelShader,HASHKEY_STRI>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CGxPixelShader,HASHKEY_STRI>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>::Destructor();
  void TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>(class TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>&);
  void TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>();
  class TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>& operator=(class TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGxPixelShader* ptr);
  virtual /*<vtableoff 0x0>*/ class CGxPixelShader* TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CGxPixelShader,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CGxPixelShader,HASHKEY_STRI,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1> : class TSHashTable<CSolidTextureHash,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CSolidTextureHash,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CSolidTextureHash,HASHKEY_NONE>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CSolidTextureHash,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>(class TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>&);
  void TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>();
  class TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>& operator=(class TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSolidTextureHash* ptr);
  virtual /*<vtableoff 0x0>*/ struct CSolidTextureHash* TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CSolidTextureHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CSolidTextureHash,HASHKEY_NONE,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1> : class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<OsNet::NETSELSOCKPTR,HASHKEY_NONE>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<OsNet::NETSELSOCKPTR,HASHKEY_NONE>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>(class TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>&);
  void TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>::TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>();
  class TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>& operator=(class TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct OsNet::NETSELSOCKPTR* ptr);
  virtual /*<vtableoff 0x0>*/ struct OsNet::NETSELSOCKPTR* TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<OsNet::NETSELSOCKPTR,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>::~TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<OsNet::NETSELSOCKPTR,HASHKEY_NONE,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1> : class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<SoundFileDataCacheBlock,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<SoundFileDataCacheBlock,HASHKEY_LONGLONG>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<SoundFileDataCacheBlock,HASHKEY_LONGLONG>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>(class TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>&);
  void TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>();
  class TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>& operator=(class TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct SoundFileDataCacheBlock* ptr);
  virtual /*<vtableoff 0x0>*/ struct SoundFileDataCacheBlock* TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<SoundFileDataCacheBlock,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<SoundFileDataCacheBlock,HASHKEY_LONGLONG,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>

class TSHashTableReuse<CModelHash,CHashKeyFilePath,1> : class TSHashTable<CModelHash,CHashKeyFilePath>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x2c>*/ /*|0xc|*/ class TSExplicitList<CModelHash,-572662307> m_reuseList;
  /*<thisrel this+0x38>*/ /*|0x4|*/ unsigned long m_chunkSize;
  /*<thisrel this+0x3c>*/ /*|0xc|*/ class TSExplicitList<TSHashObjectChunk<CModelHash,CHashKeyFilePath>,20> m_chunkList;

  // base classes -----------------------------------
  // baseclass class TSHashTable<CModelHash,CHashKeyFilePath>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Destructor();
  void TSHashTableReuse<CModelHash,CHashKeyFilePath,1>(class TSHashTableReuse<CModelHash,CHashKeyFilePath,1>&);
  void TSHashTableReuse<CModelHash,CHashKeyFilePath,1>();
  class TSHashTableReuse<CModelHash,CHashKeyFilePath,1>& operator=(class TSHashTableReuse<CModelHash,CHashKeyFilePath,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CModelHash,CHashKeyFilePath,1>::InternalDelete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CModelHash* ptr);
  virtual /*<vtableoff 0x0>*/ struct CModelHash* TSHashTableReuse<CModelHash,CHashKeyFilePath,1>::InternalNew(/*<regrel ebp+0x8>*/ /*|0x4|*/ class TSExplicitList<CModelHash,-572662307>* listptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned long extrabytes, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long flags);
  virtual /*<vtableoff 0x0>*/ void ~TSHashTableReuse<CModelHash,CHashKeyFilePath,1>();
  virtual /*<vtableoff 0x0>*/ void TSHashTableReuse<CModelHash,CHashKeyFilePath,1>::Destroy();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x48>


}

{ // DBCache - 10

class DBCache<NPCText,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<NPCText,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<NPCText,int,HASHKEY_INT>(class DBCache<NPCText,int,HASHKEY_INT>&);
  void DBCache<NPCText,int,HASHKEY_INT>::DBCache<NPCText,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<NPCText,int,HASHKEY_INT>::~DBCache<NPCText,int,HASHKEY_INT>();
  class NPCText* DBCache<NPCText,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<NPCText,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<NPCText,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<NPCText,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NPCText* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<NPCText,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<NPCText,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<NPCText,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<NPCText,int,HASHKEY_INT>::Load();
  void DBCache<NPCText,int,HASHKEY_INT>::Save();
  void DBCache<NPCText,int,HASHKEY_INT>::Clear();
  void DBCache<NPCText,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<NPCText,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<NPCText,int,HASHKEY_INT>& operator=(class DBCache<NPCText,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<PetNameCache,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<PetNameCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<PetNameCache,int,HASHKEY_INT>(class DBCache<PetNameCache,int,HASHKEY_INT>&);
  void DBCache<PetNameCache,int,HASHKEY_INT>::DBCache<PetNameCache,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<PetNameCache,int,HASHKEY_INT>::~DBCache<PetNameCache,int,HASHKEY_INT>();
  class PetNameCache* DBCache<PetNameCache,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<PetNameCache,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<PetNameCache,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<PetNameCache,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class PetNameCache* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<PetNameCache,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<PetNameCache,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<PetNameCache,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<PetNameCache,int,HASHKEY_INT>::Load();
  void DBCache<PetNameCache,int,HASHKEY_INT>::Save();
  void DBCache<PetNameCache,int,HASHKEY_INT>::Clear();
  void DBCache<PetNameCache,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<PetNameCache,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<PetNameCache,int,HASHKEY_INT>& operator=(class DBCache<PetNameCache,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<GameObjectStats_C,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>(class DBCache<GameObjectStats_C,int,HASHKEY_INT>&);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::DBCache<GameObjectStats_C,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::~DBCache<GameObjectStats_C,int,HASHKEY_INT>();
  class GameObjectStats_C* DBCache<GameObjectStats_C,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class GameObjectStats_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::Load();
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::Save();
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::Clear();
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<GameObjectStats_C,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<GameObjectStats_C,int,HASHKEY_INT>& operator=(class DBCache<GameObjectStats_C,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<CreatureStats_C,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<CreatureStats_C,int,HASHKEY_INT>(class DBCache<CreatureStats_C,int,HASHKEY_INT>&);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::DBCache<CreatureStats_C,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::~DBCache<CreatureStats_C,int,HASHKEY_INT>();
  class CreatureStats_C* DBCache<CreatureStats_C,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CreatureStats_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::Load();
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::Save();
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::Clear();
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<CreatureStats_C,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<CreatureStats_C,int,HASHKEY_INT>& operator=(class DBCache<CreatureStats_C,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<QuestCache,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<QuestCache,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<QuestCache,int,HASHKEY_INT>(class DBCache<QuestCache,int,HASHKEY_INT>&);
  void DBCache<QuestCache,int,HASHKEY_INT>::DBCache<QuestCache,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<QuestCache,int,HASHKEY_INT>::~DBCache<QuestCache,int,HASHKEY_INT>();
  class QuestCache* DBCache<QuestCache,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<QuestCache,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<QuestCache,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<QuestCache,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class QuestCache* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<QuestCache,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<QuestCache,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<QuestCache,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<QuestCache,int,HASHKEY_INT>::Load();
  void DBCache<QuestCache,int,HASHKEY_INT>::Save();
  void DBCache<QuestCache,int,HASHKEY_INT>::Clear();
  void DBCache<QuestCache,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<QuestCache,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<QuestCache,int,HASHKEY_INT>& operator=(class DBCache<QuestCache,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<PageTextCache_C,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<PageTextCache_C,int,HASHKEY_INT>(class DBCache<PageTextCache_C,int,HASHKEY_INT>&);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::DBCache<PageTextCache_C,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::~DBCache<PageTextCache_C,int,HASHKEY_INT>();
  class PageTextCache_C* DBCache<PageTextCache_C,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class PageTextCache_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::Load();
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::Save();
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::Clear();
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<PageTextCache_C,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<PageTextCache_C,int,HASHKEY_INT>& operator=(class DBCache<PageTextCache_C,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<CGPetition,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<CGPetition,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<CGPetition,int,HASHKEY_INT>(class DBCache<CGPetition,int,HASHKEY_INT>&);
  void DBCache<CGPetition,int,HASHKEY_INT>::DBCache<CGPetition,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<CGPetition,int,HASHKEY_INT>::~DBCache<CGPetition,int,HASHKEY_INT>();
  class CGPetition* DBCache<CGPetition,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<CGPetition,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<CGPetition,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<CGPetition,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPetition* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<CGPetition,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<CGPetition,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<CGPetition,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<CGPetition,int,HASHKEY_INT>::Load();
  void DBCache<CGPetition,int,HASHKEY_INT>::Save();
  void DBCache<CGPetition,int,HASHKEY_INT>::Clear();
  void DBCache<CGPetition,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<CGPetition,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<CGPetition,int,HASHKEY_INT>& operator=(class DBCache<CGPetition,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<ItemStats_C,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<ItemStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<ItemStats_C,int,HASHKEY_INT>(class DBCache<ItemStats_C,int,HASHKEY_INT>&);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::DBCache<ItemStats_C,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::~DBCache<ItemStats_C,int,HASHKEY_INT>();
  class ItemStats_C* DBCache<ItemStats_C,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class ItemStats_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::Load();
  void DBCache<ItemStats_C,int,HASHKEY_INT>::Save();
  void DBCache<ItemStats_C,int,HASHKEY_INT>::Clear();
  void DBCache<ItemStats_C,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<ItemStats_C,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<ItemStats_C,int,HASHKEY_INT>& operator=(class DBCache<ItemStats_C,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<NameCache,unsigned __int64,CHashKeyGUID> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCACHEHASH,CHashKeyGUID> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>(class DBCache<NameCache,unsigned __int64,CHashKeyGUID>&);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DBCache<NameCache,unsigned __int64,CHashKeyGUID>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::~DBCache<NameCache,unsigned __int64,CHashKeyGUID>();
  class NameCache* DBCache<NameCache,unsigned __int64,CHashKeyGUID>::GetRecord(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 id, /*<regrel ebx+0x10>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebx+0x14>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebx+0x18>*/ /*|0x4|*/ void* cbArg);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::AddItem(/*<regrel ebx+0x8>*/ /*|0x4|*/ class NameCache* item, /*<regrel ebx+0xc>*/ /*|0x8|*/ unsigned __int64 key);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::AddItems(/*<regrel ebx+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebx+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::DenyItem(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 key);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::CancelCallback(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 id, /*<regrel ebx+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebx+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::Load();
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::Save();
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::Clear();
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::Invalidate(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 id);
  void DBCache<NameCache,unsigned __int64,CHashKeyGUID>::SetTemporary(/*<regrel ebx+0x8>*/ /*|0x8|*/ unsigned __int64 id);
  class DBCache<NameCache,unsigned __int64,CHashKeyGUID>& operator=(class DBCache<NameCache,unsigned __int64,CHashKeyGUID>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

class DBCache<GuildStats_C,int,HASHKEY_INT> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x2c|*/ class TSHashTable<DBCache<GuildStats_C,int,HASHKEY_INT>::DBCACHEHASH,HASHKEY_INT> m_table;
  /*<thisrel this+0x2c>*/ /*|0x4|*/ unsigned long m_fileTag;
  /*<thisrel this+0x30>*/ /*|0x4|*/ char* m_fileName;
  /*<thisrel this+0x34>*/ /*|0x4|*/ enum NETMESSAGE m_singleQueryMsg;
  /*<thisrel this+0x38>*/ /*|0x4|*/ enum NETMESSAGE m_multiQueryMsg;
  /*<thisrel this+0x3c>*/ /*|0x1|*/ unsigned char m_requireGuids;
  /*<thisrel this+0x3d>*/ /*|0x1|*/ unsigned char m_persistent;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void DBCache<GuildStats_C,int,HASHKEY_INT>(class DBCache<GuildStats_C,int,HASHKEY_INT>&);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::DBCache<GuildStats_C,int,HASHKEY_INT>(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned long fileTag, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ enum NETMESSAGE singleQuery, /*<regrel ebp+0x14>*/ /*|0x4|*/ enum NETMESSAGE multiQuery, /*<regrel ebp+0x18>*/ /*|0x1|*/ unsigned char requireGuids, /*<regrel ebp+0x1c>*/ /*|0x1|*/ unsigned char persistent);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::~DBCache<GuildStats_C,int,HASHKEY_INT>();
  class GuildStats_C* DBCache<GuildStats_C,int,HASHKEY_INT>::GetRecord(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned __int64& guid, /*<regrel ebp+0x10>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x14>*/ /*|0x4|*/ void* cbArg);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::VerifyPack(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGContainer_C* container, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::VerifyCache(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CGPlayer_C* player, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (callback*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* arg);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::AddItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ class GuildStats_C* item, /*<regrel ebp+0xc>*/ /*|0x4|*/ int key);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::AddItems(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CDataStore* msg, /*<regrel ebp+0xc>*/ /*|0x1|*/ unsigned char single);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::DenyItem(/*<regrel ebp+0x8>*/ /*|0x4|*/ int key);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::CancelCallback(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id, /*<regrel ebp+0xc>*/ /*|0x4|*/ void  (cb*)(int, unsigned __int64&, void*, unsigned char), /*<regrel ebp+0x10>*/ /*|0x4|*/ void* cbArg);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::Load();
  void DBCache<GuildStats_C,int,HASHKEY_INT>::Save();
  void DBCache<GuildStats_C,int,HASHKEY_INT>::Clear();
  void DBCache<GuildStats_C,int,HASHKEY_INT>::Invalidate(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  void DBCache<GuildStats_C,int,HASHKEY_INT>::SetTemporary(/*<regrel ebp+0x8>*/ /*|0x4|*/ int id);
  class DBCache<GuildStats_C,int,HASHKEY_INT>& operator=(class DBCache<GuildStats_C,int,HASHKEY_INT>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x40>

}

{ // WowClientDB - 108

class WowClientDB<VideoHardwareRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class VideoHardwareRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class VideoHardwareRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<VideoHardwareRec>();
  void ~WowClientDB<VideoHardwareRec>();
  void Load();
  void Reload();
  void Unload();
  class VideoHardwareRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class VideoHardwareRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AttackAnimTypesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AttackAnimTypesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AttackAnimTypesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AttackAnimTypesRec>();
  void ~WowClientDB<AttackAnimTypesRec>();
  void WowClientDB<AttackAnimTypesRec>::Load();
  void Reload();
  void Unload();
  class AttackAnimTypesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AttackAnimTypesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<DeathThudLookupsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class DeathThudLookupsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class DeathThudLookupsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<DeathThudLookupsRec>();
  void ~WowClientDB<DeathThudLookupsRec>();
  void WowClientDB<DeathThudLookupsRec>::Load();
  void Reload();
  void Unload();
  class DeathThudLookupsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class DeathThudLookupsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellEffectCameraShakesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellEffectCameraShakesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellEffectCameraShakesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellEffectCameraShakesRec>();
  void ~WowClientDB<SpellEffectCameraShakesRec>();
  void WowClientDB<SpellEffectCameraShakesRec>::Load();
  void Reload();
  void Unload();
  class SpellEffectCameraShakesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellEffectCameraShakesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AttackAnimKitsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AttackAnimKitsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AttackAnimKitsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AttackAnimKitsRec>();
  void ~WowClientDB<AttackAnimKitsRec>();
  void WowClientDB<AttackAnimKitsRec>::Load();
  void Reload();
  void Unload();
  class AttackAnimKitsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AttackAnimKitsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TaxiPathNodeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TaxiPathNodeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TaxiPathNodeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TaxiPathNodeRec>();
  void ~WowClientDB<TaxiPathNodeRec>();
  void WowClientDB<TaxiPathNodeRec>::Load();
  void Reload();
  void Unload();
  class TaxiPathNodeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TaxiPathNodeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureSoundDataRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureSoundDataRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureSoundDataRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureSoundDataRec>();
  void ~WowClientDB<CreatureSoundDataRec>();
  void WowClientDB<CreatureSoundDataRec>::Load();
  void Reload();
  void Unload();
  class CreatureSoundDataRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureSoundDataRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellVisualKitRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellVisualKitRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellVisualKitRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellVisualKitRec>();
  void ~WowClientDB<SpellVisualKitRec>();
  void WowClientDB<SpellVisualKitRec>::Load();
  void Reload();
  void Unload();
  class SpellVisualKitRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellVisualKitRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TabardEmblemTexturesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TabardEmblemTexturesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TabardEmblemTexturesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TabardEmblemTexturesRec>();
  void ~WowClientDB<TabardEmblemTexturesRec>();
  void WowClientDB<TabardEmblemTexturesRec>::Load();
  void Reload();
  void Unload();
  class TabardEmblemTexturesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TabardEmblemTexturesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TaxiPathRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TaxiPathRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TaxiPathRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TaxiPathRec>();
  void ~WowClientDB<TaxiPathRec>();
  void WowClientDB<TaxiPathRec>::Load();
  void Reload();
  void Unload();
  class TaxiPathRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TaxiPathRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellVisualEffectNameRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellVisualEffectNameRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellVisualEffectNameRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellVisualEffectNameRec>();
  void ~WowClientDB<SpellVisualEffectNameRec>();
  void WowClientDB<SpellVisualEffectNameRec>::Load();
  void Reload();
  void Unload();
  class SpellVisualEffectNameRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellVisualEffectNameRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TransportAnimationRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TransportAnimationRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TransportAnimationRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TransportAnimationRec>();
  void ~WowClientDB<TransportAnimationRec>();
  void WowClientDB<TransportAnimationRec>::Load();
  void Reload();
  void Unload();
  class TransportAnimationRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TransportAnimationRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TabardBackgroundTexturesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TabardBackgroundTexturesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TabardBackgroundTexturesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TabardBackgroundTexturesRec>();
  void ~WowClientDB<TabardBackgroundTexturesRec>();
  void WowClientDB<TabardBackgroundTexturesRec>::Load();
  void Reload();
  void Unload();
  class TabardBackgroundTexturesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TabardBackgroundTexturesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<FootprintTexturesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class FootprintTexturesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class FootprintTexturesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<FootprintTexturesRec>();
  void ~WowClientDB<FootprintTexturesRec>();
  void WowClientDB<FootprintTexturesRec>::Load();
  void Reload();
  void Unload();
  class FootprintTexturesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class FootprintTexturesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureDisplayInfoExtraRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureDisplayInfoExtraRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureDisplayInfoExtraRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureDisplayInfoExtraRec>();
  void ~WowClientDB<CreatureDisplayInfoExtraRec>();
  void WowClientDB<CreatureDisplayInfoExtraRec>::Load();
  void Reload();
  void Unload();
  class CreatureDisplayInfoExtraRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureDisplayInfoExtraRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellVisualAnimNameRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellVisualAnimNameRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellVisualAnimNameRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellVisualAnimNameRec>();
  void ~WowClientDB<SpellVisualAnimNameRec>();
  void WowClientDB<SpellVisualAnimNameRec>::Load();
  void Reload();
  void Unload();
  class SpellVisualAnimNameRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellVisualAnimNameRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureFamilyRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureFamilyRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureFamilyRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureFamilyRec>();
  void ~WowClientDB<CreatureFamilyRec>();
  void WowClientDB<CreatureFamilyRec>::Load();
  void Reload();
  void Unload();
  class CreatureFamilyRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureFamilyRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellVisualRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellVisualRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellVisualRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellVisualRec>();
  void ~WowClientDB<SpellVisualRec>();
  void WowClientDB<SpellVisualRec>::Load();
  void Reload();
  void Unload();
  class SpellVisualRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellVisualRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellVisualPrecastTransitionsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellVisualPrecastTransitionsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellVisualPrecastTransitionsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellVisualPrecastTransitionsRec>();
  void ~WowClientDB<SpellVisualPrecastTransitionsRec>();
  void WowClientDB<SpellVisualPrecastTransitionsRec>::Load();
  void Reload();
  void Unload();
  class SpellVisualPrecastTransitionsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellVisualPrecastTransitionsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<UnitBloodLevelsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class UnitBloodLevelsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class UnitBloodLevelsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<UnitBloodLevelsRec>();
  void ~WowClientDB<UnitBloodLevelsRec>();
  void WowClientDB<UnitBloodLevelsRec>::Load();
  void Reload();
  void Unload();
  class UnitBloodLevelsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class UnitBloodLevelsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<NamesProfanityRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class NamesProfanityRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NamesProfanityRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<NamesProfanityRec>();
  void ~WowClientDB<NamesProfanityRec>();
  void WowClientDB<NamesProfanityRec>::Load();
  void Reload();
  void Unload();
  class NamesProfanityRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class NamesProfanityRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<NamesReservedRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class NamesReservedRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NamesReservedRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<NamesReservedRec>();
  void ~WowClientDB<NamesReservedRec>();
  void WowClientDB<NamesReservedRec>::Load();
  void Reload();
  void Unload();
  class NamesReservedRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class NamesReservedRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AreaTriggerRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AreaTriggerRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AreaTriggerRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AreaTriggerRec>();
  void ~WowClientDB<AreaTriggerRec>();
  void WowClientDB<AreaTriggerRec>::Load();
  void Reload();
  void Unload();
  class AreaTriggerRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AreaTriggerRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<EmoteAnimsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class EmoteAnimsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class EmoteAnimsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<EmoteAnimsRec>();
  void ~WowClientDB<EmoteAnimsRec>();
  void WowClientDB<EmoteAnimsRec>::Load();
  void Reload();
  void Unload();
  class EmoteAnimsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class EmoteAnimsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<GroundEffectTextureRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class GroundEffectTextureRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class GroundEffectTextureRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<GroundEffectTextureRec>();
  void ~WowClientDB<GroundEffectTextureRec>();
  void Load();
  void Reload();
  void Unload();
  class GroundEffectTextureRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class GroundEffectTextureRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<EmotesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class EmotesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class EmotesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<EmotesRec>();
  void ~WowClientDB<EmotesRec>();
  void WowClientDB<EmotesRec>::Load();
  void Reload();
  void Unload();
  class EmotesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class EmotesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<UnitBloodRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class UnitBloodRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class UnitBloodRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<UnitBloodRec>();
  void ~WowClientDB<UnitBloodRec>();
  void WowClientDB<UnitBloodRec>::Load();
  void Reload();
  void Unload();
  class UnitBloodRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class UnitBloodRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<UISoundLookupsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class UISoundLookupsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class UISoundLookupsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<UISoundLookupsRec>();
  void ~WowClientDB<UISoundLookupsRec>();
  void WowClientDB<UISoundLookupsRec>::Load();
  void Reload();
  void Unload();
  class UISoundLookupsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class UISoundLookupsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<GroundEffectDoodadRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class GroundEffectDoodadRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class GroundEffectDoodadRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<GroundEffectDoodadRec>();
  void ~WowClientDB<GroundEffectDoodadRec>();
  void Load();
  void Reload();
  void Unload();
  class GroundEffectDoodadRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class GroundEffectDoodadRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<NPCSoundsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class NPCSoundsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NPCSoundsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<NPCSoundsRec>();
  void ~WowClientDB<NPCSoundsRec>();
  void WowClientDB<NPCSoundsRec>::Load();
  void Reload();
  void Unload();
  class NPCSoundsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class NPCSoundsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<StringLookupsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class StringLookupsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class StringLookupsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<StringLookupsRec>();
  void ~WowClientDB<StringLookupsRec>();
  void WowClientDB<StringLookupsRec>::Load();
  void Reload();
  void Unload();
  class StringLookupsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class StringLookupsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SkillLineAbilityRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SkillLineAbilityRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SkillLineAbilityRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SkillLineAbilityRec>();
  void ~WowClientDB<SkillLineAbilityRec>();
  void WowClientDB<SkillLineAbilityRec>::Load();
  void Reload();
  void Unload();
  class SkillLineAbilityRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SkillLineAbilityRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellChainEffectsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellChainEffectsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellChainEffectsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellChainEffectsRec>();
  void ~WowClientDB<SpellChainEffectsRec>();
  void WowClientDB<SpellChainEffectsRec>::Load();
  void Reload();
  void Unload();
  class SpellChainEffectsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellChainEffectsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<GameObjectDisplayInfoRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class GameObjectDisplayInfoRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class GameObjectDisplayInfoRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<GameObjectDisplayInfoRec>();
  void ~WowClientDB<GameObjectDisplayInfoRec>();
  void WowClientDB<GameObjectDisplayInfoRec>::Load();
  void Reload();
  void Unload();
  class GameObjectDisplayInfoRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class GameObjectDisplayInfoRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WMOAreaTableRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WMOAreaTableRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WMOAreaTableRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WMOAreaTableRec>();
  void ~WowClientDB<WMOAreaTableRec>();
  void WowClientDB<WMOAreaTableRec>::Load();
  void Reload();
  void Unload();
  class WMOAreaTableRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WMOAreaTableRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<LockTypeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class LockTypeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class LockTypeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<LockTypeRec>();
  void ~WowClientDB<LockTypeRec>();
  void WowClientDB<LockTypeRec>::Load();
  void Reload();
  void Unload();
  class LockTypeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class LockTypeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<LockRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class LockRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class LockRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<LockRec>();
  void ~WowClientDB<LockRec>();
  void WowClientDB<LockRec>::Load();
  void Reload();
  void Unload();
  class LockRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class LockRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureTypeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureTypeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureTypeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureTypeRec>();
  void ~WowClientDB<CreatureTypeRec>();
  void WowClientDB<CreatureTypeRec>::Load();
  void Reload();
  void Unload();
  class CreatureTypeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureTypeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellDispelTypeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellDispelTypeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellDispelTypeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellDispelTypeRec>();
  void ~WowClientDB<SpellDispelTypeRec>();
  void WowClientDB<SpellDispelTypeRec>::Load();
  void Reload();
  void Unload();
  class SpellDispelTypeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellDispelTypeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellAuraNamesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellAuraNamesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellAuraNamesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellAuraNamesRec>();
  void ~WowClientDB<SpellAuraNamesRec>();
  void WowClientDB<SpellAuraNamesRec>::Load();
  void Reload();
  void Unload();
  class SpellAuraNamesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellAuraNamesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellEffectNamesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellEffectNamesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellEffectNamesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellEffectNamesRec>();
  void ~WowClientDB<SpellEffectNamesRec>();
  void WowClientDB<SpellEffectNamesRec>::Load();
  void Reload();
  void Unload();
  class SpellEffectNamesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellEffectNamesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CameraShakesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CameraShakesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CameraShakesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CameraShakesRec>();
  void ~WowClientDB<CameraShakesRec>();
  void Load();
  void Reload();
  void Unload();
  class CameraShakesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CameraShakesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CinematicSequencesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CinematicSequencesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CinematicSequencesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CinematicSequencesRec>();
  void ~WowClientDB<CinematicSequencesRec>();
  void WowClientDB<CinematicSequencesRec>::Load();
  void Reload();
  void Unload();
  class CinematicSequencesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CinematicSequencesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CinematicCameraRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CinematicCameraRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CinematicCameraRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CinematicCameraRec>();
  void ~WowClientDB<CinematicCameraRec>();
  void WowClientDB<CinematicCameraRec>::Load();
  void Reload();
  void Unload();
  class CinematicCameraRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CinematicCameraRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<EmotesTextDataRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class EmotesTextDataRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class EmotesTextDataRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<EmotesTextDataRec>();
  void ~WowClientDB<EmotesTextDataRec>();
  void WowClientDB<EmotesTextDataRec>::Load();
  void Reload();
  void Unload();
  class EmotesTextDataRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class EmotesTextDataRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<EmotesTextRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class EmotesTextRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class EmotesTextRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<EmotesTextRec>();
  void ~WowClientDB<EmotesTextRec>();
  void WowClientDB<EmotesTextRec>::Load();
  void Reload();
  void Unload();
  class EmotesTextRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class EmotesTextRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<LanguageWordsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class LanguageWordsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class LanguageWordsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<LanguageWordsRec>();
  void ~WowClientDB<LanguageWordsRec>();
  void WowClientDB<LanguageWordsRec>::Load();
  void Reload();
  void Unload();
  class LanguageWordsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class LanguageWordsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<LanguagesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class LanguagesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class LanguagesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<LanguagesRec>();
  void ~WowClientDB<LanguagesRec>();
  void WowClientDB<LanguagesRec>::Load();
  void Reload();
  void Unload();
  class LanguagesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class LanguagesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WorldSafeLocsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WorldSafeLocsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WorldSafeLocsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WorldSafeLocsRec>();
  void ~WowClientDB<WorldSafeLocsRec>();
  void WowClientDB<WorldSafeLocsRec>::Load();
  void Reload();
  void Unload();
  class WorldSafeLocsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WorldSafeLocsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WorldMapContinentRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WorldMapContinentRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WorldMapContinentRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WorldMapContinentRec>();
  void ~WowClientDB<WorldMapContinentRec>();
  void WowClientDB<WorldMapContinentRec>::Load();
  void Reload();
  void Unload();
  class WorldMapContinentRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WorldMapContinentRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WorldMapAreaRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WorldMapAreaRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WorldMapAreaRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WorldMapAreaRec>();
  void ~WowClientDB<WorldMapAreaRec>();
  void WowClientDB<WorldMapAreaRec>::Load();
  void Reload();
  void Unload();
  class WorldMapAreaRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WorldMapAreaRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AreaPOIRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AreaPOIRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AreaPOIRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AreaPOIRec>();
  void ~WowClientDB<AreaPOIRec>();
  void WowClientDB<AreaPOIRec>::Load();
  void Reload();
  void Unload();
  class AreaPOIRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AreaPOIRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellItemEnchantmentRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellItemEnchantmentRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellItemEnchantmentRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellItemEnchantmentRec>();
  void ~WowClientDB<SpellItemEnchantmentRec>();
  void WowClientDB<SpellItemEnchantmentRec>::Load();
  void Reload();
  void Unload();
  class SpellItemEnchantmentRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellItemEnchantmentRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellCastTimesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellCastTimesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellCastTimesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellCastTimesRec>();
  void ~WowClientDB<SpellCastTimesRec>();
  void WowClientDB<SpellCastTimesRec>::Load();
  void Reload();
  void Unload();
  class SpellCastTimesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellCastTimesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<QuestInfoRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class QuestInfoRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class QuestInfoRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<QuestInfoRec>();
  void ~WowClientDB<QuestInfoRec>();
  void WowClientDB<QuestInfoRec>::Load();
  void Reload();
  void Unload();
  class QuestInfoRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class QuestInfoRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<QuestSortRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class QuestSortRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class QuestSortRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<QuestSortRec>();
  void ~WowClientDB<QuestSortRec>();
  void WowClientDB<QuestSortRec>::Load();
  void Reload();
  void Unload();
  class QuestSortRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class QuestSortRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TaxiNodesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TaxiNodesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TaxiNodesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TaxiNodesRec>();
  void ~WowClientDB<TaxiNodesRec>();
  void WowClientDB<TaxiNodesRec>::Load();
  void Reload();
  void Unload();
  class TaxiNodesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TaxiNodesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellShapeshiftFormRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellShapeshiftFormRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellShapeshiftFormRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellShapeshiftFormRec>();
  void ~WowClientDB<SpellShapeshiftFormRec>();
  void WowClientDB<SpellShapeshiftFormRec>::Load();
  void Reload();
  void Unload();
  class SpellShapeshiftFormRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellShapeshiftFormRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<PaperDollItemFrameRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class PaperDollItemFrameRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class PaperDollItemFrameRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<PaperDollItemFrameRec>();
  void ~WowClientDB<PaperDollItemFrameRec>();
  void WowClientDB<PaperDollItemFrameRec>::Load();
  void Reload();
  void Unload();
  class PaperDollItemFrameRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class PaperDollItemFrameRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ChrProficiencyRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ChrProficiencyRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ChrProficiencyRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ChrProficiencyRec>();
  void ~WowClientDB<ChrProficiencyRec>();
  void WowClientDB<ChrProficiencyRec>::Load();
  void Reload();
  void Unload();
  class ChrProficiencyRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ChrProficiencyRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<FactionRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class FactionRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class FactionRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<FactionRec>();
  void ~WowClientDB<FactionRec>();
  void WowClientDB<FactionRec>::Load();
  void Reload();
  void Unload();
  class FactionRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class FactionRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellIconRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellIconRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellIconRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellIconRec>();
  void ~WowClientDB<SpellIconRec>();
  void WowClientDB<SpellIconRec>::Load();
  void Reload();
  void Unload();
  class SpellIconRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellIconRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<BankBagSlotPricesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class BankBagSlotPricesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class BankBagSlotPricesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<BankBagSlotPricesRec>();
  void ~WowClientDB<BankBagSlotPricesRec>();
  void WowClientDB<BankBagSlotPricesRec>::Load();
  void Reload();
  void Unload();
  class BankBagSlotPricesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class BankBagSlotPricesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellFocusObjectRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellFocusObjectRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellFocusObjectRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellFocusObjectRec>();
  void ~WowClientDB<SpellFocusObjectRec>();
  void WowClientDB<SpellFocusObjectRec>::Load();
  void Reload();
  void Unload();
  class SpellFocusObjectRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellFocusObjectRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemSubClassRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemSubClassRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemSubClassRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemSubClassRec>();
  void ~WowClientDB<ItemSubClassRec>();
  void WowClientDB<ItemSubClassRec>::Load();
  void Reload();
  void Unload();
  class ItemSubClassRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemSubClassRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemClassRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemClassRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemClassRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemClassRec>();
  void ~WowClientDB<ItemClassRec>();
  void WowClientDB<ItemClassRec>::Load();
  void Reload();
  void Unload();
  class ItemClassRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemClassRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SkillLineRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SkillLineRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SkillLineRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SkillLineRec>();
  void ~WowClientDB<SkillLineRec>();
  void WowClientDB<SkillLineRec>::Load();
  void Reload();
  void Unload();
  class SkillLineRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SkillLineRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<PageTextMaterialRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class PageTextMaterialRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class PageTextMaterialRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<PageTextMaterialRec>();
  void ~WowClientDB<PageTextMaterialRec>();
  void WowClientDB<PageTextMaterialRec>::Load();
  void Reload();
  void Unload();
  class PageTextMaterialRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class PageTextMaterialRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellRangeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellRangeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellRangeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellRangeRec>();
  void ~WowClientDB<SpellRangeRec>();
  void WowClientDB<SpellRangeRec>::Load();
  void Reload();
  void Unload();
  class SpellRangeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellRangeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellDurationRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellDurationRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellDurationRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellDurationRec>();
  void ~WowClientDB<SpellDurationRec>();
  void WowClientDB<SpellDurationRec>::Load();
  void Reload();
  void Unload();
  class SpellDurationRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellDurationRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellRadiusRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellRadiusRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellRadiusRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellRadiusRec>();
  void ~WowClientDB<SpellRadiusRec>();
  void WowClientDB<SpellRadiusRec>::Load();
  void Reload();
  void Unload();
  class SpellRadiusRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellRadiusRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharHairGeosetsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharHairGeosetsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharHairGeosetsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharHairGeosetsRec>();
  void ~WowClientDB<CharHairGeosetsRec>();
  void WowClientDB<CharHairGeosetsRec>::Load();
  void Reload();
  void Unload();
  class CharHairGeosetsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharHairGeosetsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharTextureVariationsV2Rec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharTextureVariationsV2Rec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharTextureVariationsV2Rec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharTextureVariationsV2Rec>();
  void ~WowClientDB<CharTextureVariationsV2Rec>();
  void WowClientDB<CharTextureVariationsV2Rec>::Load();
  void Reload();
  void Unload();
  class CharTextureVariationsV2Rec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharTextureVariationsV2Rec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharacterFacialHairStylesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharacterFacialHairStylesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharacterFacialHairStylesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharacterFacialHairStylesRec>();
  void ~WowClientDB<CharacterFacialHairStylesRec>();
  void WowClientDB<CharacterFacialHairStylesRec>::Load();
  void Reload();
  void Unload();
  class CharacterFacialHairStylesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharacterFacialHairStylesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharVariationsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharVariationsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharVariationsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharVariationsRec>();
  void ~WowClientDB<CharVariationsRec>();
  void WowClientDB<CharVariationsRec>::Load();
  void Reload();
  void Unload();
  class CharVariationsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharVariationsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemVisualsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemVisualsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemVisualsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemVisualsRec>();
  void ~WowClientDB<ItemVisualsRec>();
  void WowClientDB<ItemVisualsRec>::Load();
  void Reload();
  void Unload();
  class ItemVisualsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemVisualsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<HelmetGeosetVisDataRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class HelmetGeosetVisDataRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class HelmetGeosetVisDataRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<HelmetGeosetVisDataRec>();
  void ~WowClientDB<HelmetGeosetVisDataRec>();
  void WowClientDB<HelmetGeosetVisDataRec>::Load();
  void Reload();
  void Unload();
  class HelmetGeosetVisDataRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class HelmetGeosetVisDataRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemVisualEffectsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemVisualEffectsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemVisualEffectsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemVisualEffectsRec>();
  void ~WowClientDB<ItemVisualEffectsRec>();
  void WowClientDB<ItemVisualEffectsRec>::Load();
  void Reload();
  void Unload();
  class ItemVisualEffectsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemVisualEffectsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharStartOutfitRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharStartOutfitRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharStartOutfitRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharStartOutfitRec>();
  void ~WowClientDB<CharStartOutfitRec>();
  void WowClientDB<CharStartOutfitRec>::Load();
  void Reload();
  void Unload();
  class CharStartOutfitRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharStartOutfitRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharBaseInfoRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharBaseInfoRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharBaseInfoRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharBaseInfoRec>();
  void ~WowClientDB<CharBaseInfoRec>();
  void WowClientDB<CharBaseInfoRec>::Load();
  void Reload();
  void Unload();
  class CharBaseInfoRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharBaseInfoRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<FactionTemplateRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class FactionTemplateRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class FactionTemplateRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<FactionTemplateRec>();
  void ~WowClientDB<FactionTemplateRec>();
  void WowClientDB<FactionTemplateRec>::Load();
  void Reload();
  void Unload();
  class FactionTemplateRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class FactionTemplateRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<FactionGroupRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class FactionGroupRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class FactionGroupRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<FactionGroupRec>();
  void ~WowClientDB<FactionGroupRec>();
  void WowClientDB<FactionGroupRec>::Load();
  void Reload();
  void Unload();
  class FactionGroupRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class FactionGroupRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CharacterCreateCamerasRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CharacterCreateCamerasRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CharacterCreateCamerasRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CharacterCreateCamerasRec>();
  void ~WowClientDB<CharacterCreateCamerasRec>();
  void WowClientDB<CharacterCreateCamerasRec>::Load();
  void Reload();
  void Unload();
  class CharacterCreateCamerasRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CharacterCreateCamerasRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureModelDataRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureModelDataRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureModelDataRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureModelDataRec>();
  void ~WowClientDB<CreatureModelDataRec>();
  void WowClientDB<CreatureModelDataRec>::Load();
  void Reload();
  void Unload();
  class CreatureModelDataRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureModelDataRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<CreatureDisplayInfoRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CreatureDisplayInfoRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CreatureDisplayInfoRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<CreatureDisplayInfoRec>();
  void ~WowClientDB<CreatureDisplayInfoRec>();
  void WowClientDB<CreatureDisplayInfoRec>::Load();
  void Reload();
  void Unload();
  class CreatureDisplayInfoRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class CreatureDisplayInfoRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AreaTableRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AreaTableRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AreaTableRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AreaTableRec>();
  void ~WowClientDB<AreaTableRec>();
  void WowClientDB<AreaTableRec>::Load();
  void Reload();
  void Unload();
  class AreaTableRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AreaTableRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ChrClassesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ChrClassesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ChrClassesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ChrClassesRec>();
  void ~WowClientDB<ChrClassesRec>();
  void WowClientDB<ChrClassesRec>::Load();
  void Reload();
  void Unload();
  class ChrClassesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ChrClassesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<FootstepTerrainLookupRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class FootstepTerrainLookupRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class FootstepTerrainLookupRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<FootstepTerrainLookupRec>();
  void ~WowClientDB<FootstepTerrainLookupRec>();
  void WowClientDB<FootstepTerrainLookupRec>::Load();
  void Reload();
  void Unload();
  class FootstepTerrainLookupRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class FootstepTerrainLookupRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemGroupSoundsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemGroupSoundsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemGroupSoundsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemGroupSoundsRec>();
  void ~WowClientDB<ItemGroupSoundsRec>();
  void WowClientDB<ItemGroupSoundsRec>::Load();
  void Reload();
  void Unload();
  class ItemGroupSoundsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemGroupSoundsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TerrainTypeSoundsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TerrainTypeSoundsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TerrainTypeSoundsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TerrainTypeSoundsRec>();
  void ~WowClientDB<TerrainTypeSoundsRec>();
  void WowClientDB<TerrainTypeSoundsRec>::Load();
  void Reload();
  void Unload();
  class TerrainTypeSoundsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TerrainTypeSoundsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<TerrainTypeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TerrainTypeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class TerrainTypeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<TerrainTypeRec>();
  void ~WowClientDB<TerrainTypeRec>();
  void WowClientDB<TerrainTypeRec>::Load();
  void Reload();
  void Unload();
  class TerrainTypeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class TerrainTypeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ItemDisplayInfoRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ItemDisplayInfoRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ItemDisplayInfoRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ItemDisplayInfoRec>();
  void ~WowClientDB<ItemDisplayInfoRec>();
  void WowClientDB<ItemDisplayInfoRec>::Load();
  void Reload();
  void Unload();
  class ItemDisplayInfoRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ItemDisplayInfoRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ResistancesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ResistancesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ResistancesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ResistancesRec>();
  void ~WowClientDB<ResistancesRec>();
  void WowClientDB<ResistancesRec>::Load();
  void Reload();
  void Unload();
  class ResistancesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ResistancesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SpellRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SpellRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SpellRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SpellRec>();
  void ~WowClientDB<SpellRec>();
  void WowClientDB<SpellRec>::Load();
  void Reload();
  void Unload();
  class SpellRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SpellRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<VocalUISoundsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class VocalUISoundsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class VocalUISoundsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<VocalUISoundsRec>();
  void ~WowClientDB<VocalUISoundsRec>();
  void WowClientDB<VocalUISoundsRec>::Load();
  void Reload();
  void Unload();
  class VocalUISoundsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class VocalUISoundsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SoundProviderPreferencesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SoundProviderPreferencesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SoundProviderPreferencesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SoundProviderPreferencesRec>();
  void ~WowClientDB<SoundProviderPreferencesRec>();
  void WowClientDB<SoundProviderPreferencesRec>::Load();
  void Reload();
  void Unload();
  class SoundProviderPreferencesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SoundProviderPreferencesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<MaterialRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class MaterialRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class MaterialRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<MaterialRec>();
  void ~WowClientDB<MaterialRec>();
  void WowClientDB<MaterialRec>::Load();
  void Reload();
  void Unload();
  class MaterialRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class MaterialRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WeaponImpactSoundsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WeaponImpactSoundsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WeaponImpactSoundsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WeaponImpactSoundsRec>();
  void ~WowClientDB<WeaponImpactSoundsRec>();
  void WowClientDB<WeaponImpactSoundsRec>::Load();
  void Reload();
  void Unload();
  class WeaponImpactSoundsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WeaponImpactSoundsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<WeaponSwingSounds2Rec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class WeaponSwingSounds2Rec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class WeaponSwingSounds2Rec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<WeaponSwingSounds2Rec>();
  void ~WowClientDB<WeaponSwingSounds2Rec>();
  void WowClientDB<WeaponSwingSounds2Rec>::Load();
  void Reload();
  void Unload();
  class WeaponSwingSounds2Rec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class WeaponSwingSounds2Rec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SoundSamplePreferencesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SoundSamplePreferencesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SoundSamplePreferencesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SoundSamplePreferencesRec>();
  void ~WowClientDB<SoundSamplePreferencesRec>();
  void WowClientDB<SoundSamplePreferencesRec>::Load();
  void Reload();
  void Unload();
  class SoundSamplePreferencesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SoundSamplePreferencesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SheatheSoundLookupsRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SheatheSoundLookupsRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SheatheSoundLookupsRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SheatheSoundLookupsRec>();
  void ~WowClientDB<SheatheSoundLookupsRec>();
  void WowClientDB<SheatheSoundLookupsRec>::Load();
  void Reload();
  void Unload();
  class SheatheSoundLookupsRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SheatheSoundLookupsRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ZoneMusicRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ZoneMusicRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ZoneMusicRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ZoneMusicRec>();
  void ~WowClientDB<ZoneMusicRec>();
  void WowClientDB<ZoneMusicRec>::Load();
  void Reload();
  void Unload();
  class ZoneMusicRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ZoneMusicRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SoundEntriesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SoundEntriesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SoundEntriesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SoundEntriesRec>();
  void ~WowClientDB<SoundEntriesRec>();
  void WowClientDB<SoundEntriesRec>::Load();
  void Reload();
  void Unload();
  class SoundEntriesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SoundEntriesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SoundWaterTypeRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SoundWaterTypeRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SoundWaterTypeRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SoundWaterTypeRec>();
  void ~WowClientDB<SoundWaterTypeRec>();
  void WowClientDB<SoundWaterTypeRec>::Load();
  void Reload();
  void Unload();
  class SoundWaterTypeRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SoundWaterTypeRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<AreaMIDIAmbiencesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class AreaMIDIAmbiencesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class AreaMIDIAmbiencesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<AreaMIDIAmbiencesRec>();
  void ~WowClientDB<AreaMIDIAmbiencesRec>();
  void WowClientDB<AreaMIDIAmbiencesRec>::Load();
  void Reload();
  void Unload();
  class AreaMIDIAmbiencesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class AreaMIDIAmbiencesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<ChrRacesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class ChrRacesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class ChrRacesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<ChrRacesRec>();
  void ~WowClientDB<ChrRacesRec>();
  void WowClientDB<ChrRacesRec>::Load();
  void Reload();
  void Unload();
  class ChrRacesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class ChrRacesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<SoundCharacterMacroLinesRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class SoundCharacterMacroLinesRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class SoundCharacterMacroLinesRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<SoundCharacterMacroLinesRec>();
  void ~WowClientDB<SoundCharacterMacroLinesRec>();
  void WowClientDB<SoundCharacterMacroLinesRec>::Load();
  void Reload();
  void Unload();
  class SoundCharacterMacroLinesRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class SoundCharacterMacroLinesRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class WowClientDB<MapRec> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class MapRec* m_records;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_numRecords;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class MapRec** m_recordsById;
  /*<thisrel this+0xc>*/ /*|0x4|*/ int m_maxID;
  /*<thisrel this+0x10>*/ /*|0x4|*/ int m_loaded;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void WowClientDB<MapRec>();
  void ~WowClientDB<MapRec>();
  void WowClientDB<MapRec>::Load();
  void Reload();
  void Unload();
  class MapRec* GetRecord(int);
  int GetMaxID();
  int GetNumRecords();
  class MapRec* GetRecordByIndex(int);
  void Free();
  void Init();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>


}

{ // CDebugLock - 2

class CDebugLock<CDebugSCritSect> : class CDebugSCritSect  {

  // static data ------------------------------------
  static /*<rva 0xcbc3e0>*/ /*|0x20|*/ class CInitCritSect s_critsect;
  static /*<rva 0xcbd804>*/ /*|0x4|*/ struct CDebugLockData* s_locks;
  static /*<rva 0xcbc400>*/ /*|0x1400|*/ struct CDebugLockEntry s_entries[256];
  static /*<rva 0xcbd800>*/ /*|0x4|*/ unsigned long s_freeEntries;

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDebugSCritSect
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDebugLock<CDebugSCritSect>::IRepairBadEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long e, /*<regrel ebp+0x8>*/ /*|0x4|*/ struct CDebugLockEntry* eptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  static void __fastcall CDebugLock<CDebugSCritSect>::Construct(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static void __fastcall CDebugLock<CDebugSCritSect>::Destruct(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static void __fastcall CDebugLock<CDebugSCritSect>::IEnter();
  static void __fastcall CDebugLock<CDebugSCritSect>::ILeave();
  static void __fastcall CDebugLock<CDebugSCritSect>::IDumpAllEntries();
  static void __fastcall CDebugLock<CDebugSCritSect>::IDumpEntries(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static unsigned long __fastcall IClashingEntry(struct CDebugLockData*, unsigned long, int);
  static unsigned long __fastcall CDebugLock<CDebugSCritSect>::IAddEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long threadId, /*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  static unsigned long __fastcall CDebugLock<CDebugSCritSect>::IDeleteEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long threadId, /*<regrel ebp+0x8>*/ /*|0x4|*/ int fromwriting);
  static void __fastcall CDebugLock<CDebugSCritSect>::IEnterEntry(/*<register ecx>*/ /*|0x4|*/ unsigned long e);

  // non-virtual functions --------------------------
  class CDebugLock<CDebugSCritSect>& operator=(class CDebugLock<CDebugSCritSect>&);
  void CDebugLock<CDebugSCritSect>(class CDebugLock<CDebugSCritSect>&);
  void ~CDebugLock<CDebugSCritSect>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x24>

class CDebugLock<CDebugSRWLock> : class CDebugSRWLock  {

  // static data ------------------------------------
  static /*<rva 0xcbafa0>*/ /*|0x20|*/ class CInitCritSect s_critsect;
  static /*<rva 0xcbc3c4>*/ /*|0x4|*/ struct CDebugLockData* s_locks;
  static /*<rva 0xcbafc0>*/ /*|0x1400|*/ struct CDebugLockEntry s_entries[256];
  static /*<rva 0xcbc3c0>*/ /*|0x4|*/ unsigned long s_freeEntries;

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDebugSRWLock
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static void __fastcall CDebugLock<CDebugSRWLock>::IRepairBadEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long e, /*<regrel ebp+0x8>*/ /*|0x4|*/ struct CDebugLockEntry* eptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  static void __fastcall CDebugLock<CDebugSRWLock>::Construct(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static void __fastcall CDebugLock<CDebugSRWLock>::Destruct(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static void __fastcall CDebugLock<CDebugSRWLock>::IEnter();
  static void __fastcall CDebugLock<CDebugSRWLock>::ILeave();
  static void __fastcall CDebugLock<CDebugSRWLock>::IDumpAllEntries();
  static void __fastcall CDebugLock<CDebugSRWLock>::IDumpEntries(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock);
  static unsigned long __fastcall CDebugLock<CDebugSRWLock>::IClashingEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long threadId, /*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting);
  static unsigned long __fastcall CDebugLock<CDebugSRWLock>::IAddEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long threadId, /*<regrel ebp+0x8>*/ /*|0x4|*/ int forwriting, /*<regrel ebp+0xc>*/ /*|0x4|*/ char* fileName, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned long line);
  static unsigned long __fastcall CDebugLock<CDebugSRWLock>::IDeleteEntry(/*<register ecx>*/ /*|0x4|*/ struct CDebugLockData* lock, /*<register edx>*/ /*|0x4|*/ unsigned long threadId, /*<regrel ebp+0x8>*/ /*|0x4|*/ int fromwriting);
  static void __fastcall CDebugLock<CDebugSRWLock>::IEnterEntry(/*<register ecx>*/ /*|0x4|*/ unsigned long e);

  // non-virtual functions --------------------------
  class CDebugLock<CDebugSRWLock>& operator=(class CDebugLock<CDebugSRWLock>&);
  void CDebugLock<CDebugSRWLock>(class CDebugLock<CDebugSRWLock>&);
  void ~CDebugLock<CDebugSRWLock>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

}

{ // CKeyFrameTrack - 5

class CKeyFrameTrack<unsigned int,unsigned int> : class CKeyFrameTrackBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum KEYTYPE m_trackType;

  // base classes -----------------------------------
  // baseclass class CKeyFrameTrackBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CKeyFrameTrack<unsigned int,unsigned int>(class CKeyFrameTrack<unsigned int,unsigned int>&);
  void CKeyFrameTrack<unsigned int,unsigned int>::CKeyFrameTrack<unsigned int,unsigned int>();
  void SetTrackType(enum KEYTYPE);
  void SetNumKeys(unsigned int);
  void AddKey(int, unsigned int&);
  void AddKey(int, unsigned int&, unsigned int&, unsigned int&);
  int InterpolateVolatile(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, unsigned int&, unsigned int*);
  int InterpolateRetained(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, unsigned int&, unsigned int*);
  unsigned int Bytes();
  enum KEYTYPE GetTrackType();
  struct CLinearKeyFrame<unsigned int>* CKeyFrameTrack<unsigned int,unsigned int>::GetLinearKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CSplineKeyFrame<unsigned int>* GetSplineKey(unsigned int);
  struct CLinearKeyFrame<unsigned int>* ToLinearKey(struct CKeyFrame*);
  struct CLinearKeyFrame<unsigned int>* ToLinearKey(struct CKeyFrame*);
  struct CSplineKeyFrame<unsigned int>* ToSplineKey(struct CKeyFrame*);
  struct CSplineKeyFrame<unsigned int>* ToSplineKey(struct CKeyFrame*);
  int InterpolateVolatileFewKeys(struct CKeyTrackStatus&, unsigned int*);
  int InterpolateRetainedFewKeys(struct CKeyTrackStatus&, unsigned int*);
  void CKeyFrameTrack<unsigned int,unsigned int>::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int seqTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ unsigned int* transform);
  void CKeyFrameTrack<unsigned int,unsigned int>::InterpolateHermite(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<unsigned int>& __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<unsigned int>& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ float __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int* __formal);
  void CKeyFrameTrack<unsigned int,unsigned int>::InterpolateBezier(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<unsigned int>& __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<unsigned int>& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ float __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int* __formal);
  void CKeyFrameTrack<unsigned int,unsigned int>::InterpolateLinear(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLinearKeyFrame<unsigned int>& __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CLinearKeyFrame<unsigned int>& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ float __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ unsigned int* __formal);
  class CKeyFrameTrack<unsigned int,unsigned int>& operator=(class CKeyFrameTrack<unsigned int,unsigned int>&);
  void ~CKeyFrameTrack<unsigned int,unsigned int>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CKeyFrameTrack<float,float> : class CKeyFrameTrackBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum KEYTYPE m_trackType;

  // base classes -----------------------------------
  // baseclass class CKeyFrameTrackBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CKeyFrameTrack<float,float>(class CKeyFrameTrack<float,float>&);
  void CKeyFrameTrack<float,float>::CKeyFrameTrack<float,float>();
  void SetTrackType(enum KEYTYPE);
  void SetNumKeys(unsigned int);
  void CKeyFrameTrack<float,float>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& keydata);
  void CKeyFrameTrack<float,float>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ float& keydata, /*<regrel ebp+0x10>*/ /*|0x4|*/ float& inTan, /*<regrel ebp+0x14>*/ /*|0x4|*/ float& outTan);
  int InterpolateVolatile(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, float&, float*);
  int InterpolateRetained(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, float&, float*);
  unsigned int Bytes();
  enum KEYTYPE GetTrackType();
  struct CLinearKeyFrame<float>* CKeyFrameTrack<float,float>::GetLinearKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CSplineKeyFrame<float>* CKeyFrameTrack<float,float>::GetSplineKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CLinearKeyFrame<float>* CKeyFrameTrack<float,float>::ToLinearKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyFrame* key);
  struct CLinearKeyFrame<float>* ToLinearKey(struct CKeyFrame*);
  struct CSplineKeyFrame<float>* CKeyFrameTrack<float,float>::ToSplineKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyFrame* key);
  struct CSplineKeyFrame<float>* ToSplineKey(struct CKeyFrame*);
  int CKeyFrameTrack<float,float>::InterpolateVolatileFewKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ float* transform);
  int CKeyFrameTrack<float,float>::InterpolateRetainedFewKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ float* transform);
  void CKeyFrameTrack<float,float>::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int seqTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ float* transform);
  void CKeyFrameTrack<float,float>::InterpolateHermite(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<float>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<float>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ float* transform);
  void CKeyFrameTrack<float,float>::InterpolateBezier(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<float>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<float>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ float* transform);
  void CKeyFrameTrack<float,float>::InterpolateLinear(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLinearKeyFrame<float>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CLinearKeyFrame<float>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ float* transform);
  class CKeyFrameTrack<float,float>& operator=(class CKeyFrameTrack<float,float>&);
  void ~CKeyFrameTrack<float,float>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CKeyFrameTrack<C3Color,C3Color> : class CKeyFrameTrackBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum KEYTYPE m_trackType;

  // base classes -----------------------------------
  // baseclass class CKeyFrameTrackBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CKeyFrameTrack<C3Color,C3Color>(class CKeyFrameTrack<C3Color,C3Color>&);
  void CKeyFrameTrack<C3Color,C3Color>();
  void SetTrackType(enum KEYTYPE);
  void SetNumKeys(unsigned int);
  void CKeyFrameTrack<C3Color,C3Color>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ class C3Color& keydata);
  void AddKey(int, class C3Color&, class C3Color&, class C3Color&);
  int InterpolateVolatile(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class C3Color&, class C3Color*);
  int InterpolateRetained(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class C3Color&, class C3Color*);
  unsigned int Bytes();
  enum KEYTYPE GetTrackType();
  struct CLinearKeyFrame<C3Color>* GetLinearKey(unsigned int);
  struct CSplineKeyFrame<C3Color>* CKeyFrameTrack<C3Color,C3Color>::GetSplineKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CLinearKeyFrame<C3Color>* ToLinearKey(struct CKeyFrame*);
  struct CLinearKeyFrame<C3Color>* ToLinearKey(struct CKeyFrame*);
  struct CSplineKeyFrame<C3Color>* ToSplineKey(struct CKeyFrame*);
  struct CSplineKeyFrame<C3Color>* ToSplineKey(struct CKeyFrame*);
  int InterpolateVolatileFewKeys(struct CKeyTrackStatus&, class C3Color*);
  int CKeyFrameTrack<C3Color,C3Color>::InterpolateRetainedFewKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ class C3Color* transform);
  void CKeyFrameTrack<C3Color,C3Color>::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int seqTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class C3Color* transform);
  void CKeyFrameTrack<C3Color,C3Color>::InterpolateHermite(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<C3Color>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<C3Color>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class C3Color* transform);
  void CKeyFrameTrack<C3Color,C3Color>::InterpolateBezier(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<C3Color>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<C3Color>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class C3Color* transform);
  void CKeyFrameTrack<C3Color,C3Color>::InterpolateLinear(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLinearKeyFrame<C3Color>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CLinearKeyFrame<C3Color>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class C3Color* transform);
  class CKeyFrameTrack<C3Color,C3Color>& operator=(class CKeyFrameTrack<C3Color,C3Color>&);
  void ~CKeyFrameTrack<C3Color,C3Color>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector> : class CKeyFrameTrackBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum KEYTYPE m_trackType;

  // base classes -----------------------------------
  // baseclass class CKeyFrameTrackBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>(class CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>&);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>();
  void SetTrackType(enum KEYTYPE);
  void SetNumKeys(unsigned int);
  void AddKey(int, class NTempest::C3Vector&);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector& keydata, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector& inTan, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector& outTan);
  int InterpolateVolatile(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class NTempest::C3Vector&, class NTempest::C3Vector*);
  int InterpolateRetained(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class NTempest::C3Vector&, class NTempest::C3Vector*);
  unsigned int Bytes();
  enum KEYTYPE GetTrackType();
  struct CLinearKeyFrame<NTempest::C3Vector>* CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::GetLinearKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CSplineKeyFrame<NTempest::C3Vector>* CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::GetSplineKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CLinearKeyFrame<NTempest::C3Vector>* ToLinearKey(struct CKeyFrame*);
  struct CLinearKeyFrame<NTempest::C3Vector>* ToLinearKey(struct CKeyFrame*);
  struct CSplineKeyFrame<NTempest::C3Vector>* ToSplineKey(struct CKeyFrame*);
  struct CSplineKeyFrame<NTempest::C3Vector>* ToSplineKey(struct CKeyFrame*);
  int CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::InterpolateVolatileFewKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Vector* transform);
  int InterpolateRetainedFewKeys(struct CKeyTrackStatus&, class NTempest::C3Vector*);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int seqTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C3Vector* transform);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::InterpolateHermite(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C3Vector>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C3Vector>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* transform);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::InterpolateBezier(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C3Vector>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C3Vector>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* transform);
  void CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>::InterpolateLinear(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLinearKeyFrame<NTempest::C3Vector>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CLinearKeyFrame<NTempest::C3Vector>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C3Vector* transform);
  class CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>& operator=(class CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>&);
  void ~CKeyFrameTrack<NTempest::C3Vector,NTempest::C3Vector>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>

class CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion> : class CKeyFrameTrackBase  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ enum KEYTYPE m_trackType;

  // base classes -----------------------------------
  // baseclass class CKeyFrameTrackBase
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>(class CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>&);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>();
  void SetTrackType(enum KEYTYPE);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::SetNumKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int numKeys);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Quaternion& keydata);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::AddKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ int time, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Quaternion& keydata, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Quaternion& inTan, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Quaternion& outTan);
  int InterpolateVolatile(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class NTempest::C4Quaternion&, class NTempest::C4Quaternion*);
  int InterpolateRetained(struct InterpInfo&, struct CBaseStatus&, struct CKeyTrackStatus*, class NTempest::C4Quaternion&, class NTempest::C4Quaternion*);
  unsigned int Bytes();
  enum KEYTYPE GetTrackType();
  struct CLinearKeyFrame<NTempest::C4QuaternionCompressed>* CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::GetLinearKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>* CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::GetSplineKey(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int index);
  struct CLinearKeyFrame<NTempest::C4QuaternionCompressed>* ToLinearKey(struct CKeyFrame*);
  struct CLinearKeyFrame<NTempest::C4QuaternionCompressed>* ToLinearKey(struct CKeyFrame*);
  struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>* ToSplineKey(struct CKeyFrame*);
  struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>* ToSplineKey(struct CKeyFrame*);
  int CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::InterpolateVolatileFewKeys(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C4Quaternion* transform);
  int InterpolateRetainedFewKeys(struct CKeyTrackStatus&, class NTempest::C4Quaternion*);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::Interpolate(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CKeyTrackStatus& keyStat, /*<regrel ebp+0xc>*/ /*|0x4|*/ unsigned int seqTime, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::C4Quaternion* transform);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::InterpolateHermite(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Quaternion* transform);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::InterpolateBezier(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>& __formal, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CSplineKeyFrame<NTempest::C4QuaternionCompressed>& __formal, /*<regrel ebp+0x10>*/ /*|0x4|*/ float __formal, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Quaternion* __formal);
  void CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>::InterpolateLinear(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct CLinearKeyFrame<NTempest::C4QuaternionCompressed>& currkey, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct CLinearKeyFrame<NTempest::C4QuaternionCompressed>& nextkey, /*<regrel ebp+0x10>*/ /*|0x4|*/ float ratio, /*<regrel ebp+0x14>*/ /*|0x4|*/ class NTempest::C4Quaternion* transform);
  class CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>& operator=(class CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>&);
  void ~CKeyFrameTrack<NTempest::C4QuaternionCompressed,NTempest::C4Quaternion>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x1c>


}

{ // TInstanceId - 1

class TInstanceId<EvtContext> : class TSLinkedNode<EvtContext>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long m_id;

  // base classes -----------------------------------
  // baseclass class TSLinkedNode<EvtContext>
  // <base data offset+0x4>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceId<EvtContext>(class TInstanceId<EvtContext>&);
  void TInstanceId<EvtContext>();
  void SetId(unsigned long);
  unsigned long Id();
  class TInstanceId<EvtContext>& operator=(class TInstanceId<EvtContext>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TInstanceId<EvtContext>::~TInstanceId<EvtContext>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x10>

}

{ // TInstanceIdTable - 1

class TInstanceIdTable<EvtContext,8> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x18|*/ class SCritSect m_idCritsect;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned long m_id;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_idWrapped;
  /*<thisrel this+0x20>*/ /*|0x60|*/ class CSRWLock m_idLock[8];
  /*<thisrel this+0x80>*/ /*|0x60|*/ class TSList<EvtContext,TSGetLink<EvtContext> > m_idList[8];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------
  static int __fastcall Slots();

  // non-virtual functions --------------------------
  void TInstanceIdTable<EvtContext,8>(class TInstanceIdTable<EvtContext,8>&);
  void TInstanceIdTable<EvtContext,8>();
  unsigned long Link(struct EvtContext*);
  void Unlink(struct EvtContext*);
  struct EvtContext* Lock(unsigned long, int, struct INSTANCELOCK__*&, char*, unsigned long);
  void Unlock(struct INSTANCELOCK__*, char*, unsigned long);
  class TInstanceIdTable<EvtContext,8>& operator=(class TInstanceIdTable<EvtContext,8>&);
  void ~TInstanceIdTable<EvtContext,8>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0xe0>

class TInstanceIdTable<EvtContext,8>::Iterator {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class TInstanceIdTable<EvtContext,8>& m_table;
  /*<thisrel this+0x4>*/ /*|0x4|*/ int m_slot;
  /*<thisrel this+0x8>*/ /*|0x4|*/ struct EvtContext* m_next;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void Iterator(class TInstanceIdTable<EvtContext,8>&);
  void Iterator(class TInstanceIdTable<EvtContext,8>::Iterator&);
  class TInstanceIdTable<EvtContext,8>::Iterator& operator=(class TInstanceIdTable<EvtContext,8>::Iterator&);
  void SetSlot(int, int);
  struct EvtContext* Next(int);
  void SlotBegin(int);
  void SlotEnd(int);
  struct EvtContext* SlotNext();

  // virtual functions ------------------------------
};
// <size 0xc>


}

{ // TSingletonInstanceId - 1

class TSingletonInstanceId<EvtContext,8> : class TInstanceId<EvtContext>  {

  // static data ------------------------------------
  static /*<rva 0xcbaca0>*/ /*|0xe0|*/ class TInstanceIdTable<EvtContext,8> s_idTable;

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class TInstanceId<EvtContext>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------
  static class TInstanceIdTable<EvtContext,8>& __fastcall GetTable();

  // non-virtual functions --------------------------
  void TSingletonInstanceId<EvtContext,8>(class TSingletonInstanceId<EvtContext,8>&);
  void TSingletonInstanceId<EvtContext,8>();
  class TSingletonInstanceId<EvtContext,8>& operator=(class TSingletonInstanceId<EvtContext,8>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void ~TSingletonInstanceId<EvtContext,8>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x10>


}

{ // TManaged - 6

class TManaged<NTempest::CImVector> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0x4|*/ class NTempest::CImVector m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<NTempest::CImVector>(class TManaged<NTempest::CImVector>&);
  void TManaged<NTempest::CImVector>(class NTempest::CImVector&);
  void TManaged<NTempest::CImVector>();
  class TManaged<NTempest::CImVector>& operator+=(class NTempest::CImVector&);
  class TManaged<NTempest::CImVector>& operator-=(class NTempest::CImVector&);
  class TManaged<NTempest::CImVector>& operator*=(class NTempest::CImVector&);
  class TManaged<NTempest::CImVector>& operator/=(class NTempest::CImVector&);
  class NTempest::CImVector& Get();
  void Set(class NTempest::CImVector&);
  class TManaged<NTempest::CImVector>& operator=(class TManaged<NTempest::CImVector>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void Set_(class NTempest::CImVector&);
  virtual /*<vtableoff 0x0>*/ void Update(float);
  virtual /*<vtableoff 0x0>*/ void UpdateR(float);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<NTempest::CImVector>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x20>

class TManaged<C3Color> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class C3Color m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<C3Color>(class TManaged<C3Color>&);
  void TManaged<C3Color>(class C3Color&);
  void TManaged<C3Color>();
  class TManaged<C3Color>& operator+=(class C3Color&);
  class TManaged<C3Color>& operator-=(class C3Color&);
  class TManaged<C3Color>& operator*=(class C3Color&);
  class TManaged<C3Color>& operator/=(class C3Color&);
  class C3Color& Get();
  void Set(class C3Color&);
  class TManaged<C3Color>& operator=(class TManaged<C3Color>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void Set_(class C3Color&);
  virtual /*<vtableoff 0x0>*/ void Update(float);
  virtual /*<vtableoff 0x0>*/ void UpdateR(float);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<C3Color>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x28>

class TManaged<NTempest::C3Vector> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0xc|*/ class NTempest::C3Vector m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<NTempest::C3Vector>(class TManaged<NTempest::C3Vector>&);
  void TManaged<NTempest::C3Vector>::TManaged<NTempest::C3Vector>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& t);
  void TManaged<NTempest::C3Vector>();
  class TManaged<NTempest::C3Vector>& operator+=(class NTempest::C3Vector&);
  class TManaged<NTempest::C3Vector>& operator-=(class NTempest::C3Vector&);
  class TManaged<NTempest::C3Vector>& operator*=(class NTempest::C3Vector&);
  class TManaged<NTempest::C3Vector>& operator/=(class NTempest::C3Vector&);
  class NTempest::C3Vector& Get();
  void Set(class NTempest::C3Vector&);
  class TManaged<NTempest::C3Vector>& operator=(class TManaged<NTempest::C3Vector>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void TManaged<NTempest::C3Vector>::Set_(/*<regrel ebp+0x8>*/ /*|0x4|*/ class NTempest::C3Vector& val);
  virtual /*<vtableoff 0x0>*/ void TManaged<NTempest::C3Vector>::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void TManaged<NTempest::C3Vector>::UpdateR(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<NTempest::C3Vector>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x28>

class TManaged<NTempest::C33Matrix> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0x24|*/ class NTempest::C33Matrix m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<NTempest::C33Matrix>(class TManaged<NTempest::C33Matrix>&);
  void TManaged<NTempest::C33Matrix>(class NTempest::C33Matrix&);
  void TManaged<NTempest::C33Matrix>();
  class TManaged<NTempest::C33Matrix>& operator+=(class NTempest::C33Matrix&);
  class TManaged<NTempest::C33Matrix>& operator-=(class NTempest::C33Matrix&);
  class TManaged<NTempest::C33Matrix>& operator*=(class NTempest::C33Matrix&);
  class TManaged<NTempest::C33Matrix>& operator/=(class NTempest::C33Matrix&);
  class NTempest::C33Matrix& Get();
  void Set(class NTempest::C33Matrix&);
  class TManaged<NTempest::C33Matrix>& operator=(class TManaged<NTempest::C33Matrix>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void Set_(class NTempest::C33Matrix&);
  virtual /*<vtableoff 0x0>*/ void Update(float);
  virtual /*<vtableoff 0x0>*/ void UpdateR(float);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<NTempest::C33Matrix>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x40>

class TManaged<int> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0x4|*/ int m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<int>(class TManaged<int>&);
  void TManaged<int>(int&);
  void TManaged<int>();
  class TManaged<int>& operator+=(int&);
  class TManaged<int>& operator-=(int&);
  class TManaged<int>& operator*=(int&);
  class TManaged<int>& operator/=(int&);
  int& Get();
  void Set(int&);
  class TManaged<int>& operator=(class TManaged<int>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void Set_(int&);
  virtual /*<vtableoff 0x0>*/ void Update(float);
  virtual /*<vtableoff 0x0>*/ void UpdateR(float);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<int>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x20>

class TManaged<float> : class CBaseManaged  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x1c>*/ /*|0x4|*/ float m_data;

  // base classes -----------------------------------
  // baseclass class CBaseManaged
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TManaged<float>(class TManaged<float>&);
  void TManaged<float>::TManaged<float>(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& t);
  void TManaged<float>();
  class TManaged<float>& operator+=(float&);
  class TManaged<float>& operator-=(float&);
  class TManaged<float>& operator*=(float&);
  class TManaged<float>& operator/=(float&);
  float& Get();
  void Set(float&);
  class TManaged<float>& operator=(class TManaged<float>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0xc>*/ void TManaged<float>::Set_(/*<regrel ebp+0x8>*/ /*|0x4|*/ float& val);
  virtual /*<vtableoff 0x0>*/ void TManaged<float>::Update(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void TManaged<float>::UpdateR(/*<regrel ebp+0x8>*/ /*|0x4|*/ float elapsedSec);
  virtual /*<vtableoff 0x0>*/ void ~TManaged<float>();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x20>


}

{ // TRefCntPtr - 4

class TRefCntPtr<RCString> {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------

  // virtual functions ------------------------------
};
// <size 0x0>

class TRefCntPtr<CInputObserver> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CInputObserver* m_ptr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TRefCntPtr<CInputObserver>(class TRefCntPtr<CInputObserver>&);
  void TRefCntPtr<CInputObserver>(class CInputObserver*);
  void ~TRefCntPtr<CInputObserver>();
  class TRefCntPtr<CInputObserver>& operator=(class CInputObserver*);
  class TRefCntPtr<CInputObserver>& operator=(class TRefCntPtr<CInputObserver>&);
  class CInputObserver& operator*();
  class CInputObserver& operator*();
  class CInputObserver* operator->();
  class CInputObserver* operator->();
  unsigned char operator==(class CInputObserver*);
  unsigned char operator==(class TRefCntPtr<CInputObserver>&);
  unsigned char operator!=(class CInputObserver*);
  unsigned char operator!=(class TRefCntPtr<CInputObserver>&);
  unsigned char operator!();
  class CInputObserver* operator class CInputObserver *();
  class CInputObserver* operator const class CInputObserver *();
  void __dflt_ctor_closure();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class TRefCntPtr<CObserver> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CObserver* m_ptr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TRefCntPtr<CObserver>(class TRefCntPtr<CObserver>&);
  void TRefCntPtr<CObserver>::TRefCntPtr<CObserver>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CObserver* ptr);
  void TRefCntPtr<CObserver>::~TRefCntPtr<CObserver>();
  class TRefCntPtr<CObserver>& TRefCntPtr<CObserver>::operator=(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CObserver* rhs);
  class TRefCntPtr<CObserver>& operator=(class TRefCntPtr<CObserver>&);
  class CObserver& operator*();
  class CObserver& operator*();
  class CObserver* operator->();
  class CObserver* operator->();
  unsigned char operator==(class CObserver*);
  unsigned char operator==(class TRefCntPtr<CObserver>&);
  unsigned char operator!=(class CObserver*);
  unsigned char operator!=(class TRefCntPtr<CObserver>&);
  unsigned char operator!();
  class CObserver* operator class CObserver *();
  class CObserver* operator const class CObserver *();
  void __dflt_ctor_closure();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>

class TRefCntPtr<CStringRep> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CStringRep* m_ptr;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TRefCntPtr<CStringRep>(class TRefCntPtr<CStringRep>&);
  void TRefCntPtr<CStringRep>::TRefCntPtr<CStringRep>(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CStringRep* ptr);
  void ~TRefCntPtr<CStringRep>();
  class TRefCntPtr<CStringRep>& operator=(class CStringRep*);
  class TRefCntPtr<CStringRep>& operator=(class TRefCntPtr<CStringRep>&);
  class CStringRep& operator*();
  class CStringRep& operator*();
  class CStringRep* operator->();
  class CStringRep* operator->();
  unsigned char operator==(class CStringRep*);
  unsigned char operator==(class TRefCntPtr<CStringRep>&);
  unsigned char operator!=(class CStringRep*);
  unsigned char operator!=(class TRefCntPtr<CStringRep>&);
  unsigned char operator!();
  class CStringRep* operator class CStringRep *();
  class CStringRep* operator const class CStringRep *();
  void __dflt_ctor_closure();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x4>


}

{ // TSExportTableSimple - 1

class TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1> : class TSExportTableSimple<RGN,HSRGN__ *,1>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x54>*/ /*|0x18|*/ class CCritSect m_sync;

  // base classes -----------------------------------
  // baseclass class TSExportTableSimple<RGN,HSRGN__ *,1>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::IsForWriting(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HLOCKEDRGN__* lockedhandle);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::SyncEnterLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HLOCKEDRGN__** lockedhandle, /*<regrel ebp+0xc>*/ /*|0x4|*/ int forwriting);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::SyncLeaveLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HLOCKEDRGN__* lockedhandle);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>(class TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>&);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>();
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::Delete(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSRGN__* handle);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::DeleteUnlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct RGN* ptr, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HLOCKEDRGN__* lockedhandle);
  struct RGN* TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::Lock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSRGN__* handle, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HLOCKEDRGN__** lockedhandle, /*<regrel ebp+0x10>*/ /*|0x4|*/ int forwriting);
  void New(struct HSRGN__**);
  struct RGN* TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::NewLock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HSRGN__** handle, /*<regrel ebp+0xc>*/ /*|0x4|*/ struct HLOCKEDRGN__** lockedhandle);
  void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::Unlock(/*<regrel ebp+0x8>*/ /*|0x4|*/ struct HLOCKEDRGN__* lockedhandle);
  class TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>& operator=(class TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>&);
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>::~TSExportTableSync<RGN,HSRGN__ *,HLOCKEDRGN__ *,CCritSect,1>();
  virtual /*<vtableoff 0x8>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x6c>


}

{ // TSPriorityQueue - 2

class TSPriorityQueue<EvtContext> : class CSBasePriorityQueue  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CSBasePriorityQueue
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct EvtContext* operator[](unsigned int);
  struct EvtContext* operator[](unsigned int);
  void TSPriorityQueue<EvtContext>(class TSPriorityQueue<EvtContext>&);
  void TSPriorityQueue<EvtContext>(int);
  struct EvtContext* Root();
  struct EvtContext* Dequeue();
  void Enqueue(struct EvtContext*);
  void Remove(unsigned int);
  class TSPriorityQueue<EvtContext>& operator=(class TSPriorityQueue<EvtContext>&);
  void ~TSPriorityQueue<EvtContext>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>

class TSPriorityQueue<EvtTimer> : class CSBasePriorityQueue  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CSBasePriorityQueue
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct EvtTimer* operator[](unsigned int);
  struct EvtTimer* operator[](unsigned int);
  void TSPriorityQueue<EvtTimer>(class TSPriorityQueue<EvtTimer>&);
  void TSPriorityQueue<EvtTimer>::TSPriorityQueue<EvtTimer>(/*<regrel ebp+0x8>*/ /*|0x4|*/ int linkOffset);
  struct EvtTimer* Root();
  struct EvtTimer* Dequeue();
  void Enqueue(struct EvtTimer*);
  void Remove(unsigned int);
  class TSPriorityQueue<EvtTimer>& operator=(class TSPriorityQueue<EvtTimer>&);
  void ~TSPriorityQueue<EvtTimer>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x18>


}

{ // TSTimerPriority - 1

class TSTimerPriority<unsigned long> : class CSBasePriority  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0xc>*/ /*|0x4|*/ unsigned long m_val;

  // base classes -----------------------------------
  // baseclass class CSBasePriority
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSTimerPriority<unsigned long>(class TSTimerPriority<unsigned long>&);
  void TSTimerPriority<unsigned long>();
  unsigned long Get();
  void Set(unsigned long);
  class TSTimerPriority<unsigned long>& operator=(class TSTimerPriority<unsigned long>&);
  void ~TSTimerPriority<unsigned long>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ int TSTimerPriority<unsigned long>::Compare(/*<regrel ebp+0x8>*/ /*|0x4|*/ class CSBasePriority* a);
};
// <size 0x10>


}

{ // TInstanceAllocator - 20

class TInstanceAllocator<FishingLineObject> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<FishingLineObject>(class TInstanceAllocator<FishingLineObject>&);
  void TInstanceAllocator<FishingLineObject>(unsigned long);
  void Clear();
  struct FishingLineObject* Get(int);
  void Put(struct FishingLineObject*);
  unsigned long Used();
  class TInstanceAllocator<FishingLineObject>& operator=(class TInstanceAllocator<FishingLineObject>&);
  void ~TInstanceAllocator<FishingLineObject>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<SWING> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<SWING>(class TInstanceAllocator<SWING>&);
  void TInstanceAllocator<SWING>(unsigned long);
  void Clear();
  struct SWING* Get(int);
  void Put(struct SWING*);
  unsigned long Used();
  class TInstanceAllocator<SWING>& operator=(class TInstanceAllocator<SWING>&);
  void ~TInstanceAllocator<SWING>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<WTOBJECT> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<WTOBJECT>(class TInstanceAllocator<WTOBJECT>&);
  void TInstanceAllocator<WTOBJECT>(unsigned long);
  void Clear();
  class WTOBJECT* Get(int);
  void Put(class WTOBJECT*);
  unsigned long Used();
  class TInstanceAllocator<WTOBJECT>& operator=(class TInstanceAllocator<WTOBJECT>&);
  void ~TInstanceAllocator<WTOBJECT>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<DEFERREDDAMAGE> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<DEFERREDDAMAGE>(class TInstanceAllocator<DEFERREDDAMAGE>&);
  void TInstanceAllocator<DEFERREDDAMAGE>(unsigned long);
  void Clear();
  struct DEFERREDDAMAGE* Get(int);
  void Put(struct DEFERREDDAMAGE*);
  unsigned long Used();
  class TInstanceAllocator<DEFERREDDAMAGE>& operator=(class TInstanceAllocator<DEFERREDDAMAGE>&);
  void ~TInstanceAllocator<DEFERREDDAMAGE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<DEFERREDSPELLMISS> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<DEFERREDSPELLMISS>(class TInstanceAllocator<DEFERREDSPELLMISS>&);
  void TInstanceAllocator<DEFERREDSPELLMISS>(unsigned long);
  void Clear();
  struct DEFERREDSPELLMISS* Get(int);
  void Put(struct DEFERREDSPELLMISS*);
  unsigned long Used();
  class TInstanceAllocator<DEFERREDSPELLMISS>& operator=(class TInstanceAllocator<DEFERREDSPELLMISS>&);
  void ~TInstanceAllocator<DEFERREDSPELLMISS>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<ACTIVEATTACHMENTINFO> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<ACTIVEATTACHMENTINFO>(class TInstanceAllocator<ACTIVEATTACHMENTINFO>&);
  void TInstanceAllocator<ACTIVEATTACHMENTINFO>(unsigned long);
  void Clear();
  struct ACTIVEATTACHMENTINFO* Get(int);
  void Put(struct ACTIVEATTACHMENTINFO*);
  unsigned long Used();
  class TInstanceAllocator<ACTIVEATTACHMENTINFO>& operator=(class TInstanceAllocator<ACTIVEATTACHMENTINFO>&);
  void ~TInstanceAllocator<ACTIVEATTACHMENTINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<AuraDecayNode> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<AuraDecayNode>(class TInstanceAllocator<AuraDecayNode>&);
  void TInstanceAllocator<AuraDecayNode>(unsigned long);
  void Clear();
  struct AuraDecayNode* Get(int);
  void Put(struct AuraDecayNode*);
  unsigned long Used();
  class TInstanceAllocator<AuraDecayNode>& operator=(class TInstanceAllocator<AuraDecayNode>&);
  void ~TInstanceAllocator<AuraDecayNode>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<IMPACTEFFECTDESC> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<IMPACTEFFECTDESC>(class TInstanceAllocator<IMPACTEFFECTDESC>&);
  void TInstanceAllocator<IMPACTEFFECTDESC>(unsigned long);
  void Clear();
  struct IMPACTEFFECTDESC* Get(int);
  void Put(struct IMPACTEFFECTDESC*);
  unsigned long Used();
  class TInstanceAllocator<IMPACTEFFECTDESC>& operator=(class TInstanceAllocator<IMPACTEFFECTDESC>&);
  void ~TInstanceAllocator<IMPACTEFFECTDESC>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<CORPSEANIMDATA> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<CORPSEANIMDATA>(class TInstanceAllocator<CORPSEANIMDATA>&);
  void TInstanceAllocator<CORPSEANIMDATA>(unsigned long);
  void Clear();
  struct CORPSEANIMDATA* Get(int);
  void Put(struct CORPSEANIMDATA*);
  unsigned long Used();
  class TInstanceAllocator<CORPSEANIMDATA>& operator=(class TInstanceAllocator<CORPSEANIMDATA>&);
  void ~TInstanceAllocator<CORPSEANIMDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<SPELLEFFECTDESC> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<SPELLEFFECTDESC>(class TInstanceAllocator<SPELLEFFECTDESC>&);
  void TInstanceAllocator<SPELLEFFECTDESC>(unsigned long);
  void Clear();
  struct SPELLEFFECTDESC* Get(int);
  void Put(struct SPELLEFFECTDESC*);
  unsigned long Used();
  class TInstanceAllocator<SPELLEFFECTDESC>& operator=(class TInstanceAllocator<SPELLEFFECTDESC>&);
  void ~TInstanceAllocator<SPELLEFFECTDESC>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<ANIMENDDATA> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<ANIMENDDATA>(class TInstanceAllocator<ANIMENDDATA>&);
  void TInstanceAllocator<ANIMENDDATA>(unsigned long);
  void Clear();
  struct ANIMENDDATA* Get(int);
  void Put(struct ANIMENDDATA*);
  unsigned long Used();
  class TInstanceAllocator<ANIMENDDATA>& operator=(class TInstanceAllocator<ANIMENDDATA>&);
  void ~TInstanceAllocator<ANIMENDDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<ANIMQUEUENODE> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<ANIMQUEUENODE>(class TInstanceAllocator<ANIMQUEUENODE>&);
  void TInstanceAllocator<ANIMQUEUENODE>(unsigned long);
  void Clear();
  struct ANIMQUEUENODE* Get(int);
  void Put(struct ANIMQUEUENODE*);
  unsigned long Used();
  class TInstanceAllocator<ANIMQUEUENODE>& operator=(class TInstanceAllocator<ANIMQUEUENODE>&);
  void ~TInstanceAllocator<ANIMQUEUENODE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<ACTIVEAURAINFO> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<ACTIVEAURAINFO>(class TInstanceAllocator<ACTIVEAURAINFO>&);
  void TInstanceAllocator<ACTIVEAURAINFO>(unsigned long);
  void Clear();
  struct ACTIVEAURAINFO* Get(int);
  void Put(struct ACTIVEAURAINFO*);
  unsigned long Used();
  class TInstanceAllocator<ACTIVEAURAINFO>& operator=(class TInstanceAllocator<ACTIVEAURAINFO>&);
  void ~TInstanceAllocator<ACTIVEAURAINFO>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<MISSILENODE> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<MISSILENODE>(class TInstanceAllocator<MISSILENODE>&);
  void TInstanceAllocator<MISSILENODE>(unsigned long);
  void Clear();
  struct MISSILENODE* Get(int);
  void Put(struct MISSILENODE*);
  unsigned long Used();
  class TInstanceAllocator<MISSILENODE>& operator=(class TInstanceAllocator<MISSILENODE>&);
  void ~TInstanceAllocator<MISSILENODE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>(class TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>&);
  void TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>(unsigned long);
  void Clear();
  class ONESHOTSTANDALONEEFFECTNODE* Get(int);
  void Put(class ONESHOTSTANDALONEEFFECTNODE*);
  unsigned long Used();
  class TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>& operator=(class TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>&);
  void ~TInstanceAllocator<ONESHOTSTANDALONEEFFECTNODE>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<CHUNKDATA> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<CHUNKDATA>(class TInstanceAllocator<CHUNKDATA>&);
  void TInstanceAllocator<CHUNKDATA>(unsigned long);
  void Clear();
  struct CHUNKDATA* Get(int);
  void Put(struct CHUNKDATA*);
  unsigned long Used();
  class TInstanceAllocator<CHUNKDATA>& operator=(class TInstanceAllocator<CHUNKDATA>&);
  void ~TInstanceAllocator<CHUNKDATA>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<Sound> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<Sound>(class TInstanceAllocator<Sound>&);
  void TInstanceAllocator<Sound>(unsigned long);
  void Clear();
  struct Sound* Get(int);
  void Put(struct Sound*);
  unsigned long Used();
  class TInstanceAllocator<Sound>& operator=(class TInstanceAllocator<Sound>&);
  void ~TInstanceAllocator<Sound>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<EventReg::EVENTDISPATCHREG> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<EventReg::EVENTDISPATCHREG>(class TInstanceAllocator<EventReg::EVENTDISPATCHREG>&);
  void TInstanceAllocator<EventReg::EVENTDISPATCHREG>(unsigned long);
  void Clear();
  struct EventReg::EVENTDISPATCHREG* Get(int);
  void Put(struct EventReg::EVENTDISPATCHREG*);
  unsigned long Used();
  class TInstanceAllocator<EventReg::EVENTDISPATCHREG>& operator=(class TInstanceAllocator<EventReg::EVENTDISPATCHREG>&);
  void ~TInstanceAllocator<EventReg::EVENTDISPATCHREG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<EventReg::EVENTCALLBACKREG> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<EventReg::EVENTCALLBACKREG>(class TInstanceAllocator<EventReg::EVENTCALLBACKREG>&);
  void TInstanceAllocator<EventReg::EVENTCALLBACKREG>(unsigned long);
  void Clear();
  struct EventReg::EVENTCALLBACKREG* Get(int);
  void Put(struct EventReg::EVENTCALLBACKREG*);
  unsigned long Used();
  class TInstanceAllocator<EventReg::EVENTCALLBACKREG>& operator=(class TInstanceAllocator<EventReg::EVENTCALLBACKREG>&);
  void ~TInstanceAllocator<EventReg::EVENTCALLBACKREG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>

class TInstanceAllocator<EventReg> : class CDataAllocator  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CDataAllocator
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TInstanceAllocator<EventReg>(class TInstanceAllocator<EventReg>&);
  void TInstanceAllocator<EventReg>(unsigned long);
  void Clear();
  struct EventReg* Get(int);
  void Put(struct EventReg*);
  unsigned long Used();
  class TInstanceAllocator<EventReg>& operator=(class TInstanceAllocator<EventReg>&);
  void ~TInstanceAllocator<EventReg>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>


}

{ // TLockedInstanceAllocator - 3

class TLockedInstanceAllocator<EventReg> : class TInstanceAllocator<EventReg>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x14>*/ /*|0x18|*/ class SCritSect m_critsect;

  // base classes -----------------------------------
  // baseclass class TInstanceAllocator<EventReg>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TLockedInstanceAllocator<EventReg>(class TLockedInstanceAllocator<EventReg>&);
  void TLockedInstanceAllocator<EventReg>(unsigned long);
  void Clear();
  struct EventReg* Get(int);
  void Put(struct EventReg*);
  unsigned long Used();
  class TLockedInstanceAllocator<EventReg>& operator=(class TLockedInstanceAllocator<EventReg>&);
  void ~TLockedInstanceAllocator<EventReg>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x2c>

class TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG> : class TInstanceAllocator<EventReg::EVENTCALLBACKREG>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x14>*/ /*|0x18|*/ class SCritSect m_critsect;

  // base classes -----------------------------------
  // baseclass class TInstanceAllocator<EventReg::EVENTCALLBACKREG>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>(class TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>&);
  void TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>(unsigned long);
  void Clear();
  struct EventReg::EVENTCALLBACKREG* Get(int);
  void Put(struct EventReg::EVENTCALLBACKREG*);
  unsigned long Used();
  class TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>& operator=(class TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>&);
  void ~TLockedInstanceAllocator<EventReg::EVENTCALLBACKREG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x2c>

class TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG> : class TInstanceAllocator<EventReg::EVENTDISPATCHREG>  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x14>*/ /*|0x18|*/ class SCritSect m_critsect;

  // base classes -----------------------------------
  // baseclass class TInstanceAllocator<EventReg::EVENTDISPATCHREG>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>(class TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>&);
  void TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>(unsigned long);
  void Clear();
  struct EventReg::EVENTDISPATCHREG* Get(int);
  void Put(struct EventReg::EVENTDISPATCHREG*);
  unsigned long Used();
  class TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>& operator=(class TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>&);
  void ~TLockedInstanceAllocator<EventReg::EVENTDISPATCHREG>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x2c>


}

{ // TExtraInstanceRecycler - 1

class TExtraInstanceRecycler<EvtMessage> : class CDataRecycler  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned long m_maxBytesPerInstance;

  // base classes -----------------------------------
  // baseclass class CDataRecycler
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TExtraInstanceRecycler<EvtMessage>(class TExtraInstanceRecycler<EvtMessage>&);
  void TExtraInstanceRecycler<EvtMessage>(unsigned int, long, unsigned long);
  struct EvtMessage* Get(unsigned long);
  void Put(struct EvtMessage*);
  class TExtraInstanceRecycler<EvtMessage>& operator=(class TExtraInstanceRecycler<EvtMessage>&);
  void __dflt_ctor_closure();
  void __local_vftable_ctor_closure();

  // virtual functions ------------------------------
  virtual /*<vtableoff 0x0>*/ void ~TExtraInstanceRecycler<EvtMessage>();
  virtual /*<vtableoff 0x0>*/ void TExtraInstanceRecycler<EvtMessage>::Clear();
  virtual /*<vtableoff 0x0>*/ void* __vecDelDtor(unsigned int);
};
// <size 0x1c>


}

{ // TExtraInstanceRecyclable - 1

class TExtraInstanceRecyclable<EvtMessage> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned long m_recycleBytes;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void SetRecycleBytes(unsigned long);
  unsigned long GetRecycleBytes();

  // virtual functions ------------------------------
};
// <size 0x4>


}

{ // EvtIdTable - 1

class EvtIdTable<EvtTimer *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<EvtTimer *> m_allocArray;
  /*<thisrel this+0x14>*/ /*|0x14|*/ class TSGrowableArray<unsigned int> m_freeArray;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  struct EvtTimer*& operator[](unsigned int);
  struct EvtTimer*& operator[](unsigned int);
  unsigned int Alloc();
  void Free(unsigned int);
  unsigned int NumAllocated();
  void EvtIdTable<EvtTimer *>(class EvtIdTable<EvtTimer *>&);
  void EvtIdTable<EvtTimer *>();
  class EvtIdTable<EvtTimer *>& operator=(class EvtIdTable<EvtTimer *>&);
  void ~EvtIdTable<EvtTimer *>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x28>


}

{ // WDataStoreBuffer - 

class WDataStoreBuffer<768> : class TObjectAllocMemHandle  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x300|*/ unsigned char buf[768];

  // base classes -----------------------------------
  // baseclass class TObjectAllocMemHandle
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int GetSize();

  // virtual functions ------------------------------
};
// <size 0x304>

class WDataStoreBuffer<16384> : class TObjectAllocMemHandle  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x4>*/ /*|0x4000|*/ unsigned char buf[16384];

  // base classes -----------------------------------
  // baseclass class TObjectAllocMemHandle
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  int GetSize();

  // virtual functions ------------------------------
};
// <size 0x4004>


}

{ // CAaBsp_Query - 3

class CAaBsp_Query<BspQuery_Volume<NTempest::CAaBox> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CAaBsp& aaBsp;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class BspQuery_Volume<NTempest::CAaBox>& f;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query<BspQuery_Volume<NTempest::CAaBox> >&);
  void GetFaceIndices(class CAaBspNode*);
  void CAaBsp_Query<BspQuery_Volume<NTempest::CAaBox> >(class CAaBsp&, class BspQuery_Volume<NTempest::CAaBox>&);

  // virtual functions ------------------------------
};
// <size 0x8>

class CAaBsp_Query<BspQuery_Segment> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CAaBsp& aaBsp;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class BspQuery_Segment& f;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query<BspQuery_Segment>&);
  void GetFaceIndices(class CAaBspNode*);
  void CAaBsp_Query<BspQuery_Segment>(class CAaBsp&, class BspQuery_Segment&);

  // virtual functions ------------------------------
};
// <size 0x8>

class CAaBsp_Query<BspQuery_Volume<CWFrustum> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ class CAaBsp& aaBsp;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class BspQuery_Volume<CWFrustum>& f;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query<BspQuery_Volume<CWFrustum> >&);
  void GetFaceIndices(class CAaBspNode*);
  void CAaBsp_Query<BspQuery_Volume<CWFrustum> >(class CAaBsp&, class BspQuery_Volume<CWFrustum>&);

  // virtual functions ------------------------------
};
// <size 0x8>


}

{ // CMdlString - 3

class CMdlString<80> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x50|*/ char m_string[80];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CMdlString<80>(class CMdlString<80>&);
  void CMdlString<80>();
  class CMdlString<80>& operator=(class CMdlString<80>&);
  char* operator char *();
  char* operator const char *();
  char& operator[](unsigned int);
  char operator[](unsigned int);
  char& operator[](int);
  char operator[](int);

  // virtual functions ------------------------------
};
// <size 0x50>

class CMdlString<257> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x101|*/ char m_string[257];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CMdlString<257>(class CMdlString<257>&);
  void CMdlString<257>();
  class CMdlString<257>& operator=(class CMdlString<257>&);
  char* operator char *();
  char* operator const char *();
  char& operator[](unsigned int);
  char operator[](unsigned int);
  char& operator[](int);
  char operator[](int);

  // virtual functions ------------------------------
};
// <size 0x101>

class CMdlString<260> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x104|*/ char m_string[260];

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CMdlString<260>(class CMdlString<260>&);
  void CMdlString<260>();
  class CMdlString<260>& operator=(class CMdlString<260>&);
  char* operator char *();
  char* operator const char *();
  char& operator[](unsigned int);
  char operator[](unsigned int);
  char& operator[](int);
  char operator[](int);

  // virtual functions ------------------------------
};
// <size 0x104>


}

{ // CSimpleSortedArray - 1

class CSimpleSortedArray<FRAMEPRIORITY *> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<FRAMEPRIORITY *> m_array;
  /*<thisrel this+0x14>*/ /*|0x4|*/ unsigned int m_count;
  /*<thisrel this+0x18>*/ /*|0x4|*/ unsigned int m_maxcount;
  /*<thisrel this+0x1c>*/ /*|0x4|*/ unsigned int m_iterator;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CSimpleSortedArray<FRAMEPRIORITY *>(class CSimpleSortedArray<FRAMEPRIORITY *>&);
  void CSimpleSortedArray<FRAMEPRIORITY *>();
  void ~CSimpleSortedArray<FRAMEPRIORITY *>();
  unsigned int Count();
  void Insert(class FRAMEPRIORITY*);
  void Remove(unsigned int);
  void IterateBegin();
  class FRAMEPRIORITY** IterateNext();
  class FRAMEPRIORITY*& operator[](unsigned int);
  class CSimpleSortedArray<FRAMEPRIORITY *>& operator=(class CSimpleSortedArray<FRAMEPRIORITY *>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x20>


}

{ // CAaBsp_Query_AaBox - 2

class CAaBsp_Query_AaBox<BspQuery_Volume<CWFrustum> > : class CAaBsp_Query<BspQuery_Volume<CWFrustum> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CAaBsp_Query<BspQuery_Volume<CWFrustum> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query_AaBox<BspQuery_Volume<CWFrustum> >&);
  void CAaBsp_Query_AaBox<BspQuery_Volume<CWFrustum> >::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodeIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& nodeBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CAaBox& qbBox);
  void CAaBsp_Query_AaBox<BspQuery_Volume<CWFrustum> >(class CAaBsp&, class BspQuery_Volume<CWFrustum>&, class NTempest::CAaBox&);

  // virtual functions ------------------------------
};
// <size 0x8>

class CAaBsp_Query_AaBox<BspQuery_Volume<NTempest::CAaBox> > : class CAaBsp_Query<BspQuery_Volume<NTempest::CAaBox> >  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CAaBsp_Query<BspQuery_Volume<NTempest::CAaBox> >
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query_AaBox<BspQuery_Volume<NTempest::CAaBox> >&);
  void CAaBsp_Query_AaBox<BspQuery_Volume<NTempest::CAaBox> >::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodeIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::CAaBox& nodeBox, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CAaBox& qbBox);
  void CAaBsp_Query_AaBox<BspQuery_Volume<NTempest::CAaBox> >(class CAaBsp&, class BspQuery_Volume<NTempest::CAaBox>&, class NTempest::CAaBox&);

  // virtual functions ------------------------------
};
// <size 0x8>


}

{ // CAaBsp_Query_Segment - 1

class CAaBsp_Query_Segment<BspQuery_Segment> : class CAaBsp_Query<BspQuery_Segment>  {

  // static data ------------------------------------

  // non-static data --------------------------------

  // base classes -----------------------------------
  // baseclass class CAaBsp_Query<BspQuery_Segment>
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class CAaBsp_Query_Segment<BspQuery_Segment>&);
  void CAaBsp_Query_Segment<BspQuery_Segment>::GetFaceIndices(/*<regrel ebp+0x8>*/ /*|0x4|*/ unsigned int nodeIndex, /*<regrel ebp+0xc>*/ /*|0x4|*/ class NTempest::C3Segment& seg, /*<regrel ebp+0x10>*/ /*|0x4|*/ class NTempest::CAaBox& qbBox);
  void CAaBsp_Query_Segment<BspQuery_Segment>(class CAaBsp&, class BspQuery_Segment&, class NTempest::C3Segment&);

  // virtual functions ------------------------------
};
// <size 0x8>


}

{ // BspQuery_Volume - 2

class BspQuery_Volume<CWFrustum> : class BspQuery  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct SMOPoly* faces;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NTempest::C3Vector* vertexList;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class CWFrustum& volume;
  /*<thisrel this+0xc>*/ /*|0x2|*/ unsigned short faceIgnoreFlags;

  // base classes -----------------------------------
  // baseclass class BspQuery
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class BspQuery_Volume<CWFrustum>&);
  void BspQuery_Volume<CWFrustum>::operator()(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short faceIndex);
  void BspQuery_Volume<CWFrustum>(struct SMOPoly*, class NTempest::C3Vector*, class CWFrustum&, unsigned short);
  void ~BspQuery_Volume<CWFrustum>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>

class BspQuery_Volume<NTempest::CAaBox> : class BspQuery  {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ struct SMOPoly* faces;
  /*<thisrel this+0x4>*/ /*|0x4|*/ class NTempest::C3Vector* vertexList;
  /*<thisrel this+0x8>*/ /*|0x4|*/ class NTempest::CAaBox& volume;
  /*<thisrel this+0xc>*/ /*|0x2|*/ unsigned short faceIgnoreFlags;

  // base classes -----------------------------------
  // baseclass class BspQuery
  // <base data offset+0x0>

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void operator=(class BspQuery_Volume<NTempest::CAaBox>&);
  void BspQuery_Volume<NTempest::CAaBox>::operator()(/*<regrel ebp+0x8>*/ /*|0x2|*/ unsigned short faceIndex);
  void BspQuery_Volume<NTempest::CAaBox>(struct SMOPoly*, class NTempest::C3Vector*, class NTempest::CAaBox&, unsigned short);
  void ~BspQuery_Volume<NTempest::CAaBox>();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x10>


}

{ // TObjectAlloc - 2

class TObjectAlloc<WDataStoreBuffer<768> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_ID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TObjectAlloc<WDataStoreBuffer<768> >(char*, unsigned int);
  class WDataStoreBuffer<768>* New();
  void Free(class WDataStoreBuffer<768>*);

  // virtual functions ------------------------------
};
// <size 0x4>

class TObjectAlloc<WDataStoreBuffer<16384> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_ID;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TObjectAlloc<WDataStoreBuffer<16384> >(char*, unsigned int);
  class WDataStoreBuffer<16384>* New();
  void Free(class WDataStoreBuffer<16384>*);

  // virtual functions ------------------------------
};
// <size 0x4>


}

{ // TSBitField - 1

class TSBitField<TSFixedArray<unsigned int> > {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x4|*/ unsigned int m_numBits;
  /*<thisrel this+0x4>*/ /*|0x10|*/ class TSFixedArray<unsigned int> m_array;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void TSBitField<TSFixedArray<unsigned int> >(class TSBitField<TSFixedArray<unsigned int> >&);
  void TSBitField<TSFixedArray<unsigned int> >(unsigned int);
  void SetAll();
  void ClearAll();
  void SetBit(unsigned int);
  void ClearBit(unsigned int);
  unsigned char IsBitSet(unsigned int);
  unsigned char IsBitClear(unsigned int);
  void SetCount(unsigned int);
  void Clear();
  void Load(void*, unsigned int);
  void Save(void*&, unsigned int&);
  void ComputeIndices(unsigned int, unsigned int&, unsigned int&);
  class TSBitField<TSFixedArray<unsigned int> >& operator=(class TSBitField<TSFixedArray<unsigned int> >&);
  void ~TSBitField<TSFixedArray<unsigned int> >();
  void __dflt_ctor_closure();
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>


}

{ // CMatrixStack - 1

class CMatrixStack<NTempest::C34Matrix> {

  // static data ------------------------------------

  // non-static data --------------------------------
  /*<thisrel this+0x0>*/ /*|0x14|*/ class TSGrowableArray<NTempest::C34Matrix> m_stack;

  // base classes -----------------------------------

  // friends ----------------------------------------

  // static functions -------------------------------

  // non-virtual functions --------------------------
  void CMatrixStack<NTempest::C34Matrix>(class CMatrixStack<NTempest::C34Matrix>&);
  void CMatrixStack<NTempest::C34Matrix>();
  void ~CMatrixStack<NTempest::C34Matrix>();
  void Push();
  void Pop();
  void Mult(class NTempest::C34Matrix&);
  void Load(class NTempest::C34Matrix&);
  void Remove(unsigned int);
  void Identity();
  class NTempest::C34Matrix& Get();
  class NTempest::C34Matrix& Get();
  void Get(class NTempest::C34Matrix*);
  class CMatrixStack<NTempest::C34Matrix>& operator=(class CMatrixStack<NTempest::C34Matrix>&);
  void* __vecDelDtor(unsigned int);

  // virtual functions ------------------------------
};
// <size 0x14>


}

